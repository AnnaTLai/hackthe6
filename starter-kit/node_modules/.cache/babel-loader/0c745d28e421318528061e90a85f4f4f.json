{"ast":null,"code":"'use strict';\n/* jshint ignore:start */\n\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n\n/* jshint ignore:end */\n\nvar Q = require('q');\n/* jshint ignore:line */\n\n\nvar _ = require('lodash');\n/* jshint ignore:line */\n\n\nvar util = require('util');\n/* jshint ignore:line */\n\n\nvar Page = require('../../../../../base/Page');\n/* jshint ignore:line */\n\n\nvar deserialize = require('../../../../../base/deserialize');\n/* jshint ignore:line */\n\n\nvar serialize = require('../../../../../base/serialize');\n/* jshint ignore:line */\n\n\nvar values = require('../../../../../base/values');\n/* jshint ignore:line */\n\n\nvar TollFreeList;\nvar TollFreePage;\nvar TollFreeInstance;\n/* jshint ignore:start */\n\n/**\n * Initialize the TollFreeList\n *\n * @constructor Twilio.Api.V2010.AccountContext.IncomingPhoneNumberContext.TollFreeList\n *\n * @param {Twilio.Api.V2010} version - Version of the resource\n * @param {string} accountSid - The SID of the Account that created the resource\n */\n\n/* jshint ignore:end */\n\nTollFreeList = function TollFreeList(version, accountSid) {\n  /* jshint ignore:start */\n\n  /**\n   * @function tollFree\n   * @memberof Twilio.Api.V2010.AccountContext.IncomingPhoneNumberContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Api.V2010.AccountContext.IncomingPhoneNumberContext.TollFreeContext}\n   */\n\n  /* jshint ignore:end */\n  function TollFreeListInstance(sid) {\n    return TollFreeListInstance.get(sid);\n  }\n\n  TollFreeListInstance._version = version; // Path Solution\n\n  TollFreeListInstance._solution = {\n    accountSid: accountSid\n  };\n  TollFreeListInstance._uri = `/Accounts/${accountSid}/IncomingPhoneNumbers/TollFree.json`;\n  /* jshint ignore:start */\n\n  /**\n   * Streams TollFreeInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Api.V2010.AccountContext.IncomingPhoneNumberContext.TollFreeList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {boolean} [opts.beta] - Whether to include new phone numbers\n   * @param {string} [opts.friendlyName] -\n   *          A string that identifies the resources to read\n   * @param {string} [opts.phoneNumber] - The phone numbers of the resources to read\n   * @param {string} [opts.origin] -\n   *          Include phone numbers based on their origin. By default, phone numbers of all origin are included.\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n\n  /* jshint ignore:end */\n\n  TollFreeListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Lists TollFreeInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Api.V2010.AccountContext.IncomingPhoneNumberContext.TollFreeList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {boolean} [opts.beta] - Whether to include new phone numbers\n   * @param {string} [opts.friendlyName] -\n   *          A string that identifies the resources to read\n   * @param {string} [opts.phoneNumber] - The phone numbers of the resources to read\n   * @param {string} [opts.origin] -\n   *          Include phone numbers based on their origin. By default, phone numbers of all origin are included.\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  TollFreeListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single page of TollFreeInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Api.V2010.AccountContext.IncomingPhoneNumberContext.TollFreeList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {boolean} [opts.beta] - Whether to include new phone numbers\n   * @param {string} [opts.friendlyName] -\n   *          A string that identifies the resources to read\n   * @param {string} [opts.phoneNumber] - The phone numbers of the resources to read\n   * @param {string} [opts.origin] -\n   *          Include phone numbers based on their origin. By default, phone numbers of all origin are included.\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  TollFreeListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'Beta': serialize.bool(_.get(opts, 'beta')),\n      'FriendlyName': _.get(opts, 'friendlyName'),\n      'PhoneNumber': _.get(opts, 'phoneNumber'),\n      'Origin': _.get(opts, 'origin'),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new TollFreePage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single target page of TollFreeInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Api.V2010.AccountContext.IncomingPhoneNumberContext.TollFreeList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  TollFreeListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new TollFreePage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * create a TollFreeInstance\n   *\n   * @function create\n   * @memberof Twilio.Api.V2010.AccountContext.IncomingPhoneNumberContext.TollFreeList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.phoneNumber - The phone number to purchase in E.164 format\n   * @param {string} [opts.apiVersion] -\n   *          The API version to use for incoming calls made to the new phone number\n   * @param {string} [opts.friendlyName] - A string to describe the new phone number\n   * @param {string} [opts.smsApplicationSid] -\n   *          The SID of the application to handle SMS messages\n   * @param {string} [opts.smsFallbackMethod] -\n   *          HTTP method used with sms_fallback_url\n   * @param {string} [opts.smsFallbackUrl] -\n   *          The URL we call when an error occurs while executing TwiML\n   * @param {string} [opts.smsMethod] - The HTTP method to use with sms_url\n   * @param {string} [opts.smsUrl] -\n   *          The URL we should call when the new phone number receives an incoming SMS message\n   * @param {string} [opts.statusCallback] -\n   *          The URL to send status information to your application\n   * @param {string} [opts.statusCallbackMethod] -\n   *          The HTTP method we should use to call status_callback\n   * @param {string} [opts.voiceApplicationSid] -\n   *          The SID of the application to handle the new phone number\n   * @param {boolean} [opts.voiceCallerIdLookup] -\n   *          Whether to lookup the caller's name\n   * @param {string} [opts.voiceFallbackMethod] -\n   *          The HTTP method used with voice_fallback_url\n   * @param {string} [opts.voiceFallbackUrl] -\n   *          The URL we will call when an error occurs in TwiML\n   * @param {string} [opts.voiceMethod] - The HTTP method used with the voice_url\n   * @param {string} [opts.voiceUrl] -\n   *          The URL we should call when the phone number receives a call\n   * @param {string} [opts.identitySid] -\n   *          The SID of the Identity resource to associate with the new phone number\n   * @param {string} [opts.addressSid] -\n   *          The SID of the Address resource associated with the phone number\n   * @param {toll_free.emergency_status} [opts.emergencyStatus] -\n   *          Status determining whether the new phone number is enabled for emergency calling\n   * @param {string} [opts.emergencyAddressSid] -\n   *          The emergency address configuration to use for emergency calling\n   * @param {string} [opts.trunkSid] -\n   *          SID of the trunk to handle calls to the new phone number\n   * @param {toll_free.voice_receive_mode} [opts.voiceReceiveMode] -\n   *          Incoming call type: fax or voice\n   * @param {string} [opts.bundleSid] -\n   *          The SID of the Bundle resource associated with number\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed TollFreeInstance\n   */\n\n  /* jshint ignore:end */\n\n\n  TollFreeListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n\n    if (_.isUndefined(opts.phoneNumber)) {\n      throw new Error('Required parameter \"opts.phoneNumber\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'PhoneNumber': _.get(opts, 'phoneNumber'),\n      'ApiVersion': _.get(opts, 'apiVersion'),\n      'FriendlyName': _.get(opts, 'friendlyName'),\n      'SmsApplicationSid': _.get(opts, 'smsApplicationSid'),\n      'SmsFallbackMethod': _.get(opts, 'smsFallbackMethod'),\n      'SmsFallbackUrl': _.get(opts, 'smsFallbackUrl'),\n      'SmsMethod': _.get(opts, 'smsMethod'),\n      'SmsUrl': _.get(opts, 'smsUrl'),\n      'StatusCallback': _.get(opts, 'statusCallback'),\n      'StatusCallbackMethod': _.get(opts, 'statusCallbackMethod'),\n      'VoiceApplicationSid': _.get(opts, 'voiceApplicationSid'),\n      'VoiceCallerIdLookup': serialize.bool(_.get(opts, 'voiceCallerIdLookup')),\n      'VoiceFallbackMethod': _.get(opts, 'voiceFallbackMethod'),\n      'VoiceFallbackUrl': _.get(opts, 'voiceFallbackUrl'),\n      'VoiceMethod': _.get(opts, 'voiceMethod'),\n      'VoiceUrl': _.get(opts, 'voiceUrl'),\n      'IdentitySid': _.get(opts, 'identitySid'),\n      'AddressSid': _.get(opts, 'addressSid'),\n      'EmergencyStatus': _.get(opts, 'emergencyStatus'),\n      'EmergencyAddressSid': _.get(opts, 'emergencyAddressSid'),\n      'TrunkSid': _.get(opts, 'trunkSid'),\n      'VoiceReceiveMode': _.get(opts, 'voiceReceiveMode'),\n      'BundleSid': _.get(opts, 'bundleSid')\n    });\n\n    var promise = this._version.create({\n      uri: this._uri,\n      method: 'POST',\n      data: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new TollFreeInstance(this._version, payload));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Api.V2010.AccountContext.IncomingPhoneNumberContext.TollFreeList#\n   *\n   * @returns Object\n   */\n\n  /* jshint ignore:end */\n\n\n  TollFreeListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  TollFreeListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return TollFreeListInstance;\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the TollFreePage\n *\n * @constructor Twilio.Api.V2010.AccountContext.IncomingPhoneNumberContext.TollFreePage\n *\n * @param {V2010} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {TollFreeSolution} solution - Path solution\n *\n * @returns TollFreePage\n */\n\n/* jshint ignore:end */\n\n\nTollFreePage = function TollFreePage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(TollFreePage.prototype, Page.prototype);\n\nTollFreePage.prototype.constructor = TollFreePage;\n/* jshint ignore:start */\n\n/**\n * Build an instance of TollFreeInstance\n *\n * @function getInstance\n * @memberof Twilio.Api.V2010.AccountContext.IncomingPhoneNumberContext.TollFreePage#\n *\n * @param {TollFreePayload} payload - Payload response from the API\n *\n * @returns TollFreeInstance\n */\n\n/* jshint ignore:end */\n\nTollFreePage.prototype.getInstance = function getInstance(payload) {\n  return new TollFreeInstance(this._version, payload, this._solution.accountSid);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.IncomingPhoneNumberContext.TollFreePage#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nTollFreePage.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nTollFreePage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the TollFreeContext\n *\n * @constructor Twilio.Api.V2010.AccountContext.IncomingPhoneNumberContext.TollFreeInstance\n *\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {string} addressSid -\n *          The SID of the Address resource associated with the phone number\n * @property {toll_free.address_requirement} addressRequirements -\n *          Whether the phone number requires an Address registered with Twilio.\n * @property {string} apiVersion -\n *          The API version used to start a new TwiML session\n * @property {boolean} beta -\n *          Whether the phone number is new to the Twilio platform\n * @property {PhoneNumberCapabilities} capabilities -\n *          Indicate if a phone can receive calls or messages\n * @property {Date} dateCreated -\n *          The RFC 2822 date and time in GMT that the resource was created\n * @property {Date} dateUpdated -\n *          The RFC 2822 date and time in GMT that the resource was last updated\n * @property {string} friendlyName -\n *          The string that you assigned to describe the resource\n * @property {string} identitySid -\n *          The SID of the Identity resource associated with number\n * @property {string} phoneNumber - The phone number in E.164 format\n * @property {string} origin - The phone number's origin. Can be twilio or hosted.\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} smsApplicationSid -\n *          The SID of the application that handles SMS messages sent to the phone number\n * @property {string} smsFallbackMethod -\n *          The HTTP method used with sms_fallback_url\n * @property {string} smsFallbackUrl -\n *          The URL that we call when an error occurs while retrieving or executing the TwiML\n * @property {string} smsMethod - The HTTP method to use with sms_url\n * @property {string} smsUrl -\n *          The URL we call when the phone number receives an incoming SMS message\n * @property {string} statusCallback -\n *          The URL to send status information to your application\n * @property {string} statusCallbackMethod -\n *          The HTTP method we use to call status_callback\n * @property {string} trunkSid -\n *          The SID of the Trunk that handles calls to the phone number\n * @property {string} uri -\n *          The URI of the resource, relative to `https://api.twilio.com`\n * @property {toll_free.voice_receive_mode} voiceReceiveMode -\n *          The voice_receive_mode\n * @property {string} voiceApplicationSid -\n *          The SID of the application that handles calls to the phone number\n * @property {boolean} voiceCallerIdLookup - Whether to lookup the caller's name\n * @property {string} voiceFallbackMethod -\n *          The HTTP method used with voice_fallback_url\n * @property {string} voiceFallbackUrl -\n *          The URL we call when an error occurs in TwiML\n * @property {string} voiceMethod - The HTTP method used with the voice_url\n * @property {string} voiceUrl -\n *          The URL we call when the phone number receives a call\n * @property {toll_free.emergency_status} emergencyStatus -\n *          Whether the phone number is enabled for emergency calling\n * @property {string} emergencyAddressSid -\n *          The emergency address configuration to use for emergency calling\n * @property {string} bundleSid -\n *          The SID of the Bundle resource associated with number\n * @property {string} status - The status\n *\n * @param {V2010} version - Version of the resource\n * @param {TollFreePayload} payload - The instance payload\n * @param {sid} accountSid - The SID of the Account that created the resource\n */\n\n/* jshint ignore:end */\n\n\nTollFreeInstance = function TollFreeInstance(version, payload, accountSid) {\n  this._version = version; // Marshaled Properties\n\n  this.accountSid = payload.account_sid; // jshint ignore:line\n\n  this.addressSid = payload.address_sid; // jshint ignore:line\n\n  this.addressRequirements = payload.address_requirements; // jshint ignore:line\n\n  this.apiVersion = payload.api_version; // jshint ignore:line\n\n  this.beta = payload.beta; // jshint ignore:line\n\n  this.capabilities = payload.capabilities; // jshint ignore:line\n\n  this.dateCreated = deserialize.rfc2822DateTime(payload.date_created); // jshint ignore:line\n\n  this.dateUpdated = deserialize.rfc2822DateTime(payload.date_updated); // jshint ignore:line\n\n  this.friendlyName = payload.friendly_name; // jshint ignore:line\n\n  this.identitySid = payload.identity_sid; // jshint ignore:line\n\n  this.phoneNumber = payload.phone_number; // jshint ignore:line\n\n  this.origin = payload.origin; // jshint ignore:line\n\n  this.sid = payload.sid; // jshint ignore:line\n\n  this.smsApplicationSid = payload.sms_application_sid; // jshint ignore:line\n\n  this.smsFallbackMethod = payload.sms_fallback_method; // jshint ignore:line\n\n  this.smsFallbackUrl = payload.sms_fallback_url; // jshint ignore:line\n\n  this.smsMethod = payload.sms_method; // jshint ignore:line\n\n  this.smsUrl = payload.sms_url; // jshint ignore:line\n\n  this.statusCallback = payload.status_callback; // jshint ignore:line\n\n  this.statusCallbackMethod = payload.status_callback_method; // jshint ignore:line\n\n  this.trunkSid = payload.trunk_sid; // jshint ignore:line\n\n  this.uri = payload.uri; // jshint ignore:line\n\n  this.voiceReceiveMode = payload.voice_receive_mode; // jshint ignore:line\n\n  this.voiceApplicationSid = payload.voice_application_sid; // jshint ignore:line\n\n  this.voiceCallerIdLookup = payload.voice_caller_id_lookup; // jshint ignore:line\n\n  this.voiceFallbackMethod = payload.voice_fallback_method; // jshint ignore:line\n\n  this.voiceFallbackUrl = payload.voice_fallback_url; // jshint ignore:line\n\n  this.voiceMethod = payload.voice_method; // jshint ignore:line\n\n  this.voiceUrl = payload.voice_url; // jshint ignore:line\n\n  this.emergencyStatus = payload.emergency_status; // jshint ignore:line\n\n  this.emergencyAddressSid = payload.emergency_address_sid; // jshint ignore:line\n\n  this.bundleSid = payload.bundle_sid; // jshint ignore:line\n\n  this.status = payload.status; // jshint ignore:line\n  // Context\n\n  this._context = undefined;\n  this._solution = {\n    accountSid: accountSid\n  };\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.IncomingPhoneNumberContext.TollFreeInstance#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nTollFreeInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nTollFreeInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  TollFreeList: TollFreeList,\n  TollFreePage: TollFreePage,\n  TollFreeInstance: TollFreeInstance\n};","map":{"version":3,"sources":["/Users/tony_niu/Visual Studio/Twilio/twilio-video-starter-kit/node_modules/twilio/lib/rest/api/v2010/account/incomingPhoneNumber/tollFree.js"],"names":["Q","require","_","util","Page","deserialize","serialize","values","TollFreeList","TollFreePage","TollFreeInstance","version","accountSid","TollFreeListInstance","sid","get","_version","_solution","_uri","each","opts","callback","isFunction","isUndefined","Error","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","error","fetchNextPage","fn","promise","then","page","instances","instance","bind","nextPage","catch","merge","list","deferred","defer","allResources","resource","push","length","resolve","reject","nodeify","data","of","bool","pageToken","pageNumber","uri","method","params","payload","getPage","targetUrl","_domain","twilio","request","create","phoneNumber","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","account_sid","addressSid","address_sid","addressRequirements","address_requirements","apiVersion","api_version","beta","capabilities","dateCreated","rfc2822DateTime","date_created","dateUpdated","date_updated","friendlyName","friendly_name","identitySid","identity_sid","phone_number","origin","smsApplicationSid","sms_application_sid","smsFallbackMethod","sms_fallback_method","smsFallbackUrl","sms_fallback_url","smsMethod","sms_method","smsUrl","sms_url","statusCallback","status_callback","statusCallbackMethod","status_callback_method","trunkSid","trunk_sid","voiceReceiveMode","voice_receive_mode","voiceApplicationSid","voice_application_sid","voiceCallerIdLookup","voice_caller_id_lookup","voiceFallbackMethod","voice_fallback_method","voiceFallbackUrl","voice_fallback_url","voiceMethod","voice_method","voiceUrl","voice_url","emergencyStatus","emergency_status","emergencyAddressSid","emergency_address_sid","bundleSid","bundle_sid","status","_context","undefined","module","exports"],"mappings":"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AACqE,SAAb,CAAuBC,WAAvB,GAAqCtE,YAArC;AAEA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;AACAA,YAAY,CAACqE,SAAb,CAAuBI,WAAvB,GAAqC,SAASA,WAAT,CAAqBnB,OAArB,EAA8B;AACjE,SAAO,IAAIrD,gBAAJ,CAAqB,KAAKM,QAA1B,EAAoC+C,OAApC,EAA6C,KAAK9C,SAAL,CAAeL,UAA5D,CAAP;AACD,CAFD;AAIA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACAH,YAAY,CAACqE,SAAb,CAAuBP,MAAvB,GAAgC,SAASA,MAAT,GAAkB;AAChD,MAAIY,KAAK,GAAG,EAAZ;;AACAjF,EAAAA,CAAC,CAACkF,MAAF,CAAS,IAAT,EAAe,UAASC,KAAT,EAAgBC,GAAhB,EAAqB;AAClC,QAAI,CAACpF,CAAC,CAACqF,UAAF,CAAaD,GAAb,EAAkB,GAAlB,CAAD,IAA2B,CAAEpF,CAAC,CAACoB,UAAF,CAAa+D,KAAb,CAAjC,EAAsD;AACpDF,MAAAA,KAAK,CAACG,GAAD,CAAL,GAAaD,KAAb;AACD;AACF,GAJD;;AAKA,SAAOF,KAAP;AACD,CARD;;AAUA1E,YAAY,CAACqE,SAAb,CAAuB3E,IAAI,CAACqE,OAAL,CAAaC,MAApC,IAA8C,SAASD,OAAT,CAAiBE,KAAjB,EAAwBC,OAAxB,EAAiC;AAC7E,SAAOxE,IAAI,CAACqE,OAAL,CAAa,KAAKD,MAAL,EAAb,EAA4BI,OAA5B,CAAP;AACD,CAFD;AAKA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA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","sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar Page = require('../../../../../base/Page');  /* jshint ignore:line */\nvar deserialize = require(\n    '../../../../../base/deserialize');  /* jshint ignore:line */\nvar serialize = require(\n    '../../../../../base/serialize');  /* jshint ignore:line */\nvar values = require('../../../../../base/values');  /* jshint ignore:line */\n\nvar TollFreeList;\nvar TollFreePage;\nvar TollFreeInstance;\n\n/* jshint ignore:start */\n/**\n * Initialize the TollFreeList\n *\n * @constructor Twilio.Api.V2010.AccountContext.IncomingPhoneNumberContext.TollFreeList\n *\n * @param {Twilio.Api.V2010} version - Version of the resource\n * @param {string} accountSid - The SID of the Account that created the resource\n */\n/* jshint ignore:end */\nTollFreeList = function TollFreeList(version, accountSid) {\n  /* jshint ignore:start */\n  /**\n   * @function tollFree\n   * @memberof Twilio.Api.V2010.AccountContext.IncomingPhoneNumberContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Api.V2010.AccountContext.IncomingPhoneNumberContext.TollFreeContext}\n   */\n  /* jshint ignore:end */\n  function TollFreeListInstance(sid) {\n    return TollFreeListInstance.get(sid);\n  }\n\n  TollFreeListInstance._version = version;\n  // Path Solution\n  TollFreeListInstance._solution = {accountSid: accountSid};\n  TollFreeListInstance._uri = `/Accounts/${accountSid}/IncomingPhoneNumbers/TollFree.json`;\n  /* jshint ignore:start */\n  /**\n   * Streams TollFreeInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Api.V2010.AccountContext.IncomingPhoneNumberContext.TollFreeList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {boolean} [opts.beta] - Whether to include new phone numbers\n   * @param {string} [opts.friendlyName] -\n   *          A string that identifies the resources to read\n   * @param {string} [opts.phoneNumber] - The phone numbers of the resources to read\n   * @param {string} [opts.origin] -\n   *          Include phone numbers based on their origin. By default, phone numbers of all origin are included.\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  TollFreeListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists TollFreeInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Api.V2010.AccountContext.IncomingPhoneNumberContext.TollFreeList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {boolean} [opts.beta] - Whether to include new phone numbers\n   * @param {string} [opts.friendlyName] -\n   *          A string that identifies the resources to read\n   * @param {string} [opts.phoneNumber] - The phone numbers of the resources to read\n   * @param {string} [opts.origin] -\n   *          Include phone numbers based on their origin. By default, phone numbers of all origin are included.\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  TollFreeListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of TollFreeInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Api.V2010.AccountContext.IncomingPhoneNumberContext.TollFreeList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {boolean} [opts.beta] - Whether to include new phone numbers\n   * @param {string} [opts.friendlyName] -\n   *          A string that identifies the resources to read\n   * @param {string} [opts.phoneNumber] - The phone numbers of the resources to read\n   * @param {string} [opts.origin] -\n   *          Include phone numbers based on their origin. By default, phone numbers of all origin are included.\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  TollFreeListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'Beta': serialize.bool(_.get(opts, 'beta')),\n      'FriendlyName': _.get(opts, 'friendlyName'),\n      'PhoneNumber': _.get(opts, 'phoneNumber'),\n      'Origin': _.get(opts, 'origin'),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new TollFreePage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of TollFreeInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Api.V2010.AccountContext.IncomingPhoneNumberContext.TollFreeList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  TollFreeListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new TollFreePage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * create a TollFreeInstance\n   *\n   * @function create\n   * @memberof Twilio.Api.V2010.AccountContext.IncomingPhoneNumberContext.TollFreeList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.phoneNumber - The phone number to purchase in E.164 format\n   * @param {string} [opts.apiVersion] -\n   *          The API version to use for incoming calls made to the new phone number\n   * @param {string} [opts.friendlyName] - A string to describe the new phone number\n   * @param {string} [opts.smsApplicationSid] -\n   *          The SID of the application to handle SMS messages\n   * @param {string} [opts.smsFallbackMethod] -\n   *          HTTP method used with sms_fallback_url\n   * @param {string} [opts.smsFallbackUrl] -\n   *          The URL we call when an error occurs while executing TwiML\n   * @param {string} [opts.smsMethod] - The HTTP method to use with sms_url\n   * @param {string} [opts.smsUrl] -\n   *          The URL we should call when the new phone number receives an incoming SMS message\n   * @param {string} [opts.statusCallback] -\n   *          The URL to send status information to your application\n   * @param {string} [opts.statusCallbackMethod] -\n   *          The HTTP method we should use to call status_callback\n   * @param {string} [opts.voiceApplicationSid] -\n   *          The SID of the application to handle the new phone number\n   * @param {boolean} [opts.voiceCallerIdLookup] -\n   *          Whether to lookup the caller's name\n   * @param {string} [opts.voiceFallbackMethod] -\n   *          The HTTP method used with voice_fallback_url\n   * @param {string} [opts.voiceFallbackUrl] -\n   *          The URL we will call when an error occurs in TwiML\n   * @param {string} [opts.voiceMethod] - The HTTP method used with the voice_url\n   * @param {string} [opts.voiceUrl] -\n   *          The URL we should call when the phone number receives a call\n   * @param {string} [opts.identitySid] -\n   *          The SID of the Identity resource to associate with the new phone number\n   * @param {string} [opts.addressSid] -\n   *          The SID of the Address resource associated with the phone number\n   * @param {toll_free.emergency_status} [opts.emergencyStatus] -\n   *          Status determining whether the new phone number is enabled for emergency calling\n   * @param {string} [opts.emergencyAddressSid] -\n   *          The emergency address configuration to use for emergency calling\n   * @param {string} [opts.trunkSid] -\n   *          SID of the trunk to handle calls to the new phone number\n   * @param {toll_free.voice_receive_mode} [opts.voiceReceiveMode] -\n   *          Incoming call type: fax or voice\n   * @param {string} [opts.bundleSid] -\n   *          The SID of the Bundle resource associated with number\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed TollFreeInstance\n   */\n  /* jshint ignore:end */\n  TollFreeListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n    if (_.isUndefined(opts.phoneNumber)) {\n      throw new Error('Required parameter \"opts.phoneNumber\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'PhoneNumber': _.get(opts, 'phoneNumber'),\n      'ApiVersion': _.get(opts, 'apiVersion'),\n      'FriendlyName': _.get(opts, 'friendlyName'),\n      'SmsApplicationSid': _.get(opts, 'smsApplicationSid'),\n      'SmsFallbackMethod': _.get(opts, 'smsFallbackMethod'),\n      'SmsFallbackUrl': _.get(opts, 'smsFallbackUrl'),\n      'SmsMethod': _.get(opts, 'smsMethod'),\n      'SmsUrl': _.get(opts, 'smsUrl'),\n      'StatusCallback': _.get(opts, 'statusCallback'),\n      'StatusCallbackMethod': _.get(opts, 'statusCallbackMethod'),\n      'VoiceApplicationSid': _.get(opts, 'voiceApplicationSid'),\n      'VoiceCallerIdLookup': serialize.bool(_.get(opts, 'voiceCallerIdLookup')),\n      'VoiceFallbackMethod': _.get(opts, 'voiceFallbackMethod'),\n      'VoiceFallbackUrl': _.get(opts, 'voiceFallbackUrl'),\n      'VoiceMethod': _.get(opts, 'voiceMethod'),\n      'VoiceUrl': _.get(opts, 'voiceUrl'),\n      'IdentitySid': _.get(opts, 'identitySid'),\n      'AddressSid': _.get(opts, 'addressSid'),\n      'EmergencyStatus': _.get(opts, 'emergencyStatus'),\n      'EmergencyAddressSid': _.get(opts, 'emergencyAddressSid'),\n      'TrunkSid': _.get(opts, 'trunkSid'),\n      'VoiceReceiveMode': _.get(opts, 'voiceReceiveMode'),\n      'BundleSid': _.get(opts, 'bundleSid')\n    });\n\n    var promise = this._version.create({uri: this._uri, method: 'POST', data: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new TollFreeInstance(this._version, payload));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Api.V2010.AccountContext.IncomingPhoneNumberContext.TollFreeList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  TollFreeListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  TollFreeListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return TollFreeListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the TollFreePage\n *\n * @constructor Twilio.Api.V2010.AccountContext.IncomingPhoneNumberContext.TollFreePage\n *\n * @param {V2010} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {TollFreeSolution} solution - Path solution\n *\n * @returns TollFreePage\n */\n/* jshint ignore:end */\nTollFreePage = function TollFreePage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(TollFreePage.prototype, Page.prototype);\nTollFreePage.prototype.constructor = TollFreePage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of TollFreeInstance\n *\n * @function getInstance\n * @memberof Twilio.Api.V2010.AccountContext.IncomingPhoneNumberContext.TollFreePage#\n *\n * @param {TollFreePayload} payload - Payload response from the API\n *\n * @returns TollFreeInstance\n */\n/* jshint ignore:end */\nTollFreePage.prototype.getInstance = function getInstance(payload) {\n  return new TollFreeInstance(this._version, payload, this._solution.accountSid);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.IncomingPhoneNumberContext.TollFreePage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nTollFreePage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nTollFreePage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the TollFreeContext\n *\n * @constructor Twilio.Api.V2010.AccountContext.IncomingPhoneNumberContext.TollFreeInstance\n *\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {string} addressSid -\n *          The SID of the Address resource associated with the phone number\n * @property {toll_free.address_requirement} addressRequirements -\n *          Whether the phone number requires an Address registered with Twilio.\n * @property {string} apiVersion -\n *          The API version used to start a new TwiML session\n * @property {boolean} beta -\n *          Whether the phone number is new to the Twilio platform\n * @property {PhoneNumberCapabilities} capabilities -\n *          Indicate if a phone can receive calls or messages\n * @property {Date} dateCreated -\n *          The RFC 2822 date and time in GMT that the resource was created\n * @property {Date} dateUpdated -\n *          The RFC 2822 date and time in GMT that the resource was last updated\n * @property {string} friendlyName -\n *          The string that you assigned to describe the resource\n * @property {string} identitySid -\n *          The SID of the Identity resource associated with number\n * @property {string} phoneNumber - The phone number in E.164 format\n * @property {string} origin - The phone number's origin. Can be twilio or hosted.\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} smsApplicationSid -\n *          The SID of the application that handles SMS messages sent to the phone number\n * @property {string} smsFallbackMethod -\n *          The HTTP method used with sms_fallback_url\n * @property {string} smsFallbackUrl -\n *          The URL that we call when an error occurs while retrieving or executing the TwiML\n * @property {string} smsMethod - The HTTP method to use with sms_url\n * @property {string} smsUrl -\n *          The URL we call when the phone number receives an incoming SMS message\n * @property {string} statusCallback -\n *          The URL to send status information to your application\n * @property {string} statusCallbackMethod -\n *          The HTTP method we use to call status_callback\n * @property {string} trunkSid -\n *          The SID of the Trunk that handles calls to the phone number\n * @property {string} uri -\n *          The URI of the resource, relative to `https://api.twilio.com`\n * @property {toll_free.voice_receive_mode} voiceReceiveMode -\n *          The voice_receive_mode\n * @property {string} voiceApplicationSid -\n *          The SID of the application that handles calls to the phone number\n * @property {boolean} voiceCallerIdLookup - Whether to lookup the caller's name\n * @property {string} voiceFallbackMethod -\n *          The HTTP method used with voice_fallback_url\n * @property {string} voiceFallbackUrl -\n *          The URL we call when an error occurs in TwiML\n * @property {string} voiceMethod - The HTTP method used with the voice_url\n * @property {string} voiceUrl -\n *          The URL we call when the phone number receives a call\n * @property {toll_free.emergency_status} emergencyStatus -\n *          Whether the phone number is enabled for emergency calling\n * @property {string} emergencyAddressSid -\n *          The emergency address configuration to use for emergency calling\n * @property {string} bundleSid -\n *          The SID of the Bundle resource associated with number\n * @property {string} status - The status\n *\n * @param {V2010} version - Version of the resource\n * @param {TollFreePayload} payload - The instance payload\n * @param {sid} accountSid - The SID of the Account that created the resource\n */\n/* jshint ignore:end */\nTollFreeInstance = function TollFreeInstance(version, payload, accountSid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.addressSid = payload.address_sid; // jshint ignore:line\n  this.addressRequirements = payload.address_requirements; // jshint ignore:line\n  this.apiVersion = payload.api_version; // jshint ignore:line\n  this.beta = payload.beta; // jshint ignore:line\n  this.capabilities = payload.capabilities; // jshint ignore:line\n  this.dateCreated = deserialize.rfc2822DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.rfc2822DateTime(payload.date_updated); // jshint ignore:line\n  this.friendlyName = payload.friendly_name; // jshint ignore:line\n  this.identitySid = payload.identity_sid; // jshint ignore:line\n  this.phoneNumber = payload.phone_number; // jshint ignore:line\n  this.origin = payload.origin; // jshint ignore:line\n  this.sid = payload.sid; // jshint ignore:line\n  this.smsApplicationSid = payload.sms_application_sid; // jshint ignore:line\n  this.smsFallbackMethod = payload.sms_fallback_method; // jshint ignore:line\n  this.smsFallbackUrl = payload.sms_fallback_url; // jshint ignore:line\n  this.smsMethod = payload.sms_method; // jshint ignore:line\n  this.smsUrl = payload.sms_url; // jshint ignore:line\n  this.statusCallback = payload.status_callback; // jshint ignore:line\n  this.statusCallbackMethod = payload.status_callback_method; // jshint ignore:line\n  this.trunkSid = payload.trunk_sid; // jshint ignore:line\n  this.uri = payload.uri; // jshint ignore:line\n  this.voiceReceiveMode = payload.voice_receive_mode; // jshint ignore:line\n  this.voiceApplicationSid = payload.voice_application_sid; // jshint ignore:line\n  this.voiceCallerIdLookup = payload.voice_caller_id_lookup; // jshint ignore:line\n  this.voiceFallbackMethod = payload.voice_fallback_method; // jshint ignore:line\n  this.voiceFallbackUrl = payload.voice_fallback_url; // jshint ignore:line\n  this.voiceMethod = payload.voice_method; // jshint ignore:line\n  this.voiceUrl = payload.voice_url; // jshint ignore:line\n  this.emergencyStatus = payload.emergency_status; // jshint ignore:line\n  this.emergencyAddressSid = payload.emergency_address_sid; // jshint ignore:line\n  this.bundleSid = payload.bundle_sid; // jshint ignore:line\n  this.status = payload.status; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {accountSid: accountSid, };\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.IncomingPhoneNumberContext.TollFreeInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nTollFreeInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nTollFreeInstance.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  TollFreeList: TollFreeList,\n  TollFreePage: TollFreePage,\n  TollFreeInstance: TollFreeInstance\n};\n"]},"metadata":{},"sourceType":"script"}