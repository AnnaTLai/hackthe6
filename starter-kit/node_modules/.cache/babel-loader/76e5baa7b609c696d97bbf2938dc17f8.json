{"ast":null,"code":"'use strict';\n/* jshint ignore:start */\n\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n\n/* jshint ignore:end */\n\nvar Q = require('q');\n/* jshint ignore:line */\n\n\nvar _ = require('lodash');\n/* jshint ignore:line */\n\n\nvar util = require('util');\n/* jshint ignore:line */\n\n\nvar Page = require('../../../base/Page');\n/* jshint ignore:line */\n\n\nvar deserialize = require('../../../base/deserialize');\n/* jshint ignore:line */\n\n\nvar serialize = require('../../../base/serialize');\n/* jshint ignore:line */\n\n\nvar values = require('../../../base/values');\n/* jshint ignore:line */\n\n\nvar UsageRecordList;\nvar UsageRecordPage;\nvar UsageRecordInstance;\n/* jshint ignore:start */\n\n/**\n * Initialize the UsageRecordList\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Supersim.V1.UsageRecordList\n *\n * @param {Twilio.Supersim.V1} version - Version of the resource\n */\n\n/* jshint ignore:end */\n\nUsageRecordList = function UsageRecordList(version) {\n  /* jshint ignore:start */\n\n  /**\n   * @function usageRecords\n   * @memberof Twilio.Supersim.V1#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Supersim.V1.UsageRecordContext}\n   */\n\n  /* jshint ignore:end */\n  function UsageRecordListInstance(sid) {\n    return UsageRecordListInstance.get(sid);\n  }\n\n  UsageRecordListInstance._version = version; // Path Solution\n\n  UsageRecordListInstance._solution = {};\n  UsageRecordListInstance._uri = `/UsageRecords`;\n  /* jshint ignore:start */\n\n  /**\n   * Streams UsageRecordInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Supersim.V1.UsageRecordList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.sim] -\n   *          SID or unique name of a Sim resource. Only show UsageRecords representing usage incurred by this Super SIM.\n   * @param {string} [opts.fleet] -\n   *          SID or unique name of a Fleet resource. Only show UsageRecords representing usage for Super SIMs belonging to this Fleet resource at the time the usage occurred.\n   * @param {string} [opts.network] -\n   *          SID of a Network resource. Only show UsageRecords representing usage on this network.\n   * @param {string} [opts.isoCountry] -\n   *          Alpha-2 ISO Country Code. Only show UsageRecords representing usage in this country.\n   * @param {usage_record.group} [opts.group] -\n   *          Dimension over which to aggregate usage records.\n   * @param {usage_record.granularity} [opts.granularity] -\n   *          Time-based grouping that UsageRecords should be aggregated by. Can be: `hour`, `day`, or `all`. Default is `all`.\n   * @param {Date} [opts.startTime] -\n   *          Only include usage that occurred at or after this time.\n   * @param {Date} [opts.endTime] -\n   *          Only include usage that occurred before this time.\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n\n  /* jshint ignore:end */\n\n  UsageRecordListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Lists UsageRecordInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Supersim.V1.UsageRecordList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.sim] -\n   *          SID or unique name of a Sim resource. Only show UsageRecords representing usage incurred by this Super SIM.\n   * @param {string} [opts.fleet] -\n   *          SID or unique name of a Fleet resource. Only show UsageRecords representing usage for Super SIMs belonging to this Fleet resource at the time the usage occurred.\n   * @param {string} [opts.network] -\n   *          SID of a Network resource. Only show UsageRecords representing usage on this network.\n   * @param {string} [opts.isoCountry] -\n   *          Alpha-2 ISO Country Code. Only show UsageRecords representing usage in this country.\n   * @param {usage_record.group} [opts.group] -\n   *          Dimension over which to aggregate usage records.\n   * @param {usage_record.granularity} [opts.granularity] -\n   *          Time-based grouping that UsageRecords should be aggregated by. Can be: `hour`, `day`, or `all`. Default is `all`.\n   * @param {Date} [opts.startTime] -\n   *          Only include usage that occurred at or after this time.\n   * @param {Date} [opts.endTime] -\n   *          Only include usage that occurred before this time.\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  UsageRecordListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single page of UsageRecordInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Supersim.V1.UsageRecordList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.sim] -\n   *          SID or unique name of a Sim resource. Only show UsageRecords representing usage incurred by this Super SIM.\n   * @param {string} [opts.fleet] -\n   *          SID or unique name of a Fleet resource. Only show UsageRecords representing usage for Super SIMs belonging to this Fleet resource at the time the usage occurred.\n   * @param {string} [opts.network] -\n   *          SID of a Network resource. Only show UsageRecords representing usage on this network.\n   * @param {string} [opts.isoCountry] -\n   *          Alpha-2 ISO Country Code. Only show UsageRecords representing usage in this country.\n   * @param {usage_record.group} [opts.group] -\n   *          Dimension over which to aggregate usage records.\n   * @param {usage_record.granularity} [opts.granularity] -\n   *          Time-based grouping that UsageRecords should be aggregated by. Can be: `hour`, `day`, or `all`. Default is `all`.\n   * @param {Date} [opts.startTime] -\n   *          Only include usage that occurred at or after this time.\n   * @param {Date} [opts.endTime] -\n   *          Only include usage that occurred before this time.\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  UsageRecordListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'Sim': _.get(opts, 'sim'),\n      'Fleet': _.get(opts, 'fleet'),\n      'Network': _.get(opts, 'network'),\n      'IsoCountry': _.get(opts, 'isoCountry'),\n      'Group': _.get(opts, 'group'),\n      'Granularity': _.get(opts, 'granularity'),\n      'StartTime': serialize.iso8601DateTime(_.get(opts, 'startTime')),\n      'EndTime': serialize.iso8601DateTime(_.get(opts, 'endTime')),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new UsageRecordPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single target page of UsageRecordInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Supersim.V1.UsageRecordList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  UsageRecordListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new UsageRecordPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Supersim.V1.UsageRecordList#\n   *\n   * @returns Object\n   */\n\n  /* jshint ignore:end */\n\n\n  UsageRecordListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  UsageRecordListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return UsageRecordListInstance;\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the UsageRecordPage\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Supersim.V1.UsageRecordPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {UsageRecordSolution} solution - Path solution\n *\n * @returns UsageRecordPage\n */\n\n/* jshint ignore:end */\n\n\nUsageRecordPage = function UsageRecordPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(UsageRecordPage.prototype, Page.prototype);\n\nUsageRecordPage.prototype.constructor = UsageRecordPage;\n/* jshint ignore:start */\n\n/**\n * Build an instance of UsageRecordInstance\n *\n * @function getInstance\n * @memberof Twilio.Supersim.V1.UsageRecordPage#\n *\n * @param {UsageRecordPayload} payload - Payload response from the API\n *\n * @returns UsageRecordInstance\n */\n\n/* jshint ignore:end */\n\nUsageRecordPage.prototype.getInstance = function getInstance(payload) {\n  return new UsageRecordInstance(this._version, payload);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Supersim.V1.UsageRecordPage#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nUsageRecordPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nUsageRecordPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the UsageRecordContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Supersim.V1.UsageRecordInstance\n *\n * @property {string} accountSid - The SID of the Account that incurred the usage.\n * @property {string} simSid -\n *          SID of a Sim resource to which the UsageRecord belongs.\n * @property {string} networkSid -\n *          SID of the Network resource on which the usage occurred.\n * @property {string} fleetSid -\n *          SID of the Fleet resource on which the usage occurred.\n * @property {string} isoCountry -\n *          Alpha-2 ISO Country Code of the country the usage occurred in.\n * @property {object} period - The time period for which the usage is reported.\n * @property {number} dataUpload -\n *          Total data uploaded in bytes, aggregated by the query parameters.\n * @property {number} dataDownload -\n *          Total data downloaded in bytes, aggregated by the query parameters.\n * @property {number} dataTotal - Total of data_upload and data_download.\n *\n * @param {V1} version - Version of the resource\n * @param {UsageRecordPayload} payload - The instance payload\n */\n\n/* jshint ignore:end */\n\n\nUsageRecordInstance = function UsageRecordInstance(version, payload) {\n  this._version = version; // Marshaled Properties\n\n  this.accountSid = payload.account_sid; // jshint ignore:line\n\n  this.simSid = payload.sim_sid; // jshint ignore:line\n\n  this.networkSid = payload.network_sid; // jshint ignore:line\n\n  this.fleetSid = payload.fleet_sid; // jshint ignore:line\n\n  this.isoCountry = payload.iso_country; // jshint ignore:line\n\n  this.period = payload.period; // jshint ignore:line\n\n  this.dataUpload = deserialize.integer(payload.data_upload); // jshint ignore:line\n\n  this.dataDownload = deserialize.integer(payload.data_download); // jshint ignore:line\n\n  this.dataTotal = deserialize.integer(payload.data_total); // jshint ignore:line\n  // Context\n\n  this._context = undefined;\n  this._solution = {};\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Supersim.V1.UsageRecordInstance#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nUsageRecordInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nUsageRecordInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  UsageRecordList: UsageRecordList,\n  UsageRecordPage: UsageRecordPage,\n  UsageRecordInstance: UsageRecordInstance\n};","map":{"version":3,"sources":["/Users/tony_niu/Visual Studio/Twilio/twilio-video-starter-kit/src/token-service/node_modules/twilio/lib/rest/supersim/v1/usageRecord.js"],"names":["Q","require","_","util","Page","deserialize","serialize","values","UsageRecordList","UsageRecordPage","UsageRecordInstance","version","UsageRecordListInstance","sid","get","_version","_solution","_uri","each","opts","callback","isFunction","isUndefined","Error","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","error","fetchNextPage","fn","promise","then","page","instances","instance","bind","nextPage","catch","merge","list","deferred","defer","allResources","resource","push","length","resolve","reject","nodeify","data","of","iso8601DateTime","pageToken","pageNumber","uri","method","params","payload","getPage","targetUrl","_domain","twilio","request","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","accountSid","account_sid","simSid","sim_sid","networkSid","network_sid","fleetSid","fleet_sid","isoCountry","iso_country","period","dataUpload","integer","data_upload","dataDownload","data_download","dataTotal","data_total","_context","undefined","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar Page = require('../../../base/Page');  /* jshint ignore:line */\nvar deserialize = require(\n    '../../../base/deserialize');  /* jshint ignore:line */\nvar serialize = require('../../../base/serialize');  /* jshint ignore:line */\nvar values = require('../../../base/values');  /* jshint ignore:line */\n\nvar UsageRecordList;\nvar UsageRecordPage;\nvar UsageRecordInstance;\n\n/* jshint ignore:start */\n/**\n * Initialize the UsageRecordList\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Supersim.V1.UsageRecordList\n *\n * @param {Twilio.Supersim.V1} version - Version of the resource\n */\n/* jshint ignore:end */\nUsageRecordList = function UsageRecordList(version) {\n  /* jshint ignore:start */\n  /**\n   * @function usageRecords\n   * @memberof Twilio.Supersim.V1#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Supersim.V1.UsageRecordContext}\n   */\n  /* jshint ignore:end */\n  function UsageRecordListInstance(sid) {\n    return UsageRecordListInstance.get(sid);\n  }\n\n  UsageRecordListInstance._version = version;\n  // Path Solution\n  UsageRecordListInstance._solution = {};\n  UsageRecordListInstance._uri = `/UsageRecords`;\n  /* jshint ignore:start */\n  /**\n   * Streams UsageRecordInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Supersim.V1.UsageRecordList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.sim] -\n   *          SID or unique name of a Sim resource. Only show UsageRecords representing usage incurred by this Super SIM.\n   * @param {string} [opts.fleet] -\n   *          SID or unique name of a Fleet resource. Only show UsageRecords representing usage for Super SIMs belonging to this Fleet resource at the time the usage occurred.\n   * @param {string} [opts.network] -\n   *          SID of a Network resource. Only show UsageRecords representing usage on this network.\n   * @param {string} [opts.isoCountry] -\n   *          Alpha-2 ISO Country Code. Only show UsageRecords representing usage in this country.\n   * @param {usage_record.group} [opts.group] -\n   *          Dimension over which to aggregate usage records.\n   * @param {usage_record.granularity} [opts.granularity] -\n   *          Time-based grouping that UsageRecords should be aggregated by. Can be: `hour`, `day`, or `all`. Default is `all`.\n   * @param {Date} [opts.startTime] -\n   *          Only include usage that occurred at or after this time.\n   * @param {Date} [opts.endTime] -\n   *          Only include usage that occurred before this time.\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  UsageRecordListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists UsageRecordInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Supersim.V1.UsageRecordList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.sim] -\n   *          SID or unique name of a Sim resource. Only show UsageRecords representing usage incurred by this Super SIM.\n   * @param {string} [opts.fleet] -\n   *          SID or unique name of a Fleet resource. Only show UsageRecords representing usage for Super SIMs belonging to this Fleet resource at the time the usage occurred.\n   * @param {string} [opts.network] -\n   *          SID of a Network resource. Only show UsageRecords representing usage on this network.\n   * @param {string} [opts.isoCountry] -\n   *          Alpha-2 ISO Country Code. Only show UsageRecords representing usage in this country.\n   * @param {usage_record.group} [opts.group] -\n   *          Dimension over which to aggregate usage records.\n   * @param {usage_record.granularity} [opts.granularity] -\n   *          Time-based grouping that UsageRecords should be aggregated by. Can be: `hour`, `day`, or `all`. Default is `all`.\n   * @param {Date} [opts.startTime] -\n   *          Only include usage that occurred at or after this time.\n   * @param {Date} [opts.endTime] -\n   *          Only include usage that occurred before this time.\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  UsageRecordListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of UsageRecordInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Supersim.V1.UsageRecordList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.sim] -\n   *          SID or unique name of a Sim resource. Only show UsageRecords representing usage incurred by this Super SIM.\n   * @param {string} [opts.fleet] -\n   *          SID or unique name of a Fleet resource. Only show UsageRecords representing usage for Super SIMs belonging to this Fleet resource at the time the usage occurred.\n   * @param {string} [opts.network] -\n   *          SID of a Network resource. Only show UsageRecords representing usage on this network.\n   * @param {string} [opts.isoCountry] -\n   *          Alpha-2 ISO Country Code. Only show UsageRecords representing usage in this country.\n   * @param {usage_record.group} [opts.group] -\n   *          Dimension over which to aggregate usage records.\n   * @param {usage_record.granularity} [opts.granularity] -\n   *          Time-based grouping that UsageRecords should be aggregated by. Can be: `hour`, `day`, or `all`. Default is `all`.\n   * @param {Date} [opts.startTime] -\n   *          Only include usage that occurred at or after this time.\n   * @param {Date} [opts.endTime] -\n   *          Only include usage that occurred before this time.\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  UsageRecordListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'Sim': _.get(opts, 'sim'),\n      'Fleet': _.get(opts, 'fleet'),\n      'Network': _.get(opts, 'network'),\n      'IsoCountry': _.get(opts, 'isoCountry'),\n      'Group': _.get(opts, 'group'),\n      'Granularity': _.get(opts, 'granularity'),\n      'StartTime': serialize.iso8601DateTime(_.get(opts, 'startTime')),\n      'EndTime': serialize.iso8601DateTime(_.get(opts, 'endTime')),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new UsageRecordPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of UsageRecordInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Supersim.V1.UsageRecordList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  UsageRecordListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new UsageRecordPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Supersim.V1.UsageRecordList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  UsageRecordListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  UsageRecordListInstance[util.inspect.custom] = function inspect(depth, options)\n      {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return UsageRecordListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the UsageRecordPage\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Supersim.V1.UsageRecordPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {UsageRecordSolution} solution - Path solution\n *\n * @returns UsageRecordPage\n */\n/* jshint ignore:end */\nUsageRecordPage = function UsageRecordPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(UsageRecordPage.prototype, Page.prototype);\nUsageRecordPage.prototype.constructor = UsageRecordPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of UsageRecordInstance\n *\n * @function getInstance\n * @memberof Twilio.Supersim.V1.UsageRecordPage#\n *\n * @param {UsageRecordPayload} payload - Payload response from the API\n *\n * @returns UsageRecordInstance\n */\n/* jshint ignore:end */\nUsageRecordPage.prototype.getInstance = function getInstance(payload) {\n  return new UsageRecordInstance(this._version, payload);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Supersim.V1.UsageRecordPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nUsageRecordPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nUsageRecordPage.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the UsageRecordContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Supersim.V1.UsageRecordInstance\n *\n * @property {string} accountSid - The SID of the Account that incurred the usage.\n * @property {string} simSid -\n *          SID of a Sim resource to which the UsageRecord belongs.\n * @property {string} networkSid -\n *          SID of the Network resource on which the usage occurred.\n * @property {string} fleetSid -\n *          SID of the Fleet resource on which the usage occurred.\n * @property {string} isoCountry -\n *          Alpha-2 ISO Country Code of the country the usage occurred in.\n * @property {object} period - The time period for which the usage is reported.\n * @property {number} dataUpload -\n *          Total data uploaded in bytes, aggregated by the query parameters.\n * @property {number} dataDownload -\n *          Total data downloaded in bytes, aggregated by the query parameters.\n * @property {number} dataTotal - Total of data_upload and data_download.\n *\n * @param {V1} version - Version of the resource\n * @param {UsageRecordPayload} payload - The instance payload\n */\n/* jshint ignore:end */\nUsageRecordInstance = function UsageRecordInstance(version, payload) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.simSid = payload.sim_sid; // jshint ignore:line\n  this.networkSid = payload.network_sid; // jshint ignore:line\n  this.fleetSid = payload.fleet_sid; // jshint ignore:line\n  this.isoCountry = payload.iso_country; // jshint ignore:line\n  this.period = payload.period; // jshint ignore:line\n  this.dataUpload = deserialize.integer(payload.data_upload); // jshint ignore:line\n  this.dataDownload = deserialize.integer(payload.data_download); // jshint ignore:line\n  this.dataTotal = deserialize.integer(payload.data_total); // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {};\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Supersim.V1.UsageRecordInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nUsageRecordInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nUsageRecordInstance.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  UsageRecordList: UsageRecordList,\n  UsageRecordPage: UsageRecordPage,\n  UsageRecordInstance: UsageRecordInstance\n};\n"]},"metadata":{},"sourceType":"module"}