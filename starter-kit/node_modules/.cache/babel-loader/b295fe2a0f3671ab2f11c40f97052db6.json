{"ast":null,"code":"'use strict';\n/* jshint ignore:start */\n\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n\n/* jshint ignore:end */\n\nvar Q = require('q');\n/* jshint ignore:line */\n\n\nvar _ = require('lodash');\n/* jshint ignore:line */\n\n\nvar util = require('util');\n/* jshint ignore:line */\n\n\nvar Page = require('../../../../base/Page');\n/* jshint ignore:line */\n\n\nvar deserialize = require('../../../../base/deserialize');\n/* jshint ignore:line */\n\n\nvar values = require('../../../../base/values');\n/* jshint ignore:line */\n\n\nvar ParticipantConversationList;\nvar ParticipantConversationPage;\nvar ParticipantConversationInstance;\n/* jshint ignore:start */\n\n/**\n * Initialize the ParticipantConversationList\n *\n * @constructor Twilio.Conversations.V1.ServiceContext.ParticipantConversationList\n *\n * @param {Twilio.Conversations.V1} version - Version of the resource\n * @param {string} chatServiceSid -\n *          The unique ID of the Conversation Service this conversation belongs to.\n */\n\n/* jshint ignore:end */\n\nParticipantConversationList = function ParticipantConversationList(version, chatServiceSid) {\n  /* jshint ignore:start */\n\n  /**\n   * @function participantConversations\n   * @memberof Twilio.Conversations.V1.ServiceContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Conversations.V1.ServiceContext.ParticipantConversationContext}\n   */\n\n  /* jshint ignore:end */\n  function ParticipantConversationListInstance(sid) {\n    return ParticipantConversationListInstance.get(sid);\n  }\n\n  ParticipantConversationListInstance._version = version; // Path Solution\n\n  ParticipantConversationListInstance._solution = {\n    chatServiceSid: chatServiceSid\n  };\n  ParticipantConversationListInstance._uri = `/Services/${chatServiceSid}/ParticipantConversations`;\n  /* jshint ignore:start */\n\n  /**\n   * Streams ParticipantConversationInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Conversations.V1.ServiceContext.ParticipantConversationList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.identity] -\n   *          A unique string identifier for the conversation participant as Conversation User.\n   * @param {string} [opts.address] -\n   *          A unique string identifier for the conversation participant who's not a Conversation User.\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n\n  /* jshint ignore:end */\n\n  ParticipantConversationListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Lists ParticipantConversationInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Conversations.V1.ServiceContext.ParticipantConversationList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.identity] -\n   *          A unique string identifier for the conversation participant as Conversation User.\n   * @param {string} [opts.address] -\n   *          A unique string identifier for the conversation participant who's not a Conversation User.\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  ParticipantConversationListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single page of ParticipantConversationInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Conversations.V1.ServiceContext.ParticipantConversationList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.identity] -\n   *          A unique string identifier for the conversation participant as Conversation User.\n   * @param {string} [opts.address] -\n   *          A unique string identifier for the conversation participant who's not a Conversation User.\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  ParticipantConversationListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'Identity': _.get(opts, 'identity'),\n      'Address': _.get(opts, 'address'),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new ParticipantConversationPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single target page of ParticipantConversationInstance records from\n   * the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Conversations.V1.ServiceContext.ParticipantConversationList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  ParticipantConversationListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new ParticipantConversationPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Conversations.V1.ServiceContext.ParticipantConversationList#\n   *\n   * @returns Object\n   */\n\n  /* jshint ignore:end */\n\n\n  ParticipantConversationListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  ParticipantConversationListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return ParticipantConversationListInstance;\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the ParticipantConversationPage\n *\n * @constructor Twilio.Conversations.V1.ServiceContext.ParticipantConversationPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {ParticipantConversationSolution} solution - Path solution\n *\n * @returns ParticipantConversationPage\n */\n\n/* jshint ignore:end */\n\n\nParticipantConversationPage = function ParticipantConversationPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(ParticipantConversationPage.prototype, Page.prototype);\n\nParticipantConversationPage.prototype.constructor = ParticipantConversationPage;\n/* jshint ignore:start */\n\n/**\n * Build an instance of ParticipantConversationInstance\n *\n * @function getInstance\n * @memberof Twilio.Conversations.V1.ServiceContext.ParticipantConversationPage#\n *\n * @param {ParticipantConversationPayload} payload - Payload response from the API\n *\n * @returns ParticipantConversationInstance\n */\n\n/* jshint ignore:end */\n\nParticipantConversationPage.prototype.getInstance = function getInstance(payload) {\n  return new ParticipantConversationInstance(this._version, payload, this._solution.chatServiceSid);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Conversations.V1.ServiceContext.ParticipantConversationPage#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nParticipantConversationPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nParticipantConversationPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the ParticipantConversationContext\n *\n * @constructor Twilio.Conversations.V1.ServiceContext.ParticipantConversationInstance\n *\n * @property {string} accountSid -\n *          The unique ID of the Account responsible for this conversation.\n * @property {string} chatServiceSid -\n *          The unique ID of the Conversation Service this conversation belongs to.\n * @property {string} participantSid - The unique ID of the Participant.\n * @property {string} participantUserSid -\n *          The unique ID for the conversation participant as Conversation User.\n * @property {string} participantIdentity -\n *          A unique string identifier for the conversation participant as Conversation User.\n * @property {object} participantMessagingBinding -\n *          Information about how this participant exchanges messages with the conversation.\n * @property {string} conversationSid -\n *          The unique ID of the Conversation this Participant belongs to.\n * @property {string} conversationUniqueName -\n *          An application-defined string that uniquely identifies the Conversation resource.\n * @property {string} conversationFriendlyName -\n *          The human-readable name of this conversation.\n * @property {string} conversationAttributes -\n *          An optional string metadata field you can use to store any data you wish.\n * @property {Date} conversationDateCreated -\n *          The date that this conversation was created.\n * @property {Date} conversationDateUpdated -\n *          The date that this conversation was last updated.\n * @property {string} conversationCreatedBy - Creator of this conversation.\n * @property {participant_conversation.state} conversationState -\n *          The current state of this User Conversation\n * @property {object} conversationTimers - Timer date values for this conversation.\n * @property {string} links -\n *          Absolute URLs to access the participant and conversation of this Participant Conversation.\n *\n * @param {V1} version - Version of the resource\n * @param {ParticipantConversationPayload} payload - The instance payload\n * @param {sid} chatServiceSid -\n *          The unique ID of the Conversation Service this conversation belongs to.\n */\n\n/* jshint ignore:end */\n\n\nParticipantConversationInstance = function ParticipantConversationInstance(version, payload, chatServiceSid) {\n  this._version = version; // Marshaled Properties\n\n  this.accountSid = payload.account_sid; // jshint ignore:line\n\n  this.chatServiceSid = payload.chat_service_sid; // jshint ignore:line\n\n  this.participantSid = payload.participant_sid; // jshint ignore:line\n\n  this.participantUserSid = payload.participant_user_sid; // jshint ignore:line\n\n  this.participantIdentity = payload.participant_identity; // jshint ignore:line\n\n  this.participantMessagingBinding = payload.participant_messaging_binding; // jshint ignore:line\n\n  this.conversationSid = payload.conversation_sid; // jshint ignore:line\n\n  this.conversationUniqueName = payload.conversation_unique_name; // jshint ignore:line\n\n  this.conversationFriendlyName = payload.conversation_friendly_name; // jshint ignore:line\n\n  this.conversationAttributes = payload.conversation_attributes; // jshint ignore:line\n\n  this.conversationDateCreated = deserialize.iso8601DateTime(payload.conversation_date_created); // jshint ignore:line\n\n  this.conversationDateUpdated = deserialize.iso8601DateTime(payload.conversation_date_updated); // jshint ignore:line\n\n  this.conversationCreatedBy = payload.conversation_created_by; // jshint ignore:line\n\n  this.conversationState = payload.conversation_state; // jshint ignore:line\n\n  this.conversationTimers = payload.conversation_timers; // jshint ignore:line\n\n  this.links = payload.links; // jshint ignore:line\n  // Context\n\n  this._context = undefined;\n  this._solution = {\n    chatServiceSid: chatServiceSid\n  };\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Conversations.V1.ServiceContext.ParticipantConversationInstance#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nParticipantConversationInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nParticipantConversationInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  ParticipantConversationList: ParticipantConversationList,\n  ParticipantConversationPage: ParticipantConversationPage,\n  ParticipantConversationInstance: ParticipantConversationInstance\n};","map":{"version":3,"sources":["/Users/tony_niu/Visual Studio/Twilio/twilio-video-starter-kit/node_modules/twilio/lib/rest/conversations/v1/service/participantConversation.js"],"names":["Q","require","_","util","Page","deserialize","values","ParticipantConversationList","ParticipantConversationPage","ParticipantConversationInstance","version","chatServiceSid","ParticipantConversationListInstance","sid","get","_version","_solution","_uri","each","opts","callback","isFunction","isUndefined","Error","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","error","fetchNextPage","fn","promise","then","page","instances","instance","bind","nextPage","catch","merge","list","deferred","defer","allResources","resource","push","length","resolve","reject","nodeify","data","of","pageToken","pageNumber","uri","method","params","payload","getPage","targetUrl","_domain","twilio","request","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","accountSid","account_sid","chat_service_sid","participantSid","participant_sid","participantUserSid","participant_user_sid","participantIdentity","participant_identity","participantMessagingBinding","participant_messaging_binding","conversationSid","conversation_sid","conversationUniqueName","conversation_unique_name","conversationFriendlyName","conversation_friendly_name","conversationAttributes","conversation_attributes","conversationDateCreated","iso8601DateTime","conversation_date_created","conversationDateUpdated","conversation_date_updated","conversationCreatedBy","conversation_created_by","conversationState","conversation_state","conversationTimers","conversation_timers","links","_context","undefined","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar Page = require('../../../../base/Page');  /* jshint ignore:line */\nvar deserialize = require(\n    '../../../../base/deserialize');  /* jshint ignore:line */\nvar values = require('../../../../base/values');  /* jshint ignore:line */\n\nvar ParticipantConversationList;\nvar ParticipantConversationPage;\nvar ParticipantConversationInstance;\n\n/* jshint ignore:start */\n/**\n * Initialize the ParticipantConversationList\n *\n * @constructor Twilio.Conversations.V1.ServiceContext.ParticipantConversationList\n *\n * @param {Twilio.Conversations.V1} version - Version of the resource\n * @param {string} chatServiceSid -\n *          The unique ID of the Conversation Service this conversation belongs to.\n */\n/* jshint ignore:end */\nParticipantConversationList = function ParticipantConversationList(version,\n    chatServiceSid) {\n  /* jshint ignore:start */\n  /**\n   * @function participantConversations\n   * @memberof Twilio.Conversations.V1.ServiceContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Conversations.V1.ServiceContext.ParticipantConversationContext}\n   */\n  /* jshint ignore:end */\n  function ParticipantConversationListInstance(sid) {\n    return ParticipantConversationListInstance.get(sid);\n  }\n\n  ParticipantConversationListInstance._version = version;\n  // Path Solution\n  ParticipantConversationListInstance._solution = {chatServiceSid: chatServiceSid};\n  ParticipantConversationListInstance._uri = `/Services/${chatServiceSid}/ParticipantConversations`;\n  /* jshint ignore:start */\n  /**\n   * Streams ParticipantConversationInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Conversations.V1.ServiceContext.ParticipantConversationList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.identity] -\n   *          A unique string identifier for the conversation participant as Conversation User.\n   * @param {string} [opts.address] -\n   *          A unique string identifier for the conversation participant who's not a Conversation User.\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  ParticipantConversationListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists ParticipantConversationInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Conversations.V1.ServiceContext.ParticipantConversationList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.identity] -\n   *          A unique string identifier for the conversation participant as Conversation User.\n   * @param {string} [opts.address] -\n   *          A unique string identifier for the conversation participant who's not a Conversation User.\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  ParticipantConversationListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of ParticipantConversationInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Conversations.V1.ServiceContext.ParticipantConversationList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.identity] -\n   *          A unique string identifier for the conversation participant as Conversation User.\n   * @param {string} [opts.address] -\n   *          A unique string identifier for the conversation participant who's not a Conversation User.\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  ParticipantConversationListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'Identity': _.get(opts, 'identity'),\n      'Address': _.get(opts, 'address'),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new ParticipantConversationPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of ParticipantConversationInstance records from\n   * the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Conversations.V1.ServiceContext.ParticipantConversationList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  ParticipantConversationListInstance.getPage = function getPage(targetUrl,\n      callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new ParticipantConversationPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Conversations.V1.ServiceContext.ParticipantConversationList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  ParticipantConversationListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  ParticipantConversationListInstance[util.inspect.custom] = function\n      inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return ParticipantConversationListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the ParticipantConversationPage\n *\n * @constructor Twilio.Conversations.V1.ServiceContext.ParticipantConversationPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {ParticipantConversationSolution} solution - Path solution\n *\n * @returns ParticipantConversationPage\n */\n/* jshint ignore:end */\nParticipantConversationPage = function ParticipantConversationPage(version,\n    response, solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(ParticipantConversationPage.prototype, Page.prototype);\nParticipantConversationPage.prototype.constructor = ParticipantConversationPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of ParticipantConversationInstance\n *\n * @function getInstance\n * @memberof Twilio.Conversations.V1.ServiceContext.ParticipantConversationPage#\n *\n * @param {ParticipantConversationPayload} payload - Payload response from the API\n *\n * @returns ParticipantConversationInstance\n */\n/* jshint ignore:end */\nParticipantConversationPage.prototype.getInstance = function\n    getInstance(payload) {\n  return new ParticipantConversationInstance(this._version, payload, this._solution.chatServiceSid);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Conversations.V1.ServiceContext.ParticipantConversationPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nParticipantConversationPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nParticipantConversationPage.prototype[util.inspect.custom] = function\n    inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the ParticipantConversationContext\n *\n * @constructor Twilio.Conversations.V1.ServiceContext.ParticipantConversationInstance\n *\n * @property {string} accountSid -\n *          The unique ID of the Account responsible for this conversation.\n * @property {string} chatServiceSid -\n *          The unique ID of the Conversation Service this conversation belongs to.\n * @property {string} participantSid - The unique ID of the Participant.\n * @property {string} participantUserSid -\n *          The unique ID for the conversation participant as Conversation User.\n * @property {string} participantIdentity -\n *          A unique string identifier for the conversation participant as Conversation User.\n * @property {object} participantMessagingBinding -\n *          Information about how this participant exchanges messages with the conversation.\n * @property {string} conversationSid -\n *          The unique ID of the Conversation this Participant belongs to.\n * @property {string} conversationUniqueName -\n *          An application-defined string that uniquely identifies the Conversation resource.\n * @property {string} conversationFriendlyName -\n *          The human-readable name of this conversation.\n * @property {string} conversationAttributes -\n *          An optional string metadata field you can use to store any data you wish.\n * @property {Date} conversationDateCreated -\n *          The date that this conversation was created.\n * @property {Date} conversationDateUpdated -\n *          The date that this conversation was last updated.\n * @property {string} conversationCreatedBy - Creator of this conversation.\n * @property {participant_conversation.state} conversationState -\n *          The current state of this User Conversation\n * @property {object} conversationTimers - Timer date values for this conversation.\n * @property {string} links -\n *          Absolute URLs to access the participant and conversation of this Participant Conversation.\n *\n * @param {V1} version - Version of the resource\n * @param {ParticipantConversationPayload} payload - The instance payload\n * @param {sid} chatServiceSid -\n *          The unique ID of the Conversation Service this conversation belongs to.\n */\n/* jshint ignore:end */\nParticipantConversationInstance = function\n    ParticipantConversationInstance(version, payload, chatServiceSid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.chatServiceSid = payload.chat_service_sid; // jshint ignore:line\n  this.participantSid = payload.participant_sid; // jshint ignore:line\n  this.participantUserSid = payload.participant_user_sid; // jshint ignore:line\n  this.participantIdentity = payload.participant_identity; // jshint ignore:line\n  this.participantMessagingBinding = payload.participant_messaging_binding; // jshint ignore:line\n  this.conversationSid = payload.conversation_sid; // jshint ignore:line\n  this.conversationUniqueName = payload.conversation_unique_name; // jshint ignore:line\n  this.conversationFriendlyName = payload.conversation_friendly_name; // jshint ignore:line\n  this.conversationAttributes = payload.conversation_attributes; // jshint ignore:line\n  this.conversationDateCreated = deserialize.iso8601DateTime(payload.conversation_date_created); // jshint ignore:line\n  this.conversationDateUpdated = deserialize.iso8601DateTime(payload.conversation_date_updated); // jshint ignore:line\n  this.conversationCreatedBy = payload.conversation_created_by; // jshint ignore:line\n  this.conversationState = payload.conversation_state; // jshint ignore:line\n  this.conversationTimers = payload.conversation_timers; // jshint ignore:line\n  this.links = payload.links; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {chatServiceSid: chatServiceSid, };\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Conversations.V1.ServiceContext.ParticipantConversationInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nParticipantConversationInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nParticipantConversationInstance.prototype[util.inspect.custom] = function\n    inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  ParticipantConversationList: ParticipantConversationList,\n  ParticipantConversationPage: ParticipantConversationPage,\n  ParticipantConversationInstance: ParticipantConversationInstance\n};\n"]},"metadata":{},"sourceType":"script"}