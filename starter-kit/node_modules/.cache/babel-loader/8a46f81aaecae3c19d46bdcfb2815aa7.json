{"ast":null,"code":"'use strict';\n/* jshint ignore:start */\n\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n\n/* jshint ignore:end */\n\nvar Q = require('q');\n/* jshint ignore:line */\n\n\nvar _ = require('lodash');\n/* jshint ignore:line */\n\n\nvar util = require('util');\n/* jshint ignore:line */\n\n\nvar Page = require('../../../../../base/Page');\n/* jshint ignore:line */\n\n\nvar deserialize = require('../../../../../base/deserialize');\n/* jshint ignore:line */\n\n\nvar values = require('../../../../../base/values');\n/* jshint ignore:line */\n\n\nvar FieldValueList;\nvar FieldValuePage;\nvar FieldValueInstance;\nvar FieldValueContext;\n/* jshint ignore:start */\n\n/**\n * Initialize the FieldValueList\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Autopilot.V1.AssistantContext.FieldTypeContext.FieldValueList\n *\n * @param {Twilio.Autopilot.V1} version - Version of the resource\n * @param {string} assistantSid -\n *          The SID of the Assistant that is the parent of the FieldType associated with the resource\n * @param {string} fieldTypeSid -\n *          The SID of the Field Type associated with the Field Value\n */\n\n/* jshint ignore:end */\n\nFieldValueList = function FieldValueList(version, assistantSid, fieldTypeSid) {\n  /* jshint ignore:start */\n\n  /**\n   * @function fieldValues\n   * @memberof Twilio.Autopilot.V1.AssistantContext.FieldTypeContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Autopilot.V1.AssistantContext.FieldTypeContext.FieldValueContext}\n   */\n\n  /* jshint ignore:end */\n  function FieldValueListInstance(sid) {\n    return FieldValueListInstance.get(sid);\n  }\n\n  FieldValueListInstance._version = version; // Path Solution\n\n  FieldValueListInstance._solution = {\n    assistantSid: assistantSid,\n    fieldTypeSid: fieldTypeSid\n  };\n  FieldValueListInstance._uri = `/Assistants/${assistantSid}/FieldTypes/${fieldTypeSid}/FieldValues`;\n  /* jshint ignore:start */\n\n  /**\n   * Streams FieldValueInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Autopilot.V1.AssistantContext.FieldTypeContext.FieldValueList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.language] -\n   *          The ISO language-country tag that identifies the language of the value\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n\n  /* jshint ignore:end */\n\n  FieldValueListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Lists FieldValueInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Autopilot.V1.AssistantContext.FieldTypeContext.FieldValueList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.language] -\n   *          The ISO language-country tag that identifies the language of the value\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  FieldValueListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single page of FieldValueInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Autopilot.V1.AssistantContext.FieldTypeContext.FieldValueList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.language] -\n   *          The ISO language-country tag that identifies the language of the value\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  FieldValueListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'Language': _.get(opts, 'language'),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new FieldValuePage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single target page of FieldValueInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Autopilot.V1.AssistantContext.FieldTypeContext.FieldValueList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  FieldValueListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new FieldValuePage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * create a FieldValueInstance\n   *\n   * @function create\n   * @memberof Twilio.Autopilot.V1.AssistantContext.FieldTypeContext.FieldValueList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.language -\n   *          The ISO language-country tag that identifies the language of the value\n   * @param {string} opts.value - The Field Value data\n   * @param {string} [opts.synonymOf] -\n   *          The string value that indicates which word the field value is a synonym of\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed FieldValueInstance\n   */\n\n  /* jshint ignore:end */\n\n\n  FieldValueListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n\n    if (_.isUndefined(opts.language)) {\n      throw new Error('Required parameter \"opts.language\" missing.');\n    }\n\n    if (_.isUndefined(opts.value)) {\n      throw new Error('Required parameter \"opts.value\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'Language': _.get(opts, 'language'),\n      'Value': _.get(opts, 'value'),\n      'SynonymOf': _.get(opts, 'synonymOf')\n    });\n\n    var promise = this._version.create({\n      uri: this._uri,\n      method: 'POST',\n      data: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new FieldValueInstance(this._version, payload, this._solution.assistantSid, this._solution.fieldTypeSid, this._solution.sid));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Constructs a field_value\n   *\n   * @function get\n   * @memberof Twilio.Autopilot.V1.AssistantContext.FieldTypeContext.FieldValueList#\n   *\n   * @param {string} sid - The unique string that identifies the resource\n   *\n   * @returns {Twilio.Autopilot.V1.AssistantContext.FieldTypeContext.FieldValueContext}\n   */\n\n  /* jshint ignore:end */\n\n\n  FieldValueListInstance.get = function get(sid) {\n    return new FieldValueContext(this._version, this._solution.assistantSid, this._solution.fieldTypeSid, sid);\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Autopilot.V1.AssistantContext.FieldTypeContext.FieldValueList#\n   *\n   * @returns Object\n   */\n\n  /* jshint ignore:end */\n\n\n  FieldValueListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  FieldValueListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return FieldValueListInstance;\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the FieldValuePage\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Autopilot.V1.AssistantContext.FieldTypeContext.FieldValuePage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {FieldValueSolution} solution - Path solution\n *\n * @returns FieldValuePage\n */\n\n/* jshint ignore:end */\n\n\nFieldValuePage = function FieldValuePage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(FieldValuePage.prototype, Page.prototype);\n\nFieldValuePage.prototype.constructor = FieldValuePage;\n/* jshint ignore:start */\n\n/**\n * Build an instance of FieldValueInstance\n *\n * @function getInstance\n * @memberof Twilio.Autopilot.V1.AssistantContext.FieldTypeContext.FieldValuePage#\n *\n * @param {FieldValuePayload} payload - Payload response from the API\n *\n * @returns FieldValueInstance\n */\n\n/* jshint ignore:end */\n\nFieldValuePage.prototype.getInstance = function getInstance(payload) {\n  return new FieldValueInstance(this._version, payload, this._solution.assistantSid, this._solution.fieldTypeSid);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Autopilot.V1.AssistantContext.FieldTypeContext.FieldValuePage#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nFieldValuePage.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nFieldValuePage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the FieldValueContext\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Autopilot.V1.AssistantContext.FieldTypeContext.FieldValueInstance\n *\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {Date} dateCreated -\n *          The RFC 2822 date and time in GMT when the resource was created\n * @property {Date} dateUpdated -\n *          The RFC 2822 date and time in GMT when the resource was last updated\n * @property {string} fieldTypeSid -\n *          The SID of the Field Type associated with the Field Value\n * @property {string} language -\n *          The ISO language-country tag that identifies the language of the value\n * @property {string} assistantSid -\n *          The SID of the Assistant that is the parent of the FieldType associated with the resource\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} value - The Field Value data\n * @property {string} url - The absolute URL of the FieldValue resource\n * @property {string} synonymOf -\n *          The word for which the field value is a synonym of\n *\n * @param {V1} version - Version of the resource\n * @param {FieldValuePayload} payload - The instance payload\n * @param {sid} assistantSid -\n *          The SID of the Assistant that is the parent of the FieldType associated with the resource\n * @param {sid} fieldTypeSid -\n *          The SID of the Field Type associated with the Field Value\n * @param {sid_like} sid - The unique string that identifies the resource\n */\n\n/* jshint ignore:end */\n\n\nFieldValueInstance = function FieldValueInstance(version, payload, assistantSid, fieldTypeSid, sid) {\n  this._version = version; // Marshaled Properties\n\n  this.accountSid = payload.account_sid; // jshint ignore:line\n\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n\n  this.fieldTypeSid = payload.field_type_sid; // jshint ignore:line\n\n  this.language = payload.language; // jshint ignore:line\n\n  this.assistantSid = payload.assistant_sid; // jshint ignore:line\n\n  this.sid = payload.sid; // jshint ignore:line\n\n  this.value = payload.value; // jshint ignore:line\n\n  this.url = payload.url; // jshint ignore:line\n\n  this.synonymOf = payload.synonym_of; // jshint ignore:line\n  // Context\n\n  this._context = undefined;\n  this._solution = {\n    assistantSid: assistantSid,\n    fieldTypeSid: fieldTypeSid,\n    sid: sid || this.sid\n  };\n};\n\nObject.defineProperty(FieldValueInstance.prototype, '_proxy', {\n  get: function () {\n    if (!this._context) {\n      this._context = new FieldValueContext(this._version, this._solution.assistantSid, this._solution.fieldTypeSid, this._solution.sid);\n    }\n\n    return this._context;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * fetch a FieldValueInstance\n *\n * @function fetch\n * @memberof Twilio.Autopilot.V1.AssistantContext.FieldTypeContext.FieldValueInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed FieldValueInstance\n */\n\n/* jshint ignore:end */\n\nFieldValueInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n/* jshint ignore:start */\n\n/**\n * remove a FieldValueInstance\n *\n * @function remove\n * @memberof Twilio.Autopilot.V1.AssistantContext.FieldTypeContext.FieldValueInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed FieldValueInstance\n */\n\n/* jshint ignore:end */\n\n\nFieldValueInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Autopilot.V1.AssistantContext.FieldTypeContext.FieldValueInstance#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nFieldValueInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nFieldValueInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the FieldValueContext\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Autopilot.V1.AssistantContext.FieldTypeContext.FieldValueContext\n *\n * @param {V1} version - Version of the resource\n * @param {sid_like} assistantSid -\n *          The SID of the Assistant that is the parent of the FieldType associated with the resource to fetch\n * @param {sid_like} fieldTypeSid -\n *          The SID of the Field Type associated with  the Field Value to fetch\n * @param {sid_like} sid - The unique string that identifies the resource\n */\n\n/* jshint ignore:end */\n\n\nFieldValueContext = function FieldValueContext(version, assistantSid, fieldTypeSid, sid) {\n  this._version = version; // Path Solution\n\n  this._solution = {\n    assistantSid: assistantSid,\n    fieldTypeSid: fieldTypeSid,\n    sid: sid\n  };\n  this._uri = `/Assistants/${assistantSid}/FieldTypes/${fieldTypeSid}/FieldValues/${sid}`;\n};\n/* jshint ignore:start */\n\n/**\n * fetch a FieldValueInstance\n *\n * @function fetch\n * @memberof Twilio.Autopilot.V1.AssistantContext.FieldTypeContext.FieldValueContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed FieldValueInstance\n */\n\n/* jshint ignore:end */\n\n\nFieldValueContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new FieldValueInstance(this._version, payload, this._solution.assistantSid, this._solution.fieldTypeSid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * remove a FieldValueInstance\n *\n * @function remove\n * @memberof Twilio.Autopilot.V1.AssistantContext.FieldTypeContext.FieldValueContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed FieldValueInstance\n */\n\n/* jshint ignore:end */\n\n\nFieldValueContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.remove({\n    uri: this._uri,\n    method: 'DELETE'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Autopilot.V1.AssistantContext.FieldTypeContext.FieldValueContext#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nFieldValueContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nFieldValueContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  FieldValueList: FieldValueList,\n  FieldValuePage: FieldValuePage,\n  FieldValueInstance: FieldValueInstance,\n  FieldValueContext: FieldValueContext\n};","map":{"version":3,"sources":["/Users/tony_niu/Visual Studio/Twilio/twilio-video-starter-kit/src/token-service/node_modules/twilio/lib/rest/autopilot/v1/assistant/fieldType/fieldValue.js"],"names":["Q","require","_","util","Page","deserialize","values","FieldValueList","FieldValuePage","FieldValueInstance","FieldValueContext","version","assistantSid","fieldTypeSid","FieldValueListInstance","sid","get","_version","_solution","_uri","each","opts","callback","isFunction","isUndefined","Error","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","error","fetchNextPage","fn","promise","then","page","instances","instance","bind","nextPage","catch","merge","list","deferred","defer","allResources","resource","push","length","resolve","reject","nodeify","data","of","pageToken","pageNumber","uri","method","params","payload","getPage","targetUrl","_domain","twilio","request","create","language","value","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","key","startsWith","accountSid","account_sid","dateCreated","iso8601DateTime","date_created","dateUpdated","date_updated","field_type_sid","assistant_sid","url","synonymOf","synonym_of","_context","undefined","Object","defineProperty","fetch","_proxy","remove","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar Page = require('../../../../../base/Page');  /* jshint ignore:line */\nvar deserialize = require(\n    '../../../../../base/deserialize');  /* jshint ignore:line */\nvar values = require('../../../../../base/values');  /* jshint ignore:line */\n\nvar FieldValueList;\nvar FieldValuePage;\nvar FieldValueInstance;\nvar FieldValueContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the FieldValueList\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Autopilot.V1.AssistantContext.FieldTypeContext.FieldValueList\n *\n * @param {Twilio.Autopilot.V1} version - Version of the resource\n * @param {string} assistantSid -\n *          The SID of the Assistant that is the parent of the FieldType associated with the resource\n * @param {string} fieldTypeSid -\n *          The SID of the Field Type associated with the Field Value\n */\n/* jshint ignore:end */\nFieldValueList = function FieldValueList(version, assistantSid, fieldTypeSid) {\n  /* jshint ignore:start */\n  /**\n   * @function fieldValues\n   * @memberof Twilio.Autopilot.V1.AssistantContext.FieldTypeContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Autopilot.V1.AssistantContext.FieldTypeContext.FieldValueContext}\n   */\n  /* jshint ignore:end */\n  function FieldValueListInstance(sid) {\n    return FieldValueListInstance.get(sid);\n  }\n\n  FieldValueListInstance._version = version;\n  // Path Solution\n  FieldValueListInstance._solution = {assistantSid: assistantSid, fieldTypeSid: fieldTypeSid};\n  FieldValueListInstance._uri = `/Assistants/${assistantSid}/FieldTypes/${fieldTypeSid}/FieldValues`;\n  /* jshint ignore:start */\n  /**\n   * Streams FieldValueInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Autopilot.V1.AssistantContext.FieldTypeContext.FieldValueList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.language] -\n   *          The ISO language-country tag that identifies the language of the value\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  FieldValueListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists FieldValueInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Autopilot.V1.AssistantContext.FieldTypeContext.FieldValueList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.language] -\n   *          The ISO language-country tag that identifies the language of the value\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  FieldValueListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of FieldValueInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Autopilot.V1.AssistantContext.FieldTypeContext.FieldValueList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.language] -\n   *          The ISO language-country tag that identifies the language of the value\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  FieldValueListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'Language': _.get(opts, 'language'),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new FieldValuePage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of FieldValueInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Autopilot.V1.AssistantContext.FieldTypeContext.FieldValueList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  FieldValueListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new FieldValuePage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * create a FieldValueInstance\n   *\n   * @function create\n   * @memberof Twilio.Autopilot.V1.AssistantContext.FieldTypeContext.FieldValueList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.language -\n   *          The ISO language-country tag that identifies the language of the value\n   * @param {string} opts.value - The Field Value data\n   * @param {string} [opts.synonymOf] -\n   *          The string value that indicates which word the field value is a synonym of\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed FieldValueInstance\n   */\n  /* jshint ignore:end */\n  FieldValueListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n    if (_.isUndefined(opts.language)) {\n      throw new Error('Required parameter \"opts.language\" missing.');\n    }\n    if (_.isUndefined(opts.value)) {\n      throw new Error('Required parameter \"opts.value\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'Language': _.get(opts, 'language'),\n      'Value': _.get(opts, 'value'),\n      'SynonymOf': _.get(opts, 'synonymOf')\n    });\n\n    var promise = this._version.create({uri: this._uri, method: 'POST', data: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new FieldValueInstance(\n        this._version,\n        payload,\n        this._solution.assistantSid,\n        this._solution.fieldTypeSid,\n        this._solution.sid\n      ));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a field_value\n   *\n   * @function get\n   * @memberof Twilio.Autopilot.V1.AssistantContext.FieldTypeContext.FieldValueList#\n   *\n   * @param {string} sid - The unique string that identifies the resource\n   *\n   * @returns {Twilio.Autopilot.V1.AssistantContext.FieldTypeContext.FieldValueContext}\n   */\n  /* jshint ignore:end */\n  FieldValueListInstance.get = function get(sid) {\n    return new FieldValueContext(\n      this._version,\n      this._solution.assistantSid,\n      this._solution.fieldTypeSid,\n      sid\n    );\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Autopilot.V1.AssistantContext.FieldTypeContext.FieldValueList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  FieldValueListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  FieldValueListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return FieldValueListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the FieldValuePage\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Autopilot.V1.AssistantContext.FieldTypeContext.FieldValuePage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {FieldValueSolution} solution - Path solution\n *\n * @returns FieldValuePage\n */\n/* jshint ignore:end */\nFieldValuePage = function FieldValuePage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(FieldValuePage.prototype, Page.prototype);\nFieldValuePage.prototype.constructor = FieldValuePage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of FieldValueInstance\n *\n * @function getInstance\n * @memberof Twilio.Autopilot.V1.AssistantContext.FieldTypeContext.FieldValuePage#\n *\n * @param {FieldValuePayload} payload - Payload response from the API\n *\n * @returns FieldValueInstance\n */\n/* jshint ignore:end */\nFieldValuePage.prototype.getInstance = function getInstance(payload) {\n  return new FieldValueInstance(\n    this._version,\n    payload,\n    this._solution.assistantSid,\n    this._solution.fieldTypeSid\n  );\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Autopilot.V1.AssistantContext.FieldTypeContext.FieldValuePage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nFieldValuePage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nFieldValuePage.prototype[util.inspect.custom] = function inspect(depth, options)\n    {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the FieldValueContext\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Autopilot.V1.AssistantContext.FieldTypeContext.FieldValueInstance\n *\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {Date} dateCreated -\n *          The RFC 2822 date and time in GMT when the resource was created\n * @property {Date} dateUpdated -\n *          The RFC 2822 date and time in GMT when the resource was last updated\n * @property {string} fieldTypeSid -\n *          The SID of the Field Type associated with the Field Value\n * @property {string} language -\n *          The ISO language-country tag that identifies the language of the value\n * @property {string} assistantSid -\n *          The SID of the Assistant that is the parent of the FieldType associated with the resource\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} value - The Field Value data\n * @property {string} url - The absolute URL of the FieldValue resource\n * @property {string} synonymOf -\n *          The word for which the field value is a synonym of\n *\n * @param {V1} version - Version of the resource\n * @param {FieldValuePayload} payload - The instance payload\n * @param {sid} assistantSid -\n *          The SID of the Assistant that is the parent of the FieldType associated with the resource\n * @param {sid} fieldTypeSid -\n *          The SID of the Field Type associated with the Field Value\n * @param {sid_like} sid - The unique string that identifies the resource\n */\n/* jshint ignore:end */\nFieldValueInstance = function FieldValueInstance(version, payload, assistantSid,\n                                                  fieldTypeSid, sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n  this.fieldTypeSid = payload.field_type_sid; // jshint ignore:line\n  this.language = payload.language; // jshint ignore:line\n  this.assistantSid = payload.assistant_sid; // jshint ignore:line\n  this.sid = payload.sid; // jshint ignore:line\n  this.value = payload.value; // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n  this.synonymOf = payload.synonym_of; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {assistantSid: assistantSid, fieldTypeSid: fieldTypeSid, sid: sid || this.sid, };\n};\n\nObject.defineProperty(FieldValueInstance.prototype,\n  '_proxy', {\n    get: function() {\n      if (!this._context) {\n        this._context = new FieldValueContext(\n          this._version,\n          this._solution.assistantSid,\n          this._solution.fieldTypeSid,\n          this._solution.sid\n        );\n      }\n\n      return this._context;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a FieldValueInstance\n *\n * @function fetch\n * @memberof Twilio.Autopilot.V1.AssistantContext.FieldTypeContext.FieldValueInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed FieldValueInstance\n */\n/* jshint ignore:end */\nFieldValueInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * remove a FieldValueInstance\n *\n * @function remove\n * @memberof Twilio.Autopilot.V1.AssistantContext.FieldTypeContext.FieldValueInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed FieldValueInstance\n */\n/* jshint ignore:end */\nFieldValueInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Autopilot.V1.AssistantContext.FieldTypeContext.FieldValueInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nFieldValueInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nFieldValueInstance.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the FieldValueContext\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Autopilot.V1.AssistantContext.FieldTypeContext.FieldValueContext\n *\n * @param {V1} version - Version of the resource\n * @param {sid_like} assistantSid -\n *          The SID of the Assistant that is the parent of the FieldType associated with the resource to fetch\n * @param {sid_like} fieldTypeSid -\n *          The SID of the Field Type associated with  the Field Value to fetch\n * @param {sid_like} sid - The unique string that identifies the resource\n */\n/* jshint ignore:end */\nFieldValueContext = function FieldValueContext(version, assistantSid,\n                                                fieldTypeSid, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {assistantSid: assistantSid, fieldTypeSid: fieldTypeSid, sid: sid, };\n  this._uri = `/Assistants/${assistantSid}/FieldTypes/${fieldTypeSid}/FieldValues/${sid}`;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a FieldValueInstance\n *\n * @function fetch\n * @memberof Twilio.Autopilot.V1.AssistantContext.FieldTypeContext.FieldValueContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed FieldValueInstance\n */\n/* jshint ignore:end */\nFieldValueContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({uri: this._uri, method: 'GET'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new FieldValueInstance(\n      this._version,\n      payload,\n      this._solution.assistantSid,\n      this._solution.fieldTypeSid,\n      this._solution.sid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * remove a FieldValueInstance\n *\n * @function remove\n * @memberof Twilio.Autopilot.V1.AssistantContext.FieldTypeContext.FieldValueContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed FieldValueInstance\n */\n/* jshint ignore:end */\nFieldValueContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.remove({uri: this._uri, method: 'DELETE'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Autopilot.V1.AssistantContext.FieldTypeContext.FieldValueContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nFieldValueContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nFieldValueContext.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  FieldValueList: FieldValueList,\n  FieldValuePage: FieldValuePage,\n  FieldValueInstance: FieldValueInstance,\n  FieldValueContext: FieldValueContext\n};\n"]},"metadata":{},"sourceType":"module"}