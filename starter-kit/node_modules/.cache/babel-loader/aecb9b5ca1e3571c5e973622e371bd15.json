{"ast":null,"code":"'use strict';\n/* jshint ignore:start */\n\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n\n/* jshint ignore:end */\n\nvar Q = require('q');\n/* jshint ignore:line */\n\n\nvar _ = require('lodash');\n/* jshint ignore:line */\n\n\nvar util = require('util');\n/* jshint ignore:line */\n\n\nvar ChallengeList = require('./entity/challenge').ChallengeList;\n\nvar FactorList = require('./entity/factor').FactorList;\n\nvar NewFactorList = require('./entity/newFactor').NewFactorList;\n\nvar Page = require('../../../../base/Page');\n/* jshint ignore:line */\n\n\nvar deserialize = require('../../../../base/deserialize');\n/* jshint ignore:line */\n\n\nvar values = require('../../../../base/values');\n/* jshint ignore:line */\n\n\nvar EntityList;\nvar EntityPage;\nvar EntityInstance;\nvar EntityContext;\n/* jshint ignore:start */\n\n/**\n * Initialize the EntityList\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Verify.V2.ServiceContext.EntityList\n *\n * @param {Twilio.Verify.V2} version - Version of the resource\n * @param {string} serviceSid - Service Sid.\n */\n\n/* jshint ignore:end */\n\nEntityList = function EntityList(version, serviceSid) {\n  /* jshint ignore:start */\n\n  /**\n   * @function entities\n   * @memberof Twilio.Verify.V2.ServiceContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Verify.V2.ServiceContext.EntityContext}\n   */\n\n  /* jshint ignore:end */\n  function EntityListInstance(sid) {\n    return EntityListInstance.get(sid);\n  }\n\n  EntityListInstance._version = version; // Path Solution\n\n  EntityListInstance._solution = {\n    serviceSid: serviceSid\n  };\n  EntityListInstance._uri = `/Services/${serviceSid}/Entities`;\n  /* jshint ignore:start */\n\n  /**\n   * create a EntityInstance\n   *\n   * @function create\n   * @memberof Twilio.Verify.V2.ServiceContext.EntityList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.identity - Unique external identifier of the Entity\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed EntityInstance\n   */\n\n  /* jshint ignore:end */\n\n  EntityListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n\n    if (_.isUndefined(opts.identity)) {\n      throw new Error('Required parameter \"opts.identity\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'Identity': _.get(opts, 'identity')\n    });\n\n    var promise = this._version.create({\n      uri: this._uri,\n      method: 'POST',\n      data: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new EntityInstance(this._version, payload, this._solution.serviceSid, this._solution.identity));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Streams EntityInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Verify.V2.ServiceContext.EntityList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n\n  /* jshint ignore:end */\n\n\n  EntityListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Lists EntityInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Verify.V2.ServiceContext.EntityList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  EntityListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single page of EntityInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Verify.V2.ServiceContext.EntityList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  EntityListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new EntityPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single target page of EntityInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Verify.V2.ServiceContext.EntityList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  EntityListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new EntityPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Constructs a entity\n   *\n   * @function get\n   * @memberof Twilio.Verify.V2.ServiceContext.EntityList#\n   *\n   * @param {string} identity - Unique external identifier of the Entity\n   *\n   * @returns {Twilio.Verify.V2.ServiceContext.EntityContext}\n   */\n\n  /* jshint ignore:end */\n\n\n  EntityListInstance.get = function get(identity) {\n    return new EntityContext(this._version, this._solution.serviceSid, identity);\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Verify.V2.ServiceContext.EntityList#\n   *\n   * @returns Object\n   */\n\n  /* jshint ignore:end */\n\n\n  EntityListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  EntityListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return EntityListInstance;\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the EntityPage\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Verify.V2.ServiceContext.EntityPage\n *\n * @param {V2} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {EntitySolution} solution - Path solution\n *\n * @returns EntityPage\n */\n\n/* jshint ignore:end */\n\n\nEntityPage = function EntityPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(EntityPage.prototype, Page.prototype);\n\nEntityPage.prototype.constructor = EntityPage;\n/* jshint ignore:start */\n\n/**\n * Build an instance of EntityInstance\n *\n * @function getInstance\n * @memberof Twilio.Verify.V2.ServiceContext.EntityPage#\n *\n * @param {EntityPayload} payload - Payload response from the API\n *\n * @returns EntityInstance\n */\n\n/* jshint ignore:end */\n\nEntityPage.prototype.getInstance = function getInstance(payload) {\n  return new EntityInstance(this._version, payload, this._solution.serviceSid);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Verify.V2.ServiceContext.EntityPage#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nEntityPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nEntityPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the EntityContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Verify.V2.ServiceContext.EntityInstance\n *\n * @property {string} sid - A string that uniquely identifies this Entity.\n * @property {string} identity - Unique external identifier of the Entity\n * @property {string} accountSid - Account Sid.\n * @property {string} serviceSid - Service Sid.\n * @property {Date} dateCreated - The date this Entity was created\n * @property {Date} dateUpdated - The date this Entity was updated\n * @property {string} url - The URL of this resource.\n * @property {string} links - Nested resource URLs.\n *\n * @param {V2} version - Version of the resource\n * @param {EntityPayload} payload - The instance payload\n * @param {sid} serviceSid - Service Sid.\n * @param {string} identity - Unique external identifier of the Entity\n */\n\n/* jshint ignore:end */\n\n\nEntityInstance = function EntityInstance(version, payload, serviceSid, identity) {\n  this._version = version; // Marshaled Properties\n\n  this.sid = payload.sid; // jshint ignore:line\n\n  this.identity = payload.identity; // jshint ignore:line\n\n  this.accountSid = payload.account_sid; // jshint ignore:line\n\n  this.serviceSid = payload.service_sid; // jshint ignore:line\n\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n\n  this.url = payload.url; // jshint ignore:line\n\n  this.links = payload.links; // jshint ignore:line\n  // Context\n\n  this._context = undefined;\n  this._solution = {\n    serviceSid: serviceSid,\n    identity: identity || this.identity\n  };\n};\n\nObject.defineProperty(EntityInstance.prototype, '_proxy', {\n  get: function () {\n    if (!this._context) {\n      this._context = new EntityContext(this._version, this._solution.serviceSid, this._solution.identity);\n    }\n\n    return this._context;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * remove a EntityInstance\n *\n * @function remove\n * @memberof Twilio.Verify.V2.ServiceContext.EntityInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed EntityInstance\n */\n\n/* jshint ignore:end */\n\nEntityInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n/* jshint ignore:start */\n\n/**\n * fetch a EntityInstance\n *\n * @function fetch\n * @memberof Twilio.Verify.V2.ServiceContext.EntityInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed EntityInstance\n */\n\n/* jshint ignore:end */\n\n\nEntityInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n/* jshint ignore:start */\n\n/**\n * Access the factors\n *\n * @function factors\n * @memberof Twilio.Verify.V2.ServiceContext.EntityInstance#\n *\n * @returns {Twilio.Verify.V2.ServiceContext.EntityContext.FactorList}\n */\n\n/* jshint ignore:end */\n\n\nEntityInstance.prototype.factors = function factors() {\n  return this._proxy.factors;\n};\n/* jshint ignore:start */\n\n/**\n * Access the newFactors\n *\n * @function newFactors\n * @memberof Twilio.Verify.V2.ServiceContext.EntityInstance#\n *\n * @returns {Twilio.Verify.V2.ServiceContext.EntityContext.NewFactorList}\n */\n\n/* jshint ignore:end */\n\n\nEntityInstance.prototype.newFactors = function newFactors() {\n  return this._proxy.newFactors;\n};\n/* jshint ignore:start */\n\n/**\n * Access the challenges\n *\n * @function challenges\n * @memberof Twilio.Verify.V2.ServiceContext.EntityInstance#\n *\n * @returns {Twilio.Verify.V2.ServiceContext.EntityContext.ChallengeList}\n */\n\n/* jshint ignore:end */\n\n\nEntityInstance.prototype.challenges = function challenges() {\n  return this._proxy.challenges;\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Verify.V2.ServiceContext.EntityInstance#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nEntityInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nEntityInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the EntityContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Verify.V2.ServiceContext.EntityContext\n *\n * @property {Twilio.Verify.V2.ServiceContext.EntityContext.FactorList} factors -\n *          factors resource\n * @property {Twilio.Verify.V2.ServiceContext.EntityContext.NewFactorList} newFactors -\n *          newFactors resource\n * @property {Twilio.Verify.V2.ServiceContext.EntityContext.ChallengeList} challenges -\n *          challenges resource\n *\n * @param {V2} version - Version of the resource\n * @param {sid} serviceSid - Service Sid.\n * @param {string} identity - Unique external identifier of the Entity\n */\n\n/* jshint ignore:end */\n\n\nEntityContext = function EntityContext(version, serviceSid, identity) {\n  this._version = version; // Path Solution\n\n  this._solution = {\n    serviceSid: serviceSid,\n    identity: identity\n  };\n  this._uri = `/Services/${serviceSid}/Entities/${identity}`; // Dependents\n\n  this._factors = undefined;\n  this._newFactors = undefined;\n  this._challenges = undefined;\n};\n/* jshint ignore:start */\n\n/**\n * remove a EntityInstance\n *\n * @function remove\n * @memberof Twilio.Verify.V2.ServiceContext.EntityContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed EntityInstance\n */\n\n/* jshint ignore:end */\n\n\nEntityContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.remove({\n    uri: this._uri,\n    method: 'DELETE'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * fetch a EntityInstance\n *\n * @function fetch\n * @memberof Twilio.Verify.V2.ServiceContext.EntityContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed EntityInstance\n */\n\n/* jshint ignore:end */\n\n\nEntityContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new EntityInstance(this._version, payload, this._solution.serviceSid, this._solution.identity));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\nObject.defineProperty(EntityContext.prototype, 'factors', {\n  get: function () {\n    if (!this._factors) {\n      this._factors = new FactorList(this._version, this._solution.serviceSid, this._solution.identity);\n    }\n\n    return this._factors;\n  }\n});\nObject.defineProperty(EntityContext.prototype, 'newFactors', {\n  get: function () {\n    if (!this._newFactors) {\n      this._newFactors = new NewFactorList(this._version, this._solution.serviceSid, this._solution.identity);\n    }\n\n    return this._newFactors;\n  }\n});\nObject.defineProperty(EntityContext.prototype, 'challenges', {\n  get: function () {\n    if (!this._challenges) {\n      this._challenges = new ChallengeList(this._version, this._solution.serviceSid, this._solution.identity);\n    }\n\n    return this._challenges;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Verify.V2.ServiceContext.EntityContext#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\nEntityContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nEntityContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  EntityList: EntityList,\n  EntityPage: EntityPage,\n  EntityInstance: EntityInstance,\n  EntityContext: EntityContext\n};","map":{"version":3,"sources":["/Users/tony_niu/Visual Studio/Twilio/twilio-video-starter-kit/node_modules/twilio/lib/rest/verify/v2/service/entity.js"],"names":["Q","require","_","util","ChallengeList","FactorList","NewFactorList","Page","deserialize","values","EntityList","EntityPage","EntityInstance","EntityContext","version","serviceSid","EntityListInstance","sid","get","_version","_solution","_uri","create","opts","callback","isUndefined","Error","identity","deferred","defer","data","of","promise","uri","method","then","payload","resolve","bind","catch","error","reject","isFunction","nodeify","each","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","fetchNextPage","fn","page","instances","instance","nextPage","merge","list","allResources","resource","push","length","pageToken","pageNumber","params","getPage","targetUrl","_domain","twilio","request","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","accountSid","account_sid","service_sid","dateCreated","iso8601DateTime","date_created","dateUpdated","date_updated","url","links","_context","undefined","Object","defineProperty","remove","_proxy","fetch","factors","newFactors","challenges","_factors","_newFactors","_challenges","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar ChallengeList = require('./entity/challenge').ChallengeList;\nvar FactorList = require('./entity/factor').FactorList;\nvar NewFactorList = require('./entity/newFactor').NewFactorList;\nvar Page = require('../../../../base/Page');  /* jshint ignore:line */\nvar deserialize = require(\n    '../../../../base/deserialize');  /* jshint ignore:line */\nvar values = require('../../../../base/values');  /* jshint ignore:line */\n\nvar EntityList;\nvar EntityPage;\nvar EntityInstance;\nvar EntityContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the EntityList\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Verify.V2.ServiceContext.EntityList\n *\n * @param {Twilio.Verify.V2} version - Version of the resource\n * @param {string} serviceSid - Service Sid.\n */\n/* jshint ignore:end */\nEntityList = function EntityList(version, serviceSid) {\n  /* jshint ignore:start */\n  /**\n   * @function entities\n   * @memberof Twilio.Verify.V2.ServiceContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Verify.V2.ServiceContext.EntityContext}\n   */\n  /* jshint ignore:end */\n  function EntityListInstance(sid) {\n    return EntityListInstance.get(sid);\n  }\n\n  EntityListInstance._version = version;\n  // Path Solution\n  EntityListInstance._solution = {serviceSid: serviceSid};\n  EntityListInstance._uri = `/Services/${serviceSid}/Entities`;\n  /* jshint ignore:start */\n  /**\n   * create a EntityInstance\n   *\n   * @function create\n   * @memberof Twilio.Verify.V2.ServiceContext.EntityList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.identity - Unique external identifier of the Entity\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed EntityInstance\n   */\n  /* jshint ignore:end */\n  EntityListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n    if (_.isUndefined(opts.identity)) {\n      throw new Error('Required parameter \"opts.identity\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({'Identity': _.get(opts, 'identity')});\n\n    var promise = this._version.create({uri: this._uri, method: 'POST', data: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new EntityInstance(\n        this._version,\n        payload,\n        this._solution.serviceSid,\n        this._solution.identity\n      ));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Streams EntityInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Verify.V2.ServiceContext.EntityList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  EntityListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists EntityInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Verify.V2.ServiceContext.EntityList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  EntityListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of EntityInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Verify.V2.ServiceContext.EntityList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  EntityListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new EntityPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of EntityInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Verify.V2.ServiceContext.EntityList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  EntityListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new EntityPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a entity\n   *\n   * @function get\n   * @memberof Twilio.Verify.V2.ServiceContext.EntityList#\n   *\n   * @param {string} identity - Unique external identifier of the Entity\n   *\n   * @returns {Twilio.Verify.V2.ServiceContext.EntityContext}\n   */\n  /* jshint ignore:end */\n  EntityListInstance.get = function get(identity) {\n    return new EntityContext(this._version, this._solution.serviceSid, identity);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Verify.V2.ServiceContext.EntityList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  EntityListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  EntityListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return EntityListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the EntityPage\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Verify.V2.ServiceContext.EntityPage\n *\n * @param {V2} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {EntitySolution} solution - Path solution\n *\n * @returns EntityPage\n */\n/* jshint ignore:end */\nEntityPage = function EntityPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(EntityPage.prototype, Page.prototype);\nEntityPage.prototype.constructor = EntityPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of EntityInstance\n *\n * @function getInstance\n * @memberof Twilio.Verify.V2.ServiceContext.EntityPage#\n *\n * @param {EntityPayload} payload - Payload response from the API\n *\n * @returns EntityInstance\n */\n/* jshint ignore:end */\nEntityPage.prototype.getInstance = function getInstance(payload) {\n  return new EntityInstance(this._version, payload, this._solution.serviceSid);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Verify.V2.ServiceContext.EntityPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nEntityPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nEntityPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the EntityContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Verify.V2.ServiceContext.EntityInstance\n *\n * @property {string} sid - A string that uniquely identifies this Entity.\n * @property {string} identity - Unique external identifier of the Entity\n * @property {string} accountSid - Account Sid.\n * @property {string} serviceSid - Service Sid.\n * @property {Date} dateCreated - The date this Entity was created\n * @property {Date} dateUpdated - The date this Entity was updated\n * @property {string} url - The URL of this resource.\n * @property {string} links - Nested resource URLs.\n *\n * @param {V2} version - Version of the resource\n * @param {EntityPayload} payload - The instance payload\n * @param {sid} serviceSid - Service Sid.\n * @param {string} identity - Unique external identifier of the Entity\n */\n/* jshint ignore:end */\nEntityInstance = function EntityInstance(version, payload, serviceSid, identity)\n                                          {\n  this._version = version;\n\n  // Marshaled Properties\n  this.sid = payload.sid; // jshint ignore:line\n  this.identity = payload.identity; // jshint ignore:line\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.serviceSid = payload.service_sid; // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n  this.links = payload.links; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {serviceSid: serviceSid, identity: identity || this.identity, };\n};\n\nObject.defineProperty(EntityInstance.prototype,\n  '_proxy', {\n    get: function() {\n      if (!this._context) {\n        this._context = new EntityContext(\n          this._version,\n          this._solution.serviceSid,\n          this._solution.identity\n        );\n      }\n\n      return this._context;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * remove a EntityInstance\n *\n * @function remove\n * @memberof Twilio.Verify.V2.ServiceContext.EntityInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed EntityInstance\n */\n/* jshint ignore:end */\nEntityInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n\n/* jshint ignore:start */\n/**\n * fetch a EntityInstance\n *\n * @function fetch\n * @memberof Twilio.Verify.V2.ServiceContext.EntityInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed EntityInstance\n */\n/* jshint ignore:end */\nEntityInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * Access the factors\n *\n * @function factors\n * @memberof Twilio.Verify.V2.ServiceContext.EntityInstance#\n *\n * @returns {Twilio.Verify.V2.ServiceContext.EntityContext.FactorList}\n */\n/* jshint ignore:end */\nEntityInstance.prototype.factors = function factors() {\n  return this._proxy.factors;\n};\n\n/* jshint ignore:start */\n/**\n * Access the newFactors\n *\n * @function newFactors\n * @memberof Twilio.Verify.V2.ServiceContext.EntityInstance#\n *\n * @returns {Twilio.Verify.V2.ServiceContext.EntityContext.NewFactorList}\n */\n/* jshint ignore:end */\nEntityInstance.prototype.newFactors = function newFactors() {\n  return this._proxy.newFactors;\n};\n\n/* jshint ignore:start */\n/**\n * Access the challenges\n *\n * @function challenges\n * @memberof Twilio.Verify.V2.ServiceContext.EntityInstance#\n *\n * @returns {Twilio.Verify.V2.ServiceContext.EntityContext.ChallengeList}\n */\n/* jshint ignore:end */\nEntityInstance.prototype.challenges = function challenges() {\n  return this._proxy.challenges;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Verify.V2.ServiceContext.EntityInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nEntityInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nEntityInstance.prototype[util.inspect.custom] = function inspect(depth, options)\n    {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the EntityContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Verify.V2.ServiceContext.EntityContext\n *\n * @property {Twilio.Verify.V2.ServiceContext.EntityContext.FactorList} factors -\n *          factors resource\n * @property {Twilio.Verify.V2.ServiceContext.EntityContext.NewFactorList} newFactors -\n *          newFactors resource\n * @property {Twilio.Verify.V2.ServiceContext.EntityContext.ChallengeList} challenges -\n *          challenges resource\n *\n * @param {V2} version - Version of the resource\n * @param {sid} serviceSid - Service Sid.\n * @param {string} identity - Unique external identifier of the Entity\n */\n/* jshint ignore:end */\nEntityContext = function EntityContext(version, serviceSid, identity) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {serviceSid: serviceSid, identity: identity, };\n  this._uri = `/Services/${serviceSid}/Entities/${identity}`;\n\n  // Dependents\n  this._factors = undefined;\n  this._newFactors = undefined;\n  this._challenges = undefined;\n};\n\n/* jshint ignore:start */\n/**\n * remove a EntityInstance\n *\n * @function remove\n * @memberof Twilio.Verify.V2.ServiceContext.EntityContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed EntityInstance\n */\n/* jshint ignore:end */\nEntityContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.remove({uri: this._uri, method: 'DELETE'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a EntityInstance\n *\n * @function fetch\n * @memberof Twilio.Verify.V2.ServiceContext.EntityContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed EntityInstance\n */\n/* jshint ignore:end */\nEntityContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({uri: this._uri, method: 'GET'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new EntityInstance(\n      this._version,\n      payload,\n      this._solution.serviceSid,\n      this._solution.identity\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\nObject.defineProperty(EntityContext.prototype,\n  'factors', {\n    get: function() {\n      if (!this._factors) {\n        this._factors = new FactorList(this._version, this._solution.serviceSid, this._solution.identity);\n      }\n      return this._factors;\n    }\n});\n\nObject.defineProperty(EntityContext.prototype,\n  'newFactors', {\n    get: function() {\n      if (!this._newFactors) {\n        this._newFactors = new NewFactorList(\n          this._version,\n          this._solution.serviceSid,\n          this._solution.identity\n        );\n      }\n      return this._newFactors;\n    }\n});\n\nObject.defineProperty(EntityContext.prototype,\n  'challenges', {\n    get: function() {\n      if (!this._challenges) {\n        this._challenges = new ChallengeList(\n          this._version,\n          this._solution.serviceSid,\n          this._solution.identity\n        );\n      }\n      return this._challenges;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Verify.V2.ServiceContext.EntityContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nEntityContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nEntityContext.prototype[util.inspect.custom] = function inspect(depth, options)\n    {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  EntityList: EntityList,\n  EntityPage: EntityPage,\n  EntityInstance: EntityInstance,\n  EntityContext: EntityContext\n};\n"]},"metadata":{},"sourceType":"script"}