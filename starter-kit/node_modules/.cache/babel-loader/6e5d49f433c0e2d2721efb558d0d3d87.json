{"ast":null,"code":"'use strict';\n/* jshint ignore:start */\n\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n\n/* jshint ignore:end */\n\nvar Q = require('q');\n/* jshint ignore:line */\n\n\nvar _ = require('lodash');\n/* jshint ignore:line */\n\n\nvar util = require('util');\n/* jshint ignore:line */\n\n\nvar AllTimeList = require('./record/allTime').AllTimeList;\n\nvar DailyList = require('./record/daily').DailyList;\n\nvar LastMonthList = require('./record/lastMonth').LastMonthList;\n\nvar MonthlyList = require('./record/monthly').MonthlyList;\n\nvar Page = require('../../../../../base/Page');\n/* jshint ignore:line */\n\n\nvar ThisMonthList = require('./record/thisMonth').ThisMonthList;\n\nvar TodayList = require('./record/today').TodayList;\n\nvar YearlyList = require('./record/yearly').YearlyList;\n\nvar YesterdayList = require('./record/yesterday').YesterdayList;\n\nvar deserialize = require('../../../../../base/deserialize');\n/* jshint ignore:line */\n\n\nvar serialize = require('../../../../../base/serialize');\n/* jshint ignore:line */\n\n\nvar values = require('../../../../../base/values');\n/* jshint ignore:line */\n\n\nvar RecordList;\nvar RecordPage;\nvar RecordInstance;\n/* jshint ignore:start */\n\n/**\n * Initialize the RecordList\n *\n * @constructor Twilio.Api.V2010.AccountContext.UsageContext.RecordList\n *\n * @param {Twilio.Api.V2010} version - Version of the resource\n * @param {string} accountSid -\n *          A 34 character string that uniquely identifies this resource.\n */\n\n/* jshint ignore:end */\n\nRecordList = function RecordList(version, accountSid) {\n  /* jshint ignore:start */\n\n  /**\n   * @function records\n   * @memberof Twilio.Api.V2010.AccountContext.UsageContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Api.V2010.AccountContext.UsageContext.RecordContext}\n   */\n\n  /* jshint ignore:end */\n  function RecordListInstance(sid) {\n    return RecordListInstance.get(sid);\n  }\n\n  RecordListInstance._version = version; // Path Solution\n\n  RecordListInstance._solution = {\n    accountSid: accountSid\n  };\n  RecordListInstance._uri = `/Accounts/${accountSid}/Usage/Records.json`; // Components\n\n  RecordListInstance._allTime = undefined;\n  RecordListInstance._daily = undefined;\n  RecordListInstance._lastMonth = undefined;\n  RecordListInstance._monthly = undefined;\n  RecordListInstance._thisMonth = undefined;\n  RecordListInstance._today = undefined;\n  RecordListInstance._yearly = undefined;\n  RecordListInstance._yesterday = undefined;\n  /* jshint ignore:start */\n\n  /**\n   * Streams RecordInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Api.V2010.AccountContext.UsageContext.RecordList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {record.category} [opts.category] -\n   *          The usage category of the UsageRecord resources to read\n   * @param {Date} [opts.startDate] -\n   *          Only include usage that has occurred on or after this date\n   * @param {Date} [opts.endDate] -\n   *          Only include usage that occurred on or before this date\n   * @param {boolean} [opts.includeSubaccounts] -\n   *          Whether to include usage from the master account and all its subaccounts\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n\n  /* jshint ignore:end */\n\n  RecordListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Lists RecordInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Api.V2010.AccountContext.UsageContext.RecordList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {record.category} [opts.category] -\n   *          The usage category of the UsageRecord resources to read\n   * @param {Date} [opts.startDate] -\n   *          Only include usage that has occurred on or after this date\n   * @param {Date} [opts.endDate] -\n   *          Only include usage that occurred on or before this date\n   * @param {boolean} [opts.includeSubaccounts] -\n   *          Whether to include usage from the master account and all its subaccounts\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  RecordListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single page of RecordInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Api.V2010.AccountContext.UsageContext.RecordList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {record.category} [opts.category] -\n   *          The usage category of the UsageRecord resources to read\n   * @param {Date} [opts.startDate] -\n   *          Only include usage that has occurred on or after this date\n   * @param {Date} [opts.endDate] -\n   *          Only include usage that occurred on or before this date\n   * @param {boolean} [opts.includeSubaccounts] -\n   *          Whether to include usage from the master account and all its subaccounts\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  RecordListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'Category': _.get(opts, 'category'),\n      'StartDate': serialize.iso8601Date(_.get(opts, 'startDate')),\n      'EndDate': serialize.iso8601Date(_.get(opts, 'endDate')),\n      'IncludeSubaccounts': serialize.bool(_.get(opts, 'includeSubaccounts')),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new RecordPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single target page of RecordInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Api.V2010.AccountContext.UsageContext.RecordList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  RecordListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new RecordPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  Object.defineProperty(RecordListInstance, 'allTime', {\n    get: function allTime() {\n      if (!this._allTime) {\n        this._allTime = new AllTimeList(this._version, this._solution.accountSid);\n      }\n\n      return this._allTime;\n    }\n  });\n  Object.defineProperty(RecordListInstance, 'daily', {\n    get: function daily() {\n      if (!this._daily) {\n        this._daily = new DailyList(this._version, this._solution.accountSid);\n      }\n\n      return this._daily;\n    }\n  });\n  Object.defineProperty(RecordListInstance, 'lastMonth', {\n    get: function lastMonth() {\n      if (!this._lastMonth) {\n        this._lastMonth = new LastMonthList(this._version, this._solution.accountSid);\n      }\n\n      return this._lastMonth;\n    }\n  });\n  Object.defineProperty(RecordListInstance, 'monthly', {\n    get: function monthly() {\n      if (!this._monthly) {\n        this._monthly = new MonthlyList(this._version, this._solution.accountSid);\n      }\n\n      return this._monthly;\n    }\n  });\n  Object.defineProperty(RecordListInstance, 'thisMonth', {\n    get: function thisMonth() {\n      if (!this._thisMonth) {\n        this._thisMonth = new ThisMonthList(this._version, this._solution.accountSid);\n      }\n\n      return this._thisMonth;\n    }\n  });\n  Object.defineProperty(RecordListInstance, 'today', {\n    get: function today() {\n      if (!this._today) {\n        this._today = new TodayList(this._version, this._solution.accountSid);\n      }\n\n      return this._today;\n    }\n  });\n  Object.defineProperty(RecordListInstance, 'yearly', {\n    get: function yearly() {\n      if (!this._yearly) {\n        this._yearly = new YearlyList(this._version, this._solution.accountSid);\n      }\n\n      return this._yearly;\n    }\n  });\n  Object.defineProperty(RecordListInstance, 'yesterday', {\n    get: function yesterday() {\n      if (!this._yesterday) {\n        this._yesterday = new YesterdayList(this._version, this._solution.accountSid);\n      }\n\n      return this._yesterday;\n    }\n  });\n  /* jshint ignore:start */\n\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Api.V2010.AccountContext.UsageContext.RecordList#\n   *\n   * @returns Object\n   */\n\n  /* jshint ignore:end */\n\n  RecordListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  RecordListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return RecordListInstance;\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the RecordPage\n *\n * @constructor Twilio.Api.V2010.AccountContext.UsageContext.RecordPage\n *\n * @param {V2010} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {RecordSolution} solution - Path solution\n *\n * @returns RecordPage\n */\n\n/* jshint ignore:end */\n\n\nRecordPage = function RecordPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(RecordPage.prototype, Page.prototype);\n\nRecordPage.prototype.constructor = RecordPage;\n/* jshint ignore:start */\n\n/**\n * Build an instance of RecordInstance\n *\n * @function getInstance\n * @memberof Twilio.Api.V2010.AccountContext.UsageContext.RecordPage#\n *\n * @param {RecordPayload} payload - Payload response from the API\n *\n * @returns RecordInstance\n */\n\n/* jshint ignore:end */\n\nRecordPage.prototype.getInstance = function getInstance(payload) {\n  return new RecordInstance(this._version, payload, this._solution.accountSid);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.UsageContext.RecordPage#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nRecordPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nRecordPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the RecordContext\n *\n * @constructor Twilio.Api.V2010.AccountContext.UsageContext.RecordInstance\n *\n * @property {string} accountSid - The SID of the Account accrued the usage\n * @property {string} apiVersion - The API version used to create the resource\n * @property {string} asOf - Usage records up to date as of this timestamp\n * @property {record.category} category - The category of usage\n * @property {string} count - The number of usage events\n * @property {string} countUnit - The units in which count is measured\n * @property {string} description -\n *          A plain-language description of the usage category\n * @property {Date} endDate -\n *          The last date for which usage is included in the UsageRecord\n * @property {number} price - The total price of the usage\n * @property {string} priceUnit - The currency in which `price` is measured\n * @property {Date} startDate -\n *          The first date for which usage is included in this UsageRecord\n * @property {string} subresourceUris -\n *          A list of related resources identified by their relative URIs\n * @property {string} uri -\n *          The URI of the resource, relative to `https://api.twilio.com`\n * @property {string} usage - The amount of usage\n * @property {string} usageUnit - The units in which usage is measured\n *\n * @param {V2010} version - Version of the resource\n * @param {RecordPayload} payload - The instance payload\n * @param {sid} accountSid -\n *          A 34 character string that uniquely identifies this resource.\n */\n\n/* jshint ignore:end */\n\n\nRecordInstance = function RecordInstance(version, payload, accountSid) {\n  this._version = version; // Marshaled Properties\n\n  this.accountSid = payload.account_sid; // jshint ignore:line\n\n  this.apiVersion = payload.api_version; // jshint ignore:line\n\n  this.asOf = payload.as_of; // jshint ignore:line\n\n  this.category = payload.category; // jshint ignore:line\n\n  this.count = payload.count; // jshint ignore:line\n\n  this.countUnit = payload.count_unit; // jshint ignore:line\n\n  this.description = payload.description; // jshint ignore:line\n\n  this.endDate = deserialize.iso8601Date(payload.end_date); // jshint ignore:line\n\n  this.price = deserialize.decimal(payload.price); // jshint ignore:line\n\n  this.priceUnit = payload.price_unit; // jshint ignore:line\n\n  this.startDate = deserialize.iso8601Date(payload.start_date); // jshint ignore:line\n\n  this.subresourceUris = payload.subresource_uris; // jshint ignore:line\n\n  this.uri = payload.uri; // jshint ignore:line\n\n  this.usage = payload.usage; // jshint ignore:line\n\n  this.usageUnit = payload.usage_unit; // jshint ignore:line\n  // Context\n\n  this._context = undefined;\n  this._solution = {\n    accountSid: accountSid\n  };\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.UsageContext.RecordInstance#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nRecordInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nRecordInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  RecordList: RecordList,\n  RecordPage: RecordPage,\n  RecordInstance: RecordInstance\n};","map":{"version":3,"sources":["/Users/tony_niu/Visual Studio/Twilio/twilio-video-starter-kit/src/token-service/node_modules/twilio/lib/rest/api/v2010/account/usage/record.js"],"names":["Q","require","_","util","AllTimeList","DailyList","LastMonthList","MonthlyList","Page","ThisMonthList","TodayList","YearlyList","YesterdayList","deserialize","serialize","values","RecordList","RecordPage","RecordInstance","version","accountSid","RecordListInstance","sid","get","_version","_solution","_uri","_allTime","undefined","_daily","_lastMonth","_monthly","_thisMonth","_today","_yearly","_yesterday","each","opts","callback","isFunction","isUndefined","Error","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","error","fetchNextPage","fn","promise","then","page","instances","instance","bind","nextPage","catch","merge","list","deferred","defer","allResources","resource","push","length","resolve","reject","nodeify","data","of","iso8601Date","bool","pageToken","pageNumber","uri","method","params","payload","getPage","targetUrl","_domain","twilio","request","Object","defineProperty","allTime","daily","lastMonth","monthly","thisMonth","today","yearly","yesterday","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","account_sid","apiVersion","api_version","asOf","as_of","category","count","countUnit","count_unit","description","endDate","end_date","price","decimal","priceUnit","price_unit","startDate","start_date","subresourceUris","subresource_uris","usage","usageUnit","usage_unit","_context","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar AllTimeList = require('./record/allTime').AllTimeList;\nvar DailyList = require('./record/daily').DailyList;\nvar LastMonthList = require('./record/lastMonth').LastMonthList;\nvar MonthlyList = require('./record/monthly').MonthlyList;\nvar Page = require('../../../../../base/Page');  /* jshint ignore:line */\nvar ThisMonthList = require('./record/thisMonth').ThisMonthList;\nvar TodayList = require('./record/today').TodayList;\nvar YearlyList = require('./record/yearly').YearlyList;\nvar YesterdayList = require('./record/yesterday').YesterdayList;\nvar deserialize = require(\n    '../../../../../base/deserialize');  /* jshint ignore:line */\nvar serialize = require(\n    '../../../../../base/serialize');  /* jshint ignore:line */\nvar values = require('../../../../../base/values');  /* jshint ignore:line */\n\nvar RecordList;\nvar RecordPage;\nvar RecordInstance;\n\n/* jshint ignore:start */\n/**\n * Initialize the RecordList\n *\n * @constructor Twilio.Api.V2010.AccountContext.UsageContext.RecordList\n *\n * @param {Twilio.Api.V2010} version - Version of the resource\n * @param {string} accountSid -\n *          A 34 character string that uniquely identifies this resource.\n */\n/* jshint ignore:end */\nRecordList = function RecordList(version, accountSid) {\n  /* jshint ignore:start */\n  /**\n   * @function records\n   * @memberof Twilio.Api.V2010.AccountContext.UsageContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Api.V2010.AccountContext.UsageContext.RecordContext}\n   */\n  /* jshint ignore:end */\n  function RecordListInstance(sid) {\n    return RecordListInstance.get(sid);\n  }\n\n  RecordListInstance._version = version;\n  // Path Solution\n  RecordListInstance._solution = {accountSid: accountSid};\n  RecordListInstance._uri = `/Accounts/${accountSid}/Usage/Records.json`;\n\n  // Components\n  RecordListInstance._allTime = undefined;\n  RecordListInstance._daily = undefined;\n  RecordListInstance._lastMonth = undefined;\n  RecordListInstance._monthly = undefined;\n  RecordListInstance._thisMonth = undefined;\n  RecordListInstance._today = undefined;\n  RecordListInstance._yearly = undefined;\n  RecordListInstance._yesterday = undefined;\n\n  /* jshint ignore:start */\n  /**\n   * Streams RecordInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Api.V2010.AccountContext.UsageContext.RecordList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {record.category} [opts.category] -\n   *          The usage category of the UsageRecord resources to read\n   * @param {Date} [opts.startDate] -\n   *          Only include usage that has occurred on or after this date\n   * @param {Date} [opts.endDate] -\n   *          Only include usage that occurred on or before this date\n   * @param {boolean} [opts.includeSubaccounts] -\n   *          Whether to include usage from the master account and all its subaccounts\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  RecordListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists RecordInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Api.V2010.AccountContext.UsageContext.RecordList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {record.category} [opts.category] -\n   *          The usage category of the UsageRecord resources to read\n   * @param {Date} [opts.startDate] -\n   *          Only include usage that has occurred on or after this date\n   * @param {Date} [opts.endDate] -\n   *          Only include usage that occurred on or before this date\n   * @param {boolean} [opts.includeSubaccounts] -\n   *          Whether to include usage from the master account and all its subaccounts\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  RecordListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of RecordInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Api.V2010.AccountContext.UsageContext.RecordList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {record.category} [opts.category] -\n   *          The usage category of the UsageRecord resources to read\n   * @param {Date} [opts.startDate] -\n   *          Only include usage that has occurred on or after this date\n   * @param {Date} [opts.endDate] -\n   *          Only include usage that occurred on or before this date\n   * @param {boolean} [opts.includeSubaccounts] -\n   *          Whether to include usage from the master account and all its subaccounts\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  RecordListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'Category': _.get(opts, 'category'),\n      'StartDate': serialize.iso8601Date(_.get(opts, 'startDate')),\n      'EndDate': serialize.iso8601Date(_.get(opts, 'endDate')),\n      'IncludeSubaccounts': serialize.bool(_.get(opts, 'includeSubaccounts')),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new RecordPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of RecordInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Api.V2010.AccountContext.UsageContext.RecordList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  RecordListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new RecordPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  Object.defineProperty(RecordListInstance,\n    'allTime', {\n      get: function allTime() {\n        if (!this._allTime) {\n          this._allTime = new AllTimeList(this._version, this._solution.accountSid);\n        }\n\n        return this._allTime;\n      }\n  });\n\n  Object.defineProperty(RecordListInstance,\n    'daily', {\n      get: function daily() {\n        if (!this._daily) {\n          this._daily = new DailyList(this._version, this._solution.accountSid);\n        }\n\n        return this._daily;\n      }\n  });\n\n  Object.defineProperty(RecordListInstance,\n    'lastMonth', {\n      get: function lastMonth() {\n        if (!this._lastMonth) {\n          this._lastMonth = new LastMonthList(this._version, this._solution.accountSid);\n        }\n\n        return this._lastMonth;\n      }\n  });\n\n  Object.defineProperty(RecordListInstance,\n    'monthly', {\n      get: function monthly() {\n        if (!this._monthly) {\n          this._monthly = new MonthlyList(this._version, this._solution.accountSid);\n        }\n\n        return this._monthly;\n      }\n  });\n\n  Object.defineProperty(RecordListInstance,\n    'thisMonth', {\n      get: function thisMonth() {\n        if (!this._thisMonth) {\n          this._thisMonth = new ThisMonthList(this._version, this._solution.accountSid);\n        }\n\n        return this._thisMonth;\n      }\n  });\n\n  Object.defineProperty(RecordListInstance,\n    'today', {\n      get: function today() {\n        if (!this._today) {\n          this._today = new TodayList(this._version, this._solution.accountSid);\n        }\n\n        return this._today;\n      }\n  });\n\n  Object.defineProperty(RecordListInstance,\n    'yearly', {\n      get: function yearly() {\n        if (!this._yearly) {\n          this._yearly = new YearlyList(this._version, this._solution.accountSid);\n        }\n\n        return this._yearly;\n      }\n  });\n\n  Object.defineProperty(RecordListInstance,\n    'yesterday', {\n      get: function yesterday() {\n        if (!this._yesterday) {\n          this._yesterday = new YesterdayList(this._version, this._solution.accountSid);\n        }\n\n        return this._yesterday;\n      }\n  });\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Api.V2010.AccountContext.UsageContext.RecordList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  RecordListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  RecordListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return RecordListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the RecordPage\n *\n * @constructor Twilio.Api.V2010.AccountContext.UsageContext.RecordPage\n *\n * @param {V2010} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {RecordSolution} solution - Path solution\n *\n * @returns RecordPage\n */\n/* jshint ignore:end */\nRecordPage = function RecordPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(RecordPage.prototype, Page.prototype);\nRecordPage.prototype.constructor = RecordPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of RecordInstance\n *\n * @function getInstance\n * @memberof Twilio.Api.V2010.AccountContext.UsageContext.RecordPage#\n *\n * @param {RecordPayload} payload - Payload response from the API\n *\n * @returns RecordInstance\n */\n/* jshint ignore:end */\nRecordPage.prototype.getInstance = function getInstance(payload) {\n  return new RecordInstance(this._version, payload, this._solution.accountSid);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.UsageContext.RecordPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nRecordPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nRecordPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the RecordContext\n *\n * @constructor Twilio.Api.V2010.AccountContext.UsageContext.RecordInstance\n *\n * @property {string} accountSid - The SID of the Account accrued the usage\n * @property {string} apiVersion - The API version used to create the resource\n * @property {string} asOf - Usage records up to date as of this timestamp\n * @property {record.category} category - The category of usage\n * @property {string} count - The number of usage events\n * @property {string} countUnit - The units in which count is measured\n * @property {string} description -\n *          A plain-language description of the usage category\n * @property {Date} endDate -\n *          The last date for which usage is included in the UsageRecord\n * @property {number} price - The total price of the usage\n * @property {string} priceUnit - The currency in which `price` is measured\n * @property {Date} startDate -\n *          The first date for which usage is included in this UsageRecord\n * @property {string} subresourceUris -\n *          A list of related resources identified by their relative URIs\n * @property {string} uri -\n *          The URI of the resource, relative to `https://api.twilio.com`\n * @property {string} usage - The amount of usage\n * @property {string} usageUnit - The units in which usage is measured\n *\n * @param {V2010} version - Version of the resource\n * @param {RecordPayload} payload - The instance payload\n * @param {sid} accountSid -\n *          A 34 character string that uniquely identifies this resource.\n */\n/* jshint ignore:end */\nRecordInstance = function RecordInstance(version, payload, accountSid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.apiVersion = payload.api_version; // jshint ignore:line\n  this.asOf = payload.as_of; // jshint ignore:line\n  this.category = payload.category; // jshint ignore:line\n  this.count = payload.count; // jshint ignore:line\n  this.countUnit = payload.count_unit; // jshint ignore:line\n  this.description = payload.description; // jshint ignore:line\n  this.endDate = deserialize.iso8601Date(payload.end_date); // jshint ignore:line\n  this.price = deserialize.decimal(payload.price); // jshint ignore:line\n  this.priceUnit = payload.price_unit; // jshint ignore:line\n  this.startDate = deserialize.iso8601Date(payload.start_date); // jshint ignore:line\n  this.subresourceUris = payload.subresource_uris; // jshint ignore:line\n  this.uri = payload.uri; // jshint ignore:line\n  this.usage = payload.usage; // jshint ignore:line\n  this.usageUnit = payload.usage_unit; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {accountSid: accountSid, };\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.UsageContext.RecordInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nRecordInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nRecordInstance.prototype[util.inspect.custom] = function inspect(depth, options)\n    {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  RecordList: RecordList,\n  RecordPage: RecordPage,\n  RecordInstance: RecordInstance\n};\n"]},"metadata":{},"sourceType":"module"}