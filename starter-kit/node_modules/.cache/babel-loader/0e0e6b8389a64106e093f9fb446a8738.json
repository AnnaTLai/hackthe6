{"ast":null,"code":"'use strict';\n/* jshint ignore:start */\n\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n\n/* jshint ignore:end */\n\nvar Q = require('q');\n/* jshint ignore:line */\n\n\nvar _ = require('lodash');\n/* jshint ignore:line */\n\n\nvar util = require('util');\n/* jshint ignore:line */\n\n\nvar Page = require('../../../../../base/Page');\n/* jshint ignore:line */\n\n\nvar serialize = require('../../../../../base/serialize');\n/* jshint ignore:line */\n\n\nvar values = require('../../../../../base/values');\n/* jshint ignore:line */\n\n\nvar NotificationList;\nvar NotificationPage;\nvar NotificationInstance;\nvar NotificationContext;\n/* jshint ignore:start */\n\n/**\n * Initialize the NotificationList\n *\n * @constructor Twilio.Conversations.V1.ServiceContext.ConfigurationContext.NotificationList\n *\n * @param {Twilio.Conversations.V1} version - Version of the resource\n * @param {string} chatServiceSid - The unique string that identifies the resource\n */\n\n/* jshint ignore:end */\n\nNotificationList = function NotificationList(version, chatServiceSid) {\n  /* jshint ignore:start */\n\n  /**\n   * @function notifications\n   * @memberof Twilio.Conversations.V1.ServiceContext.ConfigurationContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Conversations.V1.ServiceContext.ConfigurationContext.NotificationContext}\n   */\n\n  /* jshint ignore:end */\n  function NotificationListInstance(sid) {\n    return NotificationListInstance.get(sid);\n  }\n\n  NotificationListInstance._version = version; // Path Solution\n\n  NotificationListInstance._solution = {\n    chatServiceSid: chatServiceSid\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Constructs a notification\n   *\n   * @function get\n   * @memberof Twilio.Conversations.V1.ServiceContext.ConfigurationContext.NotificationList#\n   *\n   * @returns {Twilio.Conversations.V1.ServiceContext.ConfigurationContext.NotificationContext}\n   */\n\n  /* jshint ignore:end */\n\n  NotificationListInstance.get = function get() {\n    return new NotificationContext(this._version, this._solution.chatServiceSid);\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Conversations.V1.ServiceContext.ConfigurationContext.NotificationList#\n   *\n   * @returns Object\n   */\n\n  /* jshint ignore:end */\n\n\n  NotificationListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  NotificationListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return NotificationListInstance;\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the NotificationPage\n *\n * @constructor Twilio.Conversations.V1.ServiceContext.ConfigurationContext.NotificationPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {NotificationSolution} solution - Path solution\n *\n * @returns NotificationPage\n */\n\n/* jshint ignore:end */\n\n\nNotificationPage = function NotificationPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(NotificationPage.prototype, Page.prototype);\n\nNotificationPage.prototype.constructor = NotificationPage;\n/* jshint ignore:start */\n\n/**\n * Build an instance of NotificationInstance\n *\n * @function getInstance\n * @memberof Twilio.Conversations.V1.ServiceContext.ConfigurationContext.NotificationPage#\n *\n * @param {NotificationPayload} payload - Payload response from the API\n *\n * @returns NotificationInstance\n */\n\n/* jshint ignore:end */\n\nNotificationPage.prototype.getInstance = function getInstance(payload) {\n  return new NotificationInstance(this._version, payload, this._solution.chatServiceSid);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Conversations.V1.ServiceContext.ConfigurationContext.NotificationPage#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nNotificationPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nNotificationPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the NotificationContext\n *\n * @constructor Twilio.Conversations.V1.ServiceContext.ConfigurationContext.NotificationInstance\n *\n * @property {string} accountSid -\n *          The unique ID of the Account responsible for this configuration.\n * @property {string} chatServiceSid -\n *          The SID of the Conversation Service that the Configuration applies to.\n * @property {object} newMessage -\n *          The Push Notification configuration for New Messages.\n * @property {object} addedToConversation -\n *          The Push Notification configuration for being added to a Conversation.\n * @property {object} removedFromConversation -\n *          The Push Notification configuration for being removed from a Conversation.\n * @property {boolean} logEnabled - Weather the notification logging is enabled.\n * @property {string} url - An absolute URL for this configuration.\n *\n * @param {V1} version - Version of the resource\n * @param {NotificationPayload} payload - The instance payload\n * @param {sid} chatServiceSid - The unique string that identifies the resource\n */\n\n/* jshint ignore:end */\n\n\nNotificationInstance = function NotificationInstance(version, payload, chatServiceSid) {\n  this._version = version; // Marshaled Properties\n\n  this.accountSid = payload.account_sid; // jshint ignore:line\n\n  this.chatServiceSid = payload.chat_service_sid; // jshint ignore:line\n\n  this.newMessage = payload.new_message; // jshint ignore:line\n\n  this.addedToConversation = payload.added_to_conversation; // jshint ignore:line\n\n  this.removedFromConversation = payload.removed_from_conversation; // jshint ignore:line\n\n  this.logEnabled = payload.log_enabled; // jshint ignore:line\n\n  this.url = payload.url; // jshint ignore:line\n  // Context\n\n  this._context = undefined;\n  this._solution = {\n    chatServiceSid: chatServiceSid\n  };\n};\n\nObject.defineProperty(NotificationInstance.prototype, '_proxy', {\n  get: function () {\n    if (!this._context) {\n      this._context = new NotificationContext(this._version, this._solution.chatServiceSid);\n    }\n\n    return this._context;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * update a NotificationInstance\n *\n * @function update\n * @memberof Twilio.Conversations.V1.ServiceContext.ConfigurationContext.NotificationInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {boolean} [opts.logEnabled] -\n *          Weather the notification logging is enabled.\n * @param {boolean} [opts.newMessage.enabled] -\n *          Whether to send a notification when a new message is added to a conversation.\n * @param {string} [opts.newMessage.template] -\n *          The template to use to create the notification text displayed when a new message is added to a conversation.\n * @param {string} [opts.newMessage.sound] -\n *          The name of the sound to play when a new message is added to a conversation.\n * @param {boolean} [opts.newMessage.badgeCountEnabled] -\n *          Whether the new message badge is enabled.\n * @param {boolean} [opts.addedToConversation.enabled] -\n *          Whether to send a notification when a participant is added to a conversation.\n * @param {string} [opts.addedToConversation.template] -\n *          The template to use to create the notification text displayed when a participant is added to a conversation.\n * @param {string} [opts.addedToConversation.sound] -\n *          The name of the sound to play when a participant is added to a conversation.\n * @param {boolean} [opts.removedFromConversation.enabled] -\n *          Whether to send a notification to a user when they are removed from a conversation.\n * @param {string} [opts.removedFromConversation.template] -\n *          The template to use to create the notification text displayed to a user when they are removed.\n * @param {string} [opts.removedFromConversation.sound] -\n *          The name of the sound to play to a user when they are removed from a conversation.\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed NotificationInstance\n */\n\n/* jshint ignore:end */\n\nNotificationInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n/* jshint ignore:start */\n\n/**\n * fetch a NotificationInstance\n *\n * @function fetch\n * @memberof Twilio.Conversations.V1.ServiceContext.ConfigurationContext.NotificationInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed NotificationInstance\n */\n\n/* jshint ignore:end */\n\n\nNotificationInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Conversations.V1.ServiceContext.ConfigurationContext.NotificationInstance#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nNotificationInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nNotificationInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the NotificationContext\n *\n * @constructor Twilio.Conversations.V1.ServiceContext.ConfigurationContext.NotificationContext\n *\n * @param {V1} version - Version of the resource\n * @param {sid} chatServiceSid -\n *          The SID of the Conversation Service that the Configuration applies to.\n */\n\n/* jshint ignore:end */\n\n\nNotificationContext = function NotificationContext(version, chatServiceSid) {\n  this._version = version; // Path Solution\n\n  this._solution = {\n    chatServiceSid: chatServiceSid\n  };\n  this._uri = `/Services/${chatServiceSid}/Configuration/Notifications`;\n};\n/* jshint ignore:start */\n\n/**\n * update a NotificationInstance\n *\n * @function update\n * @memberof Twilio.Conversations.V1.ServiceContext.ConfigurationContext.NotificationContext#\n *\n * @param {object} [opts] - Options for request\n * @param {boolean} [opts.logEnabled] -\n *          Weather the notification logging is enabled.\n * @param {boolean} [opts.newMessage.enabled] -\n *          Whether to send a notification when a new message is added to a conversation.\n * @param {string} [opts.newMessage.template] -\n *          The template to use to create the notification text displayed when a new message is added to a conversation.\n * @param {string} [opts.newMessage.sound] -\n *          The name of the sound to play when a new message is added to a conversation.\n * @param {boolean} [opts.newMessage.badgeCountEnabled] -\n *          Whether the new message badge is enabled.\n * @param {boolean} [opts.addedToConversation.enabled] -\n *          Whether to send a notification when a participant is added to a conversation.\n * @param {string} [opts.addedToConversation.template] -\n *          The template to use to create the notification text displayed when a participant is added to a conversation.\n * @param {string} [opts.addedToConversation.sound] -\n *          The name of the sound to play when a participant is added to a conversation.\n * @param {boolean} [opts.removedFromConversation.enabled] -\n *          Whether to send a notification to a user when they are removed from a conversation.\n * @param {string} [opts.removedFromConversation.template] -\n *          The template to use to create the notification text displayed to a user when they are removed.\n * @param {string} [opts.removedFromConversation.sound] -\n *          The name of the sound to play to a user when they are removed from a conversation.\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed NotificationInstance\n */\n\n/* jshint ignore:end */\n\n\nNotificationContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n\n  opts = opts || {};\n  var deferred = Q.defer();\n  var data = values.of({\n    'LogEnabled': serialize.bool(_.get(opts, 'logEnabled')),\n    'NewMessage.Enabled': serialize.bool(_.get(opts, 'newMessage.enabled')),\n    'NewMessage.Template': _.get(opts, 'newMessage.template'),\n    'NewMessage.Sound': _.get(opts, 'newMessage.sound'),\n    'NewMessage.BadgeCountEnabled': serialize.bool(_.get(opts, 'newMessage.badgeCountEnabled')),\n    'AddedToConversation.Enabled': serialize.bool(_.get(opts, 'addedToConversation.enabled')),\n    'AddedToConversation.Template': _.get(opts, 'addedToConversation.template'),\n    'AddedToConversation.Sound': _.get(opts, 'addedToConversation.sound'),\n    'RemovedFromConversation.Enabled': serialize.bool(_.get(opts, 'removedFromConversation.enabled')),\n    'RemovedFromConversation.Template': _.get(opts, 'removedFromConversation.template'),\n    'RemovedFromConversation.Sound': _.get(opts, 'removedFromConversation.sound')\n  });\n\n  var promise = this._version.update({\n    uri: this._uri,\n    method: 'POST',\n    data: data\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new NotificationInstance(this._version, payload, this._solution.chatServiceSid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * fetch a NotificationInstance\n *\n * @function fetch\n * @memberof Twilio.Conversations.V1.ServiceContext.ConfigurationContext.NotificationContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed NotificationInstance\n */\n\n/* jshint ignore:end */\n\n\nNotificationContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new NotificationInstance(this._version, payload, this._solution.chatServiceSid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Conversations.V1.ServiceContext.ConfigurationContext.NotificationContext#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nNotificationContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nNotificationContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  NotificationList: NotificationList,\n  NotificationPage: NotificationPage,\n  NotificationInstance: NotificationInstance,\n  NotificationContext: NotificationContext\n};","map":{"version":3,"sources":["/Users/tony_niu/Visual Studio/Twilio/twilio-video-starter-kit/src/token-service/node_modules/twilio/lib/rest/conversations/v1/service/configuration/notification.js"],"names":["Q","require","_","util","Page","serialize","values","NotificationList","NotificationPage","NotificationInstance","NotificationContext","version","chatServiceSid","NotificationListInstance","sid","get","_version","_solution","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","payload","clone","forOwn","value","key","startsWith","isFunction","accountSid","account_sid","chat_service_sid","newMessage","new_message","addedToConversation","added_to_conversation","removedFromConversation","removed_from_conversation","logEnabled","log_enabled","url","_context","undefined","Object","defineProperty","update","opts","callback","_proxy","fetch","_uri","deferred","defer","data","of","bool","promise","uri","method","then","resolve","bind","catch","error","reject","nodeify","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar Page = require('../../../../../base/Page');  /* jshint ignore:line */\nvar serialize = require(\n    '../../../../../base/serialize');  /* jshint ignore:line */\nvar values = require('../../../../../base/values');  /* jshint ignore:line */\n\nvar NotificationList;\nvar NotificationPage;\nvar NotificationInstance;\nvar NotificationContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the NotificationList\n *\n * @constructor Twilio.Conversations.V1.ServiceContext.ConfigurationContext.NotificationList\n *\n * @param {Twilio.Conversations.V1} version - Version of the resource\n * @param {string} chatServiceSid - The unique string that identifies the resource\n */\n/* jshint ignore:end */\nNotificationList = function NotificationList(version, chatServiceSid) {\n  /* jshint ignore:start */\n  /**\n   * @function notifications\n   * @memberof Twilio.Conversations.V1.ServiceContext.ConfigurationContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Conversations.V1.ServiceContext.ConfigurationContext.NotificationContext}\n   */\n  /* jshint ignore:end */\n  function NotificationListInstance(sid) {\n    return NotificationListInstance.get(sid);\n  }\n\n  NotificationListInstance._version = version;\n  // Path Solution\n  NotificationListInstance._solution = {chatServiceSid: chatServiceSid};\n  /* jshint ignore:start */\n  /**\n   * Constructs a notification\n   *\n   * @function get\n   * @memberof Twilio.Conversations.V1.ServiceContext.ConfigurationContext.NotificationList#\n   *\n   * @returns {Twilio.Conversations.V1.ServiceContext.ConfigurationContext.NotificationContext}\n   */\n  /* jshint ignore:end */\n  NotificationListInstance.get = function get() {\n    return new NotificationContext(this._version, this._solution.chatServiceSid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Conversations.V1.ServiceContext.ConfigurationContext.NotificationList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  NotificationListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  NotificationListInstance[util.inspect.custom] = function inspect(depth, options)\n      {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return NotificationListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the NotificationPage\n *\n * @constructor Twilio.Conversations.V1.ServiceContext.ConfigurationContext.NotificationPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {NotificationSolution} solution - Path solution\n *\n * @returns NotificationPage\n */\n/* jshint ignore:end */\nNotificationPage = function NotificationPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(NotificationPage.prototype, Page.prototype);\nNotificationPage.prototype.constructor = NotificationPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of NotificationInstance\n *\n * @function getInstance\n * @memberof Twilio.Conversations.V1.ServiceContext.ConfigurationContext.NotificationPage#\n *\n * @param {NotificationPayload} payload - Payload response from the API\n *\n * @returns NotificationInstance\n */\n/* jshint ignore:end */\nNotificationPage.prototype.getInstance = function getInstance(payload) {\n  return new NotificationInstance(this._version, payload, this._solution.chatServiceSid);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Conversations.V1.ServiceContext.ConfigurationContext.NotificationPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nNotificationPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nNotificationPage.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the NotificationContext\n *\n * @constructor Twilio.Conversations.V1.ServiceContext.ConfigurationContext.NotificationInstance\n *\n * @property {string} accountSid -\n *          The unique ID of the Account responsible for this configuration.\n * @property {string} chatServiceSid -\n *          The SID of the Conversation Service that the Configuration applies to.\n * @property {object} newMessage -\n *          The Push Notification configuration for New Messages.\n * @property {object} addedToConversation -\n *          The Push Notification configuration for being added to a Conversation.\n * @property {object} removedFromConversation -\n *          The Push Notification configuration for being removed from a Conversation.\n * @property {boolean} logEnabled - Weather the notification logging is enabled.\n * @property {string} url - An absolute URL for this configuration.\n *\n * @param {V1} version - Version of the resource\n * @param {NotificationPayload} payload - The instance payload\n * @param {sid} chatServiceSid - The unique string that identifies the resource\n */\n/* jshint ignore:end */\nNotificationInstance = function NotificationInstance(version, payload,\n                                                      chatServiceSid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.chatServiceSid = payload.chat_service_sid; // jshint ignore:line\n  this.newMessage = payload.new_message; // jshint ignore:line\n  this.addedToConversation = payload.added_to_conversation; // jshint ignore:line\n  this.removedFromConversation = payload.removed_from_conversation; // jshint ignore:line\n  this.logEnabled = payload.log_enabled; // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {chatServiceSid: chatServiceSid, };\n};\n\nObject.defineProperty(NotificationInstance.prototype,\n  '_proxy', {\n    get: function() {\n      if (!this._context) {\n        this._context = new NotificationContext(this._version, this._solution.chatServiceSid);\n      }\n\n      return this._context;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * update a NotificationInstance\n *\n * @function update\n * @memberof Twilio.Conversations.V1.ServiceContext.ConfigurationContext.NotificationInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {boolean} [opts.logEnabled] -\n *          Weather the notification logging is enabled.\n * @param {boolean} [opts.newMessage.enabled] -\n *          Whether to send a notification when a new message is added to a conversation.\n * @param {string} [opts.newMessage.template] -\n *          The template to use to create the notification text displayed when a new message is added to a conversation.\n * @param {string} [opts.newMessage.sound] -\n *          The name of the sound to play when a new message is added to a conversation.\n * @param {boolean} [opts.newMessage.badgeCountEnabled] -\n *          Whether the new message badge is enabled.\n * @param {boolean} [opts.addedToConversation.enabled] -\n *          Whether to send a notification when a participant is added to a conversation.\n * @param {string} [opts.addedToConversation.template] -\n *          The template to use to create the notification text displayed when a participant is added to a conversation.\n * @param {string} [opts.addedToConversation.sound] -\n *          The name of the sound to play when a participant is added to a conversation.\n * @param {boolean} [opts.removedFromConversation.enabled] -\n *          Whether to send a notification to a user when they are removed from a conversation.\n * @param {string} [opts.removedFromConversation.template] -\n *          The template to use to create the notification text displayed to a user when they are removed.\n * @param {string} [opts.removedFromConversation.sound] -\n *          The name of the sound to play to a user when they are removed from a conversation.\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed NotificationInstance\n */\n/* jshint ignore:end */\nNotificationInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * fetch a NotificationInstance\n *\n * @function fetch\n * @memberof Twilio.Conversations.V1.ServiceContext.ConfigurationContext.NotificationInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed NotificationInstance\n */\n/* jshint ignore:end */\nNotificationInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Conversations.V1.ServiceContext.ConfigurationContext.NotificationInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nNotificationInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nNotificationInstance.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the NotificationContext\n *\n * @constructor Twilio.Conversations.V1.ServiceContext.ConfigurationContext.NotificationContext\n *\n * @param {V1} version - Version of the resource\n * @param {sid} chatServiceSid -\n *          The SID of the Conversation Service that the Configuration applies to.\n */\n/* jshint ignore:end */\nNotificationContext = function NotificationContext(version, chatServiceSid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {chatServiceSid: chatServiceSid, };\n  this._uri = `/Services/${chatServiceSid}/Configuration/Notifications`;\n};\n\n/* jshint ignore:start */\n/**\n * update a NotificationInstance\n *\n * @function update\n * @memberof Twilio.Conversations.V1.ServiceContext.ConfigurationContext.NotificationContext#\n *\n * @param {object} [opts] - Options for request\n * @param {boolean} [opts.logEnabled] -\n *          Weather the notification logging is enabled.\n * @param {boolean} [opts.newMessage.enabled] -\n *          Whether to send a notification when a new message is added to a conversation.\n * @param {string} [opts.newMessage.template] -\n *          The template to use to create the notification text displayed when a new message is added to a conversation.\n * @param {string} [opts.newMessage.sound] -\n *          The name of the sound to play when a new message is added to a conversation.\n * @param {boolean} [opts.newMessage.badgeCountEnabled] -\n *          Whether the new message badge is enabled.\n * @param {boolean} [opts.addedToConversation.enabled] -\n *          Whether to send a notification when a participant is added to a conversation.\n * @param {string} [opts.addedToConversation.template] -\n *          The template to use to create the notification text displayed when a participant is added to a conversation.\n * @param {string} [opts.addedToConversation.sound] -\n *          The name of the sound to play when a participant is added to a conversation.\n * @param {boolean} [opts.removedFromConversation.enabled] -\n *          Whether to send a notification to a user when they are removed from a conversation.\n * @param {string} [opts.removedFromConversation.template] -\n *          The template to use to create the notification text displayed to a user when they are removed.\n * @param {string} [opts.removedFromConversation.sound] -\n *          The name of the sound to play to a user when they are removed from a conversation.\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed NotificationInstance\n */\n/* jshint ignore:end */\nNotificationContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n  opts = opts || {};\n\n  var deferred = Q.defer();\n  var data = values.of({\n    'LogEnabled': serialize.bool(_.get(opts, 'logEnabled')),\n    'NewMessage.Enabled': serialize.bool(_.get(opts, 'newMessage.enabled')),\n    'NewMessage.Template': _.get(opts, 'newMessage.template'),\n    'NewMessage.Sound': _.get(opts, 'newMessage.sound'),\n    'NewMessage.BadgeCountEnabled': serialize.bool(_.get(opts, 'newMessage.badgeCountEnabled')),\n    'AddedToConversation.Enabled': serialize.bool(_.get(opts, 'addedToConversation.enabled')),\n    'AddedToConversation.Template': _.get(opts, 'addedToConversation.template'),\n    'AddedToConversation.Sound': _.get(opts, 'addedToConversation.sound'),\n    'RemovedFromConversation.Enabled': serialize.bool(_.get(opts, 'removedFromConversation.enabled')),\n    'RemovedFromConversation.Template': _.get(opts, 'removedFromConversation.template'),\n    'RemovedFromConversation.Sound': _.get(opts, 'removedFromConversation.sound')\n  });\n\n  var promise = this._version.update({uri: this._uri, method: 'POST', data: data});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new NotificationInstance(this._version, payload, this._solution.chatServiceSid));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a NotificationInstance\n *\n * @function fetch\n * @memberof Twilio.Conversations.V1.ServiceContext.ConfigurationContext.NotificationContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed NotificationInstance\n */\n/* jshint ignore:end */\nNotificationContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({uri: this._uri, method: 'GET'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new NotificationInstance(this._version, payload, this._solution.chatServiceSid));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Conversations.V1.ServiceContext.ConfigurationContext.NotificationContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nNotificationContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nNotificationContext.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  NotificationList: NotificationList,\n  NotificationPage: NotificationPage,\n  NotificationInstance: NotificationInstance,\n  NotificationContext: NotificationContext\n};\n"]},"metadata":{},"sourceType":"module"}