{"ast":null,"code":"'use strict';\n/* jshint ignore:start */\n\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n\n/* jshint ignore:end */\n\nvar Q = require('q');\n/* jshint ignore:line */\n\n\nvar _ = require('lodash');\n/* jshint ignore:line */\n\n\nvar util = require('util');\n/* jshint ignore:line */\n\n\nvar Page = require('../../../base/Page');\n/* jshint ignore:line */\n\n\nvar deserialize = require('../../../base/deserialize');\n/* jshint ignore:line */\n\n\nvar serialize = require('../../../base/serialize');\n/* jshint ignore:line */\n\n\nvar values = require('../../../base/values');\n/* jshint ignore:line */\n\n\nvar FlexFlowList;\nvar FlexFlowPage;\nvar FlexFlowInstance;\nvar FlexFlowContext;\n/* jshint ignore:start */\n\n/**\n * Initialize the FlexFlowList\n *\n * @constructor Twilio.FlexApi.V1.FlexFlowList\n *\n * @param {Twilio.FlexApi.V1} version - Version of the resource\n */\n\n/* jshint ignore:end */\n\nFlexFlowList = function FlexFlowList(version) {\n  /* jshint ignore:start */\n\n  /**\n   * @function flexFlow\n   * @memberof Twilio.FlexApi.V1#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.FlexApi.V1.FlexFlowContext}\n   */\n\n  /* jshint ignore:end */\n  function FlexFlowListInstance(sid) {\n    return FlexFlowListInstance.get(sid);\n  }\n\n  FlexFlowListInstance._version = version; // Path Solution\n\n  FlexFlowListInstance._solution = {};\n  FlexFlowListInstance._uri = `/FlexFlows`;\n  /* jshint ignore:start */\n\n  /**\n   * Streams FlexFlowInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.FlexApi.V1.FlexFlowList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.friendlyName] -\n   *          The `friendly_name` of the Flex Flow resources to read\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n\n  /* jshint ignore:end */\n\n  FlexFlowListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Lists FlexFlowInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.FlexApi.V1.FlexFlowList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.friendlyName] -\n   *          The `friendly_name` of the Flex Flow resources to read\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  FlexFlowListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single page of FlexFlowInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.FlexApi.V1.FlexFlowList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.friendlyName] -\n   *          The `friendly_name` of the Flex Flow resources to read\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  FlexFlowListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'FriendlyName': _.get(opts, 'friendlyName'),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new FlexFlowPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single target page of FlexFlowInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.FlexApi.V1.FlexFlowList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  FlexFlowListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new FlexFlowPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * create a FlexFlowInstance\n   *\n   * @function create\n   * @memberof Twilio.FlexApi.V1.FlexFlowList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.friendlyName - A string to describe the resource\n   * @param {string} opts.chatServiceSid - The SID of the chat service\n   * @param {flex_flow.channel_type} opts.channelType - The channel type\n   * @param {string} [opts.contactIdentity] - The channel contact's Identity\n   * @param {boolean} [opts.enabled] - Whether the new Flex Flow is enabled\n   * @param {flex_flow.integration_type} [opts.integrationType] -\n   *          The software that will handle inbound messages.\n   * @param {string} [opts.integration.flowSid] - The SID of the Studio Flow\n   * @param {string} [opts.integration.url] - The External Webhook URL\n   * @param {string} [opts.integration.workspaceSid] -\n   *          The Workspace SID for a new Task\n   * @param {string} [opts.integration.workflowSid] - The Workflow SID for a new Task\n   * @param {string} [opts.integration.channel] - The Task Channel for a new Task\n   * @param {number} [opts.integration.timeout] -\n   *          The Task timeout in seconds for a new Task\n   * @param {number} [opts.integration.priority] - The Task priority of a new Task\n   * @param {boolean} [opts.integration.creationOnMessage] -\n   *          Whether to create a Task when the first message arrives\n   * @param {boolean} [opts.longLived] -\n   *          Reuse this chat channel for future interactions with a contact\n   * @param {boolean} [opts.janitorEnabled] -\n   *          Remove active Proxy sessions if the corresponding Task is deleted\n   * @param {number} [opts.integration.retryCount] -\n   *          The number of times to retry the webhook if the first attempt fails\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed FlexFlowInstance\n   */\n\n  /* jshint ignore:end */\n\n\n  FlexFlowListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n\n    if (_.isUndefined(opts.friendlyName)) {\n      throw new Error('Required parameter \"opts.friendlyName\" missing.');\n    }\n\n    if (_.isUndefined(opts.chatServiceSid)) {\n      throw new Error('Required parameter \"opts.chatServiceSid\" missing.');\n    }\n\n    if (_.isUndefined(opts.channelType)) {\n      throw new Error('Required parameter \"opts.channelType\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'FriendlyName': _.get(opts, 'friendlyName'),\n      'ChatServiceSid': _.get(opts, 'chatServiceSid'),\n      'ChannelType': _.get(opts, 'channelType'),\n      'ContactIdentity': _.get(opts, 'contactIdentity'),\n      'Enabled': serialize.bool(_.get(opts, 'enabled')),\n      'IntegrationType': _.get(opts, 'integrationType'),\n      'Integration.FlowSid': _.get(opts, 'integration.flowSid'),\n      'Integration.Url': _.get(opts, 'integration.url'),\n      'Integration.WorkspaceSid': _.get(opts, 'integration.workspaceSid'),\n      'Integration.WorkflowSid': _.get(opts, 'integration.workflowSid'),\n      'Integration.Channel': _.get(opts, 'integration.channel'),\n      'Integration.Timeout': _.get(opts, 'integration.timeout'),\n      'Integration.Priority': _.get(opts, 'integration.priority'),\n      'Integration.CreationOnMessage': serialize.bool(_.get(opts, 'integration.creationOnMessage')),\n      'LongLived': serialize.bool(_.get(opts, 'longLived')),\n      'JanitorEnabled': serialize.bool(_.get(opts, 'janitorEnabled')),\n      'Integration.RetryCount': _.get(opts, 'integration.retryCount')\n    });\n\n    var promise = this._version.create({\n      uri: this._uri,\n      method: 'POST',\n      data: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new FlexFlowInstance(this._version, payload, this._solution.sid));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Constructs a flex_flow\n   *\n   * @function get\n   * @memberof Twilio.FlexApi.V1.FlexFlowList#\n   *\n   * @param {string} sid - The SID that identifies the resource to fetch\n   *\n   * @returns {Twilio.FlexApi.V1.FlexFlowContext}\n   */\n\n  /* jshint ignore:end */\n\n\n  FlexFlowListInstance.get = function get(sid) {\n    return new FlexFlowContext(this._version, sid);\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.FlexApi.V1.FlexFlowList#\n   *\n   * @returns Object\n   */\n\n  /* jshint ignore:end */\n\n\n  FlexFlowListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  FlexFlowListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return FlexFlowListInstance;\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the FlexFlowPage\n *\n * @constructor Twilio.FlexApi.V1.FlexFlowPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {FlexFlowSolution} solution - Path solution\n *\n * @returns FlexFlowPage\n */\n\n/* jshint ignore:end */\n\n\nFlexFlowPage = function FlexFlowPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(FlexFlowPage.prototype, Page.prototype);\n\nFlexFlowPage.prototype.constructor = FlexFlowPage;\n/* jshint ignore:start */\n\n/**\n * Build an instance of FlexFlowInstance\n *\n * @function getInstance\n * @memberof Twilio.FlexApi.V1.FlexFlowPage#\n *\n * @param {FlexFlowPayload} payload - Payload response from the API\n *\n * @returns FlexFlowInstance\n */\n\n/* jshint ignore:end */\n\nFlexFlowPage.prototype.getInstance = function getInstance(payload) {\n  return new FlexFlowInstance(this._version, payload);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.FlexApi.V1.FlexFlowPage#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nFlexFlowPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nFlexFlowPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the FlexFlowContext\n *\n * @constructor Twilio.FlexApi.V1.FlexFlowInstance\n *\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {Date} dateCreated -\n *          The ISO 8601 date and time in GMT when the resource was created\n * @property {Date} dateUpdated -\n *          The ISO 8601 date and time in GMT when the resource was last updated\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} friendlyName -\n *          The string that you assigned to describe the resource\n * @property {string} chatServiceSid - The SID of the chat service\n * @property {flex_flow.channel_type} channelType - The channel type\n * @property {string} contactIdentity - The channel contact's Identity\n * @property {boolean} enabled - Whether the Flex Flow is enabled\n * @property {flex_flow.integration_type} integrationType -\n *          The software that will handle inbound messages.\n * @property {object} integration -\n *          An object that contains specific parameters for the integration\n * @property {boolean} longLived -\n *          Re-use this chat channel for future interactions with a contact\n * @property {boolean} janitorEnabled -\n *          Remove active Proxy sessions if the corresponding Task is deleted.\n * @property {string} url - The absolute URL of the Flex Flow resource\n *\n * @param {V1} version - Version of the resource\n * @param {FlexFlowPayload} payload - The instance payload\n * @param {sid} sid - The SID that identifies the resource to fetch\n */\n\n/* jshint ignore:end */\n\n\nFlexFlowInstance = function FlexFlowInstance(version, payload, sid) {\n  this._version = version; // Marshaled Properties\n\n  this.accountSid = payload.account_sid; // jshint ignore:line\n\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n\n  this.sid = payload.sid; // jshint ignore:line\n\n  this.friendlyName = payload.friendly_name; // jshint ignore:line\n\n  this.chatServiceSid = payload.chat_service_sid; // jshint ignore:line\n\n  this.channelType = payload.channel_type; // jshint ignore:line\n\n  this.contactIdentity = payload.contact_identity; // jshint ignore:line\n\n  this.enabled = payload.enabled; // jshint ignore:line\n\n  this.integrationType = payload.integration_type; // jshint ignore:line\n\n  this.integration = payload.integration; // jshint ignore:line\n\n  this.longLived = payload.long_lived; // jshint ignore:line\n\n  this.janitorEnabled = payload.janitor_enabled; // jshint ignore:line\n\n  this.url = payload.url; // jshint ignore:line\n  // Context\n\n  this._context = undefined;\n  this._solution = {\n    sid: sid || this.sid\n  };\n};\n\nObject.defineProperty(FlexFlowInstance.prototype, '_proxy', {\n  get: function () {\n    if (!this._context) {\n      this._context = new FlexFlowContext(this._version, this._solution.sid);\n    }\n\n    return this._context;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * fetch a FlexFlowInstance\n *\n * @function fetch\n * @memberof Twilio.FlexApi.V1.FlexFlowInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed FlexFlowInstance\n */\n\n/* jshint ignore:end */\n\nFlexFlowInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n/* jshint ignore:start */\n\n/**\n * update a FlexFlowInstance\n *\n * @function update\n * @memberof Twilio.FlexApi.V1.FlexFlowInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] - A string to describe the resource\n * @param {string} [opts.chatServiceSid] - The SID of the chat service\n * @param {flex_flow.channel_type} [opts.channelType] - The channel type\n * @param {string} [opts.contactIdentity] - The channel contact's Identity\n * @param {boolean} [opts.enabled] - Whether the new Flex Flow is enabled\n * @param {flex_flow.integration_type} [opts.integrationType] -\n *          The software that will handle inbound messages.\n * @param {string} [opts.integration.flowSid] - The SID of the Studio Flow\n * @param {string} [opts.integration.url] - The External Webhook URL\n * @param {string} [opts.integration.workspaceSid] -\n *          The Workspace SID for a new Task\n * @param {string} [opts.integration.workflowSid] - The Workflow SID for a new Task\n * @param {string} [opts.integration.channel] - The Task Channel for a new Task\n * @param {number} [opts.integration.timeout] -\n *          The Task timeout in seconds for a new Task\n * @param {number} [opts.integration.priority] - The Task priority of a new Task\n * @param {boolean} [opts.integration.creationOnMessage] -\n *          Whether to create a Task when the first message arrives\n * @param {boolean} [opts.longLived] -\n *          Reuse this chat channel for future interactions with a contact\n * @param {boolean} [opts.janitorEnabled] -\n *          Remove active Proxy sessions if the corresponding Task is deleted\n * @param {number} [opts.integration.retryCount] -\n *          The number of times to retry the webhook if the first attempt fails\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed FlexFlowInstance\n */\n\n/* jshint ignore:end */\n\n\nFlexFlowInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n/* jshint ignore:start */\n\n/**\n * remove a FlexFlowInstance\n *\n * @function remove\n * @memberof Twilio.FlexApi.V1.FlexFlowInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed FlexFlowInstance\n */\n\n/* jshint ignore:end */\n\n\nFlexFlowInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.FlexApi.V1.FlexFlowInstance#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nFlexFlowInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nFlexFlowInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the FlexFlowContext\n *\n * @constructor Twilio.FlexApi.V1.FlexFlowContext\n *\n * @param {V1} version - Version of the resource\n * @param {sid} sid - The SID that identifies the resource to fetch\n */\n\n/* jshint ignore:end */\n\n\nFlexFlowContext = function FlexFlowContext(version, sid) {\n  this._version = version; // Path Solution\n\n  this._solution = {\n    sid: sid\n  };\n  this._uri = `/FlexFlows/${sid}`;\n};\n/* jshint ignore:start */\n\n/**\n * fetch a FlexFlowInstance\n *\n * @function fetch\n * @memberof Twilio.FlexApi.V1.FlexFlowContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed FlexFlowInstance\n */\n\n/* jshint ignore:end */\n\n\nFlexFlowContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new FlexFlowInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * update a FlexFlowInstance\n *\n * @function update\n * @memberof Twilio.FlexApi.V1.FlexFlowContext#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] - A string to describe the resource\n * @param {string} [opts.chatServiceSid] - The SID of the chat service\n * @param {flex_flow.channel_type} [opts.channelType] - The channel type\n * @param {string} [opts.contactIdentity] - The channel contact's Identity\n * @param {boolean} [opts.enabled] - Whether the new Flex Flow is enabled\n * @param {flex_flow.integration_type} [opts.integrationType] -\n *          The software that will handle inbound messages.\n * @param {string} [opts.integration.flowSid] - The SID of the Studio Flow\n * @param {string} [opts.integration.url] - The External Webhook URL\n * @param {string} [opts.integration.workspaceSid] -\n *          The Workspace SID for a new Task\n * @param {string} [opts.integration.workflowSid] - The Workflow SID for a new Task\n * @param {string} [opts.integration.channel] - The Task Channel for a new Task\n * @param {number} [opts.integration.timeout] -\n *          The Task timeout in seconds for a new Task\n * @param {number} [opts.integration.priority] - The Task priority of a new Task\n * @param {boolean} [opts.integration.creationOnMessage] -\n *          Whether to create a Task when the first message arrives\n * @param {boolean} [opts.longLived] -\n *          Reuse this chat channel for future interactions with a contact\n * @param {boolean} [opts.janitorEnabled] -\n *          Remove active Proxy sessions if the corresponding Task is deleted\n * @param {number} [opts.integration.retryCount] -\n *          The number of times to retry the webhook if the first attempt fails\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed FlexFlowInstance\n */\n\n/* jshint ignore:end */\n\n\nFlexFlowContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n\n  opts = opts || {};\n  var deferred = Q.defer();\n  var data = values.of({\n    'FriendlyName': _.get(opts, 'friendlyName'),\n    'ChatServiceSid': _.get(opts, 'chatServiceSid'),\n    'ChannelType': _.get(opts, 'channelType'),\n    'ContactIdentity': _.get(opts, 'contactIdentity'),\n    'Enabled': serialize.bool(_.get(opts, 'enabled')),\n    'IntegrationType': _.get(opts, 'integrationType'),\n    'Integration.FlowSid': _.get(opts, 'integration.flowSid'),\n    'Integration.Url': _.get(opts, 'integration.url'),\n    'Integration.WorkspaceSid': _.get(opts, 'integration.workspaceSid'),\n    'Integration.WorkflowSid': _.get(opts, 'integration.workflowSid'),\n    'Integration.Channel': _.get(opts, 'integration.channel'),\n    'Integration.Timeout': _.get(opts, 'integration.timeout'),\n    'Integration.Priority': _.get(opts, 'integration.priority'),\n    'Integration.CreationOnMessage': serialize.bool(_.get(opts, 'integration.creationOnMessage')),\n    'LongLived': serialize.bool(_.get(opts, 'longLived')),\n    'JanitorEnabled': serialize.bool(_.get(opts, 'janitorEnabled')),\n    'Integration.RetryCount': _.get(opts, 'integration.retryCount')\n  });\n\n  var promise = this._version.update({\n    uri: this._uri,\n    method: 'POST',\n    data: data\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new FlexFlowInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * remove a FlexFlowInstance\n *\n * @function remove\n * @memberof Twilio.FlexApi.V1.FlexFlowContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed FlexFlowInstance\n */\n\n/* jshint ignore:end */\n\n\nFlexFlowContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.remove({\n    uri: this._uri,\n    method: 'DELETE'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.FlexApi.V1.FlexFlowContext#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nFlexFlowContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nFlexFlowContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  FlexFlowList: FlexFlowList,\n  FlexFlowPage: FlexFlowPage,\n  FlexFlowInstance: FlexFlowInstance,\n  FlexFlowContext: FlexFlowContext\n};","map":{"version":3,"sources":["/Users/tony_niu/Visual Studio/Twilio/twilio-video-starter-kit/node_modules/twilio/lib/rest/flexApi/v1/flexFlow.js"],"names":["Q","require","_","util","Page","deserialize","serialize","values","FlexFlowList","FlexFlowPage","FlexFlowInstance","FlexFlowContext","version","FlexFlowListInstance","sid","get","_version","_solution","_uri","each","opts","callback","isFunction","isUndefined","Error","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","error","fetchNextPage","fn","promise","then","page","instances","instance","bind","nextPage","catch","merge","list","deferred","defer","allResources","resource","push","length","resolve","reject","nodeify","data","of","pageToken","pageNumber","uri","method","params","payload","getPage","targetUrl","_domain","twilio","request","create","friendlyName","chatServiceSid","channelType","bool","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","accountSid","account_sid","dateCreated","iso8601DateTime","date_created","dateUpdated","date_updated","friendly_name","chat_service_sid","channel_type","contactIdentity","contact_identity","enabled","integrationType","integration_type","integration","longLived","long_lived","janitorEnabled","janitor_enabled","url","_context","undefined","Object","defineProperty","fetch","_proxy","update","remove","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar Page = require('../../../base/Page');  /* jshint ignore:line */\nvar deserialize = require(\n    '../../../base/deserialize');  /* jshint ignore:line */\nvar serialize = require('../../../base/serialize');  /* jshint ignore:line */\nvar values = require('../../../base/values');  /* jshint ignore:line */\n\nvar FlexFlowList;\nvar FlexFlowPage;\nvar FlexFlowInstance;\nvar FlexFlowContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the FlexFlowList\n *\n * @constructor Twilio.FlexApi.V1.FlexFlowList\n *\n * @param {Twilio.FlexApi.V1} version - Version of the resource\n */\n/* jshint ignore:end */\nFlexFlowList = function FlexFlowList(version) {\n  /* jshint ignore:start */\n  /**\n   * @function flexFlow\n   * @memberof Twilio.FlexApi.V1#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.FlexApi.V1.FlexFlowContext}\n   */\n  /* jshint ignore:end */\n  function FlexFlowListInstance(sid) {\n    return FlexFlowListInstance.get(sid);\n  }\n\n  FlexFlowListInstance._version = version;\n  // Path Solution\n  FlexFlowListInstance._solution = {};\n  FlexFlowListInstance._uri = `/FlexFlows`;\n  /* jshint ignore:start */\n  /**\n   * Streams FlexFlowInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.FlexApi.V1.FlexFlowList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.friendlyName] -\n   *          The `friendly_name` of the Flex Flow resources to read\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  FlexFlowListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists FlexFlowInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.FlexApi.V1.FlexFlowList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.friendlyName] -\n   *          The `friendly_name` of the Flex Flow resources to read\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  FlexFlowListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of FlexFlowInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.FlexApi.V1.FlexFlowList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.friendlyName] -\n   *          The `friendly_name` of the Flex Flow resources to read\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  FlexFlowListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'FriendlyName': _.get(opts, 'friendlyName'),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new FlexFlowPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of FlexFlowInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.FlexApi.V1.FlexFlowList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  FlexFlowListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new FlexFlowPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * create a FlexFlowInstance\n   *\n   * @function create\n   * @memberof Twilio.FlexApi.V1.FlexFlowList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.friendlyName - A string to describe the resource\n   * @param {string} opts.chatServiceSid - The SID of the chat service\n   * @param {flex_flow.channel_type} opts.channelType - The channel type\n   * @param {string} [opts.contactIdentity] - The channel contact's Identity\n   * @param {boolean} [opts.enabled] - Whether the new Flex Flow is enabled\n   * @param {flex_flow.integration_type} [opts.integrationType] -\n   *          The software that will handle inbound messages.\n   * @param {string} [opts.integration.flowSid] - The SID of the Studio Flow\n   * @param {string} [opts.integration.url] - The External Webhook URL\n   * @param {string} [opts.integration.workspaceSid] -\n   *          The Workspace SID for a new Task\n   * @param {string} [opts.integration.workflowSid] - The Workflow SID for a new Task\n   * @param {string} [opts.integration.channel] - The Task Channel for a new Task\n   * @param {number} [opts.integration.timeout] -\n   *          The Task timeout in seconds for a new Task\n   * @param {number} [opts.integration.priority] - The Task priority of a new Task\n   * @param {boolean} [opts.integration.creationOnMessage] -\n   *          Whether to create a Task when the first message arrives\n   * @param {boolean} [opts.longLived] -\n   *          Reuse this chat channel for future interactions with a contact\n   * @param {boolean} [opts.janitorEnabled] -\n   *          Remove active Proxy sessions if the corresponding Task is deleted\n   * @param {number} [opts.integration.retryCount] -\n   *          The number of times to retry the webhook if the first attempt fails\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed FlexFlowInstance\n   */\n  /* jshint ignore:end */\n  FlexFlowListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n    if (_.isUndefined(opts.friendlyName)) {\n      throw new Error('Required parameter \"opts.friendlyName\" missing.');\n    }\n    if (_.isUndefined(opts.chatServiceSid)) {\n      throw new Error('Required parameter \"opts.chatServiceSid\" missing.');\n    }\n    if (_.isUndefined(opts.channelType)) {\n      throw new Error('Required parameter \"opts.channelType\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'FriendlyName': _.get(opts, 'friendlyName'),\n      'ChatServiceSid': _.get(opts, 'chatServiceSid'),\n      'ChannelType': _.get(opts, 'channelType'),\n      'ContactIdentity': _.get(opts, 'contactIdentity'),\n      'Enabled': serialize.bool(_.get(opts, 'enabled')),\n      'IntegrationType': _.get(opts, 'integrationType'),\n      'Integration.FlowSid': _.get(opts, 'integration.flowSid'),\n      'Integration.Url': _.get(opts, 'integration.url'),\n      'Integration.WorkspaceSid': _.get(opts, 'integration.workspaceSid'),\n      'Integration.WorkflowSid': _.get(opts, 'integration.workflowSid'),\n      'Integration.Channel': _.get(opts, 'integration.channel'),\n      'Integration.Timeout': _.get(opts, 'integration.timeout'),\n      'Integration.Priority': _.get(opts, 'integration.priority'),\n      'Integration.CreationOnMessage': serialize.bool(_.get(opts, 'integration.creationOnMessage')),\n      'LongLived': serialize.bool(_.get(opts, 'longLived')),\n      'JanitorEnabled': serialize.bool(_.get(opts, 'janitorEnabled')),\n      'Integration.RetryCount': _.get(opts, 'integration.retryCount')\n    });\n\n    var promise = this._version.create({uri: this._uri, method: 'POST', data: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new FlexFlowInstance(this._version, payload, this._solution.sid));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a flex_flow\n   *\n   * @function get\n   * @memberof Twilio.FlexApi.V1.FlexFlowList#\n   *\n   * @param {string} sid - The SID that identifies the resource to fetch\n   *\n   * @returns {Twilio.FlexApi.V1.FlexFlowContext}\n   */\n  /* jshint ignore:end */\n  FlexFlowListInstance.get = function get(sid) {\n    return new FlexFlowContext(this._version, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.FlexApi.V1.FlexFlowList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  FlexFlowListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  FlexFlowListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return FlexFlowListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the FlexFlowPage\n *\n * @constructor Twilio.FlexApi.V1.FlexFlowPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {FlexFlowSolution} solution - Path solution\n *\n * @returns FlexFlowPage\n */\n/* jshint ignore:end */\nFlexFlowPage = function FlexFlowPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(FlexFlowPage.prototype, Page.prototype);\nFlexFlowPage.prototype.constructor = FlexFlowPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of FlexFlowInstance\n *\n * @function getInstance\n * @memberof Twilio.FlexApi.V1.FlexFlowPage#\n *\n * @param {FlexFlowPayload} payload - Payload response from the API\n *\n * @returns FlexFlowInstance\n */\n/* jshint ignore:end */\nFlexFlowPage.prototype.getInstance = function getInstance(payload) {\n  return new FlexFlowInstance(this._version, payload);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.FlexApi.V1.FlexFlowPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nFlexFlowPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nFlexFlowPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the FlexFlowContext\n *\n * @constructor Twilio.FlexApi.V1.FlexFlowInstance\n *\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {Date} dateCreated -\n *          The ISO 8601 date and time in GMT when the resource was created\n * @property {Date} dateUpdated -\n *          The ISO 8601 date and time in GMT when the resource was last updated\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} friendlyName -\n *          The string that you assigned to describe the resource\n * @property {string} chatServiceSid - The SID of the chat service\n * @property {flex_flow.channel_type} channelType - The channel type\n * @property {string} contactIdentity - The channel contact's Identity\n * @property {boolean} enabled - Whether the Flex Flow is enabled\n * @property {flex_flow.integration_type} integrationType -\n *          The software that will handle inbound messages.\n * @property {object} integration -\n *          An object that contains specific parameters for the integration\n * @property {boolean} longLived -\n *          Re-use this chat channel for future interactions with a contact\n * @property {boolean} janitorEnabled -\n *          Remove active Proxy sessions if the corresponding Task is deleted.\n * @property {string} url - The absolute URL of the Flex Flow resource\n *\n * @param {V1} version - Version of the resource\n * @param {FlexFlowPayload} payload - The instance payload\n * @param {sid} sid - The SID that identifies the resource to fetch\n */\n/* jshint ignore:end */\nFlexFlowInstance = function FlexFlowInstance(version, payload, sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n  this.sid = payload.sid; // jshint ignore:line\n  this.friendlyName = payload.friendly_name; // jshint ignore:line\n  this.chatServiceSid = payload.chat_service_sid; // jshint ignore:line\n  this.channelType = payload.channel_type; // jshint ignore:line\n  this.contactIdentity = payload.contact_identity; // jshint ignore:line\n  this.enabled = payload.enabled; // jshint ignore:line\n  this.integrationType = payload.integration_type; // jshint ignore:line\n  this.integration = payload.integration; // jshint ignore:line\n  this.longLived = payload.long_lived; // jshint ignore:line\n  this.janitorEnabled = payload.janitor_enabled; // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {sid: sid || this.sid, };\n};\n\nObject.defineProperty(FlexFlowInstance.prototype,\n  '_proxy', {\n    get: function() {\n      if (!this._context) {\n        this._context = new FlexFlowContext(this._version, this._solution.sid);\n      }\n\n      return this._context;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a FlexFlowInstance\n *\n * @function fetch\n * @memberof Twilio.FlexApi.V1.FlexFlowInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed FlexFlowInstance\n */\n/* jshint ignore:end */\nFlexFlowInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * update a FlexFlowInstance\n *\n * @function update\n * @memberof Twilio.FlexApi.V1.FlexFlowInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] - A string to describe the resource\n * @param {string} [opts.chatServiceSid] - The SID of the chat service\n * @param {flex_flow.channel_type} [opts.channelType] - The channel type\n * @param {string} [opts.contactIdentity] - The channel contact's Identity\n * @param {boolean} [opts.enabled] - Whether the new Flex Flow is enabled\n * @param {flex_flow.integration_type} [opts.integrationType] -\n *          The software that will handle inbound messages.\n * @param {string} [opts.integration.flowSid] - The SID of the Studio Flow\n * @param {string} [opts.integration.url] - The External Webhook URL\n * @param {string} [opts.integration.workspaceSid] -\n *          The Workspace SID for a new Task\n * @param {string} [opts.integration.workflowSid] - The Workflow SID for a new Task\n * @param {string} [opts.integration.channel] - The Task Channel for a new Task\n * @param {number} [opts.integration.timeout] -\n *          The Task timeout in seconds for a new Task\n * @param {number} [opts.integration.priority] - The Task priority of a new Task\n * @param {boolean} [opts.integration.creationOnMessage] -\n *          Whether to create a Task when the first message arrives\n * @param {boolean} [opts.longLived] -\n *          Reuse this chat channel for future interactions with a contact\n * @param {boolean} [opts.janitorEnabled] -\n *          Remove active Proxy sessions if the corresponding Task is deleted\n * @param {number} [opts.integration.retryCount] -\n *          The number of times to retry the webhook if the first attempt fails\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed FlexFlowInstance\n */\n/* jshint ignore:end */\nFlexFlowInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * remove a FlexFlowInstance\n *\n * @function remove\n * @memberof Twilio.FlexApi.V1.FlexFlowInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed FlexFlowInstance\n */\n/* jshint ignore:end */\nFlexFlowInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.FlexApi.V1.FlexFlowInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nFlexFlowInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nFlexFlowInstance.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the FlexFlowContext\n *\n * @constructor Twilio.FlexApi.V1.FlexFlowContext\n *\n * @param {V1} version - Version of the resource\n * @param {sid} sid - The SID that identifies the resource to fetch\n */\n/* jshint ignore:end */\nFlexFlowContext = function FlexFlowContext(version, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {sid: sid, };\n  this._uri = `/FlexFlows/${sid}`;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a FlexFlowInstance\n *\n * @function fetch\n * @memberof Twilio.FlexApi.V1.FlexFlowContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed FlexFlowInstance\n */\n/* jshint ignore:end */\nFlexFlowContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({uri: this._uri, method: 'GET'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new FlexFlowInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * update a FlexFlowInstance\n *\n * @function update\n * @memberof Twilio.FlexApi.V1.FlexFlowContext#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] - A string to describe the resource\n * @param {string} [opts.chatServiceSid] - The SID of the chat service\n * @param {flex_flow.channel_type} [opts.channelType] - The channel type\n * @param {string} [opts.contactIdentity] - The channel contact's Identity\n * @param {boolean} [opts.enabled] - Whether the new Flex Flow is enabled\n * @param {flex_flow.integration_type} [opts.integrationType] -\n *          The software that will handle inbound messages.\n * @param {string} [opts.integration.flowSid] - The SID of the Studio Flow\n * @param {string} [opts.integration.url] - The External Webhook URL\n * @param {string} [opts.integration.workspaceSid] -\n *          The Workspace SID for a new Task\n * @param {string} [opts.integration.workflowSid] - The Workflow SID for a new Task\n * @param {string} [opts.integration.channel] - The Task Channel for a new Task\n * @param {number} [opts.integration.timeout] -\n *          The Task timeout in seconds for a new Task\n * @param {number} [opts.integration.priority] - The Task priority of a new Task\n * @param {boolean} [opts.integration.creationOnMessage] -\n *          Whether to create a Task when the first message arrives\n * @param {boolean} [opts.longLived] -\n *          Reuse this chat channel for future interactions with a contact\n * @param {boolean} [opts.janitorEnabled] -\n *          Remove active Proxy sessions if the corresponding Task is deleted\n * @param {number} [opts.integration.retryCount] -\n *          The number of times to retry the webhook if the first attempt fails\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed FlexFlowInstance\n */\n/* jshint ignore:end */\nFlexFlowContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n  opts = opts || {};\n\n  var deferred = Q.defer();\n  var data = values.of({\n    'FriendlyName': _.get(opts, 'friendlyName'),\n    'ChatServiceSid': _.get(opts, 'chatServiceSid'),\n    'ChannelType': _.get(opts, 'channelType'),\n    'ContactIdentity': _.get(opts, 'contactIdentity'),\n    'Enabled': serialize.bool(_.get(opts, 'enabled')),\n    'IntegrationType': _.get(opts, 'integrationType'),\n    'Integration.FlowSid': _.get(opts, 'integration.flowSid'),\n    'Integration.Url': _.get(opts, 'integration.url'),\n    'Integration.WorkspaceSid': _.get(opts, 'integration.workspaceSid'),\n    'Integration.WorkflowSid': _.get(opts, 'integration.workflowSid'),\n    'Integration.Channel': _.get(opts, 'integration.channel'),\n    'Integration.Timeout': _.get(opts, 'integration.timeout'),\n    'Integration.Priority': _.get(opts, 'integration.priority'),\n    'Integration.CreationOnMessage': serialize.bool(_.get(opts, 'integration.creationOnMessage')),\n    'LongLived': serialize.bool(_.get(opts, 'longLived')),\n    'JanitorEnabled': serialize.bool(_.get(opts, 'janitorEnabled')),\n    'Integration.RetryCount': _.get(opts, 'integration.retryCount')\n  });\n\n  var promise = this._version.update({uri: this._uri, method: 'POST', data: data});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new FlexFlowInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * remove a FlexFlowInstance\n *\n * @function remove\n * @memberof Twilio.FlexApi.V1.FlexFlowContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed FlexFlowInstance\n */\n/* jshint ignore:end */\nFlexFlowContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.remove({uri: this._uri, method: 'DELETE'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.FlexApi.V1.FlexFlowContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nFlexFlowContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nFlexFlowContext.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  FlexFlowList: FlexFlowList,\n  FlexFlowPage: FlexFlowPage,\n  FlexFlowInstance: FlexFlowInstance,\n  FlexFlowContext: FlexFlowContext\n};\n"]},"metadata":{},"sourceType":"script"}