{"ast":null,"code":"'use strict';\n\nvar _ = require('lodash');\n\nvar RestException = require('./RestException');\n/**\n * @constructor\n *\n * @description Base version object\n *\n * @param {Domain} domain twilio domain\n * @param {Version} version api version\n */\n\n\nfunction Version(domain, version) {\n  this._domain = domain;\n  this._version = version;\n}\n/**\n * Generate absolute url from a uri\n *\n * @param  {string} uri uri to transform\n * @return {string} transformed url\n */\n\n\n_c = Version;\n\nVersion.prototype.absoluteUrl = function (uri) {\n  return this._domain.absoluteUrl(this.relativeUrl(uri));\n};\n/**\n * Generate relative url from a uri\n *\n * @param  {string} uri uri to transform\n * @return {string} transformed url\n */\n\n\nVersion.prototype.relativeUrl = function (uri) {\n  return _.trim(this._version, '/') + '/' + _.trim(uri, '/');\n};\n/**\n * Make a request against the domain\n *\n * @param  {object} opts request options\n * @return {Promise} promise that resolves to request response\n */\n\n\nVersion.prototype.request = function (opts) {\n  return this._domain.request(_.assign({}, opts, {\n    uri: this.relativeUrl(opts.uri)\n  }));\n};\n/**\n * Fetch a instance of a record\n * @throws {Error} If response returns non 2xx or 3xx status code\n *\n * @param  {object} opts request options\n * @return {Promise} promise that resolves to fetched result\n */\n\n\nVersion.prototype.fetch = function (opts) {\n  var qResponse = this.request(opts);\n  qResponse = qResponse.then(function success(response) {\n    if (response.statusCode < 200 || response.statusCode >= 400) {\n      throw new RestException(response);\n    }\n\n    if (typeof response.body === 'string') {\n      return JSON.parse(response.body);\n    }\n\n    return response.body;\n  });\n  return qResponse;\n};\n/**\n * Update a record\n * @throws {Error} If response returns non 2xx status code\n *\n * @param  {object} opts request options\n * @return {Promise} promise that resolves to updated result\n */\n\n\nVersion.prototype.update = function (opts) {\n  var qResponse = this.request(opts);\n  qResponse = qResponse.then(function success(response) {\n    if (response.statusCode < 200 || response.statusCode >= 300) {\n      throw new RestException(response);\n    }\n\n    if (typeof response.body === 'string') {\n      return JSON.parse(response.body);\n    }\n\n    return response.body;\n  });\n  return qResponse;\n};\n/**\n * Delete a record\n * @throws {Error} If response returns a 5xx status\n *\n * @param  {object} opts request options\n * @return {Promise} promise that resolves to true if record was deleted\n */\n\n\nVersion.prototype.remove = function (opts) {\n  var qResponse = this.request(opts);\n  qResponse = qResponse.then(function success(response) {\n    if (response.statusCode < 200 || response.statusCode >= 300) {\n      throw new RestException(response);\n    }\n\n    return response.statusCode === 204;\n  });\n  return qResponse;\n};\n/**\n * Create a new record\n * @throws {Error} If response returns non 2xx or 201 status code\n *\n * @param  {object} opts request options\n * @return {Promise} promise that resolves to created record\n */\n\n\nVersion.prototype.create = function (opts) {\n  var qResponse = this.request(opts);\n  qResponse = qResponse.then(function success(response) {\n    if (response.statusCode < 200 || response.statusCode >= 300) {\n      throw new RestException(response);\n    }\n\n    if (typeof response.body === 'string') {\n      return JSON.parse(response.body);\n    }\n\n    return response.body;\n  });\n  return qResponse;\n};\n/**\n * Fetch a page of records\n *\n * @param  {object} opts request options\n * @return {Promise} promise that resolves to page of records\n */\n\n\nVersion.prototype.page = function (opts) {\n  return this.request(opts);\n};\n/**\n * Process limits for list requests\n *\n * @param {object} [opts] ...\n * @param {number} [opts.limit] The maximum number of items to fetch\n * @param {number} [opts.pageSize] The maximum number of items to return\n *                                  with every request\n */\n\n\nVersion.prototype.readLimits = function (opts) {\n  var limit = opts.limit;\n  var pageSize = opts.pageSize;\n\n  if (!_.isNil(limit) && (!_.isFinite(limit) || limit <= 0)) {\n    throw new TypeError('Parameter limit must be a positive integer');\n  }\n\n  if (!_.isNil(pageSize) && (!_.isFinite(pageSize) || pageSize <= 0)) {\n    throw new TypeError('Parameter pageSize must be a positive integer');\n  }\n\n  if (limit && !pageSize) {\n    pageSize = limit;\n  }\n\n  return {\n    limit: limit,\n    pageSize: pageSize\n  };\n};\n\nmodule.exports = Version;\n\nvar _c;\n\n$RefreshReg$(_c, \"Version\");","map":{"version":3,"sources":["/Users/tony_niu/Visual Studio/Twilio/twilio-video-starter-kit/src/token-service/node_modules/twilio/lib/base/Version.js"],"names":["_","require","RestException","Version","domain","version","_domain","_version","prototype","absoluteUrl","uri","relativeUrl","trim","request","opts","assign","fetch","qResponse","then","success","response","statusCode","body","JSON","parse","update","remove","create","page","readLimits","limit","pageSize","isNil","isFinite","TypeError","module","exports"],"mappings":"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","sourcesContent":["'use strict';\nvar _ = require('lodash');\nvar RestException = require('./RestException');\n\n/**\n * @constructor\n *\n * @description Base version object\n *\n * @param {Domain} domain twilio domain\n * @param {Version} version api version\n */\nfunction Version(domain, version) {\n  this._domain = domain;\n  this._version = version;\n}\n\n/**\n * Generate absolute url from a uri\n *\n * @param  {string} uri uri to transform\n * @return {string} transformed url\n */\nVersion.prototype.absoluteUrl = function(uri) {\n  return this._domain.absoluteUrl(this.relativeUrl(uri));\n};\n\n/**\n * Generate relative url from a uri\n *\n * @param  {string} uri uri to transform\n * @return {string} transformed url\n */\nVersion.prototype.relativeUrl = function(uri) {\n  return _.trim(this._version, '/') + '/' + _.trim(uri, '/');\n};\n\n/**\n * Make a request against the domain\n *\n * @param  {object} opts request options\n * @return {Promise} promise that resolves to request response\n */\nVersion.prototype.request = function(opts) {\n  return this._domain.request(_.assign({}, opts, {\n    uri: this.relativeUrl(opts.uri),\n  }));\n};\n\n/**\n * Fetch a instance of a record\n * @throws {Error} If response returns non 2xx or 3xx status code\n *\n * @param  {object} opts request options\n * @return {Promise} promise that resolves to fetched result\n */\nVersion.prototype.fetch = function(opts) {\n  var qResponse = this.request(opts);\n\n  qResponse = qResponse.then(\n    function success(response) {\n      if (response.statusCode < 200 || response.statusCode >= 400) {\n        throw new RestException(response);\n      }\n\n      if (typeof response.body === 'string') {\n        return JSON.parse(response.body);\n      }\n      return response.body;\n    }\n  );\n\n  return qResponse;\n};\n\n/**\n * Update a record\n * @throws {Error} If response returns non 2xx status code\n *\n * @param  {object} opts request options\n * @return {Promise} promise that resolves to updated result\n */\nVersion.prototype.update = function(opts) {\n  var qResponse = this.request(opts);\n  qResponse = qResponse.then(\n    function success(response) {\n      if (response.statusCode < 200 || response.statusCode >= 300) {\n        throw new RestException(response);\n      }\n\n      if (typeof response.body === 'string') {\n        return JSON.parse(response.body);\n      }\n      return response.body;\n    }\n  );\n\n  return qResponse;\n};\n\n/**\n * Delete a record\n * @throws {Error} If response returns a 5xx status\n *\n * @param  {object} opts request options\n * @return {Promise} promise that resolves to true if record was deleted\n */\nVersion.prototype.remove = function(opts) {\n  var qResponse = this.request(opts);\n  qResponse = qResponse.then(\n    function success(response) {\n      if (response.statusCode < 200 || response.statusCode >= 300) {\n        throw new RestException(response);\n      }\n\n      return response.statusCode === 204;\n    }\n  );\n\n  return qResponse;\n};\n\n/**\n * Create a new record\n * @throws {Error} If response returns non 2xx or 201 status code\n *\n * @param  {object} opts request options\n * @return {Promise} promise that resolves to created record\n */\nVersion.prototype.create = function(opts) {\n  var qResponse = this.request(opts);\n  qResponse = qResponse.then(\n    function success(response) {\n      if (response.statusCode < 200 || response.statusCode >= 300) {\n        throw new RestException(response);\n      }\n      if (typeof response.body === 'string') {\n        return JSON.parse(response.body);\n      }\n      return response.body;\n    }\n  );\n\n  return qResponse;\n};\n\n/**\n * Fetch a page of records\n *\n * @param  {object} opts request options\n * @return {Promise} promise that resolves to page of records\n */\nVersion.prototype.page = function(opts) {\n  return this.request(opts);\n};\n\n/**\n * Process limits for list requests\n *\n * @param {object} [opts] ...\n * @param {number} [opts.limit] The maximum number of items to fetch\n * @param {number} [opts.pageSize] The maximum number of items to return\n *                                  with every request\n */\nVersion.prototype.readLimits = function(opts) {\n  var limit = opts.limit;\n  var pageSize = opts.pageSize;\n  if (!_.isNil(limit) && (!_.isFinite(limit) || limit <= 0)) {\n    throw new TypeError('Parameter limit must be a positive integer');\n  }\n\n  if (!_.isNil(pageSize) && (!_.isFinite(pageSize) || pageSize <= 0)) {\n    throw new TypeError('Parameter pageSize must be a positive integer');\n  }\n\n  if (limit && !pageSize) {\n    pageSize = limit;\n  }\n\n  return {\n    limit: limit,\n    pageSize: pageSize\n  };\n};\n\nmodule.exports = Version;\n"]},"metadata":{},"sourceType":"module"}