{"ast":null,"code":"'use strict';\n/* jshint ignore:start */\n\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n\n/* jshint ignore:end */\n\nvar Q = require('q');\n/* jshint ignore:line */\n\n\nvar _ = require('lodash');\n/* jshint ignore:line */\n\n\nvar util = require('util');\n/* jshint ignore:line */\n\n\nvar Page = require('../../../base/Page');\n/* jshint ignore:line */\n\n\nvar deserialize = require('../../../base/deserialize');\n/* jshint ignore:line */\n\n\nvar values = require('../../../base/values');\n/* jshint ignore:line */\n\n\nvar SourceIpMappingList;\nvar SourceIpMappingPage;\nvar SourceIpMappingInstance;\nvar SourceIpMappingContext;\n/* jshint ignore:start */\n\n/**\n * Initialize the SourceIpMappingList\n *\n * @constructor Twilio.Voice.V1.SourceIpMappingList\n *\n * @param {Twilio.Voice.V1} version - Version of the resource\n */\n\n/* jshint ignore:end */\n\nSourceIpMappingList = function SourceIpMappingList(version) {\n  /* jshint ignore:start */\n\n  /**\n   * @function sourceIpMappings\n   * @memberof Twilio.Voice.V1#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Voice.V1.SourceIpMappingContext}\n   */\n\n  /* jshint ignore:end */\n  function SourceIpMappingListInstance(sid) {\n    return SourceIpMappingListInstance.get(sid);\n  }\n\n  SourceIpMappingListInstance._version = version; // Path Solution\n\n  SourceIpMappingListInstance._solution = {};\n  SourceIpMappingListInstance._uri = `/SourceIpMappings`;\n  /* jshint ignore:start */\n\n  /**\n   * create a SourceIpMappingInstance\n   *\n   * @function create\n   * @memberof Twilio.Voice.V1.SourceIpMappingList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.ipRecordSid -\n   *          The unique string that identifies an IP Record\n   * @param {string} opts.sipDomainSid -\n   *          The unique string that identifies a SIP Domain\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed SourceIpMappingInstance\n   */\n\n  /* jshint ignore:end */\n\n  SourceIpMappingListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n\n    if (_.isUndefined(opts.ipRecordSid)) {\n      throw new Error('Required parameter \"opts.ipRecordSid\" missing.');\n    }\n\n    if (_.isUndefined(opts.sipDomainSid)) {\n      throw new Error('Required parameter \"opts.sipDomainSid\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'IpRecordSid': _.get(opts, 'ipRecordSid'),\n      'SipDomainSid': _.get(opts, 'sipDomainSid')\n    });\n\n    var promise = this._version.create({\n      uri: this._uri,\n      method: 'POST',\n      data: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new SourceIpMappingInstance(this._version, payload, this._solution.sid));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Streams SourceIpMappingInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Voice.V1.SourceIpMappingList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n\n  /* jshint ignore:end */\n\n\n  SourceIpMappingListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Lists SourceIpMappingInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Voice.V1.SourceIpMappingList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  SourceIpMappingListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single page of SourceIpMappingInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Voice.V1.SourceIpMappingList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  SourceIpMappingListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new SourceIpMappingPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single target page of SourceIpMappingInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Voice.V1.SourceIpMappingList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  SourceIpMappingListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new SourceIpMappingPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Constructs a source_ip_mapping\n   *\n   * @function get\n   * @memberof Twilio.Voice.V1.SourceIpMappingList#\n   *\n   * @param {string} sid - The unique string that identifies the resource\n   *\n   * @returns {Twilio.Voice.V1.SourceIpMappingContext}\n   */\n\n  /* jshint ignore:end */\n\n\n  SourceIpMappingListInstance.get = function get(sid) {\n    return new SourceIpMappingContext(this._version, sid);\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Voice.V1.SourceIpMappingList#\n   *\n   * @returns Object\n   */\n\n  /* jshint ignore:end */\n\n\n  SourceIpMappingListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  SourceIpMappingListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return SourceIpMappingListInstance;\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the SourceIpMappingPage\n *\n * @constructor Twilio.Voice.V1.SourceIpMappingPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {SourceIpMappingSolution} solution - Path solution\n *\n * @returns SourceIpMappingPage\n */\n\n/* jshint ignore:end */\n\n\nSourceIpMappingPage = function SourceIpMappingPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(SourceIpMappingPage.prototype, Page.prototype);\n\nSourceIpMappingPage.prototype.constructor = SourceIpMappingPage;\n/* jshint ignore:start */\n\n/**\n * Build an instance of SourceIpMappingInstance\n *\n * @function getInstance\n * @memberof Twilio.Voice.V1.SourceIpMappingPage#\n *\n * @param {SourceIpMappingPayload} payload - Payload response from the API\n *\n * @returns SourceIpMappingInstance\n */\n\n/* jshint ignore:end */\n\nSourceIpMappingPage.prototype.getInstance = function getInstance(payload) {\n  return new SourceIpMappingInstance(this._version, payload);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Voice.V1.SourceIpMappingPage#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nSourceIpMappingPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nSourceIpMappingPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the SourceIpMappingContext\n *\n * @constructor Twilio.Voice.V1.SourceIpMappingInstance\n *\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} ipRecordSid - The unique string that identifies an IP Record\n * @property {string} sipDomainSid - The unique string that identifies a SIP Domain\n * @property {Date} dateCreated -\n *          The RFC 2822 date and time in GMT that the resource was created\n * @property {Date} dateUpdated -\n *          The RFC 2822 date and time in GMT that the resource was last updated\n * @property {string} url - The absolute URL of the resource\n *\n * @param {V1} version - Version of the resource\n * @param {SourceIpMappingPayload} payload - The instance payload\n * @param {sid} sid - The unique string that identifies the resource\n */\n\n/* jshint ignore:end */\n\n\nSourceIpMappingInstance = function SourceIpMappingInstance(version, payload, sid) {\n  this._version = version; // Marshaled Properties\n\n  this.sid = payload.sid; // jshint ignore:line\n\n  this.ipRecordSid = payload.ip_record_sid; // jshint ignore:line\n\n  this.sipDomainSid = payload.sip_domain_sid; // jshint ignore:line\n\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n\n  this.url = payload.url; // jshint ignore:line\n  // Context\n\n  this._context = undefined;\n  this._solution = {\n    sid: sid || this.sid\n  };\n};\n\nObject.defineProperty(SourceIpMappingInstance.prototype, '_proxy', {\n  get: function () {\n    if (!this._context) {\n      this._context = new SourceIpMappingContext(this._version, this._solution.sid);\n    }\n\n    return this._context;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * fetch a SourceIpMappingInstance\n *\n * @function fetch\n * @memberof Twilio.Voice.V1.SourceIpMappingInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SourceIpMappingInstance\n */\n\n/* jshint ignore:end */\n\nSourceIpMappingInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n/* jshint ignore:start */\n\n/**\n * update a SourceIpMappingInstance\n *\n * @function update\n * @memberof Twilio.Voice.V1.SourceIpMappingInstance#\n *\n * @param {object} opts - Options for request\n * @param {string} opts.sipDomainSid -\n *          The unique string that identifies a SIP Domain\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SourceIpMappingInstance\n */\n\n/* jshint ignore:end */\n\n\nSourceIpMappingInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n/* jshint ignore:start */\n\n/**\n * remove a SourceIpMappingInstance\n *\n * @function remove\n * @memberof Twilio.Voice.V1.SourceIpMappingInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SourceIpMappingInstance\n */\n\n/* jshint ignore:end */\n\n\nSourceIpMappingInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Voice.V1.SourceIpMappingInstance#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nSourceIpMappingInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nSourceIpMappingInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the SourceIpMappingContext\n *\n * @constructor Twilio.Voice.V1.SourceIpMappingContext\n *\n * @param {V1} version - Version of the resource\n * @param {sid} sid - The unique string that identifies the resource\n */\n\n/* jshint ignore:end */\n\n\nSourceIpMappingContext = function SourceIpMappingContext(version, sid) {\n  this._version = version; // Path Solution\n\n  this._solution = {\n    sid: sid\n  };\n  this._uri = `/SourceIpMappings/${sid}`;\n};\n/* jshint ignore:start */\n\n/**\n * fetch a SourceIpMappingInstance\n *\n * @function fetch\n * @memberof Twilio.Voice.V1.SourceIpMappingContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SourceIpMappingInstance\n */\n\n/* jshint ignore:end */\n\n\nSourceIpMappingContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new SourceIpMappingInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * update a SourceIpMappingInstance\n *\n * @function update\n * @memberof Twilio.Voice.V1.SourceIpMappingContext#\n *\n * @param {object} opts - Options for request\n * @param {string} opts.sipDomainSid -\n *          The unique string that identifies a SIP Domain\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SourceIpMappingInstance\n */\n\n/* jshint ignore:end */\n\n\nSourceIpMappingContext.prototype.update = function update(opts, callback) {\n  if (_.isUndefined(opts)) {\n    throw new Error('Required parameter \"opts\" missing.');\n  }\n\n  if (_.isUndefined(opts.sipDomainSid)) {\n    throw new Error('Required parameter \"opts.sipDomainSid\" missing.');\n  }\n\n  var deferred = Q.defer();\n  var data = values.of({\n    'SipDomainSid': _.get(opts, 'sipDomainSid')\n  });\n\n  var promise = this._version.update({\n    uri: this._uri,\n    method: 'POST',\n    data: data\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new SourceIpMappingInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * remove a SourceIpMappingInstance\n *\n * @function remove\n * @memberof Twilio.Voice.V1.SourceIpMappingContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SourceIpMappingInstance\n */\n\n/* jshint ignore:end */\n\n\nSourceIpMappingContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.remove({\n    uri: this._uri,\n    method: 'DELETE'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Voice.V1.SourceIpMappingContext#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nSourceIpMappingContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nSourceIpMappingContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  SourceIpMappingList: SourceIpMappingList,\n  SourceIpMappingPage: SourceIpMappingPage,\n  SourceIpMappingInstance: SourceIpMappingInstance,\n  SourceIpMappingContext: SourceIpMappingContext\n};","map":{"version":3,"sources":["/Users/tony_niu/Visual Studio/Twilio/twilio-video-starter-kit/node_modules/twilio/lib/rest/voice/v1/sourceIpMapping.js"],"names":["Q","require","_","util","Page","deserialize","values","SourceIpMappingList","SourceIpMappingPage","SourceIpMappingInstance","SourceIpMappingContext","version","SourceIpMappingListInstance","sid","get","_version","_solution","_uri","create","opts","callback","isUndefined","Error","ipRecordSid","sipDomainSid","deferred","defer","data","of","promise","uri","method","then","payload","resolve","bind","catch","error","reject","isFunction","nodeify","each","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","fetchNextPage","fn","page","instances","instance","nextPage","merge","list","allResources","resource","push","length","pageToken","pageNumber","params","getPage","targetUrl","_domain","twilio","request","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","ip_record_sid","sip_domain_sid","dateCreated","iso8601DateTime","date_created","dateUpdated","date_updated","url","_context","undefined","Object","defineProperty","fetch","_proxy","update","remove","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar Page = require('../../../base/Page');  /* jshint ignore:line */\nvar deserialize = require(\n    '../../../base/deserialize');  /* jshint ignore:line */\nvar values = require('../../../base/values');  /* jshint ignore:line */\n\nvar SourceIpMappingList;\nvar SourceIpMappingPage;\nvar SourceIpMappingInstance;\nvar SourceIpMappingContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the SourceIpMappingList\n *\n * @constructor Twilio.Voice.V1.SourceIpMappingList\n *\n * @param {Twilio.Voice.V1} version - Version of the resource\n */\n/* jshint ignore:end */\nSourceIpMappingList = function SourceIpMappingList(version) {\n  /* jshint ignore:start */\n  /**\n   * @function sourceIpMappings\n   * @memberof Twilio.Voice.V1#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Voice.V1.SourceIpMappingContext}\n   */\n  /* jshint ignore:end */\n  function SourceIpMappingListInstance(sid) {\n    return SourceIpMappingListInstance.get(sid);\n  }\n\n  SourceIpMappingListInstance._version = version;\n  // Path Solution\n  SourceIpMappingListInstance._solution = {};\n  SourceIpMappingListInstance._uri = `/SourceIpMappings`;\n  /* jshint ignore:start */\n  /**\n   * create a SourceIpMappingInstance\n   *\n   * @function create\n   * @memberof Twilio.Voice.V1.SourceIpMappingList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.ipRecordSid -\n   *          The unique string that identifies an IP Record\n   * @param {string} opts.sipDomainSid -\n   *          The unique string that identifies a SIP Domain\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed SourceIpMappingInstance\n   */\n  /* jshint ignore:end */\n  SourceIpMappingListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n    if (_.isUndefined(opts.ipRecordSid)) {\n      throw new Error('Required parameter \"opts.ipRecordSid\" missing.');\n    }\n    if (_.isUndefined(opts.sipDomainSid)) {\n      throw new Error('Required parameter \"opts.sipDomainSid\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'IpRecordSid': _.get(opts, 'ipRecordSid'),\n      'SipDomainSid': _.get(opts, 'sipDomainSid')\n    });\n\n    var promise = this._version.create({uri: this._uri, method: 'POST', data: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new SourceIpMappingInstance(this._version, payload, this._solution.sid));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Streams SourceIpMappingInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Voice.V1.SourceIpMappingList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  SourceIpMappingListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists SourceIpMappingInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Voice.V1.SourceIpMappingList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  SourceIpMappingListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of SourceIpMappingInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Voice.V1.SourceIpMappingList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  SourceIpMappingListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new SourceIpMappingPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of SourceIpMappingInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Voice.V1.SourceIpMappingList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  SourceIpMappingListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new SourceIpMappingPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a source_ip_mapping\n   *\n   * @function get\n   * @memberof Twilio.Voice.V1.SourceIpMappingList#\n   *\n   * @param {string} sid - The unique string that identifies the resource\n   *\n   * @returns {Twilio.Voice.V1.SourceIpMappingContext}\n   */\n  /* jshint ignore:end */\n  SourceIpMappingListInstance.get = function get(sid) {\n    return new SourceIpMappingContext(this._version, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Voice.V1.SourceIpMappingList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  SourceIpMappingListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  SourceIpMappingListInstance[util.inspect.custom] = function inspect(depth,\n      options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return SourceIpMappingListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the SourceIpMappingPage\n *\n * @constructor Twilio.Voice.V1.SourceIpMappingPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {SourceIpMappingSolution} solution - Path solution\n *\n * @returns SourceIpMappingPage\n */\n/* jshint ignore:end */\nSourceIpMappingPage = function SourceIpMappingPage(version, response, solution)\n                                                    {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(SourceIpMappingPage.prototype, Page.prototype);\nSourceIpMappingPage.prototype.constructor = SourceIpMappingPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of SourceIpMappingInstance\n *\n * @function getInstance\n * @memberof Twilio.Voice.V1.SourceIpMappingPage#\n *\n * @param {SourceIpMappingPayload} payload - Payload response from the API\n *\n * @returns SourceIpMappingInstance\n */\n/* jshint ignore:end */\nSourceIpMappingPage.prototype.getInstance = function getInstance(payload) {\n  return new SourceIpMappingInstance(this._version, payload);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Voice.V1.SourceIpMappingPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nSourceIpMappingPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nSourceIpMappingPage.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the SourceIpMappingContext\n *\n * @constructor Twilio.Voice.V1.SourceIpMappingInstance\n *\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} ipRecordSid - The unique string that identifies an IP Record\n * @property {string} sipDomainSid - The unique string that identifies a SIP Domain\n * @property {Date} dateCreated -\n *          The RFC 2822 date and time in GMT that the resource was created\n * @property {Date} dateUpdated -\n *          The RFC 2822 date and time in GMT that the resource was last updated\n * @property {string} url - The absolute URL of the resource\n *\n * @param {V1} version - Version of the resource\n * @param {SourceIpMappingPayload} payload - The instance payload\n * @param {sid} sid - The unique string that identifies the resource\n */\n/* jshint ignore:end */\nSourceIpMappingInstance = function SourceIpMappingInstance(version, payload,\n                                                            sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.sid = payload.sid; // jshint ignore:line\n  this.ipRecordSid = payload.ip_record_sid; // jshint ignore:line\n  this.sipDomainSid = payload.sip_domain_sid; // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {sid: sid || this.sid, };\n};\n\nObject.defineProperty(SourceIpMappingInstance.prototype,\n  '_proxy', {\n    get: function() {\n      if (!this._context) {\n        this._context = new SourceIpMappingContext(this._version, this._solution.sid);\n      }\n\n      return this._context;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a SourceIpMappingInstance\n *\n * @function fetch\n * @memberof Twilio.Voice.V1.SourceIpMappingInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SourceIpMappingInstance\n */\n/* jshint ignore:end */\nSourceIpMappingInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * update a SourceIpMappingInstance\n *\n * @function update\n * @memberof Twilio.Voice.V1.SourceIpMappingInstance#\n *\n * @param {object} opts - Options for request\n * @param {string} opts.sipDomainSid -\n *          The unique string that identifies a SIP Domain\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SourceIpMappingInstance\n */\n/* jshint ignore:end */\nSourceIpMappingInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * remove a SourceIpMappingInstance\n *\n * @function remove\n * @memberof Twilio.Voice.V1.SourceIpMappingInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SourceIpMappingInstance\n */\n/* jshint ignore:end */\nSourceIpMappingInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Voice.V1.SourceIpMappingInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nSourceIpMappingInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nSourceIpMappingInstance.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the SourceIpMappingContext\n *\n * @constructor Twilio.Voice.V1.SourceIpMappingContext\n *\n * @param {V1} version - Version of the resource\n * @param {sid} sid - The unique string that identifies the resource\n */\n/* jshint ignore:end */\nSourceIpMappingContext = function SourceIpMappingContext(version, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {sid: sid, };\n  this._uri = `/SourceIpMappings/${sid}`;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a SourceIpMappingInstance\n *\n * @function fetch\n * @memberof Twilio.Voice.V1.SourceIpMappingContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SourceIpMappingInstance\n */\n/* jshint ignore:end */\nSourceIpMappingContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({uri: this._uri, method: 'GET'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new SourceIpMappingInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * update a SourceIpMappingInstance\n *\n * @function update\n * @memberof Twilio.Voice.V1.SourceIpMappingContext#\n *\n * @param {object} opts - Options for request\n * @param {string} opts.sipDomainSid -\n *          The unique string that identifies a SIP Domain\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SourceIpMappingInstance\n */\n/* jshint ignore:end */\nSourceIpMappingContext.prototype.update = function update(opts, callback) {\n  if (_.isUndefined(opts)) {\n    throw new Error('Required parameter \"opts\" missing.');\n  }\n  if (_.isUndefined(opts.sipDomainSid)) {\n    throw new Error('Required parameter \"opts.sipDomainSid\" missing.');\n  }\n\n  var deferred = Q.defer();\n  var data = values.of({'SipDomainSid': _.get(opts, 'sipDomainSid')});\n\n  var promise = this._version.update({uri: this._uri, method: 'POST', data: data});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new SourceIpMappingInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * remove a SourceIpMappingInstance\n *\n * @function remove\n * @memberof Twilio.Voice.V1.SourceIpMappingContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SourceIpMappingInstance\n */\n/* jshint ignore:end */\nSourceIpMappingContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.remove({uri: this._uri, method: 'DELETE'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Voice.V1.SourceIpMappingContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nSourceIpMappingContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nSourceIpMappingContext.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  SourceIpMappingList: SourceIpMappingList,\n  SourceIpMappingPage: SourceIpMappingPage,\n  SourceIpMappingInstance: SourceIpMappingInstance,\n  SourceIpMappingContext: SourceIpMappingContext\n};\n"]},"metadata":{},"sourceType":"script"}