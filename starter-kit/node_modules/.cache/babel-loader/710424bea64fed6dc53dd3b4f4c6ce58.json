{"ast":null,"code":"'use strict';\n/* jshint ignore:start */\n\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n\n/* jshint ignore:end */\n\nvar Q = require('q');\n/* jshint ignore:line */\n\n\nvar _ = require('lodash');\n/* jshint ignore:line */\n\n\nvar util = require('util');\n/* jshint ignore:line */\n\n\nvar Page = require('../../../../base/Page');\n/* jshint ignore:line */\n\n\nvar deserialize = require('../../../../base/deserialize');\n/* jshint ignore:line */\n\n\nvar serialize = require('../../../../base/serialize');\n/* jshint ignore:line */\n\n\nvar values = require('../../../../base/values');\n/* jshint ignore:line */\n\n\nvar ConnectionPolicyTargetList;\nvar ConnectionPolicyTargetPage;\nvar ConnectionPolicyTargetInstance;\nvar ConnectionPolicyTargetContext;\n/* jshint ignore:start */\n\n/**\n * Initialize the ConnectionPolicyTargetList\n *\n * @constructor Twilio.Voice.V1.ConnectionPolicyContext.ConnectionPolicyTargetList\n *\n * @param {Twilio.Voice.V1} version - Version of the resource\n * @param {string} connectionPolicySid -\n *          The SID of the Connection Policy that owns the Target\n */\n\n/* jshint ignore:end */\n\nConnectionPolicyTargetList = function ConnectionPolicyTargetList(version, connectionPolicySid) {\n  /* jshint ignore:start */\n\n  /**\n   * @function targets\n   * @memberof Twilio.Voice.V1.ConnectionPolicyContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Voice.V1.ConnectionPolicyContext.ConnectionPolicyTargetContext}\n   */\n\n  /* jshint ignore:end */\n  function ConnectionPolicyTargetListInstance(sid) {\n    return ConnectionPolicyTargetListInstance.get(sid);\n  }\n\n  ConnectionPolicyTargetListInstance._version = version; // Path Solution\n\n  ConnectionPolicyTargetListInstance._solution = {\n    connectionPolicySid: connectionPolicySid\n  };\n  ConnectionPolicyTargetListInstance._uri = `/ConnectionPolicies/${connectionPolicySid}/Targets`;\n  /* jshint ignore:start */\n\n  /**\n   * create a ConnectionPolicyTargetInstance\n   *\n   * @function create\n   * @memberof Twilio.Voice.V1.ConnectionPolicyContext.ConnectionPolicyTargetList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.target -\n   *          The SIP address you want Twilio to route your calls to\n   * @param {string} [opts.friendlyName] - A string to describe the resource\n   * @param {number} [opts.priority] - The relative importance of the target\n   * @param {number} [opts.weight] -\n   *          The value that determines the relative load the Target should receive compared to others with the same priority\n   * @param {boolean} [opts.enabled] - Whether the Target is enabled\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed ConnectionPolicyTargetInstance\n   */\n\n  /* jshint ignore:end */\n\n  ConnectionPolicyTargetListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n\n    if (_.isUndefined(opts.target)) {\n      throw new Error('Required parameter \"opts.target\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'Target': _.get(opts, 'target'),\n      'FriendlyName': _.get(opts, 'friendlyName'),\n      'Priority': _.get(opts, 'priority'),\n      'Weight': _.get(opts, 'weight'),\n      'Enabled': serialize.bool(_.get(opts, 'enabled'))\n    });\n\n    var promise = this._version.create({\n      uri: this._uri,\n      method: 'POST',\n      data: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new ConnectionPolicyTargetInstance(this._version, payload, this._solution.connectionPolicySid, this._solution.sid));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Streams ConnectionPolicyTargetInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Voice.V1.ConnectionPolicyContext.ConnectionPolicyTargetList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n\n  /* jshint ignore:end */\n\n\n  ConnectionPolicyTargetListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Lists ConnectionPolicyTargetInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Voice.V1.ConnectionPolicyContext.ConnectionPolicyTargetList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  ConnectionPolicyTargetListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single page of ConnectionPolicyTargetInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Voice.V1.ConnectionPolicyContext.ConnectionPolicyTargetList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  ConnectionPolicyTargetListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new ConnectionPolicyTargetPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single target page of ConnectionPolicyTargetInstance records from the\n   * API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Voice.V1.ConnectionPolicyContext.ConnectionPolicyTargetList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  ConnectionPolicyTargetListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new ConnectionPolicyTargetPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Constructs a connection_policy_target\n   *\n   * @function get\n   * @memberof Twilio.Voice.V1.ConnectionPolicyContext.ConnectionPolicyTargetList#\n   *\n   * @param {string} sid - The unique string that identifies the resource\n   *\n   * @returns {Twilio.Voice.V1.ConnectionPolicyContext.ConnectionPolicyTargetContext}\n   */\n\n  /* jshint ignore:end */\n\n\n  ConnectionPolicyTargetListInstance.get = function get(sid) {\n    return new ConnectionPolicyTargetContext(this._version, this._solution.connectionPolicySid, sid);\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Voice.V1.ConnectionPolicyContext.ConnectionPolicyTargetList#\n   *\n   * @returns Object\n   */\n\n  /* jshint ignore:end */\n\n\n  ConnectionPolicyTargetListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  ConnectionPolicyTargetListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return ConnectionPolicyTargetListInstance;\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the ConnectionPolicyTargetPage\n *\n * @constructor Twilio.Voice.V1.ConnectionPolicyContext.ConnectionPolicyTargetPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {ConnectionPolicyTargetSolution} solution - Path solution\n *\n * @returns ConnectionPolicyTargetPage\n */\n\n/* jshint ignore:end */\n\n\nConnectionPolicyTargetPage = function ConnectionPolicyTargetPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(ConnectionPolicyTargetPage.prototype, Page.prototype);\n\nConnectionPolicyTargetPage.prototype.constructor = ConnectionPolicyTargetPage;\n/* jshint ignore:start */\n\n/**\n * Build an instance of ConnectionPolicyTargetInstance\n *\n * @function getInstance\n * @memberof Twilio.Voice.V1.ConnectionPolicyContext.ConnectionPolicyTargetPage#\n *\n * @param {ConnectionPolicyTargetPayload} payload - Payload response from the API\n *\n * @returns ConnectionPolicyTargetInstance\n */\n\n/* jshint ignore:end */\n\nConnectionPolicyTargetPage.prototype.getInstance = function getInstance(payload) {\n  return new ConnectionPolicyTargetInstance(this._version, payload, this._solution.connectionPolicySid);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Voice.V1.ConnectionPolicyContext.ConnectionPolicyTargetPage#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nConnectionPolicyTargetPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nConnectionPolicyTargetPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the ConnectionPolicyTargetContext\n *\n * @constructor Twilio.Voice.V1.ConnectionPolicyContext.ConnectionPolicyTargetInstance\n *\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {string} connectionPolicySid -\n *          The SID of the Connection Policy that owns the Target\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} friendlyName -\n *          The string that you assigned to describe the resource\n * @property {string} target -\n *          The SIP address you want Twilio to route your calls to\n * @property {number} priority - The relative importance of the target\n * @property {number} weight -\n *          The value that determines the relative load the Target should receive compared to others with the same priority\n * @property {boolean} enabled - Whether the target is enabled\n * @property {Date} dateCreated -\n *          The RFC 2822 date and time in GMT when the resource was created\n * @property {Date} dateUpdated -\n *          The RFC 2822 date and time in GMT when the resource was last updated\n * @property {string} url - The absolute URL of the resource\n *\n * @param {V1} version - Version of the resource\n * @param {ConnectionPolicyTargetPayload} payload - The instance payload\n * @param {sid} connectionPolicySid -\n *          The SID of the Connection Policy that owns the Target\n * @param {sid} sid - The unique string that identifies the resource\n */\n\n/* jshint ignore:end */\n\n\nConnectionPolicyTargetInstance = function ConnectionPolicyTargetInstance(version, payload, connectionPolicySid, sid) {\n  this._version = version; // Marshaled Properties\n\n  this.accountSid = payload.account_sid; // jshint ignore:line\n\n  this.connectionPolicySid = payload.connection_policy_sid; // jshint ignore:line\n\n  this.sid = payload.sid; // jshint ignore:line\n\n  this.friendlyName = payload.friendly_name; // jshint ignore:line\n\n  this.target = payload.target; // jshint ignore:line\n\n  this.priority = deserialize.integer(payload.priority); // jshint ignore:line\n\n  this.weight = deserialize.integer(payload.weight); // jshint ignore:line\n\n  this.enabled = payload.enabled; // jshint ignore:line\n\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n\n  this.url = payload.url; // jshint ignore:line\n  // Context\n\n  this._context = undefined;\n  this._solution = {\n    connectionPolicySid: connectionPolicySid,\n    sid: sid || this.sid\n  };\n};\n\nObject.defineProperty(ConnectionPolicyTargetInstance.prototype, '_proxy', {\n  get: function () {\n    if (!this._context) {\n      this._context = new ConnectionPolicyTargetContext(this._version, this._solution.connectionPolicySid, this._solution.sid);\n    }\n\n    return this._context;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * fetch a ConnectionPolicyTargetInstance\n *\n * @function fetch\n * @memberof Twilio.Voice.V1.ConnectionPolicyContext.ConnectionPolicyTargetInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ConnectionPolicyTargetInstance\n */\n\n/* jshint ignore:end */\n\nConnectionPolicyTargetInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n/* jshint ignore:start */\n\n/**\n * update a ConnectionPolicyTargetInstance\n *\n * @function update\n * @memberof Twilio.Voice.V1.ConnectionPolicyContext.ConnectionPolicyTargetInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] - A string to describe the resource\n * @param {string} [opts.target] -\n *          The SIP address you want Twilio to route your calls to\n * @param {number} [opts.priority] - The relative importance of the target\n * @param {number} [opts.weight] -\n *          The value that determines the relative load the Target should receive compared to others with the same priority\n * @param {boolean} [opts.enabled] - Whether the Target is enabled\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ConnectionPolicyTargetInstance\n */\n\n/* jshint ignore:end */\n\n\nConnectionPolicyTargetInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n/* jshint ignore:start */\n\n/**\n * remove a ConnectionPolicyTargetInstance\n *\n * @function remove\n * @memberof Twilio.Voice.V1.ConnectionPolicyContext.ConnectionPolicyTargetInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ConnectionPolicyTargetInstance\n */\n\n/* jshint ignore:end */\n\n\nConnectionPolicyTargetInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Voice.V1.ConnectionPolicyContext.ConnectionPolicyTargetInstance#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nConnectionPolicyTargetInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nConnectionPolicyTargetInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the ConnectionPolicyTargetContext\n *\n * @constructor Twilio.Voice.V1.ConnectionPolicyContext.ConnectionPolicyTargetContext\n *\n * @param {V1} version - Version of the resource\n * @param {sid} connectionPolicySid -\n *          The SID of the Connection Policy that owns the Target\n * @param {sid} sid - The unique string that identifies the resource\n */\n\n/* jshint ignore:end */\n\n\nConnectionPolicyTargetContext = function ConnectionPolicyTargetContext(version, connectionPolicySid, sid) {\n  this._version = version; // Path Solution\n\n  this._solution = {\n    connectionPolicySid: connectionPolicySid,\n    sid: sid\n  };\n  this._uri = `/ConnectionPolicies/${connectionPolicySid}/Targets/${sid}`;\n};\n/* jshint ignore:start */\n\n/**\n * fetch a ConnectionPolicyTargetInstance\n *\n * @function fetch\n * @memberof Twilio.Voice.V1.ConnectionPolicyContext.ConnectionPolicyTargetContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ConnectionPolicyTargetInstance\n */\n\n/* jshint ignore:end */\n\n\nConnectionPolicyTargetContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new ConnectionPolicyTargetInstance(this._version, payload, this._solution.connectionPolicySid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * update a ConnectionPolicyTargetInstance\n *\n * @function update\n * @memberof Twilio.Voice.V1.ConnectionPolicyContext.ConnectionPolicyTargetContext#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] - A string to describe the resource\n * @param {string} [opts.target] -\n *          The SIP address you want Twilio to route your calls to\n * @param {number} [opts.priority] - The relative importance of the target\n * @param {number} [opts.weight] -\n *          The value that determines the relative load the Target should receive compared to others with the same priority\n * @param {boolean} [opts.enabled] - Whether the Target is enabled\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ConnectionPolicyTargetInstance\n */\n\n/* jshint ignore:end */\n\n\nConnectionPolicyTargetContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n\n  opts = opts || {};\n  var deferred = Q.defer();\n  var data = values.of({\n    'FriendlyName': _.get(opts, 'friendlyName'),\n    'Target': _.get(opts, 'target'),\n    'Priority': _.get(opts, 'priority'),\n    'Weight': _.get(opts, 'weight'),\n    'Enabled': serialize.bool(_.get(opts, 'enabled'))\n  });\n\n  var promise = this._version.update({\n    uri: this._uri,\n    method: 'POST',\n    data: data\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new ConnectionPolicyTargetInstance(this._version, payload, this._solution.connectionPolicySid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * remove a ConnectionPolicyTargetInstance\n *\n * @function remove\n * @memberof Twilio.Voice.V1.ConnectionPolicyContext.ConnectionPolicyTargetContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ConnectionPolicyTargetInstance\n */\n\n/* jshint ignore:end */\n\n\nConnectionPolicyTargetContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.remove({\n    uri: this._uri,\n    method: 'DELETE'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Voice.V1.ConnectionPolicyContext.ConnectionPolicyTargetContext#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nConnectionPolicyTargetContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nConnectionPolicyTargetContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  ConnectionPolicyTargetList: ConnectionPolicyTargetList,\n  ConnectionPolicyTargetPage: ConnectionPolicyTargetPage,\n  ConnectionPolicyTargetInstance: ConnectionPolicyTargetInstance,\n  ConnectionPolicyTargetContext: ConnectionPolicyTargetContext\n};","map":{"version":3,"sources":["/Users/tony_niu/Visual Studio/Twilio/twilio-video-starter-kit/src/token-service/node_modules/twilio/lib/rest/voice/v1/connectionPolicy/connectionPolicyTarget.js"],"names":["Q","require","_","util","Page","deserialize","serialize","values","ConnectionPolicyTargetList","ConnectionPolicyTargetPage","ConnectionPolicyTargetInstance","ConnectionPolicyTargetContext","version","connectionPolicySid","ConnectionPolicyTargetListInstance","sid","get","_version","_solution","_uri","create","opts","callback","isUndefined","Error","target","deferred","defer","data","of","bool","promise","uri","method","then","payload","resolve","bind","catch","error","reject","isFunction","nodeify","each","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","fetchNextPage","fn","page","instances","instance","nextPage","merge","list","allResources","resource","push","length","pageToken","pageNumber","params","getPage","targetUrl","_domain","twilio","request","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","accountSid","account_sid","connection_policy_sid","friendlyName","friendly_name","priority","integer","weight","enabled","dateCreated","iso8601DateTime","date_created","dateUpdated","date_updated","url","_context","undefined","Object","defineProperty","fetch","_proxy","update","remove","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar Page = require('../../../../base/Page');  /* jshint ignore:line */\nvar deserialize = require(\n    '../../../../base/deserialize');  /* jshint ignore:line */\nvar serialize = require('../../../../base/serialize');  /* jshint ignore:line */\nvar values = require('../../../../base/values');  /* jshint ignore:line */\n\nvar ConnectionPolicyTargetList;\nvar ConnectionPolicyTargetPage;\nvar ConnectionPolicyTargetInstance;\nvar ConnectionPolicyTargetContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the ConnectionPolicyTargetList\n *\n * @constructor Twilio.Voice.V1.ConnectionPolicyContext.ConnectionPolicyTargetList\n *\n * @param {Twilio.Voice.V1} version - Version of the resource\n * @param {string} connectionPolicySid -\n *          The SID of the Connection Policy that owns the Target\n */\n/* jshint ignore:end */\nConnectionPolicyTargetList = function ConnectionPolicyTargetList(version,\n    connectionPolicySid) {\n  /* jshint ignore:start */\n  /**\n   * @function targets\n   * @memberof Twilio.Voice.V1.ConnectionPolicyContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Voice.V1.ConnectionPolicyContext.ConnectionPolicyTargetContext}\n   */\n  /* jshint ignore:end */\n  function ConnectionPolicyTargetListInstance(sid) {\n    return ConnectionPolicyTargetListInstance.get(sid);\n  }\n\n  ConnectionPolicyTargetListInstance._version = version;\n  // Path Solution\n  ConnectionPolicyTargetListInstance._solution = {connectionPolicySid: connectionPolicySid};\n  ConnectionPolicyTargetListInstance._uri = `/ConnectionPolicies/${connectionPolicySid}/Targets`;\n  /* jshint ignore:start */\n  /**\n   * create a ConnectionPolicyTargetInstance\n   *\n   * @function create\n   * @memberof Twilio.Voice.V1.ConnectionPolicyContext.ConnectionPolicyTargetList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.target -\n   *          The SIP address you want Twilio to route your calls to\n   * @param {string} [opts.friendlyName] - A string to describe the resource\n   * @param {number} [opts.priority] - The relative importance of the target\n   * @param {number} [opts.weight] -\n   *          The value that determines the relative load the Target should receive compared to others with the same priority\n   * @param {boolean} [opts.enabled] - Whether the Target is enabled\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed ConnectionPolicyTargetInstance\n   */\n  /* jshint ignore:end */\n  ConnectionPolicyTargetListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n    if (_.isUndefined(opts.target)) {\n      throw new Error('Required parameter \"opts.target\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'Target': _.get(opts, 'target'),\n      'FriendlyName': _.get(opts, 'friendlyName'),\n      'Priority': _.get(opts, 'priority'),\n      'Weight': _.get(opts, 'weight'),\n      'Enabled': serialize.bool(_.get(opts, 'enabled'))\n    });\n\n    var promise = this._version.create({uri: this._uri, method: 'POST', data: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new ConnectionPolicyTargetInstance(\n        this._version,\n        payload,\n        this._solution.connectionPolicySid,\n        this._solution.sid\n      ));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Streams ConnectionPolicyTargetInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Voice.V1.ConnectionPolicyContext.ConnectionPolicyTargetList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  ConnectionPolicyTargetListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists ConnectionPolicyTargetInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Voice.V1.ConnectionPolicyContext.ConnectionPolicyTargetList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  ConnectionPolicyTargetListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of ConnectionPolicyTargetInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Voice.V1.ConnectionPolicyContext.ConnectionPolicyTargetList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  ConnectionPolicyTargetListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new ConnectionPolicyTargetPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of ConnectionPolicyTargetInstance records from the\n   * API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Voice.V1.ConnectionPolicyContext.ConnectionPolicyTargetList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  ConnectionPolicyTargetListInstance.getPage = function getPage(targetUrl,\n      callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new ConnectionPolicyTargetPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a connection_policy_target\n   *\n   * @function get\n   * @memberof Twilio.Voice.V1.ConnectionPolicyContext.ConnectionPolicyTargetList#\n   *\n   * @param {string} sid - The unique string that identifies the resource\n   *\n   * @returns {Twilio.Voice.V1.ConnectionPolicyContext.ConnectionPolicyTargetContext}\n   */\n  /* jshint ignore:end */\n  ConnectionPolicyTargetListInstance.get = function get(sid) {\n    return new ConnectionPolicyTargetContext(this._version, this._solution.connectionPolicySid, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Voice.V1.ConnectionPolicyContext.ConnectionPolicyTargetList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  ConnectionPolicyTargetListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  ConnectionPolicyTargetListInstance[util.inspect.custom] = function\n      inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return ConnectionPolicyTargetListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the ConnectionPolicyTargetPage\n *\n * @constructor Twilio.Voice.V1.ConnectionPolicyContext.ConnectionPolicyTargetPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {ConnectionPolicyTargetSolution} solution - Path solution\n *\n * @returns ConnectionPolicyTargetPage\n */\n/* jshint ignore:end */\nConnectionPolicyTargetPage = function ConnectionPolicyTargetPage(version,\n    response, solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(ConnectionPolicyTargetPage.prototype, Page.prototype);\nConnectionPolicyTargetPage.prototype.constructor = ConnectionPolicyTargetPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of ConnectionPolicyTargetInstance\n *\n * @function getInstance\n * @memberof Twilio.Voice.V1.ConnectionPolicyContext.ConnectionPolicyTargetPage#\n *\n * @param {ConnectionPolicyTargetPayload} payload - Payload response from the API\n *\n * @returns ConnectionPolicyTargetInstance\n */\n/* jshint ignore:end */\nConnectionPolicyTargetPage.prototype.getInstance = function getInstance(payload)\n    {\n  return new ConnectionPolicyTargetInstance(\n    this._version,\n    payload,\n    this._solution.connectionPolicySid\n  );\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Voice.V1.ConnectionPolicyContext.ConnectionPolicyTargetPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nConnectionPolicyTargetPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nConnectionPolicyTargetPage.prototype[util.inspect.custom] = function\n    inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the ConnectionPolicyTargetContext\n *\n * @constructor Twilio.Voice.V1.ConnectionPolicyContext.ConnectionPolicyTargetInstance\n *\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {string} connectionPolicySid -\n *          The SID of the Connection Policy that owns the Target\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} friendlyName -\n *          The string that you assigned to describe the resource\n * @property {string} target -\n *          The SIP address you want Twilio to route your calls to\n * @property {number} priority - The relative importance of the target\n * @property {number} weight -\n *          The value that determines the relative load the Target should receive compared to others with the same priority\n * @property {boolean} enabled - Whether the target is enabled\n * @property {Date} dateCreated -\n *          The RFC 2822 date and time in GMT when the resource was created\n * @property {Date} dateUpdated -\n *          The RFC 2822 date and time in GMT when the resource was last updated\n * @property {string} url - The absolute URL of the resource\n *\n * @param {V1} version - Version of the resource\n * @param {ConnectionPolicyTargetPayload} payload - The instance payload\n * @param {sid} connectionPolicySid -\n *          The SID of the Connection Policy that owns the Target\n * @param {sid} sid - The unique string that identifies the resource\n */\n/* jshint ignore:end */\nConnectionPolicyTargetInstance = function\n    ConnectionPolicyTargetInstance(version, payload, connectionPolicySid, sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.connectionPolicySid = payload.connection_policy_sid; // jshint ignore:line\n  this.sid = payload.sid; // jshint ignore:line\n  this.friendlyName = payload.friendly_name; // jshint ignore:line\n  this.target = payload.target; // jshint ignore:line\n  this.priority = deserialize.integer(payload.priority); // jshint ignore:line\n  this.weight = deserialize.integer(payload.weight); // jshint ignore:line\n  this.enabled = payload.enabled; // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {connectionPolicySid: connectionPolicySid, sid: sid || this.sid, };\n};\n\nObject.defineProperty(ConnectionPolicyTargetInstance.prototype,\n  '_proxy', {\n    get: function() {\n      if (!this._context) {\n        this._context = new ConnectionPolicyTargetContext(\n          this._version,\n          this._solution.connectionPolicySid,\n          this._solution.sid\n        );\n      }\n\n      return this._context;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a ConnectionPolicyTargetInstance\n *\n * @function fetch\n * @memberof Twilio.Voice.V1.ConnectionPolicyContext.ConnectionPolicyTargetInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ConnectionPolicyTargetInstance\n */\n/* jshint ignore:end */\nConnectionPolicyTargetInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * update a ConnectionPolicyTargetInstance\n *\n * @function update\n * @memberof Twilio.Voice.V1.ConnectionPolicyContext.ConnectionPolicyTargetInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] - A string to describe the resource\n * @param {string} [opts.target] -\n *          The SIP address you want Twilio to route your calls to\n * @param {number} [opts.priority] - The relative importance of the target\n * @param {number} [opts.weight] -\n *          The value that determines the relative load the Target should receive compared to others with the same priority\n * @param {boolean} [opts.enabled] - Whether the Target is enabled\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ConnectionPolicyTargetInstance\n */\n/* jshint ignore:end */\nConnectionPolicyTargetInstance.prototype.update = function update(opts,\n    callback) {\n  return this._proxy.update(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * remove a ConnectionPolicyTargetInstance\n *\n * @function remove\n * @memberof Twilio.Voice.V1.ConnectionPolicyContext.ConnectionPolicyTargetInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ConnectionPolicyTargetInstance\n */\n/* jshint ignore:end */\nConnectionPolicyTargetInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Voice.V1.ConnectionPolicyContext.ConnectionPolicyTargetInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nConnectionPolicyTargetInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nConnectionPolicyTargetInstance.prototype[util.inspect.custom] = function\n    inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the ConnectionPolicyTargetContext\n *\n * @constructor Twilio.Voice.V1.ConnectionPolicyContext.ConnectionPolicyTargetContext\n *\n * @param {V1} version - Version of the resource\n * @param {sid} connectionPolicySid -\n *          The SID of the Connection Policy that owns the Target\n * @param {sid} sid - The unique string that identifies the resource\n */\n/* jshint ignore:end */\nConnectionPolicyTargetContext = function ConnectionPolicyTargetContext(version,\n    connectionPolicySid, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {connectionPolicySid: connectionPolicySid, sid: sid, };\n  this._uri = `/ConnectionPolicies/${connectionPolicySid}/Targets/${sid}`;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a ConnectionPolicyTargetInstance\n *\n * @function fetch\n * @memberof Twilio.Voice.V1.ConnectionPolicyContext.ConnectionPolicyTargetContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ConnectionPolicyTargetInstance\n */\n/* jshint ignore:end */\nConnectionPolicyTargetContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({uri: this._uri, method: 'GET'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new ConnectionPolicyTargetInstance(\n      this._version,\n      payload,\n      this._solution.connectionPolicySid,\n      this._solution.sid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * update a ConnectionPolicyTargetInstance\n *\n * @function update\n * @memberof Twilio.Voice.V1.ConnectionPolicyContext.ConnectionPolicyTargetContext#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] - A string to describe the resource\n * @param {string} [opts.target] -\n *          The SIP address you want Twilio to route your calls to\n * @param {number} [opts.priority] - The relative importance of the target\n * @param {number} [opts.weight] -\n *          The value that determines the relative load the Target should receive compared to others with the same priority\n * @param {boolean} [opts.enabled] - Whether the Target is enabled\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ConnectionPolicyTargetInstance\n */\n/* jshint ignore:end */\nConnectionPolicyTargetContext.prototype.update = function update(opts, callback)\n    {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n  opts = opts || {};\n\n  var deferred = Q.defer();\n  var data = values.of({\n    'FriendlyName': _.get(opts, 'friendlyName'),\n    'Target': _.get(opts, 'target'),\n    'Priority': _.get(opts, 'priority'),\n    'Weight': _.get(opts, 'weight'),\n    'Enabled': serialize.bool(_.get(opts, 'enabled'))\n  });\n\n  var promise = this._version.update({uri: this._uri, method: 'POST', data: data});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new ConnectionPolicyTargetInstance(\n      this._version,\n      payload,\n      this._solution.connectionPolicySid,\n      this._solution.sid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * remove a ConnectionPolicyTargetInstance\n *\n * @function remove\n * @memberof Twilio.Voice.V1.ConnectionPolicyContext.ConnectionPolicyTargetContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ConnectionPolicyTargetInstance\n */\n/* jshint ignore:end */\nConnectionPolicyTargetContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.remove({uri: this._uri, method: 'DELETE'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Voice.V1.ConnectionPolicyContext.ConnectionPolicyTargetContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nConnectionPolicyTargetContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nConnectionPolicyTargetContext.prototype[util.inspect.custom] = function\n    inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  ConnectionPolicyTargetList: ConnectionPolicyTargetList,\n  ConnectionPolicyTargetPage: ConnectionPolicyTargetPage,\n  ConnectionPolicyTargetInstance: ConnectionPolicyTargetInstance,\n  ConnectionPolicyTargetContext: ConnectionPolicyTargetContext\n};\n"]},"metadata":{},"sourceType":"module"}