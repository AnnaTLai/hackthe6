{"ast":null,"code":"'use strict';\n/* jshint ignore:start */\n\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n\n/* jshint ignore:end */\n\nvar Q = require('q');\n/* jshint ignore:line */\n\n\nvar _ = require('lodash');\n/* jshint ignore:line */\n\n\nvar util = require('util');\n/* jshint ignore:line */\n\n\nvar IpAddressList = require('./ipAccessControlList/ipAddress').IpAddressList;\n\nvar Page = require('../../../../../base/Page');\n/* jshint ignore:line */\n\n\nvar deserialize = require('../../../../../base/deserialize');\n/* jshint ignore:line */\n\n\nvar values = require('../../../../../base/values');\n/* jshint ignore:line */\n\n\nvar IpAccessControlListList;\nvar IpAccessControlListPage;\nvar IpAccessControlListInstance;\nvar IpAccessControlListContext;\n/* jshint ignore:start */\n\n/**\n * Initialize the IpAccessControlListList\n *\n * @constructor Twilio.Api.V2010.AccountContext.SipContext.IpAccessControlListList\n *\n * @param {Twilio.Api.V2010} version - Version of the resource\n * @param {string} accountSid -\n *          A 34 character string that uniquely identifies this resource.\n */\n\n/* jshint ignore:end */\n\nIpAccessControlListList = function IpAccessControlListList(version, accountSid) {\n  /* jshint ignore:start */\n\n  /**\n   * @function ipAccessControlLists\n   * @memberof Twilio.Api.V2010.AccountContext.SipContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Api.V2010.AccountContext.SipContext.IpAccessControlListContext}\n   */\n\n  /* jshint ignore:end */\n  function IpAccessControlListListInstance(sid) {\n    return IpAccessControlListListInstance.get(sid);\n  }\n\n  IpAccessControlListListInstance._version = version; // Path Solution\n\n  IpAccessControlListListInstance._solution = {\n    accountSid: accountSid\n  };\n  IpAccessControlListListInstance._uri = `/Accounts/${accountSid}/SIP/IpAccessControlLists.json`;\n  /* jshint ignore:start */\n\n  /**\n   * Streams IpAccessControlListInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Api.V2010.AccountContext.SipContext.IpAccessControlListList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n\n  /* jshint ignore:end */\n\n  IpAccessControlListListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Lists IpAccessControlListInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Api.V2010.AccountContext.SipContext.IpAccessControlListList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  IpAccessControlListListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single page of IpAccessControlListInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Api.V2010.AccountContext.SipContext.IpAccessControlListList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  IpAccessControlListListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new IpAccessControlListPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single target page of IpAccessControlListInstance records from the\n   * API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Api.V2010.AccountContext.SipContext.IpAccessControlListList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  IpAccessControlListListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new IpAccessControlListPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * create a IpAccessControlListInstance\n   *\n   * @function create\n   * @memberof Twilio.Api.V2010.AccountContext.SipContext.IpAccessControlListList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.friendlyName -\n   *          A human readable description of this resource\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed IpAccessControlListInstance\n   */\n\n  /* jshint ignore:end */\n\n\n  IpAccessControlListListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n\n    if (_.isUndefined(opts.friendlyName)) {\n      throw new Error('Required parameter \"opts.friendlyName\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'FriendlyName': _.get(opts, 'friendlyName')\n    });\n\n    var promise = this._version.create({\n      uri: this._uri,\n      method: 'POST',\n      data: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new IpAccessControlListInstance(this._version, payload, this._solution.accountSid, this._solution.sid));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Constructs a ip_access_control_list\n   *\n   * @function get\n   * @memberof Twilio.Api.V2010.AccountContext.SipContext.IpAccessControlListList#\n   *\n   * @param {string} sid - A string that identifies the resource to fetch\n   *\n   * @returns {Twilio.Api.V2010.AccountContext.SipContext.IpAccessControlListContext}\n   */\n\n  /* jshint ignore:end */\n\n\n  IpAccessControlListListInstance.get = function get(sid) {\n    return new IpAccessControlListContext(this._version, this._solution.accountSid, sid);\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Api.V2010.AccountContext.SipContext.IpAccessControlListList#\n   *\n   * @returns Object\n   */\n\n  /* jshint ignore:end */\n\n\n  IpAccessControlListListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  IpAccessControlListListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return IpAccessControlListListInstance;\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the IpAccessControlListPage\n *\n * @constructor Twilio.Api.V2010.AccountContext.SipContext.IpAccessControlListPage\n *\n * @param {V2010} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {IpAccessControlListSolution} solution - Path solution\n *\n * @returns IpAccessControlListPage\n */\n\n/* jshint ignore:end */\n\n\nIpAccessControlListPage = function IpAccessControlListPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(IpAccessControlListPage.prototype, Page.prototype);\n\nIpAccessControlListPage.prototype.constructor = IpAccessControlListPage;\n/* jshint ignore:start */\n\n/**\n * Build an instance of IpAccessControlListInstance\n *\n * @function getInstance\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.IpAccessControlListPage#\n *\n * @param {IpAccessControlListPayload} payload - Payload response from the API\n *\n * @returns IpAccessControlListInstance\n */\n\n/* jshint ignore:end */\n\nIpAccessControlListPage.prototype.getInstance = function getInstance(payload) {\n  return new IpAccessControlListInstance(this._version, payload, this._solution.accountSid);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.IpAccessControlListPage#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nIpAccessControlListPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nIpAccessControlListPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the IpAccessControlListContext\n *\n * @constructor Twilio.Api.V2010.AccountContext.SipContext.IpAccessControlListInstance\n *\n * @property {string} sid - A string that uniquely identifies this resource\n * @property {string} accountSid - The unique sid that identifies this account\n * @property {string} friendlyName - A human readable description of this resource\n * @property {Date} dateCreated - The date this resource was created\n * @property {Date} dateUpdated - The date this resource was last updated\n * @property {string} subresourceUris -\n *          The IP addresses associated with this resource.\n * @property {string} uri - The URI for this resource\n *\n * @param {V2010} version - Version of the resource\n * @param {IpAccessControlListPayload} payload - The instance payload\n * @param {sid} accountSid -\n *          A 34 character string that uniquely identifies this resource.\n * @param {sid} sid - A string that identifies the resource to fetch\n */\n\n/* jshint ignore:end */\n\n\nIpAccessControlListInstance = function IpAccessControlListInstance(version, payload, accountSid, sid) {\n  this._version = version; // Marshaled Properties\n\n  this.sid = payload.sid; // jshint ignore:line\n\n  this.accountSid = payload.account_sid; // jshint ignore:line\n\n  this.friendlyName = payload.friendly_name; // jshint ignore:line\n\n  this.dateCreated = deserialize.rfc2822DateTime(payload.date_created); // jshint ignore:line\n\n  this.dateUpdated = deserialize.rfc2822DateTime(payload.date_updated); // jshint ignore:line\n\n  this.subresourceUris = payload.subresource_uris; // jshint ignore:line\n\n  this.uri = payload.uri; // jshint ignore:line\n  // Context\n\n  this._context = undefined;\n  this._solution = {\n    accountSid: accountSid,\n    sid: sid || this.sid\n  };\n};\n\nObject.defineProperty(IpAccessControlListInstance.prototype, '_proxy', {\n  get: function () {\n    if (!this._context) {\n      this._context = new IpAccessControlListContext(this._version, this._solution.accountSid, this._solution.sid);\n    }\n\n    return this._context;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * fetch a IpAccessControlListInstance\n *\n * @function fetch\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.IpAccessControlListInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed IpAccessControlListInstance\n */\n\n/* jshint ignore:end */\n\nIpAccessControlListInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n/* jshint ignore:start */\n\n/**\n * update a IpAccessControlListInstance\n *\n * @function update\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.IpAccessControlListInstance#\n *\n * @param {object} opts - Options for request\n * @param {string} opts.friendlyName -\n *          A human readable description of this resource\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed IpAccessControlListInstance\n */\n\n/* jshint ignore:end */\n\n\nIpAccessControlListInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n/* jshint ignore:start */\n\n/**\n * remove a IpAccessControlListInstance\n *\n * @function remove\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.IpAccessControlListInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed IpAccessControlListInstance\n */\n\n/* jshint ignore:end */\n\n\nIpAccessControlListInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n/* jshint ignore:start */\n\n/**\n * Access the ipAddresses\n *\n * @function ipAddresses\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.IpAccessControlListInstance#\n *\n * @returns {Twilio.Api.V2010.AccountContext.SipContext.IpAccessControlListContext.IpAddressList}\n */\n\n/* jshint ignore:end */\n\n\nIpAccessControlListInstance.prototype.ipAddresses = function ipAddresses() {\n  return this._proxy.ipAddresses;\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.IpAccessControlListInstance#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nIpAccessControlListInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nIpAccessControlListInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the IpAccessControlListContext\n *\n * @constructor Twilio.Api.V2010.AccountContext.SipContext.IpAccessControlListContext\n *\n * @property {Twilio.Api.V2010.AccountContext.SipContext.IpAccessControlListContext.IpAddressList} ipAddresses -\n *          ipAddresses resource\n *\n * @param {V2010} version - Version of the resource\n * @param {sid} accountSid - The unique sid that identifies this account\n * @param {sid} sid - A string that identifies the resource to fetch\n */\n\n/* jshint ignore:end */\n\n\nIpAccessControlListContext = function IpAccessControlListContext(version, accountSid, sid) {\n  this._version = version; // Path Solution\n\n  this._solution = {\n    accountSid: accountSid,\n    sid: sid\n  };\n  this._uri = `/Accounts/${accountSid}/SIP/IpAccessControlLists/${sid}.json`; // Dependents\n\n  this._ipAddresses = undefined;\n};\n/* jshint ignore:start */\n\n/**\n * fetch a IpAccessControlListInstance\n *\n * @function fetch\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.IpAccessControlListContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed IpAccessControlListInstance\n */\n\n/* jshint ignore:end */\n\n\nIpAccessControlListContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new IpAccessControlListInstance(this._version, payload, this._solution.accountSid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * update a IpAccessControlListInstance\n *\n * @function update\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.IpAccessControlListContext#\n *\n * @param {object} opts - Options for request\n * @param {string} opts.friendlyName -\n *          A human readable description of this resource\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed IpAccessControlListInstance\n */\n\n/* jshint ignore:end */\n\n\nIpAccessControlListContext.prototype.update = function update(opts, callback) {\n  if (_.isUndefined(opts)) {\n    throw new Error('Required parameter \"opts\" missing.');\n  }\n\n  if (_.isUndefined(opts.friendlyName)) {\n    throw new Error('Required parameter \"opts.friendlyName\" missing.');\n  }\n\n  var deferred = Q.defer();\n  var data = values.of({\n    'FriendlyName': _.get(opts, 'friendlyName')\n  });\n\n  var promise = this._version.update({\n    uri: this._uri,\n    method: 'POST',\n    data: data\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new IpAccessControlListInstance(this._version, payload, this._solution.accountSid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * remove a IpAccessControlListInstance\n *\n * @function remove\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.IpAccessControlListContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed IpAccessControlListInstance\n */\n\n/* jshint ignore:end */\n\n\nIpAccessControlListContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.remove({\n    uri: this._uri,\n    method: 'DELETE'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\nObject.defineProperty(IpAccessControlListContext.prototype, 'ipAddresses', {\n  get: function () {\n    if (!this._ipAddresses) {\n      this._ipAddresses = new IpAddressList(this._version, this._solution.accountSid, this._solution.sid);\n    }\n\n    return this._ipAddresses;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.IpAccessControlListContext#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\nIpAccessControlListContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nIpAccessControlListContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  IpAccessControlListList: IpAccessControlListList,\n  IpAccessControlListPage: IpAccessControlListPage,\n  IpAccessControlListInstance: IpAccessControlListInstance,\n  IpAccessControlListContext: IpAccessControlListContext\n};","map":{"version":3,"sources":["/Users/tony_niu/Visual Studio/Twilio/twilio-video-starter-kit/src/token-service/node_modules/twilio/lib/rest/api/v2010/account/sip/ipAccessControlList.js"],"names":["Q","require","_","util","IpAddressList","Page","deserialize","values","IpAccessControlListList","IpAccessControlListPage","IpAccessControlListInstance","IpAccessControlListContext","version","accountSid","IpAccessControlListListInstance","sid","get","_version","_solution","_uri","each","opts","callback","isFunction","isUndefined","Error","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","error","fetchNextPage","fn","promise","then","page","instances","instance","bind","nextPage","catch","merge","list","deferred","defer","allResources","resource","push","length","resolve","reject","nodeify","data","of","pageToken","pageNumber","uri","method","params","payload","getPage","targetUrl","_domain","twilio","request","create","friendlyName","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","account_sid","friendly_name","dateCreated","rfc2822DateTime","date_created","dateUpdated","date_updated","subresourceUris","subresource_uris","_context","undefined","Object","defineProperty","fetch","_proxy","update","remove","ipAddresses","_ipAddresses","module","exports"],"mappings":"AAAA;AAEA;;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;AAEA,IAAIA,CAAC,GAAGC,OAAO,CAAC,GAAD,CAAf;AAAuB;;;AACvB,IAAIC,CAAC,GAAGD,OAAO,CAAC,QAAD,CAAf;AAA4B;;;AAC5B,IAAIE,IAAI,GAAGF,OAAO,CAAC,MAAD,CAAlB;AAA6B;;;AAC7B,IAAIG,aAAa,GAAGH,OAAO,CAAC,iCAAD,CAAP,CAA2CG,aAA/D;;AACA,IAAIC,IAAI,GAAGJ,OAAO,CAAC,0BAAD,CAAlB;AAAiD;;;AACjD,IAAIK,WAAW,GAAGL,OAAO,CACrB,iCADqB,CAAzB;AACyC;;;AACzC,IAAIM,MAAM,GAAGN,OAAO,CAAC,4BAAD,CAApB;AAAqD;;;AAErD,IAAIO,uBAAJ;AACA,IAAIC,uBAAJ;AACA,IAAIC,2BAAJ;AACA,IAAIC,0BAAJ;AAEA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;AACAH,uBAAuB,GAAG,SAASA,uBAAT,CAAiCI,OAAjC,EAA0CC,UAA1C,EACkC;AAC1D;;AACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;AACE;AACA,WAASC,+BAAT,CAAyCC,GAAzC,EAA8C;AAC5C,WAAOD,+BAA+B,CAACE,GAAhC,CAAoCD,GAApC,CAAP;AACD;;AAEDD,EAAAA,+BAA+B,CAACG,QAAhC,GAA2CL,OAA3C,CAf0D,CAgB1D;;AACAE,EAAAA,+BAA+B,CAACI,SAAhC,GAA4C;AAACL,IAAAA,UAAU,EAAEA;AAAb,GAA5C;AACAC,EAAAA,+BAA+B,CAACK,IAAhC,GAAwC,aAAYN,UAAW,gCAA/D;AACA;;AACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE;;AACAC,EAAAA,+BAA+B,CAACM,IAAhC,GAAuC,SAASA,IAAT,CAAcC,IAAd,EAAoBC,QAApB,EAA8B;AACnE,QAAIpB,CAAC,CAACqB,UAAF,CAAaF,IAAb,CAAJ,EAAwB;AACtBC,MAAAA,QAAQ,GAAGD,IAAX;AACAA,MAAAA,IAAI,GAAG,EAAP;AACD;;AACDA,IAAAA,IAAI,GAAGA,IAAI,IAAI,EAAf;;AACA,QAAIA,IAAI,CAACC,QAAT,EAAmB;AACjBA,MAAAA,QAAQ,GAAGD,IAAI,CAACC,QAAhB;AACD;;AACD,QAAIpB,CAAC,CAACsB,WAAF,CAAcF,QAAd,CAAJ,EAA6B;AAC3B,YAAM,IAAIG,KAAJ,CAAU,oCAAV,CAAN;AACD;;AAED,QAAIC,IAAI,GAAG,KAAX;AACA,QAAIC,WAAW,GAAG,CAAlB;AACA,QAAIC,eAAe,GAAG,CAAtB;;AACA,QAAIC,MAAM,GAAG,KAAKZ,QAAL,CAAca,UAAd,CAAyB;AACpCC,MAAAA,KAAK,EAAEV,IAAI,CAACU,KADwB;AAEpCC,MAAAA,QAAQ,EAAEX,IAAI,CAACW;AAFqB,KAAzB,CAAb;;AAKA,aAASC,UAAT,CAAoBC,KAApB,EAA2B;AACzBR,MAAAA,IAAI,GAAG,IAAP;;AACA,UAAIxB,CAAC,CAACqB,UAAF,CAAaF,IAAI,CAACK,IAAlB,CAAJ,EAA6B;AAC3BL,QAAAA,IAAI,CAACK,IAAL,CAAUQ,KAAV;AACD;AACF;;AAED,aAASC,aAAT,CAAuBC,EAAvB,EAA2B;AACzB,UAAIC,OAAO,GAAGD,EAAE,EAAhB;;AACA,UAAIlC,CAAC,CAACsB,WAAF,CAAca,OAAd,CAAJ,EAA4B;AAC1BJ,QAAAA,UAAU;AACV;AACD;;AAEDI,MAAAA,OAAO,CAACC,IAAR,CAAa,UAASC,IAAT,EAAe;AAC1BrC,QAAAA,CAAC,CAACkB,IAAF,CAAOmB,IAAI,CAACC,SAAZ,EAAuB,UAASC,QAAT,EAAmB;AACxC,cAAIf,IAAI,IAAK,CAACxB,CAAC,CAACsB,WAAF,CAAcH,IAAI,CAACU,KAAnB,CAAD,IAA8BH,eAAe,IAAIP,IAAI,CAACU,KAAnE,EAA2E;AACzEL,YAAAA,IAAI,GAAG,IAAP;AACA,mBAAO,KAAP;AACD;;AAEDE,UAAAA,eAAe;AACfN,UAAAA,QAAQ,CAACmB,QAAD,EAAWR,UAAX,CAAR;AACD,SARD;;AAUA,YAAI,CAACP,IAAL,EAAW;AACTC,UAAAA,WAAW;AACXQ,UAAAA,aAAa,CAACjC,CAAC,CAACwC,IAAF,CAAOH,IAAI,CAACI,QAAZ,EAAsBJ,IAAtB,CAAD,CAAb;AACD;AACF,OAfD;AAiBAF,MAAAA,OAAO,CAACO,KAAR,CAAcX,UAAd;AACD;;AAEDE,IAAAA,aAAa,CAACjC,CAAC,CAACwC,IAAF,CAAO,KAAKH,IAAZ,EAAkB,IAAlB,EAAwBrC,CAAC,CAAC2C,KAAF,CAAQxB,IAAR,EAAcQ,MAAd,CAAxB,CAAD,CAAb;AACD,GAxDD;AA0DA;;AACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE;;;AACAf,EAAAA,+BAA+B,CAACgC,IAAhC,GAAuC,SAASA,IAAT,CAAczB,IAAd,EAAoBC,QAApB,EAA8B;AACnE,QAAIpB,CAAC,CAACqB,UAAF,CAAaF,IAAb,CAAJ,EAAwB;AACtBC,MAAAA,QAAQ,GAAGD,IAAX;AACAA,MAAAA,IAAI,GAAG,EAAP;AACD;;AACDA,IAAAA,IAAI,GAAGA,IAAI,IAAI,EAAf;AACA,QAAI0B,QAAQ,GAAG/C,CAAC,CAACgD,KAAF,EAAf;AACA,QAAIC,YAAY,GAAG,EAAnB;;AACA5B,IAAAA,IAAI,CAACC,QAAL,GAAgB,UAAS4B,QAAT,EAAmBxB,IAAnB,EAAyB;AACvCuB,MAAAA,YAAY,CAACE,IAAb,CAAkBD,QAAlB;;AAEA,UAAI,CAAChD,CAAC,CAACsB,WAAF,CAAcH,IAAI,CAACU,KAAnB,CAAD,IAA8BkB,YAAY,CAACG,MAAb,KAAwB/B,IAAI,CAACU,KAA/D,EAAsE;AACpEL,QAAAA,IAAI;AACL;AACF,KAND;;AAQAL,IAAAA,IAAI,CAACK,IAAL,GAAY,UAASQ,KAAT,EAAgB;AAC1B,UAAIhC,CAAC,CAACsB,WAAF,CAAcU,KAAd,CAAJ,EAA0B;AACxBa,QAAAA,QAAQ,CAACM,OAAT,CAAiBJ,YAAjB;AACD,OAFD,MAEO;AACLF,QAAAA,QAAQ,CAACO,MAAT,CAAgBpB,KAAhB;AACD;AACF,KAND;;AAQA,QAAIhC,CAAC,CAACqB,UAAF,CAAaD,QAAb,CAAJ,EAA4B;AAC1ByB,MAAAA,QAAQ,CAACV,OAAT,CAAiBkB,OAAjB,CAAyBjC,QAAzB;AACD;;AAED,SAAKF,IAAL,CAAUC,IAAV;AACA,WAAO0B,QAAQ,CAACV,OAAhB;AACD,GA9BD;AAgCA;;AACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE;;;AACAvB,EAAAA,+BAA+B,CAACyB,IAAhC,GAAuC,SAASA,IAAT,CAAclB,IAAd,EAAoBC,QAApB,EAA8B;AACnE,QAAIpB,CAAC,CAACqB,UAAF,CAAaF,IAAb,CAAJ,EAAwB;AACtBC,MAAAA,QAAQ,GAAGD,IAAX;AACAA,MAAAA,IAAI,GAAG,EAAP;AACD;;AACDA,IAAAA,IAAI,GAAGA,IAAI,IAAI,EAAf;AAEA,QAAI0B,QAAQ,GAAG/C,CAAC,CAACgD,KAAF,EAAf;AACA,QAAIQ,IAAI,GAAGjD,MAAM,CAACkD,EAAP,CAAU;AACnB,mBAAapC,IAAI,CAACqC,SADC;AAEnB,cAAQrC,IAAI,CAACsC,UAFM;AAGnB,kBAAYtC,IAAI,CAACW;AAHE,KAAV,CAAX;;AAMA,QAAIK,OAAO,GAAG,KAAKpB,QAAL,CAAcsB,IAAd,CAAmB;AAACqB,MAAAA,GAAG,EAAE,KAAKzC,IAAX;AAAiB0C,MAAAA,MAAM,EAAE,KAAzB;AAAgCC,MAAAA,MAAM,EAAEN;AAAxC,KAAnB,CAAd;;AAEAnB,IAAAA,OAAO,GAAGA,OAAO,CAACC,IAAR,CAAa,UAASyB,OAAT,EAAkB;AACvChB,MAAAA,QAAQ,CAACM,OAAT,CAAiB,IAAI5C,uBAAJ,CAA4B,KAAKQ,QAAjC,EAA2C8C,OAA3C,EAAoD,KAAK7C,SAAzD,CAAjB;AACD,KAFsB,CAErBwB,IAFqB,CAEhB,IAFgB,CAAb,CAAV;AAIAL,IAAAA,OAAO,CAACO,KAAR,CAAc,UAASV,KAAT,EAAgB;AAC5Ba,MAAAA,QAAQ,CAACO,MAAT,CAAgBpB,KAAhB;AACD,KAFD;;AAIA,QAAIhC,CAAC,CAACqB,UAAF,CAAaD,QAAb,CAAJ,EAA4B;AAC1ByB,MAAAA,QAAQ,CAACV,OAAT,CAAiBkB,OAAjB,CAAyBjC,QAAzB;AACD;;AAED,WAAOyB,QAAQ,CAACV,OAAhB;AACD,GA7BD;AA+BA;;AACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE;;;AACAvB,EAAAA,+BAA+B,CAACkD,OAAhC,GAA0C,SAASA,OAAT,CAAiBC,SAAjB,EAA4B3C,QAA5B,EACkB;AAC1D,QAAIyB,QAAQ,GAAG/C,CAAC,CAACgD,KAAF,EAAf;;AAEA,QAAIX,OAAO,GAAG,KAAKpB,QAAL,CAAciD,OAAd,CAAsBC,MAAtB,CAA6BC,OAA7B,CAAqC;AAACP,MAAAA,MAAM,EAAE,KAAT;AAAgBD,MAAAA,GAAG,EAAEK;AAArB,KAArC,CAAd;;AAEA5B,IAAAA,OAAO,GAAGA,OAAO,CAACC,IAAR,CAAa,UAASyB,OAAT,EAAkB;AACvChB,MAAAA,QAAQ,CAACM,OAAT,CAAiB,IAAI5C,uBAAJ,CAA4B,KAAKQ,QAAjC,EAA2C8C,OAA3C,EAAoD,KAAK7C,SAAzD,CAAjB;AACD,KAFsB,CAErBwB,IAFqB,CAEhB,IAFgB,CAAb,CAAV;AAIAL,IAAAA,OAAO,CAACO,KAAR,CAAc,UAASV,KAAT,EAAgB;AAC5Ba,MAAAA,QAAQ,CAACO,MAAT,CAAgBpB,KAAhB;AACD,KAFD;;AAIA,QAAIhC,CAAC,CAACqB,UAAF,CAAaD,QAAb,CAAJ,EAA4B;AAC1ByB,MAAAA,QAAQ,CAACV,OAAT,CAAiBkB,OAAjB,CAAyBjC,QAAzB;AACD;;AAED,WAAOyB,QAAQ,CAACV,OAAhB;AACD,GAnBD;AAqBA;;AACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE;;;AACAvB,EAAAA,+BAA+B,CAACuD,MAAhC,GAAyC,SAASA,MAAT,CAAgBhD,IAAhB,EAAsBC,QAAtB,EAAgC;AACvE,QAAIpB,CAAC,CAACsB,WAAF,CAAcH,IAAd,CAAJ,EAAyB;AACvB,YAAM,IAAII,KAAJ,CAAU,oCAAV,CAAN;AACD;;AACD,QAAIvB,CAAC,CAACsB,WAAF,CAAcH,IAAI,CAACiD,YAAnB,CAAJ,EAAsC;AACpC,YAAM,IAAI7C,KAAJ,CAAU,iDAAV,CAAN;AACD;;AAED,QAAIsB,QAAQ,GAAG/C,CAAC,CAACgD,KAAF,EAAf;AACA,QAAIQ,IAAI,GAAGjD,MAAM,CAACkD,EAAP,CAAU;AAAC,sBAAgBvD,CAAC,CAACc,GAAF,CAAMK,IAAN,EAAY,cAAZ;AAAjB,KAAV,CAAX;;AAEA,QAAIgB,OAAO,GAAG,KAAKpB,QAAL,CAAcoD,MAAd,CAAqB;AAACT,MAAAA,GAAG,EAAE,KAAKzC,IAAX;AAAiB0C,MAAAA,MAAM,EAAE,MAAzB;AAAiCL,MAAAA,IAAI,EAAEA;AAAvC,KAArB,CAAd;;AAEAnB,IAAAA,OAAO,GAAGA,OAAO,CAACC,IAAR,CAAa,UAASyB,OAAT,EAAkB;AACvChB,MAAAA,QAAQ,CAACM,OAAT,CAAiB,IAAI3C,2BAAJ,CACf,KAAKO,QADU,EAEf8C,OAFe,EAGf,KAAK7C,SAAL,CAAeL,UAHA,EAIf,KAAKK,SAAL,CAAeH,GAJA,CAAjB;AAMD,KAPsB,CAOrB2B,IAPqB,CAOhB,IAPgB,CAAb,CAAV;AASAL,IAAAA,OAAO,CAACO,KAAR,CAAc,UAASV,KAAT,EAAgB;AAC5Ba,MAAAA,QAAQ,CAACO,MAAT,CAAgBpB,KAAhB;AACD,KAFD;;AAIA,QAAIhC,CAAC,CAACqB,UAAF,CAAaD,QAAb,CAAJ,EAA4B;AAC1ByB,MAAAA,QAAQ,CAACV,OAAT,CAAiBkB,OAAjB,CAAyBjC,QAAzB;AACD;;AAED,WAAOyB,QAAQ,CAACV,OAAhB;AACD,GA/BD;AAiCA;;AACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE;;;AACAvB,EAAAA,+BAA+B,CAACE,GAAhC,GAAsC,SAASA,GAAT,CAAaD,GAAb,EAAkB;AACtD,WAAO,IAAIJ,0BAAJ,CAA+B,KAAKM,QAApC,EAA8C,KAAKC,SAAL,CAAeL,UAA7D,EAAyEE,GAAzE,CAAP;AACD,GAFD;AAIA;;AACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;AACE;;;AACAD,EAAAA,+BAA+B,CAACyD,MAAhC,GAAyC,SAASA,MAAT,GAAkB;AACzD,WAAO,KAAKrD,SAAZ;AACD,GAFD;;AAIAJ,EAAAA,+BAA+B,CAACX,IAAI,CAACqE,OAAL,CAAaC,MAAd,CAA/B,GAAuD,SAASD,OAAT,CAAiBE,KAAjB,EACnDC,OADmD,EAC1C;AACX,WAAOxE,IAAI,CAACqE,OAAL,CAAa,KAAKD,MAAL,EAAb,EAA4BI,OAA5B,CAAP;AACD,GAHD;;AAKA,SAAO7D,+BAAP;AACD,CA5VD;AA+VA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACAL,uBAAuB,GAAG,SAASA,uBAAT,CAAiCG,OAAjC,EAA0CgE,QAA1C,EACkCC,QADlC,EAC4C;AACpE;AACA,OAAK3D,SAAL,GAAiB2D,QAAjB;AAEAxE,EAAAA,IAAI,CAACyE,SAAL,CAAeC,WAAf,CAA2BC,IAA3B,CAAgC,IAAhC,EAAsCpE,OAAtC,EAA+CgE,QAA/C,EAAyD,KAAK1D,SAA9D;AACD,CAND;;AAQAhB,CAAC,CAAC+E,MAAF,CAASxE,uBAAuB,CAACqE,SAAjC,EAA4CzE,IAAI,CAACyE,SAAjD;;AACArE,uBAAuB,CAACqE,SAAxB,CAAkCC,WAAlC,GAAgDtE,uBAAhD;AAEA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;AACAA,uBAAuB,CAACqE,SAAxB,CAAkCI,WAAlC,GAAgD,SAASA,WAAT,CAAqBnB,OAArB,EAA8B;AAC5E,SAAO,IAAIrD,2BAAJ,CAAgC,KAAKO,QAArC,EAA+C8C,OAA/C,EAAwD,KAAK7C,SAAL,CAAeL,UAAvE,CAAP;AACD,CAFD;AAIA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACAJ,uBAAuB,CAACqE,SAAxB,CAAkCP,MAAlC,GAA2C,SAASA,MAAT,GAAkB;AAC3D,MAAIY,KAAK,GAAG,EAAZ;;AACAjF,EAAAA,CAAC,CAACkF,MAAF,CAAS,IAAT,EAAe,UAASC,KAAT,EAAgBC,GAAhB,EAAqB;AAClC,QAAI,CAACpF,CAAC,CAACqF,UAAF,CAAaD,GAAb,EAAkB,GAAlB,CAAD,IAA2B,CAAEpF,CAAC,CAACqB,UAAF,CAAa8D,KAAb,CAAjC,EAAsD;AACpDF,MAAAA,KAAK,CAACG,GAAD,CAAL,GAAaD,KAAb;AACD;AACF,GAJD;;AAKA,SAAOF,KAAP;AACD,CARD;;AAUA1E,uBAAuB,CAACqE,SAAxB,CAAkC3E,IAAI,CAACqE,OAAL,CAAaC,MAA/C,IAAyD,SAASD,OAAT,CAAiBE,KAAjB,EACrDC,OADqD,EAC5C;AACX,SAAOxE,IAAI,CAACqE,OAAL,CAAa,KAAKD,MAAL,EAAb,EAA4BI,OAA5B,CAAP;AACD,CAHD;AAMA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACAjE,2BAA2B,GAAG,SAASA,2BAAT,CAAqCE,OAArC,EAC1BmD,OAD0B,EACjBlD,UADiB,EACLE,GADK,EACA;AAC5B,OAAKE,QAAL,GAAgBL,OAAhB,CAD4B,CAG5B;;AACA,OAAKG,GAAL,GAAWgD,OAAO,CAAChD,GAAnB,CAJ4B,CAIJ;;AACxB,OAAKF,UAAL,GAAkBkD,OAAO,CAACyB,WAA1B,CAL4B,CAKW;;AACvC,OAAKlB,YAAL,GAAoBP,OAAO,CAAC0B,aAA5B,CAN4B,CAMe;;AAC3C,OAAKC,WAAL,GAAmBpF,WAAW,CAACqF,eAAZ,CAA4B5B,OAAO,CAAC6B,YAApC,CAAnB,CAP4B,CAO0C;;AACtE,OAAKC,WAAL,GAAmBvF,WAAW,CAACqF,eAAZ,CAA4B5B,OAAO,CAAC+B,YAApC,CAAnB,CAR4B,CAQ0C;;AACtE,OAAKC,eAAL,GAAuBhC,OAAO,CAACiC,gBAA/B,CAT4B,CASqB;;AACjD,OAAKpC,GAAL,GAAWG,OAAO,CAACH,GAAnB,CAV4B,CAUJ;AAExB;;AACA,OAAKqC,QAAL,GAAgBC,SAAhB;AACA,OAAKhF,SAAL,GAAiB;AAACL,IAAAA,UAAU,EAAEA,UAAb;AAAyBE,IAAAA,GAAG,EAAEA,GAAG,IAAI,KAAKA;AAA1C,GAAjB;AACD,CAhBD;;AAkBAoF,MAAM,CAACC,cAAP,CAAsB1F,2BAA2B,CAACoE,SAAlD,EACE,QADF,EACY;AACR9D,EAAAA,GAAG,EAAE,YAAW;AACd,QAAI,CAAC,KAAKiF,QAAV,EAAoB;AAClB,WAAKA,QAAL,GAAgB,IAAItF,0BAAJ,CACd,KAAKM,QADS,EAEd,KAAKC,SAAL,CAAeL,UAFD,EAGd,KAAKK,SAAL,CAAeH,GAHD,CAAhB;AAKD;;AAED,WAAO,KAAKkF,QAAZ;AACD;AAXO,CADZ;AAeA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;AACAvF,2BAA2B,CAACoE,SAA5B,CAAsCuB,KAAtC,GAA8C,SAASA,KAAT,CAAe/E,QAAf,EAAyB;AACrE,SAAO,KAAKgF,MAAL,CAAYD,KAAZ,CAAkB/E,QAAlB,CAAP;AACD,CAFD;AAIA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACAZ,2BAA2B,CAACoE,SAA5B,CAAsCyB,MAAtC,GAA+C,SAASA,MAAT,CAAgBlF,IAAhB,EAAsBC,QAAtB,EAAgC;AAC7E,SAAO,KAAKgF,MAAL,CAAYC,MAAZ,CAAmBlF,IAAnB,EAAyBC,QAAzB,CAAP;AACD,CAFD;AAIA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACAZ,2BAA2B,CAACoE,SAA5B,CAAsC0B,MAAtC,GAA+C,SAASA,MAAT,CAAgBlF,QAAhB,EAA0B;AACvE,SAAO,KAAKgF,MAAL,CAAYE,MAAZ,CAAmBlF,QAAnB,CAAP;AACD,CAFD;AAIA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACAZ,2BAA2B,CAACoE,SAA5B,CAAsC2B,WAAtC,GAAoD,SAASA,WAAT,GAAuB;AACzE,SAAO,KAAKH,MAAL,CAAYG,WAAnB;AACD,CAFD;AAIA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACA/F,2BAA2B,CAACoE,SAA5B,CAAsCP,MAAtC,GAA+C,SAASA,MAAT,GAAkB;AAC/D,MAAIY,KAAK,GAAG,EAAZ;;AACAjF,EAAAA,CAAC,CAACkF,MAAF,CAAS,IAAT,EAAe,UAASC,KAAT,EAAgBC,GAAhB,EAAqB;AAClC,QAAI,CAACpF,CAAC,CAACqF,UAAF,CAAaD,GAAb,EAAkB,GAAlB,CAAD,IAA2B,CAAEpF,CAAC,CAACqB,UAAF,CAAa8D,KAAb,CAAjC,EAAsD;AACpDF,MAAAA,KAAK,CAACG,GAAD,CAAL,GAAaD,KAAb;AACD;AACF,GAJD;;AAKA,SAAOF,KAAP;AACD,CARD;;AAUAzE,2BAA2B,CAACoE,SAA5B,CAAsC3E,IAAI,CAACqE,OAAL,CAAaC,MAAnD,IAA6D,SACzDD,OADyD,CACjDE,KADiD,EAC1CC,OAD0C,EACjC;AAC1B,SAAOxE,IAAI,CAACqE,OAAL,CAAa,KAAKD,MAAL,EAAb,EAA4BI,OAA5B,CAAP;AACD,CAHD;AAMA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACAhE,0BAA0B,GAAG,SAASA,0BAAT,CAAoCC,OAApC,EACzBC,UADyB,EACbE,GADa,EACR;AACnB,OAAKE,QAAL,GAAgBL,OAAhB,CADmB,CAGnB;;AACA,OAAKM,SAAL,GAAiB;AAACL,IAAAA,UAAU,EAAEA,UAAb;AAAyBE,IAAAA,GAAG,EAAEA;AAA9B,GAAjB;AACA,OAAKI,IAAL,GAAa,aAAYN,UAAW,6BAA4BE,GAAI,OAApE,CALmB,CAOnB;;AACA,OAAK2F,YAAL,GAAoBR,SAApB;AACD,CAVD;AAYA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACAvF,0BAA0B,CAACmE,SAA3B,CAAqCuB,KAArC,GAA6C,SAASA,KAAT,CAAe/E,QAAf,EAAyB;AACpE,MAAIyB,QAAQ,GAAG/C,CAAC,CAACgD,KAAF,EAAf;;AACA,MAAIX,OAAO,GAAG,KAAKpB,QAAL,CAAcoF,KAAd,CAAoB;AAACzC,IAAAA,GAAG,EAAE,KAAKzC,IAAX;AAAiB0C,IAAAA,MAAM,EAAE;AAAzB,GAApB,CAAd;;AAEAxB,EAAAA,OAAO,GAAGA,OAAO,CAACC,IAAR,CAAa,UAASyB,OAAT,EAAkB;AACvChB,IAAAA,QAAQ,CAACM,OAAT,CAAiB,IAAI3C,2BAAJ,CACf,KAAKO,QADU,EAEf8C,OAFe,EAGf,KAAK7C,SAAL,CAAeL,UAHA,EAIf,KAAKK,SAAL,CAAeH,GAJA,CAAjB;AAMD,GAPsB,CAOrB2B,IAPqB,CAOhB,IAPgB,CAAb,CAAV;AASAL,EAAAA,OAAO,CAACO,KAAR,CAAc,UAASV,KAAT,EAAgB;AAC5Ba,IAAAA,QAAQ,CAACO,MAAT,CAAgBpB,KAAhB;AACD,GAFD;;AAIA,MAAIhC,CAAC,CAACqB,UAAF,CAAaD,QAAb,CAAJ,EAA4B;AAC1ByB,IAAAA,QAAQ,CAACV,OAAT,CAAiBkB,OAAjB,CAAyBjC,QAAzB;AACD;;AAED,SAAOyB,QAAQ,CAACV,OAAhB;AACD,CAtBD;AAwBA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACA1B,0BAA0B,CAACmE,SAA3B,CAAqCyB,MAArC,GAA8C,SAASA,MAAT,CAAgBlF,IAAhB,EAAsBC,QAAtB,EAAgC;AAC5E,MAAIpB,CAAC,CAACsB,WAAF,CAAcH,IAAd,CAAJ,EAAyB;AACvB,UAAM,IAAII,KAAJ,CAAU,oCAAV,CAAN;AACD;;AACD,MAAIvB,CAAC,CAACsB,WAAF,CAAcH,IAAI,CAACiD,YAAnB,CAAJ,EAAsC;AACpC,UAAM,IAAI7C,KAAJ,CAAU,iDAAV,CAAN;AACD;;AAED,MAAIsB,QAAQ,GAAG/C,CAAC,CAACgD,KAAF,EAAf;AACA,MAAIQ,IAAI,GAAGjD,MAAM,CAACkD,EAAP,CAAU;AAAC,oBAAgBvD,CAAC,CAACc,GAAF,CAAMK,IAAN,EAAY,cAAZ;AAAjB,GAAV,CAAX;;AAEA,MAAIgB,OAAO,GAAG,KAAKpB,QAAL,CAAcsF,MAAd,CAAqB;AAAC3C,IAAAA,GAAG,EAAE,KAAKzC,IAAX;AAAiB0C,IAAAA,MAAM,EAAE,MAAzB;AAAiCL,IAAAA,IAAI,EAAEA;AAAvC,GAArB,CAAd;;AAEAnB,EAAAA,OAAO,GAAGA,OAAO,CAACC,IAAR,CAAa,UAASyB,OAAT,EAAkB;AACvChB,IAAAA,QAAQ,CAACM,OAAT,CAAiB,IAAI3C,2BAAJ,CACf,KAAKO,QADU,EAEf8C,OAFe,EAGf,KAAK7C,SAAL,CAAeL,UAHA,EAIf,KAAKK,SAAL,CAAeH,GAJA,CAAjB;AAMD,GAPsB,CAOrB2B,IAPqB,CAOhB,IAPgB,CAAb,CAAV;AASAL,EAAAA,OAAO,CAACO,KAAR,CAAc,UAASV,KAAT,EAAgB;AAC5Ba,IAAAA,QAAQ,CAACO,MAAT,CAAgBpB,KAAhB;AACD,GAFD;;AAIA,MAAIhC,CAAC,CAACqB,UAAF,CAAaD,QAAb,CAAJ,EAA4B;AAC1ByB,IAAAA,QAAQ,CAACV,OAAT,CAAiBkB,OAAjB,CAAyBjC,QAAzB;AACD;;AAED,SAAOyB,QAAQ,CAACV,OAAhB;AACD,CA/BD;AAiCA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACA1B,0BAA0B,CAACmE,SAA3B,CAAqC0B,MAArC,GAA8C,SAASA,MAAT,CAAgBlF,QAAhB,EAA0B;AACtE,MAAIyB,QAAQ,GAAG/C,CAAC,CAACgD,KAAF,EAAf;;AACA,MAAIX,OAAO,GAAG,KAAKpB,QAAL,CAAcuF,MAAd,CAAqB;AAAC5C,IAAAA,GAAG,EAAE,KAAKzC,IAAX;AAAiB0C,IAAAA,MAAM,EAAE;AAAzB,GAArB,CAAd;;AAEAxB,EAAAA,OAAO,GAAGA,OAAO,CAACC,IAAR,CAAa,UAASyB,OAAT,EAAkB;AACvChB,IAAAA,QAAQ,CAACM,OAAT,CAAiBU,OAAjB;AACD,GAFsB,CAErBrB,IAFqB,CAEhB,IAFgB,CAAb,CAAV;AAIAL,EAAAA,OAAO,CAACO,KAAR,CAAc,UAASV,KAAT,EAAgB;AAC5Ba,IAAAA,QAAQ,CAACO,MAAT,CAAgBpB,KAAhB;AACD,GAFD;;AAIA,MAAIhC,CAAC,CAACqB,UAAF,CAAaD,QAAb,CAAJ,EAA4B;AAC1ByB,IAAAA,QAAQ,CAACV,OAAT,CAAiBkB,OAAjB,CAAyBjC,QAAzB;AACD;;AAED,SAAOyB,QAAQ,CAACV,OAAhB;AACD,CAjBD;;AAmBA8D,MAAM,CAACC,cAAP,CAAsBzF,0BAA0B,CAACmE,SAAjD,EACE,aADF,EACiB;AACb9D,EAAAA,GAAG,EAAE,YAAW;AACd,QAAI,CAAC,KAAK0F,YAAV,EAAwB;AACtB,WAAKA,YAAL,GAAoB,IAAItG,aAAJ,CAAkB,KAAKa,QAAvB,EAAiC,KAAKC,SAAL,CAAeL,UAAhD,EAA4D,KAAKK,SAAL,CAAeH,GAA3E,CAApB;AACD;;AACD,WAAO,KAAK2F,YAAZ;AACD;AANY,CADjB;AAUA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;AACA/F,0BAA0B,CAACmE,SAA3B,CAAqCP,MAArC,GAA8C,SAASA,MAAT,GAAkB;AAC9D,SAAO,KAAKrD,SAAZ;AACD,CAFD;;AAIAP,0BAA0B,CAACmE,SAA3B,CAAqC3E,IAAI,CAACqE,OAAL,CAAaC,MAAlD,IAA4D,SACxDD,OADwD,CAChDE,KADgD,EACzCC,OADyC,EAChC;AAC1B,SAAOxE,IAAI,CAACqE,OAAL,CAAa,KAAKD,MAAL,EAAb,EAA4BI,OAA5B,CAAP;AACD,CAHD;;AAKAgC,MAAM,CAACC,OAAP,GAAiB;AACfpG,EAAAA,uBAAuB,EAAEA,uBADV;AAEfC,EAAAA,uBAAuB,EAAEA,uBAFV;AAGfC,EAAAA,2BAA2B,EAAEA,2BAHd;AAIfC,EAAAA,0BAA0B,EAAEA;AAJb,CAAjB","sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar IpAddressList = require('./ipAccessControlList/ipAddress').IpAddressList;\nvar Page = require('../../../../../base/Page');  /* jshint ignore:line */\nvar deserialize = require(\n    '../../../../../base/deserialize');  /* jshint ignore:line */\nvar values = require('../../../../../base/values');  /* jshint ignore:line */\n\nvar IpAccessControlListList;\nvar IpAccessControlListPage;\nvar IpAccessControlListInstance;\nvar IpAccessControlListContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the IpAccessControlListList\n *\n * @constructor Twilio.Api.V2010.AccountContext.SipContext.IpAccessControlListList\n *\n * @param {Twilio.Api.V2010} version - Version of the resource\n * @param {string} accountSid -\n *          A 34 character string that uniquely identifies this resource.\n */\n/* jshint ignore:end */\nIpAccessControlListList = function IpAccessControlListList(version, accountSid)\n                                                            {\n  /* jshint ignore:start */\n  /**\n   * @function ipAccessControlLists\n   * @memberof Twilio.Api.V2010.AccountContext.SipContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Api.V2010.AccountContext.SipContext.IpAccessControlListContext}\n   */\n  /* jshint ignore:end */\n  function IpAccessControlListListInstance(sid) {\n    return IpAccessControlListListInstance.get(sid);\n  }\n\n  IpAccessControlListListInstance._version = version;\n  // Path Solution\n  IpAccessControlListListInstance._solution = {accountSid: accountSid};\n  IpAccessControlListListInstance._uri = `/Accounts/${accountSid}/SIP/IpAccessControlLists.json`;\n  /* jshint ignore:start */\n  /**\n   * Streams IpAccessControlListInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Api.V2010.AccountContext.SipContext.IpAccessControlListList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  IpAccessControlListListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists IpAccessControlListInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Api.V2010.AccountContext.SipContext.IpAccessControlListList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  IpAccessControlListListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of IpAccessControlListInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Api.V2010.AccountContext.SipContext.IpAccessControlListList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  IpAccessControlListListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new IpAccessControlListPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of IpAccessControlListInstance records from the\n   * API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Api.V2010.AccountContext.SipContext.IpAccessControlListList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  IpAccessControlListListInstance.getPage = function getPage(targetUrl, callback)\n                                                              {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new IpAccessControlListPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * create a IpAccessControlListInstance\n   *\n   * @function create\n   * @memberof Twilio.Api.V2010.AccountContext.SipContext.IpAccessControlListList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.friendlyName -\n   *          A human readable description of this resource\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed IpAccessControlListInstance\n   */\n  /* jshint ignore:end */\n  IpAccessControlListListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n    if (_.isUndefined(opts.friendlyName)) {\n      throw new Error('Required parameter \"opts.friendlyName\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({'FriendlyName': _.get(opts, 'friendlyName')});\n\n    var promise = this._version.create({uri: this._uri, method: 'POST', data: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new IpAccessControlListInstance(\n        this._version,\n        payload,\n        this._solution.accountSid,\n        this._solution.sid\n      ));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a ip_access_control_list\n   *\n   * @function get\n   * @memberof Twilio.Api.V2010.AccountContext.SipContext.IpAccessControlListList#\n   *\n   * @param {string} sid - A string that identifies the resource to fetch\n   *\n   * @returns {Twilio.Api.V2010.AccountContext.SipContext.IpAccessControlListContext}\n   */\n  /* jshint ignore:end */\n  IpAccessControlListListInstance.get = function get(sid) {\n    return new IpAccessControlListContext(this._version, this._solution.accountSid, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Api.V2010.AccountContext.SipContext.IpAccessControlListList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  IpAccessControlListListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  IpAccessControlListListInstance[util.inspect.custom] = function inspect(depth,\n      options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return IpAccessControlListListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the IpAccessControlListPage\n *\n * @constructor Twilio.Api.V2010.AccountContext.SipContext.IpAccessControlListPage\n *\n * @param {V2010} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {IpAccessControlListSolution} solution - Path solution\n *\n * @returns IpAccessControlListPage\n */\n/* jshint ignore:end */\nIpAccessControlListPage = function IpAccessControlListPage(version, response,\n                                                            solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(IpAccessControlListPage.prototype, Page.prototype);\nIpAccessControlListPage.prototype.constructor = IpAccessControlListPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of IpAccessControlListInstance\n *\n * @function getInstance\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.IpAccessControlListPage#\n *\n * @param {IpAccessControlListPayload} payload - Payload response from the API\n *\n * @returns IpAccessControlListInstance\n */\n/* jshint ignore:end */\nIpAccessControlListPage.prototype.getInstance = function getInstance(payload) {\n  return new IpAccessControlListInstance(this._version, payload, this._solution.accountSid);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.IpAccessControlListPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nIpAccessControlListPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nIpAccessControlListPage.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the IpAccessControlListContext\n *\n * @constructor Twilio.Api.V2010.AccountContext.SipContext.IpAccessControlListInstance\n *\n * @property {string} sid - A string that uniquely identifies this resource\n * @property {string} accountSid - The unique sid that identifies this account\n * @property {string} friendlyName - A human readable description of this resource\n * @property {Date} dateCreated - The date this resource was created\n * @property {Date} dateUpdated - The date this resource was last updated\n * @property {string} subresourceUris -\n *          The IP addresses associated with this resource.\n * @property {string} uri - The URI for this resource\n *\n * @param {V2010} version - Version of the resource\n * @param {IpAccessControlListPayload} payload - The instance payload\n * @param {sid} accountSid -\n *          A 34 character string that uniquely identifies this resource.\n * @param {sid} sid - A string that identifies the resource to fetch\n */\n/* jshint ignore:end */\nIpAccessControlListInstance = function IpAccessControlListInstance(version,\n    payload, accountSid, sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.sid = payload.sid; // jshint ignore:line\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.friendlyName = payload.friendly_name; // jshint ignore:line\n  this.dateCreated = deserialize.rfc2822DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.rfc2822DateTime(payload.date_updated); // jshint ignore:line\n  this.subresourceUris = payload.subresource_uris; // jshint ignore:line\n  this.uri = payload.uri; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {accountSid: accountSid, sid: sid || this.sid, };\n};\n\nObject.defineProperty(IpAccessControlListInstance.prototype,\n  '_proxy', {\n    get: function() {\n      if (!this._context) {\n        this._context = new IpAccessControlListContext(\n          this._version,\n          this._solution.accountSid,\n          this._solution.sid\n        );\n      }\n\n      return this._context;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a IpAccessControlListInstance\n *\n * @function fetch\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.IpAccessControlListInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed IpAccessControlListInstance\n */\n/* jshint ignore:end */\nIpAccessControlListInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * update a IpAccessControlListInstance\n *\n * @function update\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.IpAccessControlListInstance#\n *\n * @param {object} opts - Options for request\n * @param {string} opts.friendlyName -\n *          A human readable description of this resource\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed IpAccessControlListInstance\n */\n/* jshint ignore:end */\nIpAccessControlListInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * remove a IpAccessControlListInstance\n *\n * @function remove\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.IpAccessControlListInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed IpAccessControlListInstance\n */\n/* jshint ignore:end */\nIpAccessControlListInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n\n/* jshint ignore:start */\n/**\n * Access the ipAddresses\n *\n * @function ipAddresses\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.IpAccessControlListInstance#\n *\n * @returns {Twilio.Api.V2010.AccountContext.SipContext.IpAccessControlListContext.IpAddressList}\n */\n/* jshint ignore:end */\nIpAccessControlListInstance.prototype.ipAddresses = function ipAddresses() {\n  return this._proxy.ipAddresses;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.IpAccessControlListInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nIpAccessControlListInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nIpAccessControlListInstance.prototype[util.inspect.custom] = function\n    inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the IpAccessControlListContext\n *\n * @constructor Twilio.Api.V2010.AccountContext.SipContext.IpAccessControlListContext\n *\n * @property {Twilio.Api.V2010.AccountContext.SipContext.IpAccessControlListContext.IpAddressList} ipAddresses -\n *          ipAddresses resource\n *\n * @param {V2010} version - Version of the resource\n * @param {sid} accountSid - The unique sid that identifies this account\n * @param {sid} sid - A string that identifies the resource to fetch\n */\n/* jshint ignore:end */\nIpAccessControlListContext = function IpAccessControlListContext(version,\n    accountSid, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {accountSid: accountSid, sid: sid, };\n  this._uri = `/Accounts/${accountSid}/SIP/IpAccessControlLists/${sid}.json`;\n\n  // Dependents\n  this._ipAddresses = undefined;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a IpAccessControlListInstance\n *\n * @function fetch\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.IpAccessControlListContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed IpAccessControlListInstance\n */\n/* jshint ignore:end */\nIpAccessControlListContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({uri: this._uri, method: 'GET'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new IpAccessControlListInstance(\n      this._version,\n      payload,\n      this._solution.accountSid,\n      this._solution.sid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * update a IpAccessControlListInstance\n *\n * @function update\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.IpAccessControlListContext#\n *\n * @param {object} opts - Options for request\n * @param {string} opts.friendlyName -\n *          A human readable description of this resource\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed IpAccessControlListInstance\n */\n/* jshint ignore:end */\nIpAccessControlListContext.prototype.update = function update(opts, callback) {\n  if (_.isUndefined(opts)) {\n    throw new Error('Required parameter \"opts\" missing.');\n  }\n  if (_.isUndefined(opts.friendlyName)) {\n    throw new Error('Required parameter \"opts.friendlyName\" missing.');\n  }\n\n  var deferred = Q.defer();\n  var data = values.of({'FriendlyName': _.get(opts, 'friendlyName')});\n\n  var promise = this._version.update({uri: this._uri, method: 'POST', data: data});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new IpAccessControlListInstance(\n      this._version,\n      payload,\n      this._solution.accountSid,\n      this._solution.sid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * remove a IpAccessControlListInstance\n *\n * @function remove\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.IpAccessControlListContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed IpAccessControlListInstance\n */\n/* jshint ignore:end */\nIpAccessControlListContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.remove({uri: this._uri, method: 'DELETE'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\nObject.defineProperty(IpAccessControlListContext.prototype,\n  'ipAddresses', {\n    get: function() {\n      if (!this._ipAddresses) {\n        this._ipAddresses = new IpAddressList(this._version, this._solution.accountSid, this._solution.sid);\n      }\n      return this._ipAddresses;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.IpAccessControlListContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nIpAccessControlListContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nIpAccessControlListContext.prototype[util.inspect.custom] = function\n    inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  IpAccessControlListList: IpAccessControlListList,\n  IpAccessControlListPage: IpAccessControlListPage,\n  IpAccessControlListInstance: IpAccessControlListInstance,\n  IpAccessControlListContext: IpAccessControlListContext\n};\n"]},"metadata":{},"sourceType":"module"}