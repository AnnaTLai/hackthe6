{"ast":null,"code":"'use strict';\n/* jshint ignore:start */\n\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n\n/* jshint ignore:end */\n\nvar Q = require('q');\n/* jshint ignore:line */\n\n\nvar _ = require('lodash');\n/* jshint ignore:line */\n\n\nvar util = require('util');\n/* jshint ignore:line */\n\n\nvar AvailableAddOnExtensionList = require('./availableAddOn/availableAddOnExtension').AvailableAddOnExtensionList;\n\nvar Page = require('../../../base/Page');\n/* jshint ignore:line */\n\n\nvar values = require('../../../base/values');\n/* jshint ignore:line */\n\n\nvar AvailableAddOnList;\nvar AvailableAddOnPage;\nvar AvailableAddOnInstance;\nvar AvailableAddOnContext;\n/* jshint ignore:start */\n\n/**\n * Initialize the AvailableAddOnList\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Preview.Marketplace.AvailableAddOnList\n *\n * @param {Twilio.Preview.Marketplace} version - Version of the resource\n */\n\n/* jshint ignore:end */\n\nAvailableAddOnList = function AvailableAddOnList(version) {\n  /* jshint ignore:start */\n\n  /**\n   * @function availableAddOns\n   * @memberof Twilio.Preview.Marketplace#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Preview.Marketplace.AvailableAddOnContext}\n   */\n\n  /* jshint ignore:end */\n  function AvailableAddOnListInstance(sid) {\n    return AvailableAddOnListInstance.get(sid);\n  }\n\n  AvailableAddOnListInstance._version = version; // Path Solution\n\n  AvailableAddOnListInstance._solution = {};\n  AvailableAddOnListInstance._uri = `/AvailableAddOns`;\n  /* jshint ignore:start */\n\n  /**\n   * Streams AvailableAddOnInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Preview.Marketplace.AvailableAddOnList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n\n  /* jshint ignore:end */\n\n  AvailableAddOnListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Lists AvailableAddOnInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Preview.Marketplace.AvailableAddOnList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  AvailableAddOnListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single page of AvailableAddOnInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Preview.Marketplace.AvailableAddOnList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  AvailableAddOnListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new AvailableAddOnPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single target page of AvailableAddOnInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Preview.Marketplace.AvailableAddOnList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  AvailableAddOnListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new AvailableAddOnPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Constructs a available_add_on\n   *\n   * @function get\n   * @memberof Twilio.Preview.Marketplace.AvailableAddOnList#\n   *\n   * @param {string} sid - The SID of the AvailableAddOn resource to fetch\n   *\n   * @returns {Twilio.Preview.Marketplace.AvailableAddOnContext}\n   */\n\n  /* jshint ignore:end */\n\n\n  AvailableAddOnListInstance.get = function get(sid) {\n    return new AvailableAddOnContext(this._version, sid);\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Preview.Marketplace.AvailableAddOnList#\n   *\n   * @returns Object\n   */\n\n  /* jshint ignore:end */\n\n\n  AvailableAddOnListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  AvailableAddOnListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return AvailableAddOnListInstance;\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the AvailableAddOnPage\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Preview.Marketplace.AvailableAddOnPage\n *\n * @param {Marketplace} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {AvailableAddOnSolution} solution - Path solution\n *\n * @returns AvailableAddOnPage\n */\n\n/* jshint ignore:end */\n\n\nAvailableAddOnPage = function AvailableAddOnPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(AvailableAddOnPage.prototype, Page.prototype);\n\nAvailableAddOnPage.prototype.constructor = AvailableAddOnPage;\n/* jshint ignore:start */\n\n/**\n * Build an instance of AvailableAddOnInstance\n *\n * @function getInstance\n * @memberof Twilio.Preview.Marketplace.AvailableAddOnPage#\n *\n * @param {AvailableAddOnPayload} payload - Payload response from the API\n *\n * @returns AvailableAddOnInstance\n */\n\n/* jshint ignore:end */\n\nAvailableAddOnPage.prototype.getInstance = function getInstance(payload) {\n  return new AvailableAddOnInstance(this._version, payload);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Preview.Marketplace.AvailableAddOnPage#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nAvailableAddOnPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nAvailableAddOnPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the AvailableAddOnContext\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Preview.Marketplace.AvailableAddOnInstance\n *\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} friendlyName -\n *          The string that you assigned to describe the resource\n * @property {string} description -\n *          A short description of the Add-on's functionality\n * @property {string} pricingType - How customers are charged for using this Add-on\n * @property {object} configurationSchema -\n *          The JSON object with the configuration that must be provided when installing a given Add-on\n * @property {string} url - The absolute URL of the resource\n * @property {string} links - The URLs of related resources\n *\n * @param {Marketplace} version - Version of the resource\n * @param {AvailableAddOnPayload} payload - The instance payload\n * @param {sid} sid - The SID of the AvailableAddOn resource to fetch\n */\n\n/* jshint ignore:end */\n\n\nAvailableAddOnInstance = function AvailableAddOnInstance(version, payload, sid) {\n  this._version = version; // Marshaled Properties\n\n  this.sid = payload.sid; // jshint ignore:line\n\n  this.friendlyName = payload.friendly_name; // jshint ignore:line\n\n  this.description = payload.description; // jshint ignore:line\n\n  this.pricingType = payload.pricing_type; // jshint ignore:line\n\n  this.configurationSchema = payload.configuration_schema; // jshint ignore:line\n\n  this.url = payload.url; // jshint ignore:line\n\n  this.links = payload.links; // jshint ignore:line\n  // Context\n\n  this._context = undefined;\n  this._solution = {\n    sid: sid || this.sid\n  };\n};\n\nObject.defineProperty(AvailableAddOnInstance.prototype, '_proxy', {\n  get: function () {\n    if (!this._context) {\n      this._context = new AvailableAddOnContext(this._version, this._solution.sid);\n    }\n\n    return this._context;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * fetch a AvailableAddOnInstance\n *\n * @function fetch\n * @memberof Twilio.Preview.Marketplace.AvailableAddOnInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed AvailableAddOnInstance\n */\n\n/* jshint ignore:end */\n\nAvailableAddOnInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n/* jshint ignore:start */\n\n/**\n * Access the extensions\n *\n * @function extensions\n * @memberof Twilio.Preview.Marketplace.AvailableAddOnInstance#\n *\n * @returns {Twilio.Preview.Marketplace.AvailableAddOnContext.AvailableAddOnExtensionList}\n */\n\n/* jshint ignore:end */\n\n\nAvailableAddOnInstance.prototype.extensions = function extensions() {\n  return this._proxy.extensions;\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Preview.Marketplace.AvailableAddOnInstance#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nAvailableAddOnInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nAvailableAddOnInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the AvailableAddOnContext\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Preview.Marketplace.AvailableAddOnContext\n *\n * @property {Twilio.Preview.Marketplace.AvailableAddOnContext.AvailableAddOnExtensionList} extensions -\n *          extensions resource\n *\n * @param {Marketplace} version - Version of the resource\n * @param {sid} sid - The SID of the AvailableAddOn resource to fetch\n */\n\n/* jshint ignore:end */\n\n\nAvailableAddOnContext = function AvailableAddOnContext(version, sid) {\n  this._version = version; // Path Solution\n\n  this._solution = {\n    sid: sid\n  };\n  this._uri = `/AvailableAddOns/${sid}`; // Dependents\n\n  this._extensions = undefined;\n};\n/* jshint ignore:start */\n\n/**\n * fetch a AvailableAddOnInstance\n *\n * @function fetch\n * @memberof Twilio.Preview.Marketplace.AvailableAddOnContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed AvailableAddOnInstance\n */\n\n/* jshint ignore:end */\n\n\nAvailableAddOnContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new AvailableAddOnInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\nObject.defineProperty(AvailableAddOnContext.prototype, 'extensions', {\n  get: function () {\n    if (!this._extensions) {\n      this._extensions = new AvailableAddOnExtensionList(this._version, this._solution.sid);\n    }\n\n    return this._extensions;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Preview.Marketplace.AvailableAddOnContext#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\nAvailableAddOnContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nAvailableAddOnContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  AvailableAddOnList: AvailableAddOnList,\n  AvailableAddOnPage: AvailableAddOnPage,\n  AvailableAddOnInstance: AvailableAddOnInstance,\n  AvailableAddOnContext: AvailableAddOnContext\n};","map":{"version":3,"sources":["/Users/tony_niu/Visual Studio/Twilio/twilio-video-starter-kit/src/token-service/node_modules/twilio/lib/rest/preview/marketplace/availableAddOn.js"],"names":["Q","require","_","util","AvailableAddOnExtensionList","Page","values","AvailableAddOnList","AvailableAddOnPage","AvailableAddOnInstance","AvailableAddOnContext","version","AvailableAddOnListInstance","sid","get","_version","_solution","_uri","each","opts","callback","isFunction","isUndefined","Error","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","error","fetchNextPage","fn","promise","then","page","instances","instance","bind","nextPage","catch","merge","list","deferred","defer","allResources","resource","push","length","resolve","reject","nodeify","data","of","pageToken","pageNumber","uri","method","params","payload","getPage","targetUrl","_domain","twilio","request","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","friendlyName","friendly_name","description","pricingType","pricing_type","configurationSchema","configuration_schema","url","links","_context","undefined","Object","defineProperty","fetch","_proxy","extensions","_extensions","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar AvailableAddOnExtensionList = require(\n    './availableAddOn/availableAddOnExtension').AvailableAddOnExtensionList;\nvar Page = require('../../../base/Page');  /* jshint ignore:line */\nvar values = require('../../../base/values');  /* jshint ignore:line */\n\nvar AvailableAddOnList;\nvar AvailableAddOnPage;\nvar AvailableAddOnInstance;\nvar AvailableAddOnContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the AvailableAddOnList\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Preview.Marketplace.AvailableAddOnList\n *\n * @param {Twilio.Preview.Marketplace} version - Version of the resource\n */\n/* jshint ignore:end */\nAvailableAddOnList = function AvailableAddOnList(version) {\n  /* jshint ignore:start */\n  /**\n   * @function availableAddOns\n   * @memberof Twilio.Preview.Marketplace#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Preview.Marketplace.AvailableAddOnContext}\n   */\n  /* jshint ignore:end */\n  function AvailableAddOnListInstance(sid) {\n    return AvailableAddOnListInstance.get(sid);\n  }\n\n  AvailableAddOnListInstance._version = version;\n  // Path Solution\n  AvailableAddOnListInstance._solution = {};\n  AvailableAddOnListInstance._uri = `/AvailableAddOns`;\n  /* jshint ignore:start */\n  /**\n   * Streams AvailableAddOnInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Preview.Marketplace.AvailableAddOnList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  AvailableAddOnListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists AvailableAddOnInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Preview.Marketplace.AvailableAddOnList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  AvailableAddOnListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of AvailableAddOnInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Preview.Marketplace.AvailableAddOnList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  AvailableAddOnListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new AvailableAddOnPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of AvailableAddOnInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Preview.Marketplace.AvailableAddOnList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  AvailableAddOnListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new AvailableAddOnPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a available_add_on\n   *\n   * @function get\n   * @memberof Twilio.Preview.Marketplace.AvailableAddOnList#\n   *\n   * @param {string} sid - The SID of the AvailableAddOn resource to fetch\n   *\n   * @returns {Twilio.Preview.Marketplace.AvailableAddOnContext}\n   */\n  /* jshint ignore:end */\n  AvailableAddOnListInstance.get = function get(sid) {\n    return new AvailableAddOnContext(this._version, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Preview.Marketplace.AvailableAddOnList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  AvailableAddOnListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  AvailableAddOnListInstance[util.inspect.custom] = function inspect(depth,\n      options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return AvailableAddOnListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the AvailableAddOnPage\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Preview.Marketplace.AvailableAddOnPage\n *\n * @param {Marketplace} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {AvailableAddOnSolution} solution - Path solution\n *\n * @returns AvailableAddOnPage\n */\n/* jshint ignore:end */\nAvailableAddOnPage = function AvailableAddOnPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(AvailableAddOnPage.prototype, Page.prototype);\nAvailableAddOnPage.prototype.constructor = AvailableAddOnPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of AvailableAddOnInstance\n *\n * @function getInstance\n * @memberof Twilio.Preview.Marketplace.AvailableAddOnPage#\n *\n * @param {AvailableAddOnPayload} payload - Payload response from the API\n *\n * @returns AvailableAddOnInstance\n */\n/* jshint ignore:end */\nAvailableAddOnPage.prototype.getInstance = function getInstance(payload) {\n  return new AvailableAddOnInstance(this._version, payload);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Preview.Marketplace.AvailableAddOnPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nAvailableAddOnPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nAvailableAddOnPage.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the AvailableAddOnContext\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Preview.Marketplace.AvailableAddOnInstance\n *\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} friendlyName -\n *          The string that you assigned to describe the resource\n * @property {string} description -\n *          A short description of the Add-on's functionality\n * @property {string} pricingType - How customers are charged for using this Add-on\n * @property {object} configurationSchema -\n *          The JSON object with the configuration that must be provided when installing a given Add-on\n * @property {string} url - The absolute URL of the resource\n * @property {string} links - The URLs of related resources\n *\n * @param {Marketplace} version - Version of the resource\n * @param {AvailableAddOnPayload} payload - The instance payload\n * @param {sid} sid - The SID of the AvailableAddOn resource to fetch\n */\n/* jshint ignore:end */\nAvailableAddOnInstance = function AvailableAddOnInstance(version, payload, sid)\n                                                          {\n  this._version = version;\n\n  // Marshaled Properties\n  this.sid = payload.sid; // jshint ignore:line\n  this.friendlyName = payload.friendly_name; // jshint ignore:line\n  this.description = payload.description; // jshint ignore:line\n  this.pricingType = payload.pricing_type; // jshint ignore:line\n  this.configurationSchema = payload.configuration_schema; // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n  this.links = payload.links; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {sid: sid || this.sid, };\n};\n\nObject.defineProperty(AvailableAddOnInstance.prototype,\n  '_proxy', {\n    get: function() {\n      if (!this._context) {\n        this._context = new AvailableAddOnContext(this._version, this._solution.sid);\n      }\n\n      return this._context;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a AvailableAddOnInstance\n *\n * @function fetch\n * @memberof Twilio.Preview.Marketplace.AvailableAddOnInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed AvailableAddOnInstance\n */\n/* jshint ignore:end */\nAvailableAddOnInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * Access the extensions\n *\n * @function extensions\n * @memberof Twilio.Preview.Marketplace.AvailableAddOnInstance#\n *\n * @returns {Twilio.Preview.Marketplace.AvailableAddOnContext.AvailableAddOnExtensionList}\n */\n/* jshint ignore:end */\nAvailableAddOnInstance.prototype.extensions = function extensions() {\n  return this._proxy.extensions;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Preview.Marketplace.AvailableAddOnInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nAvailableAddOnInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nAvailableAddOnInstance.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the AvailableAddOnContext\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Preview.Marketplace.AvailableAddOnContext\n *\n * @property {Twilio.Preview.Marketplace.AvailableAddOnContext.AvailableAddOnExtensionList} extensions -\n *          extensions resource\n *\n * @param {Marketplace} version - Version of the resource\n * @param {sid} sid - The SID of the AvailableAddOn resource to fetch\n */\n/* jshint ignore:end */\nAvailableAddOnContext = function AvailableAddOnContext(version, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {sid: sid, };\n  this._uri = `/AvailableAddOns/${sid}`;\n\n  // Dependents\n  this._extensions = undefined;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a AvailableAddOnInstance\n *\n * @function fetch\n * @memberof Twilio.Preview.Marketplace.AvailableAddOnContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed AvailableAddOnInstance\n */\n/* jshint ignore:end */\nAvailableAddOnContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({uri: this._uri, method: 'GET'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new AvailableAddOnInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\nObject.defineProperty(AvailableAddOnContext.prototype,\n  'extensions', {\n    get: function() {\n      if (!this._extensions) {\n        this._extensions = new AvailableAddOnExtensionList(this._version, this._solution.sid);\n      }\n      return this._extensions;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Preview.Marketplace.AvailableAddOnContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nAvailableAddOnContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nAvailableAddOnContext.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  AvailableAddOnList: AvailableAddOnList,\n  AvailableAddOnPage: AvailableAddOnPage,\n  AvailableAddOnInstance: AvailableAddOnInstance,\n  AvailableAddOnContext: AvailableAddOnContext\n};\n"]},"metadata":{},"sourceType":"module"}