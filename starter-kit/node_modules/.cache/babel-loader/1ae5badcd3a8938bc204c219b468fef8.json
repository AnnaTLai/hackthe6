{"ast":null,"code":"'use strict';\n/* jshint ignore:start */\n\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n\n/* jshint ignore:end */\n\nvar Q = require('q');\n/* jshint ignore:line */\n\n\nvar _ = require('lodash');\n/* jshint ignore:line */\n\n\nvar util = require('util');\n/* jshint ignore:line */\n\n\nvar Page = require('../../../../../base/Page');\n/* jshint ignore:line */\n\n\nvar deserialize = require('../../../../../base/deserialize');\n/* jshint ignore:line */\n\n\nvar serialize = require('../../../../../base/serialize');\n/* jshint ignore:line */\n\n\nvar values = require('../../../../../base/values');\n/* jshint ignore:line */\n\n\nvar LogList;\nvar LogPage;\nvar LogInstance;\nvar LogContext;\n/* jshint ignore:start */\n\n/**\n * Initialize the LogList\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Serverless.V1.ServiceContext.EnvironmentContext.LogList\n *\n * @param {Twilio.Serverless.V1} version - Version of the resource\n * @param {string} serviceSid -\n *          The SID of the Service that the Log resource is associated with\n * @param {string} environmentSid -\n *          The SID of the environment in which the log occurred\n */\n\n/* jshint ignore:end */\n\nLogList = function LogList(version, serviceSid, environmentSid) {\n  /* jshint ignore:start */\n\n  /**\n   * @function logs\n   * @memberof Twilio.Serverless.V1.ServiceContext.EnvironmentContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Serverless.V1.ServiceContext.EnvironmentContext.LogContext}\n   */\n\n  /* jshint ignore:end */\n  function LogListInstance(sid) {\n    return LogListInstance.get(sid);\n  }\n\n  LogListInstance._version = version; // Path Solution\n\n  LogListInstance._solution = {\n    serviceSid: serviceSid,\n    environmentSid: environmentSid\n  };\n  LogListInstance._uri = `/Services/${serviceSid}/Environments/${environmentSid}/Logs`;\n  /* jshint ignore:start */\n\n  /**\n   * Streams LogInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Serverless.V1.ServiceContext.EnvironmentContext.LogList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.functionSid] -\n   *          The SID of the function whose invocation produced the Log resources to read\n   * @param {Date} [opts.startDate] -\n   *          The date and time after which the Log resources must have been created.\n   * @param {Date} [opts.endDate] -\n   *          The date and time before which the Log resource must have been created.\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n\n  /* jshint ignore:end */\n\n  LogListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Lists LogInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Serverless.V1.ServiceContext.EnvironmentContext.LogList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.functionSid] -\n   *          The SID of the function whose invocation produced the Log resources to read\n   * @param {Date} [opts.startDate] -\n   *          The date and time after which the Log resources must have been created.\n   * @param {Date} [opts.endDate] -\n   *          The date and time before which the Log resource must have been created.\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  LogListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single page of LogInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Serverless.V1.ServiceContext.EnvironmentContext.LogList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.functionSid] -\n   *          The SID of the function whose invocation produced the Log resources to read\n   * @param {Date} [opts.startDate] -\n   *          The date and time after which the Log resources must have been created.\n   * @param {Date} [opts.endDate] -\n   *          The date and time before which the Log resource must have been created.\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  LogListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'FunctionSid': _.get(opts, 'functionSid'),\n      'StartDate': serialize.iso8601DateTime(_.get(opts, 'startDate')),\n      'EndDate': serialize.iso8601DateTime(_.get(opts, 'endDate')),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new LogPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single target page of LogInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Serverless.V1.ServiceContext.EnvironmentContext.LogList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  LogListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new LogPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Constructs a log\n   *\n   * @function get\n   * @memberof Twilio.Serverless.V1.ServiceContext.EnvironmentContext.LogList#\n   *\n   * @param {string} sid - The SID that identifies the Log resource to fetch\n   *\n   * @returns {Twilio.Serverless.V1.ServiceContext.EnvironmentContext.LogContext}\n   */\n\n  /* jshint ignore:end */\n\n\n  LogListInstance.get = function get(sid) {\n    return new LogContext(this._version, this._solution.serviceSid, this._solution.environmentSid, sid);\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Serverless.V1.ServiceContext.EnvironmentContext.LogList#\n   *\n   * @returns Object\n   */\n\n  /* jshint ignore:end */\n\n\n  LogListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  LogListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return LogListInstance;\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the LogPage\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Serverless.V1.ServiceContext.EnvironmentContext.LogPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {LogSolution} solution - Path solution\n *\n * @returns LogPage\n */\n\n/* jshint ignore:end */\n\n\nLogPage = function LogPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(LogPage.prototype, Page.prototype);\n\nLogPage.prototype.constructor = LogPage;\n/* jshint ignore:start */\n\n/**\n * Build an instance of LogInstance\n *\n * @function getInstance\n * @memberof Twilio.Serverless.V1.ServiceContext.EnvironmentContext.LogPage#\n *\n * @param {LogPayload} payload - Payload response from the API\n *\n * @returns LogInstance\n */\n\n/* jshint ignore:end */\n\nLogPage.prototype.getInstance = function getInstance(payload) {\n  return new LogInstance(this._version, payload, this._solution.serviceSid, this._solution.environmentSid);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Serverless.V1.ServiceContext.EnvironmentContext.LogPage#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nLogPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nLogPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the LogContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Serverless.V1.ServiceContext.EnvironmentContext.LogInstance\n *\n * @property {string} sid - The unique string that identifies the Log resource\n * @property {string} accountSid -\n *          The SID of the Account that created the Log resource\n * @property {string} serviceSid -\n *          The SID of the Service that the Log resource is associated with\n * @property {string} environmentSid -\n *          The SID of the environment in which the log occurred\n * @property {string} buildSid - The SID of the build that corresponds to the log\n * @property {string} deploymentSid -\n *          The SID of the deployment that corresponds to the log\n * @property {string} functionSid -\n *          The SID of the function whose invocation produced the log\n * @property {string} requestSid - The SID of the request associated with the log\n * @property {log.level} level - The log level\n * @property {string} message - The log message\n * @property {Date} dateCreated -\n *          The ISO 8601 date and time in GMT when the Log resource was created\n * @property {string} url - The absolute URL of the Log resource\n *\n * @param {V1} version - Version of the resource\n * @param {LogPayload} payload - The instance payload\n * @param {sid} serviceSid -\n *          The SID of the Service that the Log resource is associated with\n * @param {sid} environmentSid -\n *          The SID of the environment in which the log occurred\n * @param {sid} sid - The SID that identifies the Log resource to fetch\n */\n\n/* jshint ignore:end */\n\n\nLogInstance = function LogInstance(version, payload, serviceSid, environmentSid, sid) {\n  this._version = version; // Marshaled Properties\n\n  this.sid = payload.sid; // jshint ignore:line\n\n  this.accountSid = payload.account_sid; // jshint ignore:line\n\n  this.serviceSid = payload.service_sid; // jshint ignore:line\n\n  this.environmentSid = payload.environment_sid; // jshint ignore:line\n\n  this.buildSid = payload.build_sid; // jshint ignore:line\n\n  this.deploymentSid = payload.deployment_sid; // jshint ignore:line\n\n  this.functionSid = payload.function_sid; // jshint ignore:line\n\n  this.requestSid = payload.request_sid; // jshint ignore:line\n\n  this.level = payload.level; // jshint ignore:line\n\n  this.message = payload.message; // jshint ignore:line\n\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n\n  this.url = payload.url; // jshint ignore:line\n  // Context\n\n  this._context = undefined;\n  this._solution = {\n    serviceSid: serviceSid,\n    environmentSid: environmentSid,\n    sid: sid || this.sid\n  };\n};\n\nObject.defineProperty(LogInstance.prototype, '_proxy', {\n  get: function () {\n    if (!this._context) {\n      this._context = new LogContext(this._version, this._solution.serviceSid, this._solution.environmentSid, this._solution.sid);\n    }\n\n    return this._context;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * fetch a LogInstance\n *\n * @function fetch\n * @memberof Twilio.Serverless.V1.ServiceContext.EnvironmentContext.LogInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed LogInstance\n */\n\n/* jshint ignore:end */\n\nLogInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Serverless.V1.ServiceContext.EnvironmentContext.LogInstance#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nLogInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nLogInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the LogContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Serverless.V1.ServiceContext.EnvironmentContext.LogContext\n *\n * @param {V1} version - Version of the resource\n * @param {sid_like} serviceSid -\n *          The SID of the Service to fetch the Log resource from\n * @param {sid} environmentSid -\n *          The SID of the environment with the Log resource to fetch\n * @param {sid} sid - The SID that identifies the Log resource to fetch\n */\n\n/* jshint ignore:end */\n\n\nLogContext = function LogContext(version, serviceSid, environmentSid, sid) {\n  this._version = version; // Path Solution\n\n  this._solution = {\n    serviceSid: serviceSid,\n    environmentSid: environmentSid,\n    sid: sid\n  };\n  this._uri = `/Services/${serviceSid}/Environments/${environmentSid}/Logs/${sid}`;\n};\n/* jshint ignore:start */\n\n/**\n * fetch a LogInstance\n *\n * @function fetch\n * @memberof Twilio.Serverless.V1.ServiceContext.EnvironmentContext.LogContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed LogInstance\n */\n\n/* jshint ignore:end */\n\n\nLogContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new LogInstance(this._version, payload, this._solution.serviceSid, this._solution.environmentSid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Serverless.V1.ServiceContext.EnvironmentContext.LogContext#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nLogContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nLogContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  LogList: LogList,\n  LogPage: LogPage,\n  LogInstance: LogInstance,\n  LogContext: LogContext\n};","map":{"version":3,"sources":["/Users/tony_niu/Visual Studio/Twilio/twilio-video-starter-kit/node_modules/twilio/lib/rest/serverless/v1/service/environment/log.js"],"names":["Q","require","_","util","Page","deserialize","serialize","values","LogList","LogPage","LogInstance","LogContext","version","serviceSid","environmentSid","LogListInstance","sid","get","_version","_solution","_uri","each","opts","callback","isFunction","isUndefined","Error","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","error","fetchNextPage","fn","promise","then","page","instances","instance","bind","nextPage","catch","merge","list","deferred","defer","allResources","resource","push","length","resolve","reject","nodeify","data","of","iso8601DateTime","pageToken","pageNumber","uri","method","params","payload","getPage","targetUrl","_domain","twilio","request","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","accountSid","account_sid","service_sid","environment_sid","buildSid","build_sid","deploymentSid","deployment_sid","functionSid","function_sid","requestSid","request_sid","level","message","dateCreated","date_created","url","_context","undefined","Object","defineProperty","fetch","_proxy","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar Page = require('../../../../../base/Page');  /* jshint ignore:line */\nvar deserialize = require(\n    '../../../../../base/deserialize');  /* jshint ignore:line */\nvar serialize = require(\n    '../../../../../base/serialize');  /* jshint ignore:line */\nvar values = require('../../../../../base/values');  /* jshint ignore:line */\n\nvar LogList;\nvar LogPage;\nvar LogInstance;\nvar LogContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the LogList\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Serverless.V1.ServiceContext.EnvironmentContext.LogList\n *\n * @param {Twilio.Serverless.V1} version - Version of the resource\n * @param {string} serviceSid -\n *          The SID of the Service that the Log resource is associated with\n * @param {string} environmentSid -\n *          The SID of the environment in which the log occurred\n */\n/* jshint ignore:end */\nLogList = function LogList(version, serviceSid, environmentSid) {\n  /* jshint ignore:start */\n  /**\n   * @function logs\n   * @memberof Twilio.Serverless.V1.ServiceContext.EnvironmentContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Serverless.V1.ServiceContext.EnvironmentContext.LogContext}\n   */\n  /* jshint ignore:end */\n  function LogListInstance(sid) {\n    return LogListInstance.get(sid);\n  }\n\n  LogListInstance._version = version;\n  // Path Solution\n  LogListInstance._solution = {serviceSid: serviceSid, environmentSid: environmentSid};\n  LogListInstance._uri = `/Services/${serviceSid}/Environments/${environmentSid}/Logs`;\n  /* jshint ignore:start */\n  /**\n   * Streams LogInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Serverless.V1.ServiceContext.EnvironmentContext.LogList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.functionSid] -\n   *          The SID of the function whose invocation produced the Log resources to read\n   * @param {Date} [opts.startDate] -\n   *          The date and time after which the Log resources must have been created.\n   * @param {Date} [opts.endDate] -\n   *          The date and time before which the Log resource must have been created.\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  LogListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists LogInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Serverless.V1.ServiceContext.EnvironmentContext.LogList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.functionSid] -\n   *          The SID of the function whose invocation produced the Log resources to read\n   * @param {Date} [opts.startDate] -\n   *          The date and time after which the Log resources must have been created.\n   * @param {Date} [opts.endDate] -\n   *          The date and time before which the Log resource must have been created.\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  LogListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of LogInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Serverless.V1.ServiceContext.EnvironmentContext.LogList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.functionSid] -\n   *          The SID of the function whose invocation produced the Log resources to read\n   * @param {Date} [opts.startDate] -\n   *          The date and time after which the Log resources must have been created.\n   * @param {Date} [opts.endDate] -\n   *          The date and time before which the Log resource must have been created.\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  LogListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'FunctionSid': _.get(opts, 'functionSid'),\n      'StartDate': serialize.iso8601DateTime(_.get(opts, 'startDate')),\n      'EndDate': serialize.iso8601DateTime(_.get(opts, 'endDate')),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new LogPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of LogInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Serverless.V1.ServiceContext.EnvironmentContext.LogList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  LogListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new LogPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a log\n   *\n   * @function get\n   * @memberof Twilio.Serverless.V1.ServiceContext.EnvironmentContext.LogList#\n   *\n   * @param {string} sid - The SID that identifies the Log resource to fetch\n   *\n   * @returns {Twilio.Serverless.V1.ServiceContext.EnvironmentContext.LogContext}\n   */\n  /* jshint ignore:end */\n  LogListInstance.get = function get(sid) {\n    return new LogContext(this._version, this._solution.serviceSid, this._solution.environmentSid, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Serverless.V1.ServiceContext.EnvironmentContext.LogList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  LogListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  LogListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return LogListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the LogPage\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Serverless.V1.ServiceContext.EnvironmentContext.LogPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {LogSolution} solution - Path solution\n *\n * @returns LogPage\n */\n/* jshint ignore:end */\nLogPage = function LogPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(LogPage.prototype, Page.prototype);\nLogPage.prototype.constructor = LogPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of LogInstance\n *\n * @function getInstance\n * @memberof Twilio.Serverless.V1.ServiceContext.EnvironmentContext.LogPage#\n *\n * @param {LogPayload} payload - Payload response from the API\n *\n * @returns LogInstance\n */\n/* jshint ignore:end */\nLogPage.prototype.getInstance = function getInstance(payload) {\n  return new LogInstance(\n    this._version,\n    payload,\n    this._solution.serviceSid,\n    this._solution.environmentSid\n  );\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Serverless.V1.ServiceContext.EnvironmentContext.LogPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nLogPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nLogPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the LogContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Serverless.V1.ServiceContext.EnvironmentContext.LogInstance\n *\n * @property {string} sid - The unique string that identifies the Log resource\n * @property {string} accountSid -\n *          The SID of the Account that created the Log resource\n * @property {string} serviceSid -\n *          The SID of the Service that the Log resource is associated with\n * @property {string} environmentSid -\n *          The SID of the environment in which the log occurred\n * @property {string} buildSid - The SID of the build that corresponds to the log\n * @property {string} deploymentSid -\n *          The SID of the deployment that corresponds to the log\n * @property {string} functionSid -\n *          The SID of the function whose invocation produced the log\n * @property {string} requestSid - The SID of the request associated with the log\n * @property {log.level} level - The log level\n * @property {string} message - The log message\n * @property {Date} dateCreated -\n *          The ISO 8601 date and time in GMT when the Log resource was created\n * @property {string} url - The absolute URL of the Log resource\n *\n * @param {V1} version - Version of the resource\n * @param {LogPayload} payload - The instance payload\n * @param {sid} serviceSid -\n *          The SID of the Service that the Log resource is associated with\n * @param {sid} environmentSid -\n *          The SID of the environment in which the log occurred\n * @param {sid} sid - The SID that identifies the Log resource to fetch\n */\n/* jshint ignore:end */\nLogInstance = function LogInstance(version, payload, serviceSid, environmentSid,\n                                    sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.sid = payload.sid; // jshint ignore:line\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.serviceSid = payload.service_sid; // jshint ignore:line\n  this.environmentSid = payload.environment_sid; // jshint ignore:line\n  this.buildSid = payload.build_sid; // jshint ignore:line\n  this.deploymentSid = payload.deployment_sid; // jshint ignore:line\n  this.functionSid = payload.function_sid; // jshint ignore:line\n  this.requestSid = payload.request_sid; // jshint ignore:line\n  this.level = payload.level; // jshint ignore:line\n  this.message = payload.message; // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {serviceSid: serviceSid, environmentSid: environmentSid, sid: sid || this.sid, };\n};\n\nObject.defineProperty(LogInstance.prototype,\n  '_proxy', {\n    get: function() {\n      if (!this._context) {\n        this._context = new LogContext(\n          this._version,\n          this._solution.serviceSid,\n          this._solution.environmentSid,\n          this._solution.sid\n        );\n      }\n\n      return this._context;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a LogInstance\n *\n * @function fetch\n * @memberof Twilio.Serverless.V1.ServiceContext.EnvironmentContext.LogInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed LogInstance\n */\n/* jshint ignore:end */\nLogInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Serverless.V1.ServiceContext.EnvironmentContext.LogInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nLogInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nLogInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the LogContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Serverless.V1.ServiceContext.EnvironmentContext.LogContext\n *\n * @param {V1} version - Version of the resource\n * @param {sid_like} serviceSid -\n *          The SID of the Service to fetch the Log resource from\n * @param {sid} environmentSid -\n *          The SID of the environment with the Log resource to fetch\n * @param {sid} sid - The SID that identifies the Log resource to fetch\n */\n/* jshint ignore:end */\nLogContext = function LogContext(version, serviceSid, environmentSid, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {serviceSid: serviceSid, environmentSid: environmentSid, sid: sid, };\n  this._uri = `/Services/${serviceSid}/Environments/${environmentSid}/Logs/${sid}`;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a LogInstance\n *\n * @function fetch\n * @memberof Twilio.Serverless.V1.ServiceContext.EnvironmentContext.LogContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed LogInstance\n */\n/* jshint ignore:end */\nLogContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({uri: this._uri, method: 'GET'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new LogInstance(\n      this._version,\n      payload,\n      this._solution.serviceSid,\n      this._solution.environmentSid,\n      this._solution.sid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Serverless.V1.ServiceContext.EnvironmentContext.LogContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nLogContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nLogContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  LogList: LogList,\n  LogPage: LogPage,\n  LogInstance: LogInstance,\n  LogContext: LogContext\n};\n"]},"metadata":{},"sourceType":"script"}