{"ast":null,"code":"'use strict';\n/* jshint ignore:start */\n\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n\n/* jshint ignore:end */\n\nvar Q = require('q');\n/* jshint ignore:line */\n\n\nvar _ = require('lodash');\n/* jshint ignore:line */\n\n\nvar util = require('util');\n/* jshint ignore:line */\n\n\nvar AccessTokenList = require('./service/accessToken').AccessTokenList;\n\nvar EntityList = require('./service/entity').EntityList;\n\nvar MessagingConfigurationList = require('./service/messagingConfiguration').MessagingConfigurationList;\n\nvar Page = require('../../../base/Page');\n/* jshint ignore:line */\n\n\nvar RateLimitList = require('./service/rateLimit').RateLimitList;\n\nvar VerificationCheckList = require('./service/verificationCheck').VerificationCheckList;\n\nvar VerificationList = require('./service/verification').VerificationList;\n\nvar WebhookList = require('./service/webhook').WebhookList;\n\nvar deserialize = require('../../../base/deserialize');\n/* jshint ignore:line */\n\n\nvar serialize = require('../../../base/serialize');\n/* jshint ignore:line */\n\n\nvar values = require('../../../base/values');\n/* jshint ignore:line */\n\n\nvar ServiceList;\nvar ServicePage;\nvar ServiceInstance;\nvar ServiceContext;\n/* jshint ignore:start */\n\n/**\n * Initialize the ServiceList\n *\n * @constructor Twilio.Verify.V2.ServiceList\n *\n * @param {Twilio.Verify.V2} version - Version of the resource\n */\n\n/* jshint ignore:end */\n\nServiceList = function ServiceList(version) {\n  /* jshint ignore:start */\n\n  /**\n   * @function services\n   * @memberof Twilio.Verify.V2#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Verify.V2.ServiceContext}\n   */\n\n  /* jshint ignore:end */\n  function ServiceListInstance(sid) {\n    return ServiceListInstance.get(sid);\n  }\n\n  ServiceListInstance._version = version; // Path Solution\n\n  ServiceListInstance._solution = {};\n  ServiceListInstance._uri = `/Services`;\n  /* jshint ignore:start */\n\n  /**\n   * create a ServiceInstance\n   *\n   * @function create\n   * @memberof Twilio.Verify.V2.ServiceList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.friendlyName -\n   *          A string to describe the verification service\n   * @param {number} [opts.codeLength] -\n   *          The length of the verification code to generate\n   * @param {boolean} [opts.lookupEnabled] -\n   *          Whether to perform a lookup with each verification\n   * @param {boolean} [opts.skipSmsToLandlines] -\n   *          Whether to skip sending SMS verifications to landlines\n   * @param {boolean} [opts.dtmfInputRequired] -\n   *          Whether to ask the user to press a number before delivering the verify code in a phone call\n   * @param {string} [opts.ttsName] -\n   *          The name of an alternative text-to-speech service to use in phone calls\n   * @param {boolean} [opts.psd2Enabled] -\n   *          Whether to pass PSD2 transaction parameters when starting a verification\n   * @param {boolean} [opts.doNotShareWarningEnabled] -\n   *          Whether to add a security warning at the end of an SMS.\n   * @param {boolean} [opts.customCodeEnabled] -\n   *          Whether to allow sending verifications with a custom code.\n   * @param {boolean} [opts.push.includeDate] -\n   *          Optional. Include the date in the Challenge's reponse. Default: true\n   * @param {string} [opts.push.apnCredentialSid] -\n   *          Optional. Set APN Credential for this service.\n   * @param {string} [opts.push.fcmCredentialSid] -\n   *          Optional. Set FCM Credential for this service.\n   * @param {string} [opts.totp.issuer] - Optional. Set TOTP Issuer for this service.\n   * @param {number} [opts.totp.timeStep] -\n   *          Optional. How often, in seconds, are TOTP codes generated\n   * @param {number} [opts.totp.codeLength] -\n   *          Optional. Number of digits for generated TOTP codes\n   * @param {number} [opts.totp.skew] -\n   *          Optional. The number of past and future time-steps valid at a given time\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed ServiceInstance\n   */\n\n  /* jshint ignore:end */\n\n  ServiceListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n\n    if (_.isUndefined(opts.friendlyName)) {\n      throw new Error('Required parameter \"opts.friendlyName\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'FriendlyName': _.get(opts, 'friendlyName'),\n      'CodeLength': _.get(opts, 'codeLength'),\n      'LookupEnabled': serialize.bool(_.get(opts, 'lookupEnabled')),\n      'SkipSmsToLandlines': serialize.bool(_.get(opts, 'skipSmsToLandlines')),\n      'DtmfInputRequired': serialize.bool(_.get(opts, 'dtmfInputRequired')),\n      'TtsName': _.get(opts, 'ttsName'),\n      'Psd2Enabled': serialize.bool(_.get(opts, 'psd2Enabled')),\n      'DoNotShareWarningEnabled': serialize.bool(_.get(opts, 'doNotShareWarningEnabled')),\n      'CustomCodeEnabled': serialize.bool(_.get(opts, 'customCodeEnabled')),\n      'Push.IncludeDate': serialize.bool(_.get(opts, 'push.includeDate')),\n      'Push.ApnCredentialSid': _.get(opts, 'push.apnCredentialSid'),\n      'Push.FcmCredentialSid': _.get(opts, 'push.fcmCredentialSid'),\n      'Totp.Issuer': _.get(opts, 'totp.issuer'),\n      'Totp.TimeStep': _.get(opts, 'totp.timeStep'),\n      'Totp.CodeLength': _.get(opts, 'totp.codeLength'),\n      'Totp.Skew': _.get(opts, 'totp.skew')\n    });\n\n    var promise = this._version.create({\n      uri: this._uri,\n      method: 'POST',\n      data: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new ServiceInstance(this._version, payload, this._solution.sid));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Streams ServiceInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Verify.V2.ServiceList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n\n  /* jshint ignore:end */\n\n\n  ServiceListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Lists ServiceInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Verify.V2.ServiceList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  ServiceListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single page of ServiceInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Verify.V2.ServiceList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  ServiceListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new ServicePage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single target page of ServiceInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Verify.V2.ServiceList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  ServiceListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new ServicePage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Constructs a service\n   *\n   * @function get\n   * @memberof Twilio.Verify.V2.ServiceList#\n   *\n   * @param {string} sid - The unique string that identifies the resource\n   *\n   * @returns {Twilio.Verify.V2.ServiceContext}\n   */\n\n  /* jshint ignore:end */\n\n\n  ServiceListInstance.get = function get(sid) {\n    return new ServiceContext(this._version, sid);\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Verify.V2.ServiceList#\n   *\n   * @returns Object\n   */\n\n  /* jshint ignore:end */\n\n\n  ServiceListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  ServiceListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return ServiceListInstance;\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the ServicePage\n *\n * @constructor Twilio.Verify.V2.ServicePage\n *\n * @param {V2} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {ServiceSolution} solution - Path solution\n *\n * @returns ServicePage\n */\n\n/* jshint ignore:end */\n\n\nServicePage = function ServicePage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(ServicePage.prototype, Page.prototype);\n\nServicePage.prototype.constructor = ServicePage;\n/* jshint ignore:start */\n\n/**\n * Build an instance of ServiceInstance\n *\n * @function getInstance\n * @memberof Twilio.Verify.V2.ServicePage#\n *\n * @param {ServicePayload} payload - Payload response from the API\n *\n * @returns ServiceInstance\n */\n\n/* jshint ignore:end */\n\nServicePage.prototype.getInstance = function getInstance(payload) {\n  return new ServiceInstance(this._version, payload);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Verify.V2.ServicePage#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nServicePage.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nServicePage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the ServiceContext\n *\n * @constructor Twilio.Verify.V2.ServiceInstance\n *\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {string} friendlyName -\n *          The string that you assigned to describe the verification service\n * @property {number} codeLength - The length of the verification code\n * @property {boolean} lookupEnabled -\n *          Whether to perform a lookup with each verification\n * @property {boolean} psd2Enabled -\n *          Whether to pass PSD2 transaction parameters when starting a verification\n * @property {boolean} skipSmsToLandlines -\n *          Whether to skip sending SMS verifications to landlines\n * @property {boolean} dtmfInputRequired -\n *          Whether to ask the user to press a number before delivering the verify code in a phone call\n * @property {string} ttsName -\n *          The name of an alternative text-to-speech service to use in phone calls\n * @property {boolean} doNotShareWarningEnabled -\n *          Whether to add a security warning at the end of an SMS.\n * @property {boolean} customCodeEnabled -\n *          Whether to allow sending verifications with a custom code.\n * @property {object} push - The service level configuration of factor push type.\n * @property {object} totp - The service level configuration of factor TOTP type.\n * @property {Date} dateCreated -\n *          The RFC 2822 date and time in GMT when the resource was created\n * @property {Date} dateUpdated -\n *          The RFC 2822 date and time in GMT when the resource was last updated\n * @property {string} url - The absolute URL of the resource\n * @property {string} links - The URLs of related resources\n *\n * @param {V2} version - Version of the resource\n * @param {ServicePayload} payload - The instance payload\n * @param {sid} sid - The unique string that identifies the resource\n */\n\n/* jshint ignore:end */\n\n\nServiceInstance = function ServiceInstance(version, payload, sid) {\n  this._version = version; // Marshaled Properties\n\n  this.sid = payload.sid; // jshint ignore:line\n\n  this.accountSid = payload.account_sid; // jshint ignore:line\n\n  this.friendlyName = payload.friendly_name; // jshint ignore:line\n\n  this.codeLength = deserialize.integer(payload.code_length); // jshint ignore:line\n\n  this.lookupEnabled = payload.lookup_enabled; // jshint ignore:line\n\n  this.psd2Enabled = payload.psd2_enabled; // jshint ignore:line\n\n  this.skipSmsToLandlines = payload.skip_sms_to_landlines; // jshint ignore:line\n\n  this.dtmfInputRequired = payload.dtmf_input_required; // jshint ignore:line\n\n  this.ttsName = payload.tts_name; // jshint ignore:line\n\n  this.doNotShareWarningEnabled = payload.do_not_share_warning_enabled; // jshint ignore:line\n\n  this.customCodeEnabled = payload.custom_code_enabled; // jshint ignore:line\n\n  this.push = payload.push; // jshint ignore:line\n\n  this.totp = payload.totp; // jshint ignore:line\n\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n\n  this.url = payload.url; // jshint ignore:line\n\n  this.links = payload.links; // jshint ignore:line\n  // Context\n\n  this._context = undefined;\n  this._solution = {\n    sid: sid || this.sid\n  };\n};\n\nObject.defineProperty(ServiceInstance.prototype, '_proxy', {\n  get: function () {\n    if (!this._context) {\n      this._context = new ServiceContext(this._version, this._solution.sid);\n    }\n\n    return this._context;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * fetch a ServiceInstance\n *\n * @function fetch\n * @memberof Twilio.Verify.V2.ServiceInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ServiceInstance\n */\n\n/* jshint ignore:end */\n\nServiceInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n/* jshint ignore:start */\n\n/**\n * remove a ServiceInstance\n *\n * @function remove\n * @memberof Twilio.Verify.V2.ServiceInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ServiceInstance\n */\n\n/* jshint ignore:end */\n\n\nServiceInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n/* jshint ignore:start */\n\n/**\n * update a ServiceInstance\n *\n * @function update\n * @memberof Twilio.Verify.V2.ServiceInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] -\n *          A string to describe the verification service\n * @param {number} [opts.codeLength] -\n *          The length of the verification code to generate\n * @param {boolean} [opts.lookupEnabled] -\n *          Whether to perform a lookup with each verification\n * @param {boolean} [opts.skipSmsToLandlines] -\n *          Whether to skip sending SMS verifications to landlines\n * @param {boolean} [opts.dtmfInputRequired] -\n *          Whether to ask the user to press a number before delivering the verify code in a phone call\n * @param {string} [opts.ttsName] -\n *          The name of an alternative text-to-speech service to use in phone calls\n * @param {boolean} [opts.psd2Enabled] -\n *          Whether to pass PSD2 transaction parameters when starting a verification\n * @param {boolean} [opts.doNotShareWarningEnabled] -\n *          Whether to add a privacy warning at the end of an SMS.\n * @param {boolean} [opts.customCodeEnabled] -\n *          Whether to allow sending verifications with a custom code.\n * @param {boolean} [opts.push.includeDate] -\n *          Optional. Include the date in the Challenge's reponse. Default: true\n * @param {string} [opts.push.apnCredentialSid] -\n *          Optional. Set APN Credential for this service.\n * @param {string} [opts.push.fcmCredentialSid] -\n *          Optional. Set FCM Credential for this service.\n * @param {string} [opts.totp.issuer] - Optional. Set TOTP Issuer for this service.\n * @param {number} [opts.totp.timeStep] -\n *          Optional. How often, in seconds, are TOTP codes generated\n * @param {number} [opts.totp.codeLength] -\n *          Optional. Number of digits for generated TOTP codes\n * @param {number} [opts.totp.skew] -\n *          Optional. The number of past and future time-steps valid at a given time\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ServiceInstance\n */\n\n/* jshint ignore:end */\n\n\nServiceInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n/* jshint ignore:start */\n\n/**\n * Access the verifications\n *\n * @function verifications\n * @memberof Twilio.Verify.V2.ServiceInstance#\n *\n * @returns {Twilio.Verify.V2.ServiceContext.VerificationList}\n */\n\n/* jshint ignore:end */\n\n\nServiceInstance.prototype.verifications = function verifications() {\n  return this._proxy.verifications;\n};\n/* jshint ignore:start */\n\n/**\n * Access the verificationChecks\n *\n * @function verificationChecks\n * @memberof Twilio.Verify.V2.ServiceInstance#\n *\n * @returns {Twilio.Verify.V2.ServiceContext.VerificationCheckList}\n */\n\n/* jshint ignore:end */\n\n\nServiceInstance.prototype.verificationChecks = function verificationChecks() {\n  return this._proxy.verificationChecks;\n};\n/* jshint ignore:start */\n\n/**\n * Access the rateLimits\n *\n * @function rateLimits\n * @memberof Twilio.Verify.V2.ServiceInstance#\n *\n * @returns {Twilio.Verify.V2.ServiceContext.RateLimitList}\n */\n\n/* jshint ignore:end */\n\n\nServiceInstance.prototype.rateLimits = function rateLimits() {\n  return this._proxy.rateLimits;\n};\n/* jshint ignore:start */\n\n/**\n * Access the messagingConfigurations\n *\n * @function messagingConfigurations\n * @memberof Twilio.Verify.V2.ServiceInstance#\n *\n * @returns {Twilio.Verify.V2.ServiceContext.MessagingConfigurationList}\n */\n\n/* jshint ignore:end */\n\n\nServiceInstance.prototype.messagingConfigurations = function messagingConfigurations() {\n  return this._proxy.messagingConfigurations;\n};\n/* jshint ignore:start */\n\n/**\n * Access the entities\n *\n * @function entities\n * @memberof Twilio.Verify.V2.ServiceInstance#\n *\n * @returns {Twilio.Verify.V2.ServiceContext.EntityList}\n */\n\n/* jshint ignore:end */\n\n\nServiceInstance.prototype.entities = function entities() {\n  return this._proxy.entities;\n};\n/* jshint ignore:start */\n\n/**\n * Access the webhooks\n *\n * @function webhooks\n * @memberof Twilio.Verify.V2.ServiceInstance#\n *\n * @returns {Twilio.Verify.V2.ServiceContext.WebhookList}\n */\n\n/* jshint ignore:end */\n\n\nServiceInstance.prototype.webhooks = function webhooks() {\n  return this._proxy.webhooks;\n};\n/* jshint ignore:start */\n\n/**\n * Access the accessTokens\n *\n * @function accessTokens\n * @memberof Twilio.Verify.V2.ServiceInstance#\n *\n * @returns {Twilio.Verify.V2.ServiceContext.AccessTokenList}\n */\n\n/* jshint ignore:end */\n\n\nServiceInstance.prototype.accessTokens = function accessTokens() {\n  return this._proxy.accessTokens;\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Verify.V2.ServiceInstance#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nServiceInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nServiceInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the ServiceContext\n *\n * @constructor Twilio.Verify.V2.ServiceContext\n *\n * @property {Twilio.Verify.V2.ServiceContext.VerificationList} verifications -\n *          verifications resource\n * @property {Twilio.Verify.V2.ServiceContext.VerificationCheckList} verificationChecks -\n *          verificationChecks resource\n * @property {Twilio.Verify.V2.ServiceContext.RateLimitList} rateLimits -\n *          rateLimits resource\n * @property {Twilio.Verify.V2.ServiceContext.MessagingConfigurationList} messagingConfigurations -\n *          messagingConfigurations resource\n * @property {Twilio.Verify.V2.ServiceContext.EntityList} entities -\n *          entities resource\n * @property {Twilio.Verify.V2.ServiceContext.WebhookList} webhooks -\n *          webhooks resource\n * @property {Twilio.Verify.V2.ServiceContext.AccessTokenList} accessTokens -\n *          accessTokens resource\n *\n * @param {V2} version - Version of the resource\n * @param {sid} sid - The unique string that identifies the resource\n */\n\n/* jshint ignore:end */\n\n\nServiceContext = function ServiceContext(version, sid) {\n  this._version = version; // Path Solution\n\n  this._solution = {\n    sid: sid\n  };\n  this._uri = `/Services/${sid}`; // Dependents\n\n  this._verifications = undefined;\n  this._verificationChecks = undefined;\n  this._rateLimits = undefined;\n  this._messagingConfigurations = undefined;\n  this._entities = undefined;\n  this._webhooks = undefined;\n  this._accessTokens = undefined;\n};\n/* jshint ignore:start */\n\n/**\n * fetch a ServiceInstance\n *\n * @function fetch\n * @memberof Twilio.Verify.V2.ServiceContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ServiceInstance\n */\n\n/* jshint ignore:end */\n\n\nServiceContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new ServiceInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * remove a ServiceInstance\n *\n * @function remove\n * @memberof Twilio.Verify.V2.ServiceContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ServiceInstance\n */\n\n/* jshint ignore:end */\n\n\nServiceContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.remove({\n    uri: this._uri,\n    method: 'DELETE'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * update a ServiceInstance\n *\n * @function update\n * @memberof Twilio.Verify.V2.ServiceContext#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] -\n *          A string to describe the verification service\n * @param {number} [opts.codeLength] -\n *          The length of the verification code to generate\n * @param {boolean} [opts.lookupEnabled] -\n *          Whether to perform a lookup with each verification\n * @param {boolean} [opts.skipSmsToLandlines] -\n *          Whether to skip sending SMS verifications to landlines\n * @param {boolean} [opts.dtmfInputRequired] -\n *          Whether to ask the user to press a number before delivering the verify code in a phone call\n * @param {string} [opts.ttsName] -\n *          The name of an alternative text-to-speech service to use in phone calls\n * @param {boolean} [opts.psd2Enabled] -\n *          Whether to pass PSD2 transaction parameters when starting a verification\n * @param {boolean} [opts.doNotShareWarningEnabled] -\n *          Whether to add a privacy warning at the end of an SMS.\n * @param {boolean} [opts.customCodeEnabled] -\n *          Whether to allow sending verifications with a custom code.\n * @param {boolean} [opts.push.includeDate] -\n *          Optional. Include the date in the Challenge's reponse. Default: true\n * @param {string} [opts.push.apnCredentialSid] -\n *          Optional. Set APN Credential for this service.\n * @param {string} [opts.push.fcmCredentialSid] -\n *          Optional. Set FCM Credential for this service.\n * @param {string} [opts.totp.issuer] - Optional. Set TOTP Issuer for this service.\n * @param {number} [opts.totp.timeStep] -\n *          Optional. How often, in seconds, are TOTP codes generated\n * @param {number} [opts.totp.codeLength] -\n *          Optional. Number of digits for generated TOTP codes\n * @param {number} [opts.totp.skew] -\n *          Optional. The number of past and future time-steps valid at a given time\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ServiceInstance\n */\n\n/* jshint ignore:end */\n\n\nServiceContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n\n  opts = opts || {};\n  var deferred = Q.defer();\n  var data = values.of({\n    'FriendlyName': _.get(opts, 'friendlyName'),\n    'CodeLength': _.get(opts, 'codeLength'),\n    'LookupEnabled': serialize.bool(_.get(opts, 'lookupEnabled')),\n    'SkipSmsToLandlines': serialize.bool(_.get(opts, 'skipSmsToLandlines')),\n    'DtmfInputRequired': serialize.bool(_.get(opts, 'dtmfInputRequired')),\n    'TtsName': _.get(opts, 'ttsName'),\n    'Psd2Enabled': serialize.bool(_.get(opts, 'psd2Enabled')),\n    'DoNotShareWarningEnabled': serialize.bool(_.get(opts, 'doNotShareWarningEnabled')),\n    'CustomCodeEnabled': serialize.bool(_.get(opts, 'customCodeEnabled')),\n    'Push.IncludeDate': serialize.bool(_.get(opts, 'push.includeDate')),\n    'Push.ApnCredentialSid': _.get(opts, 'push.apnCredentialSid'),\n    'Push.FcmCredentialSid': _.get(opts, 'push.fcmCredentialSid'),\n    'Totp.Issuer': _.get(opts, 'totp.issuer'),\n    'Totp.TimeStep': _.get(opts, 'totp.timeStep'),\n    'Totp.CodeLength': _.get(opts, 'totp.codeLength'),\n    'Totp.Skew': _.get(opts, 'totp.skew')\n  });\n\n  var promise = this._version.update({\n    uri: this._uri,\n    method: 'POST',\n    data: data\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new ServiceInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\nObject.defineProperty(ServiceContext.prototype, 'verifications', {\n  get: function () {\n    if (!this._verifications) {\n      this._verifications = new VerificationList(this._version, this._solution.sid);\n    }\n\n    return this._verifications;\n  }\n});\nObject.defineProperty(ServiceContext.prototype, 'verificationChecks', {\n  get: function () {\n    if (!this._verificationChecks) {\n      this._verificationChecks = new VerificationCheckList(this._version, this._solution.sid);\n    }\n\n    return this._verificationChecks;\n  }\n});\nObject.defineProperty(ServiceContext.prototype, 'rateLimits', {\n  get: function () {\n    if (!this._rateLimits) {\n      this._rateLimits = new RateLimitList(this._version, this._solution.sid);\n    }\n\n    return this._rateLimits;\n  }\n});\nObject.defineProperty(ServiceContext.prototype, 'messagingConfigurations', {\n  get: function () {\n    if (!this._messagingConfigurations) {\n      this._messagingConfigurations = new MessagingConfigurationList(this._version, this._solution.sid);\n    }\n\n    return this._messagingConfigurations;\n  }\n});\nObject.defineProperty(ServiceContext.prototype, 'entities', {\n  get: function () {\n    if (!this._entities) {\n      this._entities = new EntityList(this._version, this._solution.sid);\n    }\n\n    return this._entities;\n  }\n});\nObject.defineProperty(ServiceContext.prototype, 'webhooks', {\n  get: function () {\n    if (!this._webhooks) {\n      this._webhooks = new WebhookList(this._version, this._solution.sid);\n    }\n\n    return this._webhooks;\n  }\n});\nObject.defineProperty(ServiceContext.prototype, 'accessTokens', {\n  get: function () {\n    if (!this._accessTokens) {\n      this._accessTokens = new AccessTokenList(this._version, this._solution.sid);\n    }\n\n    return this._accessTokens;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Verify.V2.ServiceContext#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\nServiceContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nServiceContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  ServiceList: ServiceList,\n  ServicePage: ServicePage,\n  ServiceInstance: ServiceInstance,\n  ServiceContext: ServiceContext\n};","map":{"version":3,"sources":["/Users/tony_niu/Visual Studio/Twilio/twilio-video-starter-kit/node_modules/twilio/lib/rest/verify/v2/service.js"],"names":["Q","require","_","util","AccessTokenList","EntityList","MessagingConfigurationList","Page","RateLimitList","VerificationCheckList","VerificationList","WebhookList","deserialize","serialize","values","ServiceList","ServicePage","ServiceInstance","ServiceContext","version","ServiceListInstance","sid","get","_version","_solution","_uri","create","opts","callback","isUndefined","Error","friendlyName","deferred","defer","data","of","bool","promise","uri","method","then","payload","resolve","bind","catch","error","reject","isFunction","nodeify","each","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","fetchNextPage","fn","page","instances","instance","nextPage","merge","list","allResources","resource","push","length","pageToken","pageNumber","params","getPage","targetUrl","_domain","twilio","request","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","accountSid","account_sid","friendly_name","codeLength","integer","code_length","lookupEnabled","lookup_enabled","psd2Enabled","psd2_enabled","skipSmsToLandlines","skip_sms_to_landlines","dtmfInputRequired","dtmf_input_required","ttsName","tts_name","doNotShareWarningEnabled","do_not_share_warning_enabled","customCodeEnabled","custom_code_enabled","totp","dateCreated","iso8601DateTime","date_created","dateUpdated","date_updated","url","links","_context","undefined","Object","defineProperty","fetch","_proxy","remove","update","verifications","verificationChecks","rateLimits","messagingConfigurations","entities","webhooks","accessTokens","_verifications","_verificationChecks","_rateLimits","_messagingConfigurations","_entities","_webhooks","_accessTokens","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar AccessTokenList = require('./service/accessToken').AccessTokenList;\nvar EntityList = require('./service/entity').EntityList;\nvar MessagingConfigurationList = require(\n    './service/messagingConfiguration').MessagingConfigurationList;\nvar Page = require('../../../base/Page');  /* jshint ignore:line */\nvar RateLimitList = require('./service/rateLimit').RateLimitList;\nvar VerificationCheckList = require(\n    './service/verificationCheck').VerificationCheckList;\nvar VerificationList = require('./service/verification').VerificationList;\nvar WebhookList = require('./service/webhook').WebhookList;\nvar deserialize = require(\n    '../../../base/deserialize');  /* jshint ignore:line */\nvar serialize = require('../../../base/serialize');  /* jshint ignore:line */\nvar values = require('../../../base/values');  /* jshint ignore:line */\n\nvar ServiceList;\nvar ServicePage;\nvar ServiceInstance;\nvar ServiceContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the ServiceList\n *\n * @constructor Twilio.Verify.V2.ServiceList\n *\n * @param {Twilio.Verify.V2} version - Version of the resource\n */\n/* jshint ignore:end */\nServiceList = function ServiceList(version) {\n  /* jshint ignore:start */\n  /**\n   * @function services\n   * @memberof Twilio.Verify.V2#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Verify.V2.ServiceContext}\n   */\n  /* jshint ignore:end */\n  function ServiceListInstance(sid) {\n    return ServiceListInstance.get(sid);\n  }\n\n  ServiceListInstance._version = version;\n  // Path Solution\n  ServiceListInstance._solution = {};\n  ServiceListInstance._uri = `/Services`;\n  /* jshint ignore:start */\n  /**\n   * create a ServiceInstance\n   *\n   * @function create\n   * @memberof Twilio.Verify.V2.ServiceList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.friendlyName -\n   *          A string to describe the verification service\n   * @param {number} [opts.codeLength] -\n   *          The length of the verification code to generate\n   * @param {boolean} [opts.lookupEnabled] -\n   *          Whether to perform a lookup with each verification\n   * @param {boolean} [opts.skipSmsToLandlines] -\n   *          Whether to skip sending SMS verifications to landlines\n   * @param {boolean} [opts.dtmfInputRequired] -\n   *          Whether to ask the user to press a number before delivering the verify code in a phone call\n   * @param {string} [opts.ttsName] -\n   *          The name of an alternative text-to-speech service to use in phone calls\n   * @param {boolean} [opts.psd2Enabled] -\n   *          Whether to pass PSD2 transaction parameters when starting a verification\n   * @param {boolean} [opts.doNotShareWarningEnabled] -\n   *          Whether to add a security warning at the end of an SMS.\n   * @param {boolean} [opts.customCodeEnabled] -\n   *          Whether to allow sending verifications with a custom code.\n   * @param {boolean} [opts.push.includeDate] -\n   *          Optional. Include the date in the Challenge's reponse. Default: true\n   * @param {string} [opts.push.apnCredentialSid] -\n   *          Optional. Set APN Credential for this service.\n   * @param {string} [opts.push.fcmCredentialSid] -\n   *          Optional. Set FCM Credential for this service.\n   * @param {string} [opts.totp.issuer] - Optional. Set TOTP Issuer for this service.\n   * @param {number} [opts.totp.timeStep] -\n   *          Optional. How often, in seconds, are TOTP codes generated\n   * @param {number} [opts.totp.codeLength] -\n   *          Optional. Number of digits for generated TOTP codes\n   * @param {number} [opts.totp.skew] -\n   *          Optional. The number of past and future time-steps valid at a given time\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed ServiceInstance\n   */\n  /* jshint ignore:end */\n  ServiceListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n    if (_.isUndefined(opts.friendlyName)) {\n      throw new Error('Required parameter \"opts.friendlyName\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'FriendlyName': _.get(opts, 'friendlyName'),\n      'CodeLength': _.get(opts, 'codeLength'),\n      'LookupEnabled': serialize.bool(_.get(opts, 'lookupEnabled')),\n      'SkipSmsToLandlines': serialize.bool(_.get(opts, 'skipSmsToLandlines')),\n      'DtmfInputRequired': serialize.bool(_.get(opts, 'dtmfInputRequired')),\n      'TtsName': _.get(opts, 'ttsName'),\n      'Psd2Enabled': serialize.bool(_.get(opts, 'psd2Enabled')),\n      'DoNotShareWarningEnabled': serialize.bool(_.get(opts, 'doNotShareWarningEnabled')),\n      'CustomCodeEnabled': serialize.bool(_.get(opts, 'customCodeEnabled')),\n      'Push.IncludeDate': serialize.bool(_.get(opts, 'push.includeDate')),\n      'Push.ApnCredentialSid': _.get(opts, 'push.apnCredentialSid'),\n      'Push.FcmCredentialSid': _.get(opts, 'push.fcmCredentialSid'),\n      'Totp.Issuer': _.get(opts, 'totp.issuer'),\n      'Totp.TimeStep': _.get(opts, 'totp.timeStep'),\n      'Totp.CodeLength': _.get(opts, 'totp.codeLength'),\n      'Totp.Skew': _.get(opts, 'totp.skew')\n    });\n\n    var promise = this._version.create({uri: this._uri, method: 'POST', data: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new ServiceInstance(this._version, payload, this._solution.sid));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Streams ServiceInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Verify.V2.ServiceList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  ServiceListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists ServiceInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Verify.V2.ServiceList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  ServiceListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of ServiceInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Verify.V2.ServiceList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  ServiceListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new ServicePage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of ServiceInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Verify.V2.ServiceList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  ServiceListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new ServicePage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a service\n   *\n   * @function get\n   * @memberof Twilio.Verify.V2.ServiceList#\n   *\n   * @param {string} sid - The unique string that identifies the resource\n   *\n   * @returns {Twilio.Verify.V2.ServiceContext}\n   */\n  /* jshint ignore:end */\n  ServiceListInstance.get = function get(sid) {\n    return new ServiceContext(this._version, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Verify.V2.ServiceList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  ServiceListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  ServiceListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return ServiceListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the ServicePage\n *\n * @constructor Twilio.Verify.V2.ServicePage\n *\n * @param {V2} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {ServiceSolution} solution - Path solution\n *\n * @returns ServicePage\n */\n/* jshint ignore:end */\nServicePage = function ServicePage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(ServicePage.prototype, Page.prototype);\nServicePage.prototype.constructor = ServicePage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of ServiceInstance\n *\n * @function getInstance\n * @memberof Twilio.Verify.V2.ServicePage#\n *\n * @param {ServicePayload} payload - Payload response from the API\n *\n * @returns ServiceInstance\n */\n/* jshint ignore:end */\nServicePage.prototype.getInstance = function getInstance(payload) {\n  return new ServiceInstance(this._version, payload);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Verify.V2.ServicePage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nServicePage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nServicePage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the ServiceContext\n *\n * @constructor Twilio.Verify.V2.ServiceInstance\n *\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {string} friendlyName -\n *          The string that you assigned to describe the verification service\n * @property {number} codeLength - The length of the verification code\n * @property {boolean} lookupEnabled -\n *          Whether to perform a lookup with each verification\n * @property {boolean} psd2Enabled -\n *          Whether to pass PSD2 transaction parameters when starting a verification\n * @property {boolean} skipSmsToLandlines -\n *          Whether to skip sending SMS verifications to landlines\n * @property {boolean} dtmfInputRequired -\n *          Whether to ask the user to press a number before delivering the verify code in a phone call\n * @property {string} ttsName -\n *          The name of an alternative text-to-speech service to use in phone calls\n * @property {boolean} doNotShareWarningEnabled -\n *          Whether to add a security warning at the end of an SMS.\n * @property {boolean} customCodeEnabled -\n *          Whether to allow sending verifications with a custom code.\n * @property {object} push - The service level configuration of factor push type.\n * @property {object} totp - The service level configuration of factor TOTP type.\n * @property {Date} dateCreated -\n *          The RFC 2822 date and time in GMT when the resource was created\n * @property {Date} dateUpdated -\n *          The RFC 2822 date and time in GMT when the resource was last updated\n * @property {string} url - The absolute URL of the resource\n * @property {string} links - The URLs of related resources\n *\n * @param {V2} version - Version of the resource\n * @param {ServicePayload} payload - The instance payload\n * @param {sid} sid - The unique string that identifies the resource\n */\n/* jshint ignore:end */\nServiceInstance = function ServiceInstance(version, payload, sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.sid = payload.sid; // jshint ignore:line\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.friendlyName = payload.friendly_name; // jshint ignore:line\n  this.codeLength = deserialize.integer(payload.code_length); // jshint ignore:line\n  this.lookupEnabled = payload.lookup_enabled; // jshint ignore:line\n  this.psd2Enabled = payload.psd2_enabled; // jshint ignore:line\n  this.skipSmsToLandlines = payload.skip_sms_to_landlines; // jshint ignore:line\n  this.dtmfInputRequired = payload.dtmf_input_required; // jshint ignore:line\n  this.ttsName = payload.tts_name; // jshint ignore:line\n  this.doNotShareWarningEnabled = payload.do_not_share_warning_enabled; // jshint ignore:line\n  this.customCodeEnabled = payload.custom_code_enabled; // jshint ignore:line\n  this.push = payload.push; // jshint ignore:line\n  this.totp = payload.totp; // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n  this.links = payload.links; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {sid: sid || this.sid, };\n};\n\nObject.defineProperty(ServiceInstance.prototype,\n  '_proxy', {\n    get: function() {\n      if (!this._context) {\n        this._context = new ServiceContext(this._version, this._solution.sid);\n      }\n\n      return this._context;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a ServiceInstance\n *\n * @function fetch\n * @memberof Twilio.Verify.V2.ServiceInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ServiceInstance\n */\n/* jshint ignore:end */\nServiceInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * remove a ServiceInstance\n *\n * @function remove\n * @memberof Twilio.Verify.V2.ServiceInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ServiceInstance\n */\n/* jshint ignore:end */\nServiceInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n\n/* jshint ignore:start */\n/**\n * update a ServiceInstance\n *\n * @function update\n * @memberof Twilio.Verify.V2.ServiceInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] -\n *          A string to describe the verification service\n * @param {number} [opts.codeLength] -\n *          The length of the verification code to generate\n * @param {boolean} [opts.lookupEnabled] -\n *          Whether to perform a lookup with each verification\n * @param {boolean} [opts.skipSmsToLandlines] -\n *          Whether to skip sending SMS verifications to landlines\n * @param {boolean} [opts.dtmfInputRequired] -\n *          Whether to ask the user to press a number before delivering the verify code in a phone call\n * @param {string} [opts.ttsName] -\n *          The name of an alternative text-to-speech service to use in phone calls\n * @param {boolean} [opts.psd2Enabled] -\n *          Whether to pass PSD2 transaction parameters when starting a verification\n * @param {boolean} [opts.doNotShareWarningEnabled] -\n *          Whether to add a privacy warning at the end of an SMS.\n * @param {boolean} [opts.customCodeEnabled] -\n *          Whether to allow sending verifications with a custom code.\n * @param {boolean} [opts.push.includeDate] -\n *          Optional. Include the date in the Challenge's reponse. Default: true\n * @param {string} [opts.push.apnCredentialSid] -\n *          Optional. Set APN Credential for this service.\n * @param {string} [opts.push.fcmCredentialSid] -\n *          Optional. Set FCM Credential for this service.\n * @param {string} [opts.totp.issuer] - Optional. Set TOTP Issuer for this service.\n * @param {number} [opts.totp.timeStep] -\n *          Optional. How often, in seconds, are TOTP codes generated\n * @param {number} [opts.totp.codeLength] -\n *          Optional. Number of digits for generated TOTP codes\n * @param {number} [opts.totp.skew] -\n *          Optional. The number of past and future time-steps valid at a given time\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ServiceInstance\n */\n/* jshint ignore:end */\nServiceInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * Access the verifications\n *\n * @function verifications\n * @memberof Twilio.Verify.V2.ServiceInstance#\n *\n * @returns {Twilio.Verify.V2.ServiceContext.VerificationList}\n */\n/* jshint ignore:end */\nServiceInstance.prototype.verifications = function verifications() {\n  return this._proxy.verifications;\n};\n\n/* jshint ignore:start */\n/**\n * Access the verificationChecks\n *\n * @function verificationChecks\n * @memberof Twilio.Verify.V2.ServiceInstance#\n *\n * @returns {Twilio.Verify.V2.ServiceContext.VerificationCheckList}\n */\n/* jshint ignore:end */\nServiceInstance.prototype.verificationChecks = function verificationChecks() {\n  return this._proxy.verificationChecks;\n};\n\n/* jshint ignore:start */\n/**\n * Access the rateLimits\n *\n * @function rateLimits\n * @memberof Twilio.Verify.V2.ServiceInstance#\n *\n * @returns {Twilio.Verify.V2.ServiceContext.RateLimitList}\n */\n/* jshint ignore:end */\nServiceInstance.prototype.rateLimits = function rateLimits() {\n  return this._proxy.rateLimits;\n};\n\n/* jshint ignore:start */\n/**\n * Access the messagingConfigurations\n *\n * @function messagingConfigurations\n * @memberof Twilio.Verify.V2.ServiceInstance#\n *\n * @returns {Twilio.Verify.V2.ServiceContext.MessagingConfigurationList}\n */\n/* jshint ignore:end */\nServiceInstance.prototype.messagingConfigurations = function\n    messagingConfigurations() {\n  return this._proxy.messagingConfigurations;\n};\n\n/* jshint ignore:start */\n/**\n * Access the entities\n *\n * @function entities\n * @memberof Twilio.Verify.V2.ServiceInstance#\n *\n * @returns {Twilio.Verify.V2.ServiceContext.EntityList}\n */\n/* jshint ignore:end */\nServiceInstance.prototype.entities = function entities() {\n  return this._proxy.entities;\n};\n\n/* jshint ignore:start */\n/**\n * Access the webhooks\n *\n * @function webhooks\n * @memberof Twilio.Verify.V2.ServiceInstance#\n *\n * @returns {Twilio.Verify.V2.ServiceContext.WebhookList}\n */\n/* jshint ignore:end */\nServiceInstance.prototype.webhooks = function webhooks() {\n  return this._proxy.webhooks;\n};\n\n/* jshint ignore:start */\n/**\n * Access the accessTokens\n *\n * @function accessTokens\n * @memberof Twilio.Verify.V2.ServiceInstance#\n *\n * @returns {Twilio.Verify.V2.ServiceContext.AccessTokenList}\n */\n/* jshint ignore:end */\nServiceInstance.prototype.accessTokens = function accessTokens() {\n  return this._proxy.accessTokens;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Verify.V2.ServiceInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nServiceInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nServiceInstance.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the ServiceContext\n *\n * @constructor Twilio.Verify.V2.ServiceContext\n *\n * @property {Twilio.Verify.V2.ServiceContext.VerificationList} verifications -\n *          verifications resource\n * @property {Twilio.Verify.V2.ServiceContext.VerificationCheckList} verificationChecks -\n *          verificationChecks resource\n * @property {Twilio.Verify.V2.ServiceContext.RateLimitList} rateLimits -\n *          rateLimits resource\n * @property {Twilio.Verify.V2.ServiceContext.MessagingConfigurationList} messagingConfigurations -\n *          messagingConfigurations resource\n * @property {Twilio.Verify.V2.ServiceContext.EntityList} entities -\n *          entities resource\n * @property {Twilio.Verify.V2.ServiceContext.WebhookList} webhooks -\n *          webhooks resource\n * @property {Twilio.Verify.V2.ServiceContext.AccessTokenList} accessTokens -\n *          accessTokens resource\n *\n * @param {V2} version - Version of the resource\n * @param {sid} sid - The unique string that identifies the resource\n */\n/* jshint ignore:end */\nServiceContext = function ServiceContext(version, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {sid: sid, };\n  this._uri = `/Services/${sid}`;\n\n  // Dependents\n  this._verifications = undefined;\n  this._verificationChecks = undefined;\n  this._rateLimits = undefined;\n  this._messagingConfigurations = undefined;\n  this._entities = undefined;\n  this._webhooks = undefined;\n  this._accessTokens = undefined;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a ServiceInstance\n *\n * @function fetch\n * @memberof Twilio.Verify.V2.ServiceContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ServiceInstance\n */\n/* jshint ignore:end */\nServiceContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({uri: this._uri, method: 'GET'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new ServiceInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * remove a ServiceInstance\n *\n * @function remove\n * @memberof Twilio.Verify.V2.ServiceContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ServiceInstance\n */\n/* jshint ignore:end */\nServiceContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.remove({uri: this._uri, method: 'DELETE'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * update a ServiceInstance\n *\n * @function update\n * @memberof Twilio.Verify.V2.ServiceContext#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] -\n *          A string to describe the verification service\n * @param {number} [opts.codeLength] -\n *          The length of the verification code to generate\n * @param {boolean} [opts.lookupEnabled] -\n *          Whether to perform a lookup with each verification\n * @param {boolean} [opts.skipSmsToLandlines] -\n *          Whether to skip sending SMS verifications to landlines\n * @param {boolean} [opts.dtmfInputRequired] -\n *          Whether to ask the user to press a number before delivering the verify code in a phone call\n * @param {string} [opts.ttsName] -\n *          The name of an alternative text-to-speech service to use in phone calls\n * @param {boolean} [opts.psd2Enabled] -\n *          Whether to pass PSD2 transaction parameters when starting a verification\n * @param {boolean} [opts.doNotShareWarningEnabled] -\n *          Whether to add a privacy warning at the end of an SMS.\n * @param {boolean} [opts.customCodeEnabled] -\n *          Whether to allow sending verifications with a custom code.\n * @param {boolean} [opts.push.includeDate] -\n *          Optional. Include the date in the Challenge's reponse. Default: true\n * @param {string} [opts.push.apnCredentialSid] -\n *          Optional. Set APN Credential for this service.\n * @param {string} [opts.push.fcmCredentialSid] -\n *          Optional. Set FCM Credential for this service.\n * @param {string} [opts.totp.issuer] - Optional. Set TOTP Issuer for this service.\n * @param {number} [opts.totp.timeStep] -\n *          Optional. How often, in seconds, are TOTP codes generated\n * @param {number} [opts.totp.codeLength] -\n *          Optional. Number of digits for generated TOTP codes\n * @param {number} [opts.totp.skew] -\n *          Optional. The number of past and future time-steps valid at a given time\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ServiceInstance\n */\n/* jshint ignore:end */\nServiceContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n  opts = opts || {};\n\n  var deferred = Q.defer();\n  var data = values.of({\n    'FriendlyName': _.get(opts, 'friendlyName'),\n    'CodeLength': _.get(opts, 'codeLength'),\n    'LookupEnabled': serialize.bool(_.get(opts, 'lookupEnabled')),\n    'SkipSmsToLandlines': serialize.bool(_.get(opts, 'skipSmsToLandlines')),\n    'DtmfInputRequired': serialize.bool(_.get(opts, 'dtmfInputRequired')),\n    'TtsName': _.get(opts, 'ttsName'),\n    'Psd2Enabled': serialize.bool(_.get(opts, 'psd2Enabled')),\n    'DoNotShareWarningEnabled': serialize.bool(_.get(opts, 'doNotShareWarningEnabled')),\n    'CustomCodeEnabled': serialize.bool(_.get(opts, 'customCodeEnabled')),\n    'Push.IncludeDate': serialize.bool(_.get(opts, 'push.includeDate')),\n    'Push.ApnCredentialSid': _.get(opts, 'push.apnCredentialSid'),\n    'Push.FcmCredentialSid': _.get(opts, 'push.fcmCredentialSid'),\n    'Totp.Issuer': _.get(opts, 'totp.issuer'),\n    'Totp.TimeStep': _.get(opts, 'totp.timeStep'),\n    'Totp.CodeLength': _.get(opts, 'totp.codeLength'),\n    'Totp.Skew': _.get(opts, 'totp.skew')\n  });\n\n  var promise = this._version.update({uri: this._uri, method: 'POST', data: data});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new ServiceInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\nObject.defineProperty(ServiceContext.prototype,\n  'verifications', {\n    get: function() {\n      if (!this._verifications) {\n        this._verifications = new VerificationList(this._version, this._solution.sid);\n      }\n      return this._verifications;\n    }\n});\n\nObject.defineProperty(ServiceContext.prototype,\n  'verificationChecks', {\n    get: function() {\n      if (!this._verificationChecks) {\n        this._verificationChecks = new VerificationCheckList(this._version, this._solution.sid);\n      }\n      return this._verificationChecks;\n    }\n});\n\nObject.defineProperty(ServiceContext.prototype,\n  'rateLimits', {\n    get: function() {\n      if (!this._rateLimits) {\n        this._rateLimits = new RateLimitList(this._version, this._solution.sid);\n      }\n      return this._rateLimits;\n    }\n});\n\nObject.defineProperty(ServiceContext.prototype,\n  'messagingConfigurations', {\n    get: function() {\n      if (!this._messagingConfigurations) {\n        this._messagingConfigurations = new MessagingConfigurationList(this._version, this._solution.sid);\n      }\n      return this._messagingConfigurations;\n    }\n});\n\nObject.defineProperty(ServiceContext.prototype,\n  'entities', {\n    get: function() {\n      if (!this._entities) {\n        this._entities = new EntityList(this._version, this._solution.sid);\n      }\n      return this._entities;\n    }\n});\n\nObject.defineProperty(ServiceContext.prototype,\n  'webhooks', {\n    get: function() {\n      if (!this._webhooks) {\n        this._webhooks = new WebhookList(this._version, this._solution.sid);\n      }\n      return this._webhooks;\n    }\n});\n\nObject.defineProperty(ServiceContext.prototype,\n  'accessTokens', {\n    get: function() {\n      if (!this._accessTokens) {\n        this._accessTokens = new AccessTokenList(this._version, this._solution.sid);\n      }\n      return this._accessTokens;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Verify.V2.ServiceContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nServiceContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nServiceContext.prototype[util.inspect.custom] = function inspect(depth, options)\n    {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  ServiceList: ServiceList,\n  ServicePage: ServicePage,\n  ServiceInstance: ServiceInstance,\n  ServiceContext: ServiceContext\n};\n"]},"metadata":{},"sourceType":"script"}