{"ast":null,"code":"'use strict';\n/* jshint ignore:start */\n\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n\n/* jshint ignore:end */\n\nvar Q = require('q');\n/* jshint ignore:line */\n\n\nvar _ = require('lodash');\n/* jshint ignore:line */\n\n\nvar util = require('util');\n/* jshint ignore:line */\n\n\nvar DefaultsList = require('./assistant/defaults').DefaultsList;\n\nvar DialogueList = require('./assistant/dialogue').DialogueList;\n\nvar FieldTypeList = require('./assistant/fieldType').FieldTypeList;\n\nvar ModelBuildList = require('./assistant/modelBuild').ModelBuildList;\n\nvar Page = require('../../../base/Page');\n/* jshint ignore:line */\n\n\nvar QueryList = require('./assistant/query').QueryList;\n\nvar StyleSheetList = require('./assistant/styleSheet').StyleSheetList;\n\nvar TaskList = require('./assistant/task').TaskList;\n\nvar WebhookList = require('./assistant/webhook').WebhookList;\n\nvar deserialize = require('../../../base/deserialize');\n/* jshint ignore:line */\n\n\nvar serialize = require('../../../base/serialize');\n/* jshint ignore:line */\n\n\nvar values = require('../../../base/values');\n/* jshint ignore:line */\n\n\nvar AssistantList;\nvar AssistantPage;\nvar AssistantInstance;\nvar AssistantContext;\n/* jshint ignore:start */\n\n/**\n * Initialize the AssistantList\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Autopilot.V1.AssistantList\n *\n * @param {Twilio.Autopilot.V1} version - Version of the resource\n */\n\n/* jshint ignore:end */\n\nAssistantList = function AssistantList(version) {\n  /* jshint ignore:start */\n\n  /**\n   * @function assistants\n   * @memberof Twilio.Autopilot.V1#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Autopilot.V1.AssistantContext}\n   */\n\n  /* jshint ignore:end */\n  function AssistantListInstance(sid) {\n    return AssistantListInstance.get(sid);\n  }\n\n  AssistantListInstance._version = version; // Path Solution\n\n  AssistantListInstance._solution = {};\n  AssistantListInstance._uri = `/Assistants`;\n  /* jshint ignore:start */\n\n  /**\n   * Streams AssistantInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Autopilot.V1.AssistantList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n\n  /* jshint ignore:end */\n\n  AssistantListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Lists AssistantInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Autopilot.V1.AssistantList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  AssistantListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single page of AssistantInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Autopilot.V1.AssistantList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  AssistantListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new AssistantPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single target page of AssistantInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Autopilot.V1.AssistantList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  AssistantListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new AssistantPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * create a AssistantInstance\n   *\n   * @function create\n   * @memberof Twilio.Autopilot.V1.AssistantList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.friendlyName] - A string to describe the new resource\n   * @param {boolean} [opts.logQueries] -\n   *          Whether queries should be logged and kept after training\n   * @param {string} [opts.uniqueName] -\n   *          An application-defined string that uniquely identifies the new resource\n   * @param {string} [opts.callbackUrl] - Reserved\n   * @param {string} [opts.callbackEvents] - Reserved\n   * @param {object} [opts.styleSheet] -\n   *          A JSON string that defines the Assistant's style sheet\n   * @param {object} [opts.defaults] -\n   *          A JSON object that defines the Assistant's default tasks for various scenarios\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed AssistantInstance\n   */\n\n  /* jshint ignore:end */\n\n\n  AssistantListInstance.create = function create(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'FriendlyName': _.get(opts, 'friendlyName'),\n      'LogQueries': serialize.bool(_.get(opts, 'logQueries')),\n      'UniqueName': _.get(opts, 'uniqueName'),\n      'CallbackUrl': _.get(opts, 'callbackUrl'),\n      'CallbackEvents': _.get(opts, 'callbackEvents'),\n      'StyleSheet': serialize.object(_.get(opts, 'styleSheet')),\n      'Defaults': serialize.object(_.get(opts, 'defaults'))\n    });\n\n    var promise = this._version.create({\n      uri: this._uri,\n      method: 'POST',\n      data: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new AssistantInstance(this._version, payload, this._solution.sid));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Constructs a assistant\n   *\n   * @function get\n   * @memberof Twilio.Autopilot.V1.AssistantList#\n   *\n   * @param {string} sid - The unique string that identifies the resource\n   *\n   * @returns {Twilio.Autopilot.V1.AssistantContext}\n   */\n\n  /* jshint ignore:end */\n\n\n  AssistantListInstance.get = function get(sid) {\n    return new AssistantContext(this._version, sid);\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Autopilot.V1.AssistantList#\n   *\n   * @returns Object\n   */\n\n  /* jshint ignore:end */\n\n\n  AssistantListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  AssistantListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return AssistantListInstance;\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the AssistantPage\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Autopilot.V1.AssistantPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {AssistantSolution} solution - Path solution\n *\n * @returns AssistantPage\n */\n\n/* jshint ignore:end */\n\n\nAssistantPage = function AssistantPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(AssistantPage.prototype, Page.prototype);\n\nAssistantPage.prototype.constructor = AssistantPage;\n/* jshint ignore:start */\n\n/**\n * Build an instance of AssistantInstance\n *\n * @function getInstance\n * @memberof Twilio.Autopilot.V1.AssistantPage#\n *\n * @param {AssistantPayload} payload - Payload response from the API\n *\n * @returns AssistantInstance\n */\n\n/* jshint ignore:end */\n\nAssistantPage.prototype.getInstance = function getInstance(payload) {\n  return new AssistantInstance(this._version, payload);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Autopilot.V1.AssistantPage#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nAssistantPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nAssistantPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the AssistantContext\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Autopilot.V1.AssistantInstance\n *\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {Date} dateCreated -\n *          The RFC 2822 date and time in GMT when the resource was created\n * @property {Date} dateUpdated -\n *          The RFC 2822 date and time in GMT when the resource was last updated\n * @property {string} friendlyName -\n *          The string that you assigned to describe the resource\n * @property {string} latestModelBuildSid - Reserved\n * @property {string} links -\n *          A list of the URLs of the Assistant's related resources\n * @property {boolean} logQueries -\n *          Whether queries should be logged and kept after training\n * @property {string} developmentStage -\n *          A string describing the state of the assistant.\n * @property {boolean} needsModelBuild - Whether model needs to be rebuilt\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} uniqueName -\n *          An application-defined string that uniquely identifies the resource\n * @property {string} url - The absolute URL of the Assistant resource\n * @property {string} callbackUrl - Reserved\n * @property {string} callbackEvents - Reserved\n *\n * @param {V1} version - Version of the resource\n * @param {AssistantPayload} payload - The instance payload\n * @param {sid_like} sid - The unique string that identifies the resource\n */\n\n/* jshint ignore:end */\n\n\nAssistantInstance = function AssistantInstance(version, payload, sid) {\n  this._version = version; // Marshaled Properties\n\n  this.accountSid = payload.account_sid; // jshint ignore:line\n\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n\n  this.friendlyName = payload.friendly_name; // jshint ignore:line\n\n  this.latestModelBuildSid = payload.latest_model_build_sid; // jshint ignore:line\n\n  this.links = payload.links; // jshint ignore:line\n\n  this.logQueries = payload.log_queries; // jshint ignore:line\n\n  this.developmentStage = payload.development_stage; // jshint ignore:line\n\n  this.needsModelBuild = payload.needs_model_build; // jshint ignore:line\n\n  this.sid = payload.sid; // jshint ignore:line\n\n  this.uniqueName = payload.unique_name; // jshint ignore:line\n\n  this.url = payload.url; // jshint ignore:line\n\n  this.callbackUrl = payload.callback_url; // jshint ignore:line\n\n  this.callbackEvents = payload.callback_events; // jshint ignore:line\n  // Context\n\n  this._context = undefined;\n  this._solution = {\n    sid: sid || this.sid\n  };\n};\n\nObject.defineProperty(AssistantInstance.prototype, '_proxy', {\n  get: function () {\n    if (!this._context) {\n      this._context = new AssistantContext(this._version, this._solution.sid);\n    }\n\n    return this._context;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * fetch a AssistantInstance\n *\n * @function fetch\n * @memberof Twilio.Autopilot.V1.AssistantInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed AssistantInstance\n */\n\n/* jshint ignore:end */\n\nAssistantInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n/* jshint ignore:start */\n\n/**\n * update a AssistantInstance\n *\n * @function update\n * @memberof Twilio.Autopilot.V1.AssistantInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] - A string to describe the resource\n * @param {boolean} [opts.logQueries] -\n *          Whether queries should be logged and kept after training\n * @param {string} [opts.uniqueName] -\n *          An application-defined string that uniquely identifies the resource\n * @param {string} [opts.callbackUrl] - Reserved\n * @param {string} [opts.callbackEvents] - Reserved\n * @param {object} [opts.styleSheet] -\n *          A JSON string that defines the Assistant's style sheet\n * @param {object} [opts.defaults] -\n *          A JSON object that defines the Assistant's {@link https://www.twilio.com/docs/autopilot/api/assistant/defaults|default tasks} for various scenarios\n * @param {string} [opts.developmentStage] -\n *          A string describing the state of the assistant.\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed AssistantInstance\n */\n\n/* jshint ignore:end */\n\n\nAssistantInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n/* jshint ignore:start */\n\n/**\n * remove a AssistantInstance\n *\n * @function remove\n * @memberof Twilio.Autopilot.V1.AssistantInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed AssistantInstance\n */\n\n/* jshint ignore:end */\n\n\nAssistantInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n/* jshint ignore:start */\n\n/**\n * Access the fieldTypes\n *\n * @function fieldTypes\n * @memberof Twilio.Autopilot.V1.AssistantInstance#\n *\n * @returns {Twilio.Autopilot.V1.AssistantContext.FieldTypeList}\n */\n\n/* jshint ignore:end */\n\n\nAssistantInstance.prototype.fieldTypes = function fieldTypes() {\n  return this._proxy.fieldTypes;\n};\n/* jshint ignore:start */\n\n/**\n * Access the tasks\n *\n * @function tasks\n * @memberof Twilio.Autopilot.V1.AssistantInstance#\n *\n * @returns {Twilio.Autopilot.V1.AssistantContext.TaskList}\n */\n\n/* jshint ignore:end */\n\n\nAssistantInstance.prototype.tasks = function tasks() {\n  return this._proxy.tasks;\n};\n/* jshint ignore:start */\n\n/**\n * Access the modelBuilds\n *\n * @function modelBuilds\n * @memberof Twilio.Autopilot.V1.AssistantInstance#\n *\n * @returns {Twilio.Autopilot.V1.AssistantContext.ModelBuildList}\n */\n\n/* jshint ignore:end */\n\n\nAssistantInstance.prototype.modelBuilds = function modelBuilds() {\n  return this._proxy.modelBuilds;\n};\n/* jshint ignore:start */\n\n/**\n * Access the queries\n *\n * @function queries\n * @memberof Twilio.Autopilot.V1.AssistantInstance#\n *\n * @returns {Twilio.Autopilot.V1.AssistantContext.QueryList}\n */\n\n/* jshint ignore:end */\n\n\nAssistantInstance.prototype.queries = function queries() {\n  return this._proxy.queries;\n};\n/* jshint ignore:start */\n\n/**\n * Access the styleSheet\n *\n * @function styleSheet\n * @memberof Twilio.Autopilot.V1.AssistantInstance#\n *\n * @returns {Twilio.Autopilot.V1.AssistantContext.StyleSheetList}\n */\n\n/* jshint ignore:end */\n\n\nAssistantInstance.prototype.styleSheet = function styleSheet() {\n  return this._proxy.styleSheet;\n};\n/* jshint ignore:start */\n\n/**\n * Access the defaults\n *\n * @function defaults\n * @memberof Twilio.Autopilot.V1.AssistantInstance#\n *\n * @returns {Twilio.Autopilot.V1.AssistantContext.DefaultsList}\n */\n\n/* jshint ignore:end */\n\n\nAssistantInstance.prototype.defaults = function defaults() {\n  return this._proxy.defaults;\n};\n/* jshint ignore:start */\n\n/**\n * Access the dialogues\n *\n * @function dialogues\n * @memberof Twilio.Autopilot.V1.AssistantInstance#\n *\n * @returns {Twilio.Autopilot.V1.AssistantContext.DialogueList}\n */\n\n/* jshint ignore:end */\n\n\nAssistantInstance.prototype.dialogues = function dialogues() {\n  return this._proxy.dialogues;\n};\n/* jshint ignore:start */\n\n/**\n * Access the webhooks\n *\n * @function webhooks\n * @memberof Twilio.Autopilot.V1.AssistantInstance#\n *\n * @returns {Twilio.Autopilot.V1.AssistantContext.WebhookList}\n */\n\n/* jshint ignore:end */\n\n\nAssistantInstance.prototype.webhooks = function webhooks() {\n  return this._proxy.webhooks;\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Autopilot.V1.AssistantInstance#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nAssistantInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nAssistantInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the AssistantContext\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Autopilot.V1.AssistantContext\n *\n * @property {Twilio.Autopilot.V1.AssistantContext.FieldTypeList} fieldTypes -\n *          fieldTypes resource\n * @property {Twilio.Autopilot.V1.AssistantContext.TaskList} tasks - tasks resource\n * @property {Twilio.Autopilot.V1.AssistantContext.ModelBuildList} modelBuilds -\n *          modelBuilds resource\n * @property {Twilio.Autopilot.V1.AssistantContext.QueryList} queries -\n *          queries resource\n * @property {Twilio.Autopilot.V1.AssistantContext.StyleSheetList} styleSheet -\n *          styleSheet resource\n * @property {Twilio.Autopilot.V1.AssistantContext.DefaultsList} defaults -\n *          defaults resource\n * @property {Twilio.Autopilot.V1.AssistantContext.DialogueList} dialogues -\n *          dialogues resource\n * @property {Twilio.Autopilot.V1.AssistantContext.WebhookList} webhooks -\n *          webhooks resource\n *\n * @param {V1} version - Version of the resource\n * @param {sid_like} sid - The unique string that identifies the resource\n */\n\n/* jshint ignore:end */\n\n\nAssistantContext = function AssistantContext(version, sid) {\n  this._version = version; // Path Solution\n\n  this._solution = {\n    sid: sid\n  };\n  this._uri = `/Assistants/${sid}`; // Dependents\n\n  this._fieldTypes = undefined;\n  this._tasks = undefined;\n  this._modelBuilds = undefined;\n  this._queries = undefined;\n  this._styleSheet = undefined;\n  this._defaults = undefined;\n  this._dialogues = undefined;\n  this._webhooks = undefined;\n};\n/* jshint ignore:start */\n\n/**\n * fetch a AssistantInstance\n *\n * @function fetch\n * @memberof Twilio.Autopilot.V1.AssistantContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed AssistantInstance\n */\n\n/* jshint ignore:end */\n\n\nAssistantContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new AssistantInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * update a AssistantInstance\n *\n * @function update\n * @memberof Twilio.Autopilot.V1.AssistantContext#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] - A string to describe the resource\n * @param {boolean} [opts.logQueries] -\n *          Whether queries should be logged and kept after training\n * @param {string} [opts.uniqueName] -\n *          An application-defined string that uniquely identifies the resource\n * @param {string} [opts.callbackUrl] - Reserved\n * @param {string} [opts.callbackEvents] - Reserved\n * @param {object} [opts.styleSheet] -\n *          A JSON string that defines the Assistant's style sheet\n * @param {object} [opts.defaults] -\n *          A JSON object that defines the Assistant's {@link https://www.twilio.com/docs/autopilot/api/assistant/defaults|default tasks} for various scenarios\n * @param {string} [opts.developmentStage] -\n *          A string describing the state of the assistant.\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed AssistantInstance\n */\n\n/* jshint ignore:end */\n\n\nAssistantContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n\n  opts = opts || {};\n  var deferred = Q.defer();\n  var data = values.of({\n    'FriendlyName': _.get(opts, 'friendlyName'),\n    'LogQueries': serialize.bool(_.get(opts, 'logQueries')),\n    'UniqueName': _.get(opts, 'uniqueName'),\n    'CallbackUrl': _.get(opts, 'callbackUrl'),\n    'CallbackEvents': _.get(opts, 'callbackEvents'),\n    'StyleSheet': serialize.object(_.get(opts, 'styleSheet')),\n    'Defaults': serialize.object(_.get(opts, 'defaults')),\n    'DevelopmentStage': _.get(opts, 'developmentStage')\n  });\n\n  var promise = this._version.update({\n    uri: this._uri,\n    method: 'POST',\n    data: data\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new AssistantInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * remove a AssistantInstance\n *\n * @function remove\n * @memberof Twilio.Autopilot.V1.AssistantContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed AssistantInstance\n */\n\n/* jshint ignore:end */\n\n\nAssistantContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.remove({\n    uri: this._uri,\n    method: 'DELETE'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\nObject.defineProperty(AssistantContext.prototype, 'fieldTypes', {\n  get: function () {\n    if (!this._fieldTypes) {\n      this._fieldTypes = new FieldTypeList(this._version, this._solution.sid);\n    }\n\n    return this._fieldTypes;\n  }\n});\nObject.defineProperty(AssistantContext.prototype, 'tasks', {\n  get: function () {\n    if (!this._tasks) {\n      this._tasks = new TaskList(this._version, this._solution.sid);\n    }\n\n    return this._tasks;\n  }\n});\nObject.defineProperty(AssistantContext.prototype, 'modelBuilds', {\n  get: function () {\n    if (!this._modelBuilds) {\n      this._modelBuilds = new ModelBuildList(this._version, this._solution.sid);\n    }\n\n    return this._modelBuilds;\n  }\n});\nObject.defineProperty(AssistantContext.prototype, 'queries', {\n  get: function () {\n    if (!this._queries) {\n      this._queries = new QueryList(this._version, this._solution.sid);\n    }\n\n    return this._queries;\n  }\n});\nObject.defineProperty(AssistantContext.prototype, 'styleSheet', {\n  get: function () {\n    if (!this._styleSheet) {\n      this._styleSheet = new StyleSheetList(this._version, this._solution.sid);\n    }\n\n    return this._styleSheet;\n  }\n});\nObject.defineProperty(AssistantContext.prototype, 'defaults', {\n  get: function () {\n    if (!this._defaults) {\n      this._defaults = new DefaultsList(this._version, this._solution.sid);\n    }\n\n    return this._defaults;\n  }\n});\nObject.defineProperty(AssistantContext.prototype, 'dialogues', {\n  get: function () {\n    if (!this._dialogues) {\n      this._dialogues = new DialogueList(this._version, this._solution.sid);\n    }\n\n    return this._dialogues;\n  }\n});\nObject.defineProperty(AssistantContext.prototype, 'webhooks', {\n  get: function () {\n    if (!this._webhooks) {\n      this._webhooks = new WebhookList(this._version, this._solution.sid);\n    }\n\n    return this._webhooks;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Autopilot.V1.AssistantContext#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\nAssistantContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nAssistantContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  AssistantList: AssistantList,\n  AssistantPage: AssistantPage,\n  AssistantInstance: AssistantInstance,\n  AssistantContext: AssistantContext\n};","map":{"version":3,"sources":["/Users/tony_niu/Visual Studio/Twilio/twilio-video-starter-kit/src/token-service/node_modules/twilio/lib/rest/autopilot/v1/assistant.js"],"names":["Q","require","_","util","DefaultsList","DialogueList","FieldTypeList","ModelBuildList","Page","QueryList","StyleSheetList","TaskList","WebhookList","deserialize","serialize","values","AssistantList","AssistantPage","AssistantInstance","AssistantContext","version","AssistantListInstance","sid","get","_version","_solution","_uri","each","opts","callback","isFunction","isUndefined","Error","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","error","fetchNextPage","fn","promise","then","page","instances","instance","bind","nextPage","catch","merge","list","deferred","defer","allResources","resource","push","length","resolve","reject","nodeify","data","of","pageToken","pageNumber","uri","method","params","payload","getPage","targetUrl","_domain","twilio","request","create","bool","object","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","accountSid","account_sid","dateCreated","iso8601DateTime","date_created","dateUpdated","date_updated","friendlyName","friendly_name","latestModelBuildSid","latest_model_build_sid","links","logQueries","log_queries","developmentStage","development_stage","needsModelBuild","needs_model_build","uniqueName","unique_name","url","callbackUrl","callback_url","callbackEvents","callback_events","_context","undefined","Object","defineProperty","fetch","_proxy","update","remove","fieldTypes","tasks","modelBuilds","queries","styleSheet","defaults","dialogues","webhooks","_fieldTypes","_tasks","_modelBuilds","_queries","_styleSheet","_defaults","_dialogues","_webhooks","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar DefaultsList = require('./assistant/defaults').DefaultsList;\nvar DialogueList = require('./assistant/dialogue').DialogueList;\nvar FieldTypeList = require('./assistant/fieldType').FieldTypeList;\nvar ModelBuildList = require('./assistant/modelBuild').ModelBuildList;\nvar Page = require('../../../base/Page');  /* jshint ignore:line */\nvar QueryList = require('./assistant/query').QueryList;\nvar StyleSheetList = require('./assistant/styleSheet').StyleSheetList;\nvar TaskList = require('./assistant/task').TaskList;\nvar WebhookList = require('./assistant/webhook').WebhookList;\nvar deserialize = require(\n    '../../../base/deserialize');  /* jshint ignore:line */\nvar serialize = require('../../../base/serialize');  /* jshint ignore:line */\nvar values = require('../../../base/values');  /* jshint ignore:line */\n\nvar AssistantList;\nvar AssistantPage;\nvar AssistantInstance;\nvar AssistantContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the AssistantList\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Autopilot.V1.AssistantList\n *\n * @param {Twilio.Autopilot.V1} version - Version of the resource\n */\n/* jshint ignore:end */\nAssistantList = function AssistantList(version) {\n  /* jshint ignore:start */\n  /**\n   * @function assistants\n   * @memberof Twilio.Autopilot.V1#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Autopilot.V1.AssistantContext}\n   */\n  /* jshint ignore:end */\n  function AssistantListInstance(sid) {\n    return AssistantListInstance.get(sid);\n  }\n\n  AssistantListInstance._version = version;\n  // Path Solution\n  AssistantListInstance._solution = {};\n  AssistantListInstance._uri = `/Assistants`;\n  /* jshint ignore:start */\n  /**\n   * Streams AssistantInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Autopilot.V1.AssistantList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  AssistantListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists AssistantInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Autopilot.V1.AssistantList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  AssistantListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of AssistantInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Autopilot.V1.AssistantList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  AssistantListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new AssistantPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of AssistantInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Autopilot.V1.AssistantList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  AssistantListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new AssistantPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * create a AssistantInstance\n   *\n   * @function create\n   * @memberof Twilio.Autopilot.V1.AssistantList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.friendlyName] - A string to describe the new resource\n   * @param {boolean} [opts.logQueries] -\n   *          Whether queries should be logged and kept after training\n   * @param {string} [opts.uniqueName] -\n   *          An application-defined string that uniquely identifies the new resource\n   * @param {string} [opts.callbackUrl] - Reserved\n   * @param {string} [opts.callbackEvents] - Reserved\n   * @param {object} [opts.styleSheet] -\n   *          A JSON string that defines the Assistant's style sheet\n   * @param {object} [opts.defaults] -\n   *          A JSON object that defines the Assistant's default tasks for various scenarios\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed AssistantInstance\n   */\n  /* jshint ignore:end */\n  AssistantListInstance.create = function create(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'FriendlyName': _.get(opts, 'friendlyName'),\n      'LogQueries': serialize.bool(_.get(opts, 'logQueries')),\n      'UniqueName': _.get(opts, 'uniqueName'),\n      'CallbackUrl': _.get(opts, 'callbackUrl'),\n      'CallbackEvents': _.get(opts, 'callbackEvents'),\n      'StyleSheet': serialize.object(_.get(opts, 'styleSheet')),\n      'Defaults': serialize.object(_.get(opts, 'defaults'))\n    });\n\n    var promise = this._version.create({uri: this._uri, method: 'POST', data: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new AssistantInstance(this._version, payload, this._solution.sid));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a assistant\n   *\n   * @function get\n   * @memberof Twilio.Autopilot.V1.AssistantList#\n   *\n   * @param {string} sid - The unique string that identifies the resource\n   *\n   * @returns {Twilio.Autopilot.V1.AssistantContext}\n   */\n  /* jshint ignore:end */\n  AssistantListInstance.get = function get(sid) {\n    return new AssistantContext(this._version, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Autopilot.V1.AssistantList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  AssistantListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  AssistantListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return AssistantListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the AssistantPage\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Autopilot.V1.AssistantPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {AssistantSolution} solution - Path solution\n *\n * @returns AssistantPage\n */\n/* jshint ignore:end */\nAssistantPage = function AssistantPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(AssistantPage.prototype, Page.prototype);\nAssistantPage.prototype.constructor = AssistantPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of AssistantInstance\n *\n * @function getInstance\n * @memberof Twilio.Autopilot.V1.AssistantPage#\n *\n * @param {AssistantPayload} payload - Payload response from the API\n *\n * @returns AssistantInstance\n */\n/* jshint ignore:end */\nAssistantPage.prototype.getInstance = function getInstance(payload) {\n  return new AssistantInstance(this._version, payload);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Autopilot.V1.AssistantPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nAssistantPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nAssistantPage.prototype[util.inspect.custom] = function inspect(depth, options)\n    {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the AssistantContext\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Autopilot.V1.AssistantInstance\n *\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {Date} dateCreated -\n *          The RFC 2822 date and time in GMT when the resource was created\n * @property {Date} dateUpdated -\n *          The RFC 2822 date and time in GMT when the resource was last updated\n * @property {string} friendlyName -\n *          The string that you assigned to describe the resource\n * @property {string} latestModelBuildSid - Reserved\n * @property {string} links -\n *          A list of the URLs of the Assistant's related resources\n * @property {boolean} logQueries -\n *          Whether queries should be logged and kept after training\n * @property {string} developmentStage -\n *          A string describing the state of the assistant.\n * @property {boolean} needsModelBuild - Whether model needs to be rebuilt\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} uniqueName -\n *          An application-defined string that uniquely identifies the resource\n * @property {string} url - The absolute URL of the Assistant resource\n * @property {string} callbackUrl - Reserved\n * @property {string} callbackEvents - Reserved\n *\n * @param {V1} version - Version of the resource\n * @param {AssistantPayload} payload - The instance payload\n * @param {sid_like} sid - The unique string that identifies the resource\n */\n/* jshint ignore:end */\nAssistantInstance = function AssistantInstance(version, payload, sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n  this.friendlyName = payload.friendly_name; // jshint ignore:line\n  this.latestModelBuildSid = payload.latest_model_build_sid; // jshint ignore:line\n  this.links = payload.links; // jshint ignore:line\n  this.logQueries = payload.log_queries; // jshint ignore:line\n  this.developmentStage = payload.development_stage; // jshint ignore:line\n  this.needsModelBuild = payload.needs_model_build; // jshint ignore:line\n  this.sid = payload.sid; // jshint ignore:line\n  this.uniqueName = payload.unique_name; // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n  this.callbackUrl = payload.callback_url; // jshint ignore:line\n  this.callbackEvents = payload.callback_events; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {sid: sid || this.sid, };\n};\n\nObject.defineProperty(AssistantInstance.prototype,\n  '_proxy', {\n    get: function() {\n      if (!this._context) {\n        this._context = new AssistantContext(this._version, this._solution.sid);\n      }\n\n      return this._context;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a AssistantInstance\n *\n * @function fetch\n * @memberof Twilio.Autopilot.V1.AssistantInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed AssistantInstance\n */\n/* jshint ignore:end */\nAssistantInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * update a AssistantInstance\n *\n * @function update\n * @memberof Twilio.Autopilot.V1.AssistantInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] - A string to describe the resource\n * @param {boolean} [opts.logQueries] -\n *          Whether queries should be logged and kept after training\n * @param {string} [opts.uniqueName] -\n *          An application-defined string that uniquely identifies the resource\n * @param {string} [opts.callbackUrl] - Reserved\n * @param {string} [opts.callbackEvents] - Reserved\n * @param {object} [opts.styleSheet] -\n *          A JSON string that defines the Assistant's style sheet\n * @param {object} [opts.defaults] -\n *          A JSON object that defines the Assistant's {@link https://www.twilio.com/docs/autopilot/api/assistant/defaults|default tasks} for various scenarios\n * @param {string} [opts.developmentStage] -\n *          A string describing the state of the assistant.\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed AssistantInstance\n */\n/* jshint ignore:end */\nAssistantInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * remove a AssistantInstance\n *\n * @function remove\n * @memberof Twilio.Autopilot.V1.AssistantInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed AssistantInstance\n */\n/* jshint ignore:end */\nAssistantInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n\n/* jshint ignore:start */\n/**\n * Access the fieldTypes\n *\n * @function fieldTypes\n * @memberof Twilio.Autopilot.V1.AssistantInstance#\n *\n * @returns {Twilio.Autopilot.V1.AssistantContext.FieldTypeList}\n */\n/* jshint ignore:end */\nAssistantInstance.prototype.fieldTypes = function fieldTypes() {\n  return this._proxy.fieldTypes;\n};\n\n/* jshint ignore:start */\n/**\n * Access the tasks\n *\n * @function tasks\n * @memberof Twilio.Autopilot.V1.AssistantInstance#\n *\n * @returns {Twilio.Autopilot.V1.AssistantContext.TaskList}\n */\n/* jshint ignore:end */\nAssistantInstance.prototype.tasks = function tasks() {\n  return this._proxy.tasks;\n};\n\n/* jshint ignore:start */\n/**\n * Access the modelBuilds\n *\n * @function modelBuilds\n * @memberof Twilio.Autopilot.V1.AssistantInstance#\n *\n * @returns {Twilio.Autopilot.V1.AssistantContext.ModelBuildList}\n */\n/* jshint ignore:end */\nAssistantInstance.prototype.modelBuilds = function modelBuilds() {\n  return this._proxy.modelBuilds;\n};\n\n/* jshint ignore:start */\n/**\n * Access the queries\n *\n * @function queries\n * @memberof Twilio.Autopilot.V1.AssistantInstance#\n *\n * @returns {Twilio.Autopilot.V1.AssistantContext.QueryList}\n */\n/* jshint ignore:end */\nAssistantInstance.prototype.queries = function queries() {\n  return this._proxy.queries;\n};\n\n/* jshint ignore:start */\n/**\n * Access the styleSheet\n *\n * @function styleSheet\n * @memberof Twilio.Autopilot.V1.AssistantInstance#\n *\n * @returns {Twilio.Autopilot.V1.AssistantContext.StyleSheetList}\n */\n/* jshint ignore:end */\nAssistantInstance.prototype.styleSheet = function styleSheet() {\n  return this._proxy.styleSheet;\n};\n\n/* jshint ignore:start */\n/**\n * Access the defaults\n *\n * @function defaults\n * @memberof Twilio.Autopilot.V1.AssistantInstance#\n *\n * @returns {Twilio.Autopilot.V1.AssistantContext.DefaultsList}\n */\n/* jshint ignore:end */\nAssistantInstance.prototype.defaults = function defaults() {\n  return this._proxy.defaults;\n};\n\n/* jshint ignore:start */\n/**\n * Access the dialogues\n *\n * @function dialogues\n * @memberof Twilio.Autopilot.V1.AssistantInstance#\n *\n * @returns {Twilio.Autopilot.V1.AssistantContext.DialogueList}\n */\n/* jshint ignore:end */\nAssistantInstance.prototype.dialogues = function dialogues() {\n  return this._proxy.dialogues;\n};\n\n/* jshint ignore:start */\n/**\n * Access the webhooks\n *\n * @function webhooks\n * @memberof Twilio.Autopilot.V1.AssistantInstance#\n *\n * @returns {Twilio.Autopilot.V1.AssistantContext.WebhookList}\n */\n/* jshint ignore:end */\nAssistantInstance.prototype.webhooks = function webhooks() {\n  return this._proxy.webhooks;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Autopilot.V1.AssistantInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nAssistantInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nAssistantInstance.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the AssistantContext\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Autopilot.V1.AssistantContext\n *\n * @property {Twilio.Autopilot.V1.AssistantContext.FieldTypeList} fieldTypes -\n *          fieldTypes resource\n * @property {Twilio.Autopilot.V1.AssistantContext.TaskList} tasks - tasks resource\n * @property {Twilio.Autopilot.V1.AssistantContext.ModelBuildList} modelBuilds -\n *          modelBuilds resource\n * @property {Twilio.Autopilot.V1.AssistantContext.QueryList} queries -\n *          queries resource\n * @property {Twilio.Autopilot.V1.AssistantContext.StyleSheetList} styleSheet -\n *          styleSheet resource\n * @property {Twilio.Autopilot.V1.AssistantContext.DefaultsList} defaults -\n *          defaults resource\n * @property {Twilio.Autopilot.V1.AssistantContext.DialogueList} dialogues -\n *          dialogues resource\n * @property {Twilio.Autopilot.V1.AssistantContext.WebhookList} webhooks -\n *          webhooks resource\n *\n * @param {V1} version - Version of the resource\n * @param {sid_like} sid - The unique string that identifies the resource\n */\n/* jshint ignore:end */\nAssistantContext = function AssistantContext(version, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {sid: sid, };\n  this._uri = `/Assistants/${sid}`;\n\n  // Dependents\n  this._fieldTypes = undefined;\n  this._tasks = undefined;\n  this._modelBuilds = undefined;\n  this._queries = undefined;\n  this._styleSheet = undefined;\n  this._defaults = undefined;\n  this._dialogues = undefined;\n  this._webhooks = undefined;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a AssistantInstance\n *\n * @function fetch\n * @memberof Twilio.Autopilot.V1.AssistantContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed AssistantInstance\n */\n/* jshint ignore:end */\nAssistantContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({uri: this._uri, method: 'GET'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new AssistantInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * update a AssistantInstance\n *\n * @function update\n * @memberof Twilio.Autopilot.V1.AssistantContext#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] - A string to describe the resource\n * @param {boolean} [opts.logQueries] -\n *          Whether queries should be logged and kept after training\n * @param {string} [opts.uniqueName] -\n *          An application-defined string that uniquely identifies the resource\n * @param {string} [opts.callbackUrl] - Reserved\n * @param {string} [opts.callbackEvents] - Reserved\n * @param {object} [opts.styleSheet] -\n *          A JSON string that defines the Assistant's style sheet\n * @param {object} [opts.defaults] -\n *          A JSON object that defines the Assistant's {@link https://www.twilio.com/docs/autopilot/api/assistant/defaults|default tasks} for various scenarios\n * @param {string} [opts.developmentStage] -\n *          A string describing the state of the assistant.\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed AssistantInstance\n */\n/* jshint ignore:end */\nAssistantContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n  opts = opts || {};\n\n  var deferred = Q.defer();\n  var data = values.of({\n    'FriendlyName': _.get(opts, 'friendlyName'),\n    'LogQueries': serialize.bool(_.get(opts, 'logQueries')),\n    'UniqueName': _.get(opts, 'uniqueName'),\n    'CallbackUrl': _.get(opts, 'callbackUrl'),\n    'CallbackEvents': _.get(opts, 'callbackEvents'),\n    'StyleSheet': serialize.object(_.get(opts, 'styleSheet')),\n    'Defaults': serialize.object(_.get(opts, 'defaults')),\n    'DevelopmentStage': _.get(opts, 'developmentStage')\n  });\n\n  var promise = this._version.update({uri: this._uri, method: 'POST', data: data});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new AssistantInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * remove a AssistantInstance\n *\n * @function remove\n * @memberof Twilio.Autopilot.V1.AssistantContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed AssistantInstance\n */\n/* jshint ignore:end */\nAssistantContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.remove({uri: this._uri, method: 'DELETE'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\nObject.defineProperty(AssistantContext.prototype,\n  'fieldTypes', {\n    get: function() {\n      if (!this._fieldTypes) {\n        this._fieldTypes = new FieldTypeList(this._version, this._solution.sid);\n      }\n      return this._fieldTypes;\n    }\n});\n\nObject.defineProperty(AssistantContext.prototype,\n  'tasks', {\n    get: function() {\n      if (!this._tasks) {\n        this._tasks = new TaskList(this._version, this._solution.sid);\n      }\n      return this._tasks;\n    }\n});\n\nObject.defineProperty(AssistantContext.prototype,\n  'modelBuilds', {\n    get: function() {\n      if (!this._modelBuilds) {\n        this._modelBuilds = new ModelBuildList(this._version, this._solution.sid);\n      }\n      return this._modelBuilds;\n    }\n});\n\nObject.defineProperty(AssistantContext.prototype,\n  'queries', {\n    get: function() {\n      if (!this._queries) {\n        this._queries = new QueryList(this._version, this._solution.sid);\n      }\n      return this._queries;\n    }\n});\n\nObject.defineProperty(AssistantContext.prototype,\n  'styleSheet', {\n    get: function() {\n      if (!this._styleSheet) {\n        this._styleSheet = new StyleSheetList(this._version, this._solution.sid);\n      }\n      return this._styleSheet;\n    }\n});\n\nObject.defineProperty(AssistantContext.prototype,\n  'defaults', {\n    get: function() {\n      if (!this._defaults) {\n        this._defaults = new DefaultsList(this._version, this._solution.sid);\n      }\n      return this._defaults;\n    }\n});\n\nObject.defineProperty(AssistantContext.prototype,\n  'dialogues', {\n    get: function() {\n      if (!this._dialogues) {\n        this._dialogues = new DialogueList(this._version, this._solution.sid);\n      }\n      return this._dialogues;\n    }\n});\n\nObject.defineProperty(AssistantContext.prototype,\n  'webhooks', {\n    get: function() {\n      if (!this._webhooks) {\n        this._webhooks = new WebhookList(this._version, this._solution.sid);\n      }\n      return this._webhooks;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Autopilot.V1.AssistantContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nAssistantContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nAssistantContext.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  AssistantList: AssistantList,\n  AssistantPage: AssistantPage,\n  AssistantInstance: AssistantInstance,\n  AssistantContext: AssistantContext\n};\n"]},"metadata":{},"sourceType":"module"}