{"ast":null,"code":"'use strict';\n/* jshint ignore:start */\n\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n\n/* jshint ignore:end */\n\nvar Q = require('q');\n/* jshint ignore:line */\n\n\nvar _ = require('lodash');\n/* jshint ignore:line */\n\n\nvar util = require('util');\n/* jshint ignore:line */\n\n\nvar Page = require('../../../../../../base/Page');\n/* jshint ignore:line */\n\n\nvar deserialize = require('../../../../../../base/deserialize');\n/* jshint ignore:line */\n\n\nvar values = require('../../../../../../base/values');\n/* jshint ignore:line */\n\n\nvar IpAccessControlListMappingList;\nvar IpAccessControlListMappingPage;\nvar IpAccessControlListMappingInstance;\nvar IpAccessControlListMappingContext;\n/* jshint ignore:start */\n\n/**\n * Initialize the IpAccessControlListMappingList\n *\n * @constructor Twilio.Api.V2010.AccountContext.SipContext.DomainContext.IpAccessControlListMappingList\n *\n * @param {Twilio.Api.V2010} version - Version of the resource\n * @param {string} accountSid -\n *          The unique id of the Account that is responsible for this resource.\n * @param {string} domainSid -\n *          The unique string that identifies the SipDomain resource.\n */\n\n/* jshint ignore:end */\n\nIpAccessControlListMappingList = function IpAccessControlListMappingList(version, accountSid, domainSid) {\n  /* jshint ignore:start */\n\n  /**\n   * @function ipAccessControlListMappings\n   * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Api.V2010.AccountContext.SipContext.DomainContext.IpAccessControlListMappingContext}\n   */\n\n  /* jshint ignore:end */\n  function IpAccessControlListMappingListInstance(sid) {\n    return IpAccessControlListMappingListInstance.get(sid);\n  }\n\n  IpAccessControlListMappingListInstance._version = version; // Path Solution\n\n  IpAccessControlListMappingListInstance._solution = {\n    accountSid: accountSid,\n    domainSid: domainSid\n  };\n  IpAccessControlListMappingListInstance._uri = `/Accounts/${accountSid}/SIP/Domains/${domainSid}/IpAccessControlListMappings.json`;\n  /* jshint ignore:start */\n\n  /**\n   * create a IpAccessControlListMappingInstance\n   *\n   * @function create\n   * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainContext.IpAccessControlListMappingList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.ipAccessControlListSid -\n   *          The unique id of the IP access control list to map to the SIP domain\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed IpAccessControlListMappingInstance\n   */\n\n  /* jshint ignore:end */\n\n  IpAccessControlListMappingListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n\n    if (_.isUndefined(opts.ipAccessControlListSid)) {\n      throw new Error('Required parameter \"opts.ipAccessControlListSid\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'IpAccessControlListSid': _.get(opts, 'ipAccessControlListSid')\n    });\n\n    var promise = this._version.create({\n      uri: this._uri,\n      method: 'POST',\n      data: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new IpAccessControlListMappingInstance(this._version, payload, this._solution.accountSid, this._solution.domainSid, this._solution.sid));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Streams IpAccessControlListMappingInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainContext.IpAccessControlListMappingList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n\n  /* jshint ignore:end */\n\n\n  IpAccessControlListMappingListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Lists IpAccessControlListMappingInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainContext.IpAccessControlListMappingList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  IpAccessControlListMappingListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single page of IpAccessControlListMappingInstance records from the\n   * API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainContext.IpAccessControlListMappingList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  IpAccessControlListMappingListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new IpAccessControlListMappingPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single target page of IpAccessControlListMappingInstance records from\n   * the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainContext.IpAccessControlListMappingList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  IpAccessControlListMappingListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new IpAccessControlListMappingPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Constructs a ip_access_control_list_mapping\n   *\n   * @function get\n   * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainContext.IpAccessControlListMappingList#\n   *\n   * @param {string} sid -\n   *          A 34 character string that uniquely identifies the resource to fetch.\n   *\n   * @returns {Twilio.Api.V2010.AccountContext.SipContext.DomainContext.IpAccessControlListMappingContext}\n   */\n\n  /* jshint ignore:end */\n\n\n  IpAccessControlListMappingListInstance.get = function get(sid) {\n    return new IpAccessControlListMappingContext(this._version, this._solution.accountSid, this._solution.domainSid, sid);\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainContext.IpAccessControlListMappingList#\n   *\n   * @returns Object\n   */\n\n  /* jshint ignore:end */\n\n\n  IpAccessControlListMappingListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  IpAccessControlListMappingListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return IpAccessControlListMappingListInstance;\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the IpAccessControlListMappingPage\n *\n * @constructor Twilio.Api.V2010.AccountContext.SipContext.DomainContext.IpAccessControlListMappingPage\n *\n * @param {V2010} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {IpAccessControlListMappingSolution} solution - Path solution\n *\n * @returns IpAccessControlListMappingPage\n */\n\n/* jshint ignore:end */\n\n\nIpAccessControlListMappingPage = function IpAccessControlListMappingPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(IpAccessControlListMappingPage.prototype, Page.prototype);\n\nIpAccessControlListMappingPage.prototype.constructor = IpAccessControlListMappingPage;\n/* jshint ignore:start */\n\n/**\n * Build an instance of IpAccessControlListMappingInstance\n *\n * @function getInstance\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainContext.IpAccessControlListMappingPage#\n *\n * @param {IpAccessControlListMappingPayload} payload -\n *          Payload response from the API\n *\n * @returns IpAccessControlListMappingInstance\n */\n\n/* jshint ignore:end */\n\nIpAccessControlListMappingPage.prototype.getInstance = function getInstance(payload) {\n  return new IpAccessControlListMappingInstance(this._version, payload, this._solution.accountSid, this._solution.domainSid);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainContext.IpAccessControlListMappingPage#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nIpAccessControlListMappingPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nIpAccessControlListMappingPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the IpAccessControlListMappingContext\n *\n * @constructor Twilio.Api.V2010.AccountContext.SipContext.DomainContext.IpAccessControlListMappingInstance\n *\n * @property {string} accountSid -\n *          The unique id of the Account that is responsible for this resource.\n * @property {Date} dateCreated -\n *          The date that this resource was created, given as GMT in RFC 2822 format.\n * @property {Date} dateUpdated -\n *          The date that this resource was last updated, given as GMT in RFC 2822 format.\n * @property {string} domainSid -\n *          The unique string that identifies the SipDomain resource.\n * @property {string} friendlyName -\n *          A human readable descriptive text for this resource, up to 64 characters long.\n * @property {string} sid -\n *          A 34 character string that uniquely identifies this resource.\n * @property {string} uri -\n *          The URI for this resource, relative to https://api.twilio.com\n *\n * @param {V2010} version - Version of the resource\n * @param {IpAccessControlListMappingPayload} payload - The instance payload\n * @param {sid} accountSid -\n *          The unique id of the Account that is responsible for this resource.\n * @param {sid} domainSid -\n *          The unique string that identifies the SipDomain resource.\n * @param {sid} sid -\n *          A 34 character string that uniquely identifies the resource to fetch.\n */\n\n/* jshint ignore:end */\n\n\nIpAccessControlListMappingInstance = function IpAccessControlListMappingInstance(version, payload, accountSid, domainSid, sid) {\n  this._version = version; // Marshaled Properties\n\n  this.accountSid = payload.account_sid; // jshint ignore:line\n\n  this.dateCreated = deserialize.rfc2822DateTime(payload.date_created); // jshint ignore:line\n\n  this.dateUpdated = deserialize.rfc2822DateTime(payload.date_updated); // jshint ignore:line\n\n  this.domainSid = payload.domain_sid; // jshint ignore:line\n\n  this.friendlyName = payload.friendly_name; // jshint ignore:line\n\n  this.sid = payload.sid; // jshint ignore:line\n\n  this.uri = payload.uri; // jshint ignore:line\n  // Context\n\n  this._context = undefined;\n  this._solution = {\n    accountSid: accountSid,\n    domainSid: domainSid,\n    sid: sid || this.sid\n  };\n};\n\nObject.defineProperty(IpAccessControlListMappingInstance.prototype, '_proxy', {\n  get: function () {\n    if (!this._context) {\n      this._context = new IpAccessControlListMappingContext(this._version, this._solution.accountSid, this._solution.domainSid, this._solution.sid);\n    }\n\n    return this._context;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * fetch a IpAccessControlListMappingInstance\n *\n * @function fetch\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainContext.IpAccessControlListMappingInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed IpAccessControlListMappingInstance\n */\n\n/* jshint ignore:end */\n\nIpAccessControlListMappingInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n/* jshint ignore:start */\n\n/**\n * remove a IpAccessControlListMappingInstance\n *\n * @function remove\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainContext.IpAccessControlListMappingInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed IpAccessControlListMappingInstance\n */\n\n/* jshint ignore:end */\n\n\nIpAccessControlListMappingInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainContext.IpAccessControlListMappingInstance#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nIpAccessControlListMappingInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nIpAccessControlListMappingInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the IpAccessControlListMappingContext\n *\n * @constructor Twilio.Api.V2010.AccountContext.SipContext.DomainContext.IpAccessControlListMappingContext\n *\n * @param {V2010} version - Version of the resource\n * @param {sid} accountSid -\n *          The unique id of the Account that is responsible for this resource.\n * @param {sid} domainSid - A string that uniquely identifies the SIP Domain\n * @param {sid} sid -\n *          A 34 character string that uniquely identifies the resource to fetch.\n */\n\n/* jshint ignore:end */\n\n\nIpAccessControlListMappingContext = function IpAccessControlListMappingContext(version, accountSid, domainSid, sid) {\n  this._version = version; // Path Solution\n\n  this._solution = {\n    accountSid: accountSid,\n    domainSid: domainSid,\n    sid: sid\n  };\n  this._uri = `/Accounts/${accountSid}/SIP/Domains/${domainSid}/IpAccessControlListMappings/${sid}.json`;\n};\n/* jshint ignore:start */\n\n/**\n * fetch a IpAccessControlListMappingInstance\n *\n * @function fetch\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainContext.IpAccessControlListMappingContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed IpAccessControlListMappingInstance\n */\n\n/* jshint ignore:end */\n\n\nIpAccessControlListMappingContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new IpAccessControlListMappingInstance(this._version, payload, this._solution.accountSid, this._solution.domainSid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * remove a IpAccessControlListMappingInstance\n *\n * @function remove\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainContext.IpAccessControlListMappingContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed IpAccessControlListMappingInstance\n */\n\n/* jshint ignore:end */\n\n\nIpAccessControlListMappingContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.remove({\n    uri: this._uri,\n    method: 'DELETE'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainContext.IpAccessControlListMappingContext#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nIpAccessControlListMappingContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nIpAccessControlListMappingContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  IpAccessControlListMappingList: IpAccessControlListMappingList,\n  IpAccessControlListMappingPage: IpAccessControlListMappingPage,\n  IpAccessControlListMappingInstance: IpAccessControlListMappingInstance,\n  IpAccessControlListMappingContext: IpAccessControlListMappingContext\n};","map":{"version":3,"sources":["/Users/tony_niu/Visual Studio/Twilio/twilio-video-starter-kit/node_modules/twilio/lib/rest/api/v2010/account/sip/domain/ipAccessControlListMapping.js"],"names":["Q","require","_","util","Page","deserialize","values","IpAccessControlListMappingList","IpAccessControlListMappingPage","IpAccessControlListMappingInstance","IpAccessControlListMappingContext","version","accountSid","domainSid","IpAccessControlListMappingListInstance","sid","get","_version","_solution","_uri","create","opts","callback","isUndefined","Error","ipAccessControlListSid","deferred","defer","data","of","promise","uri","method","then","payload","resolve","bind","catch","error","reject","isFunction","nodeify","each","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","fetchNextPage","fn","page","instances","instance","nextPage","merge","list","allResources","resource","push","length","pageToken","pageNumber","params","getPage","targetUrl","_domain","twilio","request","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","account_sid","dateCreated","rfc2822DateTime","date_created","dateUpdated","date_updated","domain_sid","friendlyName","friendly_name","_context","undefined","Object","defineProperty","fetch","_proxy","remove","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar Page = require('../../../../../../base/Page');  /* jshint ignore:line */\nvar deserialize = require(\n    '../../../../../../base/deserialize');  /* jshint ignore:line */\nvar values = require('../../../../../../base/values');  /* jshint ignore:line */\n\nvar IpAccessControlListMappingList;\nvar IpAccessControlListMappingPage;\nvar IpAccessControlListMappingInstance;\nvar IpAccessControlListMappingContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the IpAccessControlListMappingList\n *\n * @constructor Twilio.Api.V2010.AccountContext.SipContext.DomainContext.IpAccessControlListMappingList\n *\n * @param {Twilio.Api.V2010} version - Version of the resource\n * @param {string} accountSid -\n *          The unique id of the Account that is responsible for this resource.\n * @param {string} domainSid -\n *          The unique string that identifies the SipDomain resource.\n */\n/* jshint ignore:end */\nIpAccessControlListMappingList = function\n    IpAccessControlListMappingList(version, accountSid, domainSid) {\n  /* jshint ignore:start */\n  /**\n   * @function ipAccessControlListMappings\n   * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Api.V2010.AccountContext.SipContext.DomainContext.IpAccessControlListMappingContext}\n   */\n  /* jshint ignore:end */\n  function IpAccessControlListMappingListInstance(sid) {\n    return IpAccessControlListMappingListInstance.get(sid);\n  }\n\n  IpAccessControlListMappingListInstance._version = version;\n  // Path Solution\n  IpAccessControlListMappingListInstance._solution = {accountSid: accountSid, domainSid: domainSid};\n  IpAccessControlListMappingListInstance._uri = `/Accounts/${accountSid}/SIP/Domains/${domainSid}/IpAccessControlListMappings.json`;\n  /* jshint ignore:start */\n  /**\n   * create a IpAccessControlListMappingInstance\n   *\n   * @function create\n   * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainContext.IpAccessControlListMappingList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.ipAccessControlListSid -\n   *          The unique id of the IP access control list to map to the SIP domain\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed IpAccessControlListMappingInstance\n   */\n  /* jshint ignore:end */\n  IpAccessControlListMappingListInstance.create = function create(opts, callback)\n      {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n    if (_.isUndefined(opts.ipAccessControlListSid)) {\n      throw new Error('Required parameter \"opts.ipAccessControlListSid\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({'IpAccessControlListSid': _.get(opts, 'ipAccessControlListSid')});\n\n    var promise = this._version.create({uri: this._uri, method: 'POST', data: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new IpAccessControlListMappingInstance(\n        this._version,\n        payload,\n        this._solution.accountSid,\n        this._solution.domainSid,\n        this._solution.sid\n      ));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Streams IpAccessControlListMappingInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainContext.IpAccessControlListMappingList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  IpAccessControlListMappingListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists IpAccessControlListMappingInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainContext.IpAccessControlListMappingList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  IpAccessControlListMappingListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of IpAccessControlListMappingInstance records from the\n   * API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainContext.IpAccessControlListMappingList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  IpAccessControlListMappingListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new IpAccessControlListMappingPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of IpAccessControlListMappingInstance records from\n   * the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainContext.IpAccessControlListMappingList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  IpAccessControlListMappingListInstance.getPage = function getPage(targetUrl,\n      callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new IpAccessControlListMappingPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a ip_access_control_list_mapping\n   *\n   * @function get\n   * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainContext.IpAccessControlListMappingList#\n   *\n   * @param {string} sid -\n   *          A 34 character string that uniquely identifies the resource to fetch.\n   *\n   * @returns {Twilio.Api.V2010.AccountContext.SipContext.DomainContext.IpAccessControlListMappingContext}\n   */\n  /* jshint ignore:end */\n  IpAccessControlListMappingListInstance.get = function get(sid) {\n    return new IpAccessControlListMappingContext(\n      this._version,\n      this._solution.accountSid,\n      this._solution.domainSid,\n      sid\n    );\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainContext.IpAccessControlListMappingList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  IpAccessControlListMappingListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  IpAccessControlListMappingListInstance[util.inspect.custom] = function\n      inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return IpAccessControlListMappingListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the IpAccessControlListMappingPage\n *\n * @constructor Twilio.Api.V2010.AccountContext.SipContext.DomainContext.IpAccessControlListMappingPage\n *\n * @param {V2010} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {IpAccessControlListMappingSolution} solution - Path solution\n *\n * @returns IpAccessControlListMappingPage\n */\n/* jshint ignore:end */\nIpAccessControlListMappingPage = function\n    IpAccessControlListMappingPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(IpAccessControlListMappingPage.prototype, Page.prototype);\nIpAccessControlListMappingPage.prototype.constructor = IpAccessControlListMappingPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of IpAccessControlListMappingInstance\n *\n * @function getInstance\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainContext.IpAccessControlListMappingPage#\n *\n * @param {IpAccessControlListMappingPayload} payload -\n *          Payload response from the API\n *\n * @returns IpAccessControlListMappingInstance\n */\n/* jshint ignore:end */\nIpAccessControlListMappingPage.prototype.getInstance = function\n    getInstance(payload) {\n  return new IpAccessControlListMappingInstance(\n    this._version,\n    payload,\n    this._solution.accountSid,\n    this._solution.domainSid\n  );\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainContext.IpAccessControlListMappingPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nIpAccessControlListMappingPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nIpAccessControlListMappingPage.prototype[util.inspect.custom] = function\n    inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the IpAccessControlListMappingContext\n *\n * @constructor Twilio.Api.V2010.AccountContext.SipContext.DomainContext.IpAccessControlListMappingInstance\n *\n * @property {string} accountSid -\n *          The unique id of the Account that is responsible for this resource.\n * @property {Date} dateCreated -\n *          The date that this resource was created, given as GMT in RFC 2822 format.\n * @property {Date} dateUpdated -\n *          The date that this resource was last updated, given as GMT in RFC 2822 format.\n * @property {string} domainSid -\n *          The unique string that identifies the SipDomain resource.\n * @property {string} friendlyName -\n *          A human readable descriptive text for this resource, up to 64 characters long.\n * @property {string} sid -\n *          A 34 character string that uniquely identifies this resource.\n * @property {string} uri -\n *          The URI for this resource, relative to https://api.twilio.com\n *\n * @param {V2010} version - Version of the resource\n * @param {IpAccessControlListMappingPayload} payload - The instance payload\n * @param {sid} accountSid -\n *          The unique id of the Account that is responsible for this resource.\n * @param {sid} domainSid -\n *          The unique string that identifies the SipDomain resource.\n * @param {sid} sid -\n *          A 34 character string that uniquely identifies the resource to fetch.\n */\n/* jshint ignore:end */\nIpAccessControlListMappingInstance = function\n    IpAccessControlListMappingInstance(version, payload, accountSid, domainSid,\n    sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.dateCreated = deserialize.rfc2822DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.rfc2822DateTime(payload.date_updated); // jshint ignore:line\n  this.domainSid = payload.domain_sid; // jshint ignore:line\n  this.friendlyName = payload.friendly_name; // jshint ignore:line\n  this.sid = payload.sid; // jshint ignore:line\n  this.uri = payload.uri; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {accountSid: accountSid, domainSid: domainSid, sid: sid || this.sid, };\n};\n\nObject.defineProperty(IpAccessControlListMappingInstance.prototype,\n  '_proxy', {\n    get: function() {\n      if (!this._context) {\n        this._context = new IpAccessControlListMappingContext(\n          this._version,\n          this._solution.accountSid,\n          this._solution.domainSid,\n          this._solution.sid\n        );\n      }\n\n      return this._context;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a IpAccessControlListMappingInstance\n *\n * @function fetch\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainContext.IpAccessControlListMappingInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed IpAccessControlListMappingInstance\n */\n/* jshint ignore:end */\nIpAccessControlListMappingInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * remove a IpAccessControlListMappingInstance\n *\n * @function remove\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainContext.IpAccessControlListMappingInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed IpAccessControlListMappingInstance\n */\n/* jshint ignore:end */\nIpAccessControlListMappingInstance.prototype.remove = function remove(callback)\n    {\n  return this._proxy.remove(callback);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainContext.IpAccessControlListMappingInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nIpAccessControlListMappingInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nIpAccessControlListMappingInstance.prototype[util.inspect.custom] = function\n    inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the IpAccessControlListMappingContext\n *\n * @constructor Twilio.Api.V2010.AccountContext.SipContext.DomainContext.IpAccessControlListMappingContext\n *\n * @param {V2010} version - Version of the resource\n * @param {sid} accountSid -\n *          The unique id of the Account that is responsible for this resource.\n * @param {sid} domainSid - A string that uniquely identifies the SIP Domain\n * @param {sid} sid -\n *          A 34 character string that uniquely identifies the resource to fetch.\n */\n/* jshint ignore:end */\nIpAccessControlListMappingContext = function\n    IpAccessControlListMappingContext(version, accountSid, domainSid, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {accountSid: accountSid, domainSid: domainSid, sid: sid, };\n  this._uri = `/Accounts/${accountSid}/SIP/Domains/${domainSid}/IpAccessControlListMappings/${sid}.json`;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a IpAccessControlListMappingInstance\n *\n * @function fetch\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainContext.IpAccessControlListMappingContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed IpAccessControlListMappingInstance\n */\n/* jshint ignore:end */\nIpAccessControlListMappingContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({uri: this._uri, method: 'GET'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new IpAccessControlListMappingInstance(\n      this._version,\n      payload,\n      this._solution.accountSid,\n      this._solution.domainSid,\n      this._solution.sid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * remove a IpAccessControlListMappingInstance\n *\n * @function remove\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainContext.IpAccessControlListMappingContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed IpAccessControlListMappingInstance\n */\n/* jshint ignore:end */\nIpAccessControlListMappingContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.remove({uri: this._uri, method: 'DELETE'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.SipContext.DomainContext.IpAccessControlListMappingContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nIpAccessControlListMappingContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nIpAccessControlListMappingContext.prototype[util.inspect.custom] = function\n    inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  IpAccessControlListMappingList: IpAccessControlListMappingList,\n  IpAccessControlListMappingPage: IpAccessControlListMappingPage,\n  IpAccessControlListMappingInstance: IpAccessControlListMappingInstance,\n  IpAccessControlListMappingContext: IpAccessControlListMappingContext\n};\n"]},"metadata":{},"sourceType":"script"}