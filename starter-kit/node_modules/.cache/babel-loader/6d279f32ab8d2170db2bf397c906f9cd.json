{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/tony_niu/Visual Studio/Twilio/twilio-video-starter-kit/src/Room.js\";\nimport React, { Component } from 'react';\nimport './App.scss';\nimport Participant from './Participant';\n\nclass Room extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      remoteParticipants: Array.from(this.props.room.participants.values())\n    };\n    this.leaveRoom = this.leaveRoom.bind(this);\n  }\n\n  componentDidMount() {\n    // Add event listeners for future remote participants coming or going\n    this.props.room.on('participantConnected', participant => this.addParticipant(participant));\n    this.props.room.on('participantDisconnected', participant => this.removeParticipant(participant));\n    window.addEventListener(\"beforeunload\", this.leaveRoom);\n  }\n\n  componentWillUnmount() {\n    this.leaveRoom();\n  }\n\n  addParticipant(participant) {\n    console.log(`${participant.identity} has joined the room.`);\n    this.setState({\n      remoteParticipants: [...this.state.remoteParticipants, participant]\n    });\n  }\n\n  removeParticipant(participant) {\n    console.log(`${participant.identity} has left the room`);\n    this.setState({\n      remoteParticipants: this.state.remoteParticipants.filter(p => p.identity !== participant.identity)\n    });\n  }\n\n  leaveRoom() {\n    this.props.room.disconnect();\n    this.props.returnToLobby();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"room\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"participants\",\n        children: [/*#__PURE__*/_jsxDEV(Participant, {\n          localParticipant: \"true\",\n          participant: this.props.room.localParticipant\n        }, this.props.room.localParticipant.identity, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 15\n        }, this), this.state.remoteParticipants.map(participant => /*#__PURE__*/_jsxDEV(Participant, {\n          participant: participant\n        }, participant.identity, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 19\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"leaveRoom\",\n        onClick: this.leaveRoom,\n        children: \"Leave Room\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 11\n    }, this);\n  }\n\n}\n\nexport default Room;","map":{"version":3,"sources":["/Users/tony_niu/Visual Studio/Twilio/twilio-video-starter-kit/src/Room.js"],"names":["React","Component","Participant","Room","constructor","props","state","remoteParticipants","Array","from","room","participants","values","leaveRoom","bind","componentDidMount","on","participant","addParticipant","removeParticipant","window","addEventListener","componentWillUnmount","console","log","identity","setState","filter","p","disconnect","returnToLobby","render","localParticipant","map"],"mappings":";;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAO,YAAP;AACA,OAAOC,WAAP,MAAwB,eAAxB;;AAEA,MAAMC,IAAN,SAAmBF,SAAnB,CAA6B;AAEzBG,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AAEA,SAAKC,KAAL,GAAa;AACXC,MAAAA,kBAAkB,EAAEC,KAAK,CAACC,IAAN,CAAW,KAAKJ,KAAL,CAAWK,IAAX,CAAgBC,YAAhB,CAA6BC,MAA7B,EAAX;AADT,KAAb;AAIA,SAAKC,SAAL,GAAiB,KAAKA,SAAL,CAAeC,IAAf,CAAoB,IAApB,CAAjB;AACH;;AACDC,EAAAA,iBAAiB,GAAG;AAChB;AACA,SAAKV,KAAL,CAAWK,IAAX,CAAgBM,EAAhB,CAAmB,sBAAnB,EAA2CC,WAAW,IAAI,KAAKC,cAAL,CAAoBD,WAApB,CAA1D;AACA,SAAKZ,KAAL,CAAWK,IAAX,CAAgBM,EAAhB,CAAmB,yBAAnB,EAA8CC,WAAW,IAAI,KAAKE,iBAAL,CAAuBF,WAAvB,CAA7D;AAEAG,IAAAA,MAAM,CAACC,gBAAP,CAAwB,cAAxB,EAAwC,KAAKR,SAA7C;AACH;;AACDS,EAAAA,oBAAoB,GAAG;AACnB,SAAKT,SAAL;AACH;;AAEDK,EAAAA,cAAc,CAACD,WAAD,EAAc;AACxBM,IAAAA,OAAO,CAACC,GAAR,CAAa,GAAEP,WAAW,CAACQ,QAAS,uBAApC;AAEA,SAAKC,QAAL,CAAc;AACZnB,MAAAA,kBAAkB,EAAE,CAAC,GAAG,KAAKD,KAAL,CAAWC,kBAAf,EAAmCU,WAAnC;AADR,KAAd;AAGH;;AAEDE,EAAAA,iBAAiB,CAACF,WAAD,EAAc;AAC3BM,IAAAA,OAAO,CAACC,GAAR,CAAa,GAAEP,WAAW,CAACQ,QAAS,oBAApC;AAEA,SAAKC,QAAL,CAAc;AACZnB,MAAAA,kBAAkB,EAAE,KAAKD,KAAL,CAAWC,kBAAX,CAA8BoB,MAA9B,CAAqCC,CAAC,IAAIA,CAAC,CAACH,QAAF,KAAeR,WAAW,CAACQ,QAArE;AADR,KAAd;AAGH;;AAEDZ,EAAAA,SAAS,GAAG;AACR,SAAKR,KAAL,CAAWK,IAAX,CAAgBmB,UAAhB;AACA,SAAKxB,KAAL,CAAWyB,aAAX;AACH;;AAEDC,EAAAA,MAAM,GAAG;AACL,wBACE;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA,8BACE;AAAK,QAAA,SAAS,EAAG,cAAjB;AAAA,gCACE,QAAC,WAAD;AAA6D,UAAA,gBAAgB,EAAC,MAA9E;AAAqF,UAAA,WAAW,EAAE,KAAK1B,KAAL,CAAWK,IAAX,CAAgBsB;AAAlH,WAAkB,KAAK3B,KAAL,CAAWK,IAAX,CAAgBsB,gBAAhB,CAAiCP,QAAnD;AAAA;AAAA;AAAA;AAAA,gBADF,EAGI,KAAKnB,KAAL,CAAWC,kBAAX,CAA8B0B,GAA9B,CAAkChB,WAAW,iBAC3C,QAAC,WAAD;AAAwC,UAAA,WAAW,EAAEA;AAArD,WAAkBA,WAAW,CAACQ,QAA9B;AAAA;AAAA;AAAA;AAAA,gBADF,CAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eASE;AAAQ,QAAA,EAAE,EAAC,WAAX;AAAuB,QAAA,OAAO,EAAE,KAAKZ,SAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cATF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAaH;;AAzDwB;;AA4D7B,eAAeV,IAAf","sourcesContent":["import React, {Component} from 'react';\nimport './App.scss';\nimport Participant from './Participant';\n\nclass Room extends Component {\n\n    constructor(props) {\n        super(props);\n      \n        this.state = {\n          remoteParticipants: Array.from(this.props.room.participants.values())\n        }\n      \n        this.leaveRoom = this.leaveRoom.bind(this);\n    }\n    componentDidMount() {\n        // Add event listeners for future remote participants coming or going\n        this.props.room.on('participantConnected', participant => this.addParticipant(participant));\n        this.props.room.on('participantDisconnected', participant => this.removeParticipant(participant));\n        \n        window.addEventListener(\"beforeunload\", this.leaveRoom);\n    }\n    componentWillUnmount() {\n        this.leaveRoom();\n    }\n\n    addParticipant(participant) {\n        console.log(`${participant.identity} has joined the room.`);\n        \n        this.setState({\n          remoteParticipants: [...this.state.remoteParticipants, participant]\n        });\n    }\n    \n    removeParticipant(participant) {\n        console.log(`${participant.identity} has left the room`);\n    \n        this.setState({\n          remoteParticipants: this.state.remoteParticipants.filter(p => p.identity !== participant.identity)\n        });\n    }\n\n    leaveRoom() {\n        this.props.room.disconnect();\n        this.props.returnToLobby();\n    }\n    \n    render() {\n        return (\n          <div className=\"room\">\n            <div className = \"participants\">\n              <Participant key={this.props.room.localParticipant.identity} localParticipant=\"true\" participant={this.props.room.localParticipant}/>\n              {\n                this.state.remoteParticipants.map(participant => \n                  <Participant key={participant.identity} participant={participant}/>\n                )\n              }\n            </div>\n            <button id=\"leaveRoom\" onClick={this.leaveRoom}>Leave Room</button>\n          </div>\n        );\n    }\n}\n\nexport default Room;\n"]},"metadata":{},"sourceType":"module"}