{"ast":null,"code":"'use strict';\n\nvar builder = require('xmlbuilder');\n/* jshint ignore:line */\n\n/* jshint ignore:start */\n\n/**\n * Parent TwiML object\n */\n\n/* jshint ignore:end */\n\n\nfunction TwiML() {\n  this.response = builder.create('Response', {\n    stringify: {\n      attValue: function (value) {\n        if (Array.isArray(value)) {\n          value = value.join(' ');\n        }\n\n        return this.attEscape('' + value || '');\n      }\n    }\n  }).dec('1.0', 'UTF-8');\n}\n/* jshint ignore:start */\n\n/**\n * Because child elements have properties named after their class names, we need\n * to translate that when we want to access that at the parent prototype level.\n * So this will translate something like Say to 'say' and VoiceResponse to\n * 'response'.\n */\n\n/* jshint ignore:end */\n\n\nTwiML.prototype._getXml = function _getPropertyName() {\n  return this[this._propertyName];\n};\n/* jshint ignore:start */\n\n/**\n * Convert to TwiML\n *\n * @returns TwiML XML\n */\n\n/* jshint ignore:end */\n\n\nTwiML.prototype.toString = function toString() {\n  return this._getXml().end();\n};\n/* jshint ignore:start */\n\n/**\n * Add text under the TwiML node\n *\n * @param {string} content\n */\n\n/* jshint ignore:end */\n\n\nTwiML.prototype.addText = function addText(content) {\n  this._getXml().txt(content);\n};\n/* jshint ignore:start */\n\n/**\n * Add an arbitrary tag as a child.\n *\n * @param {string} content\n */\n\n/* jshint ignore:end */\n\n\nTwiML.prototype.addChild = function addChild(tagName, attributes) {\n  return new GenericNode(this._getXml().ele(tagName, attributes));\n};\n/* jshint ignore:start */\n\n/**\n * Generic node\n */\n\n/* jshint ignore:end */\n\n\nfunction GenericNode(node) {\n  // must match variable name for _getPropertyName\n  this.node = node;\n  this._propertyName = 'node';\n} // \"Inherit\" from TwiML\n\n\nGenericNode.prototype = Object.create(TwiML.prototype);\nGenericNode.prototype.constructor = GenericNode;\nmodule.exports = TwiML;","map":{"version":3,"sources":["/Users/tony_niu/Visual Studio/Twilio/twilio-video-starter-kit/node_modules/twilio/lib/twiml/TwiML.js"],"names":["builder","require","TwiML","response","create","stringify","attValue","value","Array","isArray","join","attEscape","dec","prototype","_getXml","_getPropertyName","_propertyName","toString","end","addText","content","txt","addChild","tagName","attributes","GenericNode","ele","node","Object","constructor","module","exports"],"mappings":"AAAA;;AAEA,IAAIA,OAAO,GAAGC,OAAO,CAAC,YAAD,CAArB;AAAsC;;AAEtC;;AACA;AACA;AACA;;AACA;;;AACA,SAASC,KAAT,GAAiB;AACf,OAAKC,QAAL,GAAgBH,OAAO,CAACI,MAAR,CAAe,UAAf,EAA2B;AACzCC,IAAAA,SAAS,EAAE;AACTC,MAAAA,QAAQ,EAAE,UAAUC,KAAV,EAAiB;AACzB,YAAIC,KAAK,CAACC,OAAN,CAAcF,KAAd,CAAJ,EAA0B;AACxBA,UAAAA,KAAK,GAAGA,KAAK,CAACG,IAAN,CAAW,GAAX,CAAR;AACD;;AACD,eAAO,KAAKC,SAAL,CAAe,KAAKJ,KAAL,IAAc,EAA7B,CAAP;AACD;AANQ;AAD8B,GAA3B,EASbK,GATa,CAST,KATS,EASF,OATE,CAAhB;AAUD;AAED;;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACAV,KAAK,CAACW,SAAN,CAAgBC,OAAhB,GAA0B,SAASC,gBAAT,GAA4B;AACpD,SAAO,KAAK,KAAKC,aAAV,CAAP;AACD,CAFD;AAIA;;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACAd,KAAK,CAACW,SAAN,CAAgBI,QAAhB,GAA2B,SAASA,QAAT,GAAoB;AAC7C,SAAO,KAAKH,OAAL,GAAeI,GAAf,EAAP;AACD,CAFD;AAIA;;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACAhB,KAAK,CAACW,SAAN,CAAgBM,OAAhB,GAA0B,SAASA,OAAT,CAAiBC,OAAjB,EAA0B;AAClD,OAAKN,OAAL,GAAeO,GAAf,CAAmBD,OAAnB;AACD,CAFD;AAIA;;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACAlB,KAAK,CAACW,SAAN,CAAgBS,QAAhB,GAA2B,SAASA,QAAT,CAAkBC,OAAlB,EAA2BC,UAA3B,EAAuC;AAChE,SAAO,IAAIC,WAAJ,CAAgB,KAAKX,OAAL,GAAeY,GAAf,CAAmBH,OAAnB,EAA4BC,UAA5B,CAAhB,CAAP;AACD,CAFD;AAIA;;AACA;AACA;AACA;;AACA;;;AACA,SAASC,WAAT,CAAqBE,IAArB,EAA2B;AACzB;AACA,OAAKA,IAAL,GAAYA,IAAZ;AACA,OAAKX,aAAL,GAAqB,MAArB;AACD,C,CAED;;;AACAS,WAAW,CAACZ,SAAZ,GAAwBe,MAAM,CAACxB,MAAP,CAAcF,KAAK,CAACW,SAApB,CAAxB;AACAY,WAAW,CAACZ,SAAZ,CAAsBgB,WAAtB,GAAoCJ,WAApC;AAEAK,MAAM,CAACC,OAAP,GAAiB7B,KAAjB","sourcesContent":["'use strict';\n\nvar builder = require('xmlbuilder');  /* jshint ignore:line */\n\n/* jshint ignore:start */\n/**\n * Parent TwiML object\n */\n/* jshint ignore:end */\nfunction TwiML() {\n  this.response = builder.create('Response', {\n    stringify: {\n      attValue: function (value) {\n        if (Array.isArray(value)) {\n          value = value.join(' ');\n        }\n        return this.attEscape('' + value || '');\n      }\n    }\n  }).dec('1.0', 'UTF-8');\n}\n\n/* jshint ignore:start */\n/**\n * Because child elements have properties named after their class names, we need\n * to translate that when we want to access that at the parent prototype level.\n * So this will translate something like Say to 'say' and VoiceResponse to\n * 'response'.\n */\n/* jshint ignore:end */\nTwiML.prototype._getXml = function _getPropertyName() {\n  return this[this._propertyName];\n}\n\n/* jshint ignore:start */\n/**\n * Convert to TwiML\n *\n * @returns TwiML XML\n */\n/* jshint ignore:end */\nTwiML.prototype.toString = function toString() {\n  return this._getXml().end();\n}\n\n/* jshint ignore:start */\n/**\n * Add text under the TwiML node\n *\n * @param {string} content\n */\n/* jshint ignore:end */\nTwiML.prototype.addText = function addText(content) {\n  this._getXml().txt(content);\n}\n\n/* jshint ignore:start */\n/**\n * Add an arbitrary tag as a child.\n *\n * @param {string} content\n */\n/* jshint ignore:end */\nTwiML.prototype.addChild = function addChild(tagName, attributes) {\n  return new GenericNode(this._getXml().ele(tagName, attributes));\n}\n\n/* jshint ignore:start */\n/**\n * Generic node\n */\n/* jshint ignore:end */\nfunction GenericNode(node) {\n  // must match variable name for _getPropertyName\n  this.node = node;\n  this._propertyName = 'node';\n}\n\n// \"Inherit\" from TwiML\nGenericNode.prototype = Object.create(TwiML.prototype);\nGenericNode.prototype.constructor = GenericNode;\n\nmodule.exports = TwiML;\n"]},"metadata":{},"sourceType":"script"}