{"ast":null,"code":"'use strict';\n/* jshint ignore:start */\n\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n\n/* jshint ignore:end */\n\nvar Q = require('q');\n/* jshint ignore:line */\n\n\nvar _ = require('lodash');\n/* jshint ignore:line */\n\n\nvar util = require('util');\n/* jshint ignore:line */\n\n\nvar FaxMediaList = require('./fax/faxMedia').FaxMediaList;\n\nvar Page = require('../../../base/Page');\n/* jshint ignore:line */\n\n\nvar deserialize = require('../../../base/deserialize');\n/* jshint ignore:line */\n\n\nvar serialize = require('../../../base/serialize');\n/* jshint ignore:line */\n\n\nvar values = require('../../../base/values');\n/* jshint ignore:line */\n\n\nvar FaxList;\nvar FaxPage;\nvar FaxInstance;\nvar FaxContext;\n/* jshint ignore:start */\n\n/**\n * Initialize the FaxList\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Fax.V1.FaxList\n *\n * @param {Twilio.Fax.V1} version - Version of the resource\n */\n\n/* jshint ignore:end */\n\nFaxList = function FaxList(version) {\n  /* jshint ignore:start */\n\n  /**\n   * @function faxes\n   * @memberof Twilio.Fax.V1#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Fax.V1.FaxContext}\n   */\n\n  /* jshint ignore:end */\n  function FaxListInstance(sid) {\n    return FaxListInstance.get(sid);\n  }\n\n  FaxListInstance._version = version; // Path Solution\n\n  FaxListInstance._solution = {};\n  FaxListInstance._uri = `/Faxes`;\n  /* jshint ignore:start */\n\n  /**\n   * Streams FaxInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Fax.V1.FaxList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.from] -\n   *          Retrieve only those faxes sent from this phone number\n   * @param {string} [opts.to] - Retrieve only those faxes sent to this phone number\n   * @param {Date} [opts.dateCreatedOnOrBefore] -\n   *          Retrieve only faxes created on or before this date\n   * @param {Date} [opts.dateCreatedAfter] -\n   *          Retrieve only faxes created after this date\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n\n  /* jshint ignore:end */\n\n  FaxListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Lists FaxInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Fax.V1.FaxList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.from] -\n   *          Retrieve only those faxes sent from this phone number\n   * @param {string} [opts.to] - Retrieve only those faxes sent to this phone number\n   * @param {Date} [opts.dateCreatedOnOrBefore] -\n   *          Retrieve only faxes created on or before this date\n   * @param {Date} [opts.dateCreatedAfter] -\n   *          Retrieve only faxes created after this date\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  FaxListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single page of FaxInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Fax.V1.FaxList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.from] -\n   *          Retrieve only those faxes sent from this phone number\n   * @param {string} [opts.to] - Retrieve only those faxes sent to this phone number\n   * @param {Date} [opts.dateCreatedOnOrBefore] -\n   *          Retrieve only faxes created on or before this date\n   * @param {Date} [opts.dateCreatedAfter] -\n   *          Retrieve only faxes created after this date\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  FaxListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'From': _.get(opts, 'from'),\n      'To': _.get(opts, 'to'),\n      'DateCreatedOnOrBefore': serialize.iso8601DateTime(_.get(opts, 'dateCreatedOnOrBefore')),\n      'DateCreatedAfter': serialize.iso8601DateTime(_.get(opts, 'dateCreatedAfter')),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new FaxPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single target page of FaxInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Fax.V1.FaxList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  FaxListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new FaxPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * create a FaxInstance\n   *\n   * @function create\n   * @memberof Twilio.Fax.V1.FaxList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.to - The phone number to receive the fax\n   * @param {string} opts.mediaUrl - The URL of the PDF that contains the fax\n   * @param {fax.quality} [opts.quality] - The quality of this fax\n   * @param {string} [opts.statusCallback] -\n   *          The URL we should call to send status information to your application\n   * @param {string} [opts.from] - The number the fax was sent from\n   * @param {string} [opts.sipAuthUsername] - The username for SIP authentication\n   * @param {string} [opts.sipAuthPassword] - The password for SIP authentication\n   * @param {boolean} [opts.storeMedia] - Whether to store a copy of the sent media\n   * @param {number} [opts.ttl] - How long in minutes to try to send the fax\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed FaxInstance\n   */\n\n  /* jshint ignore:end */\n\n\n  FaxListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n\n    if (_.isUndefined(opts.to)) {\n      throw new Error('Required parameter \"opts.to\" missing.');\n    }\n\n    if (_.isUndefined(opts.mediaUrl)) {\n      throw new Error('Required parameter \"opts.mediaUrl\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'To': _.get(opts, 'to'),\n      'MediaUrl': _.get(opts, 'mediaUrl'),\n      'Quality': _.get(opts, 'quality'),\n      'StatusCallback': _.get(opts, 'statusCallback'),\n      'From': _.get(opts, 'from'),\n      'SipAuthUsername': _.get(opts, 'sipAuthUsername'),\n      'SipAuthPassword': _.get(opts, 'sipAuthPassword'),\n      'StoreMedia': serialize.bool(_.get(opts, 'storeMedia')),\n      'Ttl': _.get(opts, 'ttl')\n    });\n\n    var promise = this._version.create({\n      uri: this._uri,\n      method: 'POST',\n      data: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new FaxInstance(this._version, payload, this._solution.sid));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Constructs a fax\n   *\n   * @function get\n   * @memberof Twilio.Fax.V1.FaxList#\n   *\n   * @param {string} sid - The unique string that identifies the resource\n   *\n   * @returns {Twilio.Fax.V1.FaxContext}\n   */\n\n  /* jshint ignore:end */\n\n\n  FaxListInstance.get = function get(sid) {\n    return new FaxContext(this._version, sid);\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Fax.V1.FaxList#\n   *\n   * @returns Object\n   */\n\n  /* jshint ignore:end */\n\n\n  FaxListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  FaxListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return FaxListInstance;\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the FaxPage\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Fax.V1.FaxPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {FaxSolution} solution - Path solution\n *\n * @returns FaxPage\n */\n\n/* jshint ignore:end */\n\n\nFaxPage = function FaxPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(FaxPage.prototype, Page.prototype);\n\nFaxPage.prototype.constructor = FaxPage;\n/* jshint ignore:start */\n\n/**\n * Build an instance of FaxInstance\n *\n * @function getInstance\n * @memberof Twilio.Fax.V1.FaxPage#\n *\n * @param {FaxPayload} payload - Payload response from the API\n *\n * @returns FaxInstance\n */\n\n/* jshint ignore:end */\n\nFaxPage.prototype.getInstance = function getInstance(payload) {\n  return new FaxInstance(this._version, payload);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Fax.V1.FaxPage#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nFaxPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nFaxPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the FaxContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Fax.V1.FaxInstance\n *\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {string} from - The number the fax was sent from\n * @property {string} to - The phone number that received the fax\n * @property {fax.quality} quality - The quality of the fax\n * @property {string} mediaSid -\n *          The SID of the FaxMedia resource that is associated with the Fax\n * @property {string} mediaUrl -\n *          The Twilio-hosted URL that can be used to download fax media\n * @property {number} numPages - The number of pages contained in the fax document\n * @property {number} duration - The time it took to transmit the fax\n * @property {fax.status} status - The status of the fax\n * @property {fax.direction} direction - The direction of the fax\n * @property {string} apiVersion - The API version used to transmit the fax\n * @property {number} price - The fax transmission price\n * @property {string} priceUnit - The ISO 4217 currency used for billing\n * @property {Date} dateCreated -\n *          The ISO 8601 formatted date and time in GMT when the resource was created\n * @property {Date} dateUpdated -\n *          The ISO 8601 formatted date and time in GMT when the resource was last updated\n * @property {string} links - The URLs of the fax's related resources\n * @property {string} url - The absolute URL of the fax resource\n *\n * @param {V1} version - Version of the resource\n * @param {FaxPayload} payload - The instance payload\n * @param {sid} sid - The unique string that identifies the resource\n */\n\n/* jshint ignore:end */\n\n\nFaxInstance = function FaxInstance(version, payload, sid) {\n  this._version = version; // Marshaled Properties\n\n  this.sid = payload.sid; // jshint ignore:line\n\n  this.accountSid = payload.account_sid; // jshint ignore:line\n\n  this.from = payload.from; // jshint ignore:line\n\n  this.to = payload.to; // jshint ignore:line\n\n  this.quality = payload.quality; // jshint ignore:line\n\n  this.mediaSid = payload.media_sid; // jshint ignore:line\n\n  this.mediaUrl = payload.media_url; // jshint ignore:line\n\n  this.numPages = deserialize.integer(payload.num_pages); // jshint ignore:line\n\n  this.duration = deserialize.integer(payload.duration); // jshint ignore:line\n\n  this.status = payload.status; // jshint ignore:line\n\n  this.direction = payload.direction; // jshint ignore:line\n\n  this.apiVersion = payload.api_version; // jshint ignore:line\n\n  this.price = deserialize.decimal(payload.price); // jshint ignore:line\n\n  this.priceUnit = payload.price_unit; // jshint ignore:line\n\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n\n  this.links = payload.links; // jshint ignore:line\n\n  this.url = payload.url; // jshint ignore:line\n  // Context\n\n  this._context = undefined;\n  this._solution = {\n    sid: sid || this.sid\n  };\n};\n\nObject.defineProperty(FaxInstance.prototype, '_proxy', {\n  get: function () {\n    if (!this._context) {\n      this._context = new FaxContext(this._version, this._solution.sid);\n    }\n\n    return this._context;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * fetch a FaxInstance\n *\n * @function fetch\n * @memberof Twilio.Fax.V1.FaxInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed FaxInstance\n */\n\n/* jshint ignore:end */\n\nFaxInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n/* jshint ignore:start */\n\n/**\n * update a FaxInstance\n *\n * @function update\n * @memberof Twilio.Fax.V1.FaxInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {fax.update_status} [opts.status] - The new status of the resource\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed FaxInstance\n */\n\n/* jshint ignore:end */\n\n\nFaxInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n/* jshint ignore:start */\n\n/**\n * remove a FaxInstance\n *\n * @function remove\n * @memberof Twilio.Fax.V1.FaxInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed FaxInstance\n */\n\n/* jshint ignore:end */\n\n\nFaxInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n/* jshint ignore:start */\n\n/**\n * Access the media\n *\n * @function media\n * @memberof Twilio.Fax.V1.FaxInstance#\n *\n * @returns {Twilio.Fax.V1.FaxContext.FaxMediaList}\n */\n\n/* jshint ignore:end */\n\n\nFaxInstance.prototype.media = function media() {\n  return this._proxy.media;\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Fax.V1.FaxInstance#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nFaxInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nFaxInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the FaxContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Fax.V1.FaxContext\n *\n * @property {Twilio.Fax.V1.FaxContext.FaxMediaList} media - media resource\n *\n * @param {V1} version - Version of the resource\n * @param {sid} sid - The unique string that identifies the resource\n */\n\n/* jshint ignore:end */\n\n\nFaxContext = function FaxContext(version, sid) {\n  this._version = version; // Path Solution\n\n  this._solution = {\n    sid: sid\n  };\n  this._uri = `/Faxes/${sid}`; // Dependents\n\n  this._media = undefined;\n};\n/* jshint ignore:start */\n\n/**\n * fetch a FaxInstance\n *\n * @function fetch\n * @memberof Twilio.Fax.V1.FaxContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed FaxInstance\n */\n\n/* jshint ignore:end */\n\n\nFaxContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new FaxInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * update a FaxInstance\n *\n * @function update\n * @memberof Twilio.Fax.V1.FaxContext#\n *\n * @param {object} [opts] - Options for request\n * @param {fax.update_status} [opts.status] - The new status of the resource\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed FaxInstance\n */\n\n/* jshint ignore:end */\n\n\nFaxContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n\n  opts = opts || {};\n  var deferred = Q.defer();\n  var data = values.of({\n    'Status': _.get(opts, 'status')\n  });\n\n  var promise = this._version.update({\n    uri: this._uri,\n    method: 'POST',\n    data: data\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new FaxInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * remove a FaxInstance\n *\n * @function remove\n * @memberof Twilio.Fax.V1.FaxContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed FaxInstance\n */\n\n/* jshint ignore:end */\n\n\nFaxContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.remove({\n    uri: this._uri,\n    method: 'DELETE'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\nObject.defineProperty(FaxContext.prototype, 'media', {\n  get: function () {\n    if (!this._media) {\n      this._media = new FaxMediaList(this._version, this._solution.sid);\n    }\n\n    return this._media;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Fax.V1.FaxContext#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\nFaxContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nFaxContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  FaxList: FaxList,\n  FaxPage: FaxPage,\n  FaxInstance: FaxInstance,\n  FaxContext: FaxContext\n};","map":{"version":3,"sources":["/Users/tony_niu/Visual Studio/Twilio/twilio-video-starter-kit/src/token-service/node_modules/twilio/lib/rest/fax/v1/fax.js"],"names":["Q","require","_","util","FaxMediaList","Page","deserialize","serialize","values","FaxList","FaxPage","FaxInstance","FaxContext","version","FaxListInstance","sid","get","_version","_solution","_uri","each","opts","callback","isFunction","isUndefined","Error","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","error","fetchNextPage","fn","promise","then","page","instances","instance","bind","nextPage","catch","merge","list","deferred","defer","allResources","resource","push","length","resolve","reject","nodeify","data","of","iso8601DateTime","pageToken","pageNumber","uri","method","params","payload","getPage","targetUrl","_domain","twilio","request","create","to","mediaUrl","bool","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","accountSid","account_sid","from","quality","mediaSid","media_sid","media_url","numPages","integer","num_pages","duration","status","direction","apiVersion","api_version","price","decimal","priceUnit","price_unit","dateCreated","date_created","dateUpdated","date_updated","links","url","_context","undefined","Object","defineProperty","fetch","_proxy","update","remove","media","_media","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar FaxMediaList = require('./fax/faxMedia').FaxMediaList;\nvar Page = require('../../../base/Page');  /* jshint ignore:line */\nvar deserialize = require(\n    '../../../base/deserialize');  /* jshint ignore:line */\nvar serialize = require('../../../base/serialize');  /* jshint ignore:line */\nvar values = require('../../../base/values');  /* jshint ignore:line */\n\nvar FaxList;\nvar FaxPage;\nvar FaxInstance;\nvar FaxContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the FaxList\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Fax.V1.FaxList\n *\n * @param {Twilio.Fax.V1} version - Version of the resource\n */\n/* jshint ignore:end */\nFaxList = function FaxList(version) {\n  /* jshint ignore:start */\n  /**\n   * @function faxes\n   * @memberof Twilio.Fax.V1#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Fax.V1.FaxContext}\n   */\n  /* jshint ignore:end */\n  function FaxListInstance(sid) {\n    return FaxListInstance.get(sid);\n  }\n\n  FaxListInstance._version = version;\n  // Path Solution\n  FaxListInstance._solution = {};\n  FaxListInstance._uri = `/Faxes`;\n  /* jshint ignore:start */\n  /**\n   * Streams FaxInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Fax.V1.FaxList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.from] -\n   *          Retrieve only those faxes sent from this phone number\n   * @param {string} [opts.to] - Retrieve only those faxes sent to this phone number\n   * @param {Date} [opts.dateCreatedOnOrBefore] -\n   *          Retrieve only faxes created on or before this date\n   * @param {Date} [opts.dateCreatedAfter] -\n   *          Retrieve only faxes created after this date\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  FaxListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists FaxInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Fax.V1.FaxList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.from] -\n   *          Retrieve only those faxes sent from this phone number\n   * @param {string} [opts.to] - Retrieve only those faxes sent to this phone number\n   * @param {Date} [opts.dateCreatedOnOrBefore] -\n   *          Retrieve only faxes created on or before this date\n   * @param {Date} [opts.dateCreatedAfter] -\n   *          Retrieve only faxes created after this date\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  FaxListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of FaxInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Fax.V1.FaxList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.from] -\n   *          Retrieve only those faxes sent from this phone number\n   * @param {string} [opts.to] - Retrieve only those faxes sent to this phone number\n   * @param {Date} [opts.dateCreatedOnOrBefore] -\n   *          Retrieve only faxes created on or before this date\n   * @param {Date} [opts.dateCreatedAfter] -\n   *          Retrieve only faxes created after this date\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  FaxListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'From': _.get(opts, 'from'),\n      'To': _.get(opts, 'to'),\n      'DateCreatedOnOrBefore': serialize.iso8601DateTime(_.get(opts, 'dateCreatedOnOrBefore')),\n      'DateCreatedAfter': serialize.iso8601DateTime(_.get(opts, 'dateCreatedAfter')),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new FaxPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of FaxInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Fax.V1.FaxList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  FaxListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new FaxPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * create a FaxInstance\n   *\n   * @function create\n   * @memberof Twilio.Fax.V1.FaxList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.to - The phone number to receive the fax\n   * @param {string} opts.mediaUrl - The URL of the PDF that contains the fax\n   * @param {fax.quality} [opts.quality] - The quality of this fax\n   * @param {string} [opts.statusCallback] -\n   *          The URL we should call to send status information to your application\n   * @param {string} [opts.from] - The number the fax was sent from\n   * @param {string} [opts.sipAuthUsername] - The username for SIP authentication\n   * @param {string} [opts.sipAuthPassword] - The password for SIP authentication\n   * @param {boolean} [opts.storeMedia] - Whether to store a copy of the sent media\n   * @param {number} [opts.ttl] - How long in minutes to try to send the fax\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed FaxInstance\n   */\n  /* jshint ignore:end */\n  FaxListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n    if (_.isUndefined(opts.to)) {\n      throw new Error('Required parameter \"opts.to\" missing.');\n    }\n    if (_.isUndefined(opts.mediaUrl)) {\n      throw new Error('Required parameter \"opts.mediaUrl\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'To': _.get(opts, 'to'),\n      'MediaUrl': _.get(opts, 'mediaUrl'),\n      'Quality': _.get(opts, 'quality'),\n      'StatusCallback': _.get(opts, 'statusCallback'),\n      'From': _.get(opts, 'from'),\n      'SipAuthUsername': _.get(opts, 'sipAuthUsername'),\n      'SipAuthPassword': _.get(opts, 'sipAuthPassword'),\n      'StoreMedia': serialize.bool(_.get(opts, 'storeMedia')),\n      'Ttl': _.get(opts, 'ttl')\n    });\n\n    var promise = this._version.create({uri: this._uri, method: 'POST', data: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new FaxInstance(this._version, payload, this._solution.sid));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a fax\n   *\n   * @function get\n   * @memberof Twilio.Fax.V1.FaxList#\n   *\n   * @param {string} sid - The unique string that identifies the resource\n   *\n   * @returns {Twilio.Fax.V1.FaxContext}\n   */\n  /* jshint ignore:end */\n  FaxListInstance.get = function get(sid) {\n    return new FaxContext(this._version, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Fax.V1.FaxList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  FaxListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  FaxListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return FaxListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the FaxPage\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Fax.V1.FaxPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {FaxSolution} solution - Path solution\n *\n * @returns FaxPage\n */\n/* jshint ignore:end */\nFaxPage = function FaxPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(FaxPage.prototype, Page.prototype);\nFaxPage.prototype.constructor = FaxPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of FaxInstance\n *\n * @function getInstance\n * @memberof Twilio.Fax.V1.FaxPage#\n *\n * @param {FaxPayload} payload - Payload response from the API\n *\n * @returns FaxInstance\n */\n/* jshint ignore:end */\nFaxPage.prototype.getInstance = function getInstance(payload) {\n  return new FaxInstance(this._version, payload);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Fax.V1.FaxPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nFaxPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nFaxPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the FaxContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Fax.V1.FaxInstance\n *\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {string} from - The number the fax was sent from\n * @property {string} to - The phone number that received the fax\n * @property {fax.quality} quality - The quality of the fax\n * @property {string} mediaSid -\n *          The SID of the FaxMedia resource that is associated with the Fax\n * @property {string} mediaUrl -\n *          The Twilio-hosted URL that can be used to download fax media\n * @property {number} numPages - The number of pages contained in the fax document\n * @property {number} duration - The time it took to transmit the fax\n * @property {fax.status} status - The status of the fax\n * @property {fax.direction} direction - The direction of the fax\n * @property {string} apiVersion - The API version used to transmit the fax\n * @property {number} price - The fax transmission price\n * @property {string} priceUnit - The ISO 4217 currency used for billing\n * @property {Date} dateCreated -\n *          The ISO 8601 formatted date and time in GMT when the resource was created\n * @property {Date} dateUpdated -\n *          The ISO 8601 formatted date and time in GMT when the resource was last updated\n * @property {string} links - The URLs of the fax's related resources\n * @property {string} url - The absolute URL of the fax resource\n *\n * @param {V1} version - Version of the resource\n * @param {FaxPayload} payload - The instance payload\n * @param {sid} sid - The unique string that identifies the resource\n */\n/* jshint ignore:end */\nFaxInstance = function FaxInstance(version, payload, sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.sid = payload.sid; // jshint ignore:line\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.from = payload.from; // jshint ignore:line\n  this.to = payload.to; // jshint ignore:line\n  this.quality = payload.quality; // jshint ignore:line\n  this.mediaSid = payload.media_sid; // jshint ignore:line\n  this.mediaUrl = payload.media_url; // jshint ignore:line\n  this.numPages = deserialize.integer(payload.num_pages); // jshint ignore:line\n  this.duration = deserialize.integer(payload.duration); // jshint ignore:line\n  this.status = payload.status; // jshint ignore:line\n  this.direction = payload.direction; // jshint ignore:line\n  this.apiVersion = payload.api_version; // jshint ignore:line\n  this.price = deserialize.decimal(payload.price); // jshint ignore:line\n  this.priceUnit = payload.price_unit; // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n  this.links = payload.links; // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {sid: sid || this.sid, };\n};\n\nObject.defineProperty(FaxInstance.prototype,\n  '_proxy', {\n    get: function() {\n      if (!this._context) {\n        this._context = new FaxContext(this._version, this._solution.sid);\n      }\n\n      return this._context;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a FaxInstance\n *\n * @function fetch\n * @memberof Twilio.Fax.V1.FaxInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed FaxInstance\n */\n/* jshint ignore:end */\nFaxInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * update a FaxInstance\n *\n * @function update\n * @memberof Twilio.Fax.V1.FaxInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {fax.update_status} [opts.status] - The new status of the resource\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed FaxInstance\n */\n/* jshint ignore:end */\nFaxInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * remove a FaxInstance\n *\n * @function remove\n * @memberof Twilio.Fax.V1.FaxInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed FaxInstance\n */\n/* jshint ignore:end */\nFaxInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n\n/* jshint ignore:start */\n/**\n * Access the media\n *\n * @function media\n * @memberof Twilio.Fax.V1.FaxInstance#\n *\n * @returns {Twilio.Fax.V1.FaxContext.FaxMediaList}\n */\n/* jshint ignore:end */\nFaxInstance.prototype.media = function media() {\n  return this._proxy.media;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Fax.V1.FaxInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nFaxInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nFaxInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the FaxContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Fax.V1.FaxContext\n *\n * @property {Twilio.Fax.V1.FaxContext.FaxMediaList} media - media resource\n *\n * @param {V1} version - Version of the resource\n * @param {sid} sid - The unique string that identifies the resource\n */\n/* jshint ignore:end */\nFaxContext = function FaxContext(version, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {sid: sid, };\n  this._uri = `/Faxes/${sid}`;\n\n  // Dependents\n  this._media = undefined;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a FaxInstance\n *\n * @function fetch\n * @memberof Twilio.Fax.V1.FaxContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed FaxInstance\n */\n/* jshint ignore:end */\nFaxContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({uri: this._uri, method: 'GET'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new FaxInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * update a FaxInstance\n *\n * @function update\n * @memberof Twilio.Fax.V1.FaxContext#\n *\n * @param {object} [opts] - Options for request\n * @param {fax.update_status} [opts.status] - The new status of the resource\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed FaxInstance\n */\n/* jshint ignore:end */\nFaxContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n  opts = opts || {};\n\n  var deferred = Q.defer();\n  var data = values.of({'Status': _.get(opts, 'status')});\n\n  var promise = this._version.update({uri: this._uri, method: 'POST', data: data});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new FaxInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * remove a FaxInstance\n *\n * @function remove\n * @memberof Twilio.Fax.V1.FaxContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed FaxInstance\n */\n/* jshint ignore:end */\nFaxContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.remove({uri: this._uri, method: 'DELETE'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\nObject.defineProperty(FaxContext.prototype,\n  'media', {\n    get: function() {\n      if (!this._media) {\n        this._media = new FaxMediaList(this._version, this._solution.sid);\n      }\n      return this._media;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Fax.V1.FaxContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nFaxContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nFaxContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  FaxList: FaxList,\n  FaxPage: FaxPage,\n  FaxInstance: FaxInstance,\n  FaxContext: FaxContext\n};\n"]},"metadata":{},"sourceType":"module"}