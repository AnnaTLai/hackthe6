{"ast":null,"code":"'use strict';\n/* jshint ignore:start */\n\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n\n/* jshint ignore:end */\n\nvar Q = require('q');\n/* jshint ignore:line */\n\n\nvar _ = require('lodash');\n/* jshint ignore:line */\n\n\nvar util = require('util');\n/* jshint ignore:line */\n\n\nvar Page = require('../../../../../../base/Page');\n/* jshint ignore:line */\n\n\nvar deserialize = require('../../../../../../base/deserialize');\n/* jshint ignore:line */\n\n\nvar serialize = require('../../../../../../base/serialize');\n/* jshint ignore:line */\n\n\nvar values = require('../../../../../../base/values');\n/* jshint ignore:line */\n\n\nvar YesterdayList;\nvar YesterdayPage;\nvar YesterdayInstance;\n/* jshint ignore:start */\n\n/**\n * Initialize the YesterdayList\n *\n * @constructor Twilio.Api.V2010.AccountContext.UsageContext.RecordContext.YesterdayList\n *\n * @param {Twilio.Api.V2010} version - Version of the resource\n * @param {string} accountSid -\n *          A 34 character string that uniquely identifies this resource.\n */\n\n/* jshint ignore:end */\n\nYesterdayList = function YesterdayList(version, accountSid) {\n  /* jshint ignore:start */\n\n  /**\n   * @function yesterday\n   * @memberof Twilio.Api.V2010.AccountContext.UsageContext.RecordContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Api.V2010.AccountContext.UsageContext.RecordContext.YesterdayContext}\n   */\n\n  /* jshint ignore:end */\n  function YesterdayListInstance(sid) {\n    return YesterdayListInstance.get(sid);\n  }\n\n  YesterdayListInstance._version = version; // Path Solution\n\n  YesterdayListInstance._solution = {\n    accountSid: accountSid\n  };\n  YesterdayListInstance._uri = `/Accounts/${accountSid}/Usage/Records/Yesterday.json`;\n  /* jshint ignore:start */\n\n  /**\n   * Streams YesterdayInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Api.V2010.AccountContext.UsageContext.RecordContext.YesterdayList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {yesterday.category} [opts.category] -\n   *          The usage category of the UsageRecord resources to read\n   * @param {Date} [opts.startDate] -\n   *          Only include usage that has occurred on or after this date\n   * @param {Date} [opts.endDate] -\n   *          Only include usage that occurred on or before this date\n   * @param {boolean} [opts.includeSubaccounts] -\n   *          Whether to include usage from the master account and all its subaccounts\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n\n  /* jshint ignore:end */\n\n  YesterdayListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Lists YesterdayInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Api.V2010.AccountContext.UsageContext.RecordContext.YesterdayList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {yesterday.category} [opts.category] -\n   *          The usage category of the UsageRecord resources to read\n   * @param {Date} [opts.startDate] -\n   *          Only include usage that has occurred on or after this date\n   * @param {Date} [opts.endDate] -\n   *          Only include usage that occurred on or before this date\n   * @param {boolean} [opts.includeSubaccounts] -\n   *          Whether to include usage from the master account and all its subaccounts\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  YesterdayListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single page of YesterdayInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Api.V2010.AccountContext.UsageContext.RecordContext.YesterdayList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {yesterday.category} [opts.category] -\n   *          The usage category of the UsageRecord resources to read\n   * @param {Date} [opts.startDate] -\n   *          Only include usage that has occurred on or after this date\n   * @param {Date} [opts.endDate] -\n   *          Only include usage that occurred on or before this date\n   * @param {boolean} [opts.includeSubaccounts] -\n   *          Whether to include usage from the master account and all its subaccounts\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  YesterdayListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'Category': _.get(opts, 'category'),\n      'StartDate': serialize.iso8601Date(_.get(opts, 'startDate')),\n      'EndDate': serialize.iso8601Date(_.get(opts, 'endDate')),\n      'IncludeSubaccounts': serialize.bool(_.get(opts, 'includeSubaccounts')),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new YesterdayPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single target page of YesterdayInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Api.V2010.AccountContext.UsageContext.RecordContext.YesterdayList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  YesterdayListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new YesterdayPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Api.V2010.AccountContext.UsageContext.RecordContext.YesterdayList#\n   *\n   * @returns Object\n   */\n\n  /* jshint ignore:end */\n\n\n  YesterdayListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  YesterdayListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return YesterdayListInstance;\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the YesterdayPage\n *\n * @constructor Twilio.Api.V2010.AccountContext.UsageContext.RecordContext.YesterdayPage\n *\n * @param {V2010} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {YesterdaySolution} solution - Path solution\n *\n * @returns YesterdayPage\n */\n\n/* jshint ignore:end */\n\n\nYesterdayPage = function YesterdayPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(YesterdayPage.prototype, Page.prototype);\n\nYesterdayPage.prototype.constructor = YesterdayPage;\n/* jshint ignore:start */\n\n/**\n * Build an instance of YesterdayInstance\n *\n * @function getInstance\n * @memberof Twilio.Api.V2010.AccountContext.UsageContext.RecordContext.YesterdayPage#\n *\n * @param {YesterdayPayload} payload - Payload response from the API\n *\n * @returns YesterdayInstance\n */\n\n/* jshint ignore:end */\n\nYesterdayPage.prototype.getInstance = function getInstance(payload) {\n  return new YesterdayInstance(this._version, payload, this._solution.accountSid);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.UsageContext.RecordContext.YesterdayPage#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nYesterdayPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nYesterdayPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the YesterdayContext\n *\n * @constructor Twilio.Api.V2010.AccountContext.UsageContext.RecordContext.YesterdayInstance\n *\n * @property {string} accountSid - The SID of the Account accrued the usage\n * @property {string} apiVersion - The API version used to create the resource\n * @property {string} asOf - Usage records up to date as of this timestamp\n * @property {yesterday.category} category - The category of usage\n * @property {string} count - The number of usage events\n * @property {string} countUnit - The units in which count is measured\n * @property {string} description -\n *          A plain-language description of the usage category\n * @property {Date} endDate -\n *          The last date for which usage is included in the UsageRecord\n * @property {number} price - The total price of the usage\n * @property {string} priceUnit - The currency in which `price` is measured\n * @property {Date} startDate -\n *          The first date for which usage is included in this UsageRecord\n * @property {string} subresourceUris -\n *          A list of related resources identified by their relative URIs\n * @property {string} uri -\n *          The URI of the resource, relative to `https://api.twilio.com`\n * @property {string} usage - The amount of usage\n * @property {string} usageUnit - The units in which usage is measured\n *\n * @param {V2010} version - Version of the resource\n * @param {YesterdayPayload} payload - The instance payload\n * @param {sid} accountSid -\n *          A 34 character string that uniquely identifies this resource.\n */\n\n/* jshint ignore:end */\n\n\nYesterdayInstance = function YesterdayInstance(version, payload, accountSid) {\n  this._version = version; // Marshaled Properties\n\n  this.accountSid = payload.account_sid; // jshint ignore:line\n\n  this.apiVersion = payload.api_version; // jshint ignore:line\n\n  this.asOf = payload.as_of; // jshint ignore:line\n\n  this.category = payload.category; // jshint ignore:line\n\n  this.count = payload.count; // jshint ignore:line\n\n  this.countUnit = payload.count_unit; // jshint ignore:line\n\n  this.description = payload.description; // jshint ignore:line\n\n  this.endDate = deserialize.iso8601Date(payload.end_date); // jshint ignore:line\n\n  this.price = deserialize.decimal(payload.price); // jshint ignore:line\n\n  this.priceUnit = payload.price_unit; // jshint ignore:line\n\n  this.startDate = deserialize.iso8601Date(payload.start_date); // jshint ignore:line\n\n  this.subresourceUris = payload.subresource_uris; // jshint ignore:line\n\n  this.uri = payload.uri; // jshint ignore:line\n\n  this.usage = payload.usage; // jshint ignore:line\n\n  this.usageUnit = payload.usage_unit; // jshint ignore:line\n  // Context\n\n  this._context = undefined;\n  this._solution = {\n    accountSid: accountSid\n  };\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.UsageContext.RecordContext.YesterdayInstance#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nYesterdayInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nYesterdayInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  YesterdayList: YesterdayList,\n  YesterdayPage: YesterdayPage,\n  YesterdayInstance: YesterdayInstance\n};","map":{"version":3,"sources":["/Users/tony_niu/Visual Studio/Twilio/twilio-video-starter-kit/src/token-service/node_modules/twilio/lib/rest/api/v2010/account/usage/record/yesterday.js"],"names":["Q","require","_","util","Page","deserialize","serialize","values","YesterdayList","YesterdayPage","YesterdayInstance","version","accountSid","YesterdayListInstance","sid","get","_version","_solution","_uri","each","opts","callback","isFunction","isUndefined","Error","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","error","fetchNextPage","fn","promise","then","page","instances","instance","bind","nextPage","catch","merge","list","deferred","defer","allResources","resource","push","length","resolve","reject","nodeify","data","of","iso8601Date","bool","pageToken","pageNumber","uri","method","params","payload","getPage","targetUrl","_domain","twilio","request","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","account_sid","apiVersion","api_version","asOf","as_of","category","count","countUnit","count_unit","description","endDate","end_date","price","decimal","priceUnit","price_unit","startDate","start_date","subresourceUris","subresource_uris","usage","usageUnit","usage_unit","_context","undefined","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar Page = require('../../../../../../base/Page');  /* jshint ignore:line */\nvar deserialize = require(\n    '../../../../../../base/deserialize');  /* jshint ignore:line */\nvar serialize = require(\n    '../../../../../../base/serialize');  /* jshint ignore:line */\nvar values = require('../../../../../../base/values');  /* jshint ignore:line */\n\nvar YesterdayList;\nvar YesterdayPage;\nvar YesterdayInstance;\n\n/* jshint ignore:start */\n/**\n * Initialize the YesterdayList\n *\n * @constructor Twilio.Api.V2010.AccountContext.UsageContext.RecordContext.YesterdayList\n *\n * @param {Twilio.Api.V2010} version - Version of the resource\n * @param {string} accountSid -\n *          A 34 character string that uniquely identifies this resource.\n */\n/* jshint ignore:end */\nYesterdayList = function YesterdayList(version, accountSid) {\n  /* jshint ignore:start */\n  /**\n   * @function yesterday\n   * @memberof Twilio.Api.V2010.AccountContext.UsageContext.RecordContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Api.V2010.AccountContext.UsageContext.RecordContext.YesterdayContext}\n   */\n  /* jshint ignore:end */\n  function YesterdayListInstance(sid) {\n    return YesterdayListInstance.get(sid);\n  }\n\n  YesterdayListInstance._version = version;\n  // Path Solution\n  YesterdayListInstance._solution = {accountSid: accountSid};\n  YesterdayListInstance._uri = `/Accounts/${accountSid}/Usage/Records/Yesterday.json`;\n  /* jshint ignore:start */\n  /**\n   * Streams YesterdayInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Api.V2010.AccountContext.UsageContext.RecordContext.YesterdayList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {yesterday.category} [opts.category] -\n   *          The usage category of the UsageRecord resources to read\n   * @param {Date} [opts.startDate] -\n   *          Only include usage that has occurred on or after this date\n   * @param {Date} [opts.endDate] -\n   *          Only include usage that occurred on or before this date\n   * @param {boolean} [opts.includeSubaccounts] -\n   *          Whether to include usage from the master account and all its subaccounts\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  YesterdayListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists YesterdayInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Api.V2010.AccountContext.UsageContext.RecordContext.YesterdayList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {yesterday.category} [opts.category] -\n   *          The usage category of the UsageRecord resources to read\n   * @param {Date} [opts.startDate] -\n   *          Only include usage that has occurred on or after this date\n   * @param {Date} [opts.endDate] -\n   *          Only include usage that occurred on or before this date\n   * @param {boolean} [opts.includeSubaccounts] -\n   *          Whether to include usage from the master account and all its subaccounts\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  YesterdayListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of YesterdayInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Api.V2010.AccountContext.UsageContext.RecordContext.YesterdayList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {yesterday.category} [opts.category] -\n   *          The usage category of the UsageRecord resources to read\n   * @param {Date} [opts.startDate] -\n   *          Only include usage that has occurred on or after this date\n   * @param {Date} [opts.endDate] -\n   *          Only include usage that occurred on or before this date\n   * @param {boolean} [opts.includeSubaccounts] -\n   *          Whether to include usage from the master account and all its subaccounts\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  YesterdayListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'Category': _.get(opts, 'category'),\n      'StartDate': serialize.iso8601Date(_.get(opts, 'startDate')),\n      'EndDate': serialize.iso8601Date(_.get(opts, 'endDate')),\n      'IncludeSubaccounts': serialize.bool(_.get(opts, 'includeSubaccounts')),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new YesterdayPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of YesterdayInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Api.V2010.AccountContext.UsageContext.RecordContext.YesterdayList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  YesterdayListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new YesterdayPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Api.V2010.AccountContext.UsageContext.RecordContext.YesterdayList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  YesterdayListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  YesterdayListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return YesterdayListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the YesterdayPage\n *\n * @constructor Twilio.Api.V2010.AccountContext.UsageContext.RecordContext.YesterdayPage\n *\n * @param {V2010} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {YesterdaySolution} solution - Path solution\n *\n * @returns YesterdayPage\n */\n/* jshint ignore:end */\nYesterdayPage = function YesterdayPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(YesterdayPage.prototype, Page.prototype);\nYesterdayPage.prototype.constructor = YesterdayPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of YesterdayInstance\n *\n * @function getInstance\n * @memberof Twilio.Api.V2010.AccountContext.UsageContext.RecordContext.YesterdayPage#\n *\n * @param {YesterdayPayload} payload - Payload response from the API\n *\n * @returns YesterdayInstance\n */\n/* jshint ignore:end */\nYesterdayPage.prototype.getInstance = function getInstance(payload) {\n  return new YesterdayInstance(this._version, payload, this._solution.accountSid);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.UsageContext.RecordContext.YesterdayPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nYesterdayPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nYesterdayPage.prototype[util.inspect.custom] = function inspect(depth, options)\n    {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the YesterdayContext\n *\n * @constructor Twilio.Api.V2010.AccountContext.UsageContext.RecordContext.YesterdayInstance\n *\n * @property {string} accountSid - The SID of the Account accrued the usage\n * @property {string} apiVersion - The API version used to create the resource\n * @property {string} asOf - Usage records up to date as of this timestamp\n * @property {yesterday.category} category - The category of usage\n * @property {string} count - The number of usage events\n * @property {string} countUnit - The units in which count is measured\n * @property {string} description -\n *          A plain-language description of the usage category\n * @property {Date} endDate -\n *          The last date for which usage is included in the UsageRecord\n * @property {number} price - The total price of the usage\n * @property {string} priceUnit - The currency in which `price` is measured\n * @property {Date} startDate -\n *          The first date for which usage is included in this UsageRecord\n * @property {string} subresourceUris -\n *          A list of related resources identified by their relative URIs\n * @property {string} uri -\n *          The URI of the resource, relative to `https://api.twilio.com`\n * @property {string} usage - The amount of usage\n * @property {string} usageUnit - The units in which usage is measured\n *\n * @param {V2010} version - Version of the resource\n * @param {YesterdayPayload} payload - The instance payload\n * @param {sid} accountSid -\n *          A 34 character string that uniquely identifies this resource.\n */\n/* jshint ignore:end */\nYesterdayInstance = function YesterdayInstance(version, payload, accountSid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.apiVersion = payload.api_version; // jshint ignore:line\n  this.asOf = payload.as_of; // jshint ignore:line\n  this.category = payload.category; // jshint ignore:line\n  this.count = payload.count; // jshint ignore:line\n  this.countUnit = payload.count_unit; // jshint ignore:line\n  this.description = payload.description; // jshint ignore:line\n  this.endDate = deserialize.iso8601Date(payload.end_date); // jshint ignore:line\n  this.price = deserialize.decimal(payload.price); // jshint ignore:line\n  this.priceUnit = payload.price_unit; // jshint ignore:line\n  this.startDate = deserialize.iso8601Date(payload.start_date); // jshint ignore:line\n  this.subresourceUris = payload.subresource_uris; // jshint ignore:line\n  this.uri = payload.uri; // jshint ignore:line\n  this.usage = payload.usage; // jshint ignore:line\n  this.usageUnit = payload.usage_unit; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {accountSid: accountSid, };\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.UsageContext.RecordContext.YesterdayInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nYesterdayInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nYesterdayInstance.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  YesterdayList: YesterdayList,\n  YesterdayPage: YesterdayPage,\n  YesterdayInstance: YesterdayInstance\n};\n"]},"metadata":{},"sourceType":"module"}