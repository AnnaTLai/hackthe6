{"ast":null,"code":"'use strict';\n/* jshint ignore:start */\n\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n\n/* jshint ignore:end */\n\nvar Q = require('q');\n/* jshint ignore:line */\n\n\nvar _ = require('lodash');\n/* jshint ignore:line */\n\n\nvar util = require('util');\n/* jshint ignore:line */\n\n\nvar Page = require('../../../../base/Page');\n/* jshint ignore:line */\n\n\nvar deserialize = require('../../../../base/deserialize');\n/* jshint ignore:line */\n\n\nvar serialize = require('../../../../base/serialize');\n/* jshint ignore:line */\n\n\nvar values = require('../../../../base/values');\n/* jshint ignore:line */\n\n\nvar VerificationList;\nvar VerificationPage;\nvar VerificationInstance;\nvar VerificationContext;\n/* jshint ignore:start */\n\n/**\n * Initialize the VerificationList\n *\n * @constructor Twilio.Verify.V2.ServiceContext.VerificationList\n *\n * @param {Twilio.Verify.V2} version - Version of the resource\n * @param {string} serviceSid -\n *          The SID of the Service that the resource is associated with\n */\n\n/* jshint ignore:end */\n\nVerificationList = function VerificationList(version, serviceSid) {\n  /* jshint ignore:start */\n\n  /**\n   * @function verifications\n   * @memberof Twilio.Verify.V2.ServiceContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Verify.V2.ServiceContext.VerificationContext}\n   */\n\n  /* jshint ignore:end */\n  function VerificationListInstance(sid) {\n    return VerificationListInstance.get(sid);\n  }\n\n  VerificationListInstance._version = version; // Path Solution\n\n  VerificationListInstance._solution = {\n    serviceSid: serviceSid\n  };\n  VerificationListInstance._uri = `/Services/${serviceSid}/Verifications`;\n  /* jshint ignore:start */\n\n  /**\n   * create a VerificationInstance\n   *\n   * @function create\n   * @memberof Twilio.Verify.V2.ServiceContext.VerificationList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.to - The phone number or email to verify\n   * @param {string} opts.channel - The verification method to use\n   * @param {string} [opts.customFriendlyName] - A custom user defined friendly name\n   * @param {string} [opts.customMessage] -\n   *          The text of a custom message to use for the verification\n   * @param {string} [opts.sendDigits] -\n   *          The digits to send after a phone call is answered\n   * @param {string} [opts.locale] -\n   *          The locale to use for the verification SMS or call\n   * @param {string} [opts.customCode] - A pre-generated code\n   * @param {string} [opts.amount] -\n   *          The amount of the associated PSD2 compliant transaction.\n   * @param {string} [opts.payee] -\n   *          The payee of the associated PSD2 compliant transaction\n   * @param {object} [opts.rateLimits] -\n   *          The custom key-value pairs of Programmable Rate Limits.\n   * @param {object} [opts.channelConfiguration] -\n   *          Channel specific configuration in json format.\n   * @param {string} [opts.appHash] -\n   *          Your App Hash to be appended at the end of an SMS.\n   * @param {string} [opts.templateSid] - The SID of the custom template to be used.\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed VerificationInstance\n   */\n\n  /* jshint ignore:end */\n\n  VerificationListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n\n    if (_.isUndefined(opts.to)) {\n      throw new Error('Required parameter \"opts.to\" missing.');\n    }\n\n    if (_.isUndefined(opts.channel)) {\n      throw new Error('Required parameter \"opts.channel\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'To': _.get(opts, 'to'),\n      'Channel': _.get(opts, 'channel'),\n      'CustomFriendlyName': _.get(opts, 'customFriendlyName'),\n      'CustomMessage': _.get(opts, 'customMessage'),\n      'SendDigits': _.get(opts, 'sendDigits'),\n      'Locale': _.get(opts, 'locale'),\n      'CustomCode': _.get(opts, 'customCode'),\n      'Amount': _.get(opts, 'amount'),\n      'Payee': _.get(opts, 'payee'),\n      'RateLimits': serialize.object(_.get(opts, 'rateLimits')),\n      'ChannelConfiguration': serialize.object(_.get(opts, 'channelConfiguration')),\n      'AppHash': _.get(opts, 'appHash'),\n      'TemplateSid': _.get(opts, 'templateSid')\n    });\n\n    var promise = this._version.create({\n      uri: this._uri,\n      method: 'POST',\n      data: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new VerificationInstance(this._version, payload, this._solution.serviceSid, this._solution.sid));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Constructs a verification\n   *\n   * @function get\n   * @memberof Twilio.Verify.V2.ServiceContext.VerificationList#\n   *\n   * @param {string} sid - The unique string that identifies the resource\n   *\n   * @returns {Twilio.Verify.V2.ServiceContext.VerificationContext}\n   */\n\n  /* jshint ignore:end */\n\n\n  VerificationListInstance.get = function get(sid) {\n    return new VerificationContext(this._version, this._solution.serviceSid, sid);\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Verify.V2.ServiceContext.VerificationList#\n   *\n   * @returns Object\n   */\n\n  /* jshint ignore:end */\n\n\n  VerificationListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  VerificationListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return VerificationListInstance;\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the VerificationPage\n *\n * @constructor Twilio.Verify.V2.ServiceContext.VerificationPage\n *\n * @param {V2} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {VerificationSolution} solution - Path solution\n *\n * @returns VerificationPage\n */\n\n/* jshint ignore:end */\n\n\nVerificationPage = function VerificationPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(VerificationPage.prototype, Page.prototype);\n\nVerificationPage.prototype.constructor = VerificationPage;\n/* jshint ignore:start */\n\n/**\n * Build an instance of VerificationInstance\n *\n * @function getInstance\n * @memberof Twilio.Verify.V2.ServiceContext.VerificationPage#\n *\n * @param {VerificationPayload} payload - Payload response from the API\n *\n * @returns VerificationInstance\n */\n\n/* jshint ignore:end */\n\nVerificationPage.prototype.getInstance = function getInstance(payload) {\n  return new VerificationInstance(this._version, payload, this._solution.serviceSid);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Verify.V2.ServiceContext.VerificationPage#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nVerificationPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nVerificationPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the VerificationContext\n *\n * @constructor Twilio.Verify.V2.ServiceContext.VerificationInstance\n *\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} serviceSid -\n *          The SID of the Service that the resource is associated with\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {string} to - The phone number or email being verified\n * @property {verification.channel} channel - The verification method used.\n * @property {string} status - The status of the verification resource\n * @property {boolean} valid - Whether the verification was successful\n * @property {object} lookup - Information about the phone number being verified\n * @property {string} amount -\n *          The amount of the associated PSD2 compliant transaction.\n * @property {string} payee -\n *          The payee of the associated PSD2 compliant transaction\n * @property {object} sendCodeAttempts - An array of verification attempt objects.\n * @property {Date} dateCreated -\n *          The RFC 2822 date and time in GMT when the resource was created\n * @property {Date} dateUpdated -\n *          The RFC 2822 date and time in GMT when the resource was last updated\n * @property {string} url - The absolute URL of the Verification resource\n *\n * @param {V2} version - Version of the resource\n * @param {VerificationPayload} payload - The instance payload\n * @param {sid} serviceSid -\n *          The SID of the Service that the resource is associated with\n * @param {string} sid - The unique string that identifies the resource\n */\n\n/* jshint ignore:end */\n\n\nVerificationInstance = function VerificationInstance(version, payload, serviceSid, sid) {\n  this._version = version; // Marshaled Properties\n\n  this.sid = payload.sid; // jshint ignore:line\n\n  this.serviceSid = payload.service_sid; // jshint ignore:line\n\n  this.accountSid = payload.account_sid; // jshint ignore:line\n\n  this.to = payload.to; // jshint ignore:line\n\n  this.channel = payload.channel; // jshint ignore:line\n\n  this.status = payload.status; // jshint ignore:line\n\n  this.valid = payload.valid; // jshint ignore:line\n\n  this.lookup = payload.lookup; // jshint ignore:line\n\n  this.amount = payload.amount; // jshint ignore:line\n\n  this.payee = payload.payee; // jshint ignore:line\n\n  this.sendCodeAttempts = payload.send_code_attempts; // jshint ignore:line\n\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n\n  this.url = payload.url; // jshint ignore:line\n  // Context\n\n  this._context = undefined;\n  this._solution = {\n    serviceSid: serviceSid,\n    sid: sid || this.sid\n  };\n};\n\nObject.defineProperty(VerificationInstance.prototype, '_proxy', {\n  get: function () {\n    if (!this._context) {\n      this._context = new VerificationContext(this._version, this._solution.serviceSid, this._solution.sid);\n    }\n\n    return this._context;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * update a VerificationInstance\n *\n * @function update\n * @memberof Twilio.Verify.V2.ServiceContext.VerificationInstance#\n *\n * @param {object} opts - Options for request\n * @param {verification.status} opts.status - The new status of the resource\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed VerificationInstance\n */\n\n/* jshint ignore:end */\n\nVerificationInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n/* jshint ignore:start */\n\n/**\n * fetch a VerificationInstance\n *\n * @function fetch\n * @memberof Twilio.Verify.V2.ServiceContext.VerificationInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed VerificationInstance\n */\n\n/* jshint ignore:end */\n\n\nVerificationInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Verify.V2.ServiceContext.VerificationInstance#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nVerificationInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nVerificationInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the VerificationContext\n *\n * @constructor Twilio.Verify.V2.ServiceContext.VerificationContext\n *\n * @param {V2} version - Version of the resource\n * @param {sid} serviceSid -\n *          The SID of the verification Service to fetch the resource from\n * @param {string} sid - The unique string that identifies the resource\n */\n\n/* jshint ignore:end */\n\n\nVerificationContext = function VerificationContext(version, serviceSid, sid) {\n  this._version = version; // Path Solution\n\n  this._solution = {\n    serviceSid: serviceSid,\n    sid: sid\n  };\n  this._uri = `/Services/${serviceSid}/Verifications/${sid}`;\n};\n/* jshint ignore:start */\n\n/**\n * update a VerificationInstance\n *\n * @function update\n * @memberof Twilio.Verify.V2.ServiceContext.VerificationContext#\n *\n * @param {object} opts - Options for request\n * @param {verification.status} opts.status - The new status of the resource\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed VerificationInstance\n */\n\n/* jshint ignore:end */\n\n\nVerificationContext.prototype.update = function update(opts, callback) {\n  if (_.isUndefined(opts)) {\n    throw new Error('Required parameter \"opts\" missing.');\n  }\n\n  if (_.isUndefined(opts.status)) {\n    throw new Error('Required parameter \"opts.status\" missing.');\n  }\n\n  var deferred = Q.defer();\n  var data = values.of({\n    'Status': _.get(opts, 'status')\n  });\n\n  var promise = this._version.update({\n    uri: this._uri,\n    method: 'POST',\n    data: data\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new VerificationInstance(this._version, payload, this._solution.serviceSid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * fetch a VerificationInstance\n *\n * @function fetch\n * @memberof Twilio.Verify.V2.ServiceContext.VerificationContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed VerificationInstance\n */\n\n/* jshint ignore:end */\n\n\nVerificationContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new VerificationInstance(this._version, payload, this._solution.serviceSid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Verify.V2.ServiceContext.VerificationContext#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nVerificationContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nVerificationContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  VerificationList: VerificationList,\n  VerificationPage: VerificationPage,\n  VerificationInstance: VerificationInstance,\n  VerificationContext: VerificationContext\n};","map":{"version":3,"sources":["/Users/tony_niu/Visual Studio/Twilio/twilio-video-starter-kit/src/token-service/node_modules/twilio/lib/rest/verify/v2/service/verification.js"],"names":["Q","require","_","util","Page","deserialize","serialize","values","VerificationList","VerificationPage","VerificationInstance","VerificationContext","version","serviceSid","VerificationListInstance","sid","get","_version","_solution","_uri","create","opts","callback","isUndefined","Error","to","channel","deferred","defer","data","of","object","promise","uri","method","then","payload","resolve","bind","catch","error","reject","isFunction","nodeify","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","service_sid","accountSid","account_sid","status","valid","lookup","amount","payee","sendCodeAttempts","send_code_attempts","dateCreated","iso8601DateTime","date_created","dateUpdated","date_updated","url","_context","undefined","Object","defineProperty","update","_proxy","fetch","module","exports"],"mappings":"AAAA;AAEA;;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;AAEA,IAAIA,CAAC,GAAGC,OAAO,CAAC,GAAD,CAAf;AAAuB;;;AACvB,IAAIC,CAAC,GAAGD,OAAO,CAAC,QAAD,CAAf;AAA4B;;;AAC5B,IAAIE,IAAI,GAAGF,OAAO,CAAC,MAAD,CAAlB;AAA6B;;;AAC7B,IAAIG,IAAI,GAAGH,OAAO,CAAC,uBAAD,CAAlB;AAA8C;;;AAC9C,IAAII,WAAW,GAAGJ,OAAO,CACrB,8BADqB,CAAzB;AACsC;;;AACtC,IAAIK,SAAS,GAAGL,OAAO,CAAC,4BAAD,CAAvB;AAAwD;;;AACxD,IAAIM,MAAM,GAAGN,OAAO,CAAC,yBAAD,CAApB;AAAkD;;;AAElD,IAAIO,gBAAJ;AACA,IAAIC,gBAAJ;AACA,IAAIC,oBAAJ;AACA,IAAIC,mBAAJ;AAEA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;AACAH,gBAAgB,GAAG,SAASA,gBAAT,CAA0BI,OAA1B,EAAmCC,UAAnC,EAA+C;AAChE;;AACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;AACE;AACA,WAASC,wBAAT,CAAkCC,GAAlC,EAAuC;AACrC,WAAOD,wBAAwB,CAACE,GAAzB,CAA6BD,GAA7B,CAAP;AACD;;AAEDD,EAAAA,wBAAwB,CAACG,QAAzB,GAAoCL,OAApC,CAfgE,CAgBhE;;AACAE,EAAAA,wBAAwB,CAACI,SAAzB,GAAqC;AAACL,IAAAA,UAAU,EAAEA;AAAb,GAArC;AACAC,EAAAA,wBAAwB,CAACK,IAAzB,GAAiC,aAAYN,UAAW,gBAAxD;AACA;;AACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE;;AACAC,EAAAA,wBAAwB,CAACM,MAAzB,GAAkC,SAASA,MAAT,CAAgBC,IAAhB,EAAsBC,QAAtB,EAAgC;AAChE,QAAIpB,CAAC,CAACqB,WAAF,CAAcF,IAAd,CAAJ,EAAyB;AACvB,YAAM,IAAIG,KAAJ,CAAU,oCAAV,CAAN;AACD;;AACD,QAAItB,CAAC,CAACqB,WAAF,CAAcF,IAAI,CAACI,EAAnB,CAAJ,EAA4B;AAC1B,YAAM,IAAID,KAAJ,CAAU,uCAAV,CAAN;AACD;;AACD,QAAItB,CAAC,CAACqB,WAAF,CAAcF,IAAI,CAACK,OAAnB,CAAJ,EAAiC;AAC/B,YAAM,IAAIF,KAAJ,CAAU,4CAAV,CAAN;AACD;;AAED,QAAIG,QAAQ,GAAG3B,CAAC,CAAC4B,KAAF,EAAf;AACA,QAAIC,IAAI,GAAGtB,MAAM,CAACuB,EAAP,CAAU;AACnB,YAAM5B,CAAC,CAACc,GAAF,CAAMK,IAAN,EAAY,IAAZ,CADa;AAEnB,iBAAWnB,CAAC,CAACc,GAAF,CAAMK,IAAN,EAAY,SAAZ,CAFQ;AAGnB,4BAAsBnB,CAAC,CAACc,GAAF,CAAMK,IAAN,EAAY,oBAAZ,CAHH;AAInB,uBAAiBnB,CAAC,CAACc,GAAF,CAAMK,IAAN,EAAY,eAAZ,CAJE;AAKnB,oBAAcnB,CAAC,CAACc,GAAF,CAAMK,IAAN,EAAY,YAAZ,CALK;AAMnB,gBAAUnB,CAAC,CAACc,GAAF,CAAMK,IAAN,EAAY,QAAZ,CANS;AAOnB,oBAAcnB,CAAC,CAACc,GAAF,CAAMK,IAAN,EAAY,YAAZ,CAPK;AAQnB,gBAAUnB,CAAC,CAACc,GAAF,CAAMK,IAAN,EAAY,QAAZ,CARS;AASnB,eAASnB,CAAC,CAACc,GAAF,CAAMK,IAAN,EAAY,OAAZ,CATU;AAUnB,oBAAcf,SAAS,CAACyB,MAAV,CAAiB7B,CAAC,CAACc,GAAF,CAAMK,IAAN,EAAY,YAAZ,CAAjB,CAVK;AAWnB,8BAAwBf,SAAS,CAACyB,MAAV,CAAiB7B,CAAC,CAACc,GAAF,CAAMK,IAAN,EAAY,sBAAZ,CAAjB,CAXL;AAYnB,iBAAWnB,CAAC,CAACc,GAAF,CAAMK,IAAN,EAAY,SAAZ,CAZQ;AAanB,qBAAenB,CAAC,CAACc,GAAF,CAAMK,IAAN,EAAY,aAAZ;AAbI,KAAV,CAAX;;AAgBA,QAAIW,OAAO,GAAG,KAAKf,QAAL,CAAcG,MAAd,CAAqB;AAACa,MAAAA,GAAG,EAAE,KAAKd,IAAX;AAAiBe,MAAAA,MAAM,EAAE,MAAzB;AAAiCL,MAAAA,IAAI,EAAEA;AAAvC,KAArB,CAAd;;AAEAG,IAAAA,OAAO,GAAGA,OAAO,CAACG,IAAR,CAAa,UAASC,OAAT,EAAkB;AACvCT,MAAAA,QAAQ,CAACU,OAAT,CAAiB,IAAI3B,oBAAJ,CACf,KAAKO,QADU,EAEfmB,OAFe,EAGf,KAAKlB,SAAL,CAAeL,UAHA,EAIf,KAAKK,SAAL,CAAeH,GAJA,CAAjB;AAMD,KAPsB,CAOrBuB,IAPqB,CAOhB,IAPgB,CAAb,CAAV;AASAN,IAAAA,OAAO,CAACO,KAAR,CAAc,UAASC,KAAT,EAAgB;AAC5Bb,MAAAA,QAAQ,CAACc,MAAT,CAAgBD,KAAhB;AACD,KAFD;;AAIA,QAAItC,CAAC,CAACwC,UAAF,CAAapB,QAAb,CAAJ,EAA4B;AAC1BK,MAAAA,QAAQ,CAACK,OAAT,CAAiBW,OAAjB,CAAyBrB,QAAzB;AACD;;AAED,WAAOK,QAAQ,CAACK,OAAhB;AACD,GAhDD;AAkDA;;AACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE;;;AACAlB,EAAAA,wBAAwB,CAACE,GAAzB,GAA+B,SAASA,GAAT,CAAaD,GAAb,EAAkB;AAC/C,WAAO,IAAIJ,mBAAJ,CAAwB,KAAKM,QAA7B,EAAuC,KAAKC,SAAL,CAAeL,UAAtD,EAAkEE,GAAlE,CAAP;AACD,GAFD;AAIA;;AACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;AACE;;;AACAD,EAAAA,wBAAwB,CAAC8B,MAAzB,GAAkC,SAASA,MAAT,GAAkB;AAClD,WAAO,KAAK1B,SAAZ;AACD,GAFD;;AAIAJ,EAAAA,wBAAwB,CAACX,IAAI,CAAC0C,OAAL,CAAaC,MAAd,CAAxB,GAAgD,SAASD,OAAT,CAAiBE,KAAjB,EAAwBC,OAAxB,EAC5C;AACF,WAAO7C,IAAI,CAAC0C,OAAL,CAAa,KAAKD,MAAL,EAAb,EAA4BI,OAA5B,CAAP;AACD,GAHD;;AAKA,SAAOlC,wBAAP;AACD,CA3ID;AA8IA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACAL,gBAAgB,GAAG,SAASA,gBAAT,CAA0BG,OAA1B,EAAmCqC,QAAnC,EAA6CC,QAA7C,EAAuD;AACxE;AACA,OAAKhC,SAAL,GAAiBgC,QAAjB;AAEA9C,EAAAA,IAAI,CAAC+C,SAAL,CAAeC,WAAf,CAA2BC,IAA3B,CAAgC,IAAhC,EAAsCzC,OAAtC,EAA+CqC,QAA/C,EAAyD,KAAK/B,SAA9D;AACD,CALD;;AAOAhB,CAAC,CAACoD,MAAF,CAAS7C,gBAAgB,CAAC0C,SAA1B,EAAqC/C,IAAI,CAAC+C,SAA1C;;AACA1C,gBAAgB,CAAC0C,SAAjB,CAA2BC,WAA3B,GAAyC3C,gBAAzC;AAEA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;AACAA,gBAAgB,CAAC0C,SAAjB,CAA2BI,WAA3B,GAAyC,SAASA,WAAT,CAAqBnB,OAArB,EAA8B;AACrE,SAAO,IAAI1B,oBAAJ,CAAyB,KAAKO,QAA9B,EAAwCmB,OAAxC,EAAiD,KAAKlB,SAAL,CAAeL,UAAhE,CAAP;AACD,CAFD;AAIA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACAJ,gBAAgB,CAAC0C,SAAjB,CAA2BP,MAA3B,GAAoC,SAASA,MAAT,GAAkB;AACpD,MAAIY,KAAK,GAAG,EAAZ;;AACAtD,EAAAA,CAAC,CAACuD,MAAF,CAAS,IAAT,EAAe,UAASC,KAAT,EAAgBC,GAAhB,EAAqB;AAClC,QAAI,CAACzD,CAAC,CAAC0D,UAAF,CAAaD,GAAb,EAAkB,GAAlB,CAAD,IAA2B,CAAEzD,CAAC,CAACwC,UAAF,CAAagB,KAAb,CAAjC,EAAsD;AACpDF,MAAAA,KAAK,CAACG,GAAD,CAAL,GAAaD,KAAb;AACD;AACF,GAJD;;AAKA,SAAOF,KAAP;AACD,CARD;;AAUA/C,gBAAgB,CAAC0C,SAAjB,CAA2BhD,IAAI,CAAC0C,OAAL,CAAaC,MAAxC,IAAkD,SAASD,OAAT,CAAiBE,KAAjB,EAC9CC,OAD8C,EACrC;AACX,SAAO7C,IAAI,CAAC0C,OAAL,CAAa,KAAKD,MAAL,EAAb,EAA4BI,OAA5B,CAAP;AACD,CAHD;AAMA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACAtC,oBAAoB,GAAG,SAASA,oBAAT,CAA8BE,OAA9B,EAAuCwB,OAAvC,EAC+BvB,UAD/B,EAC2CE,GAD3C,EACgD;AACrE,OAAKE,QAAL,GAAgBL,OAAhB,CADqE,CAGrE;;AACA,OAAKG,GAAL,GAAWqB,OAAO,CAACrB,GAAnB,CAJqE,CAI7C;;AACxB,OAAKF,UAAL,GAAkBuB,OAAO,CAACyB,WAA1B,CALqE,CAK9B;;AACvC,OAAKC,UAAL,GAAkB1B,OAAO,CAAC2B,WAA1B,CANqE,CAM9B;;AACvC,OAAKtC,EAAL,GAAUW,OAAO,CAACX,EAAlB,CAPqE,CAO/C;;AACtB,OAAKC,OAAL,GAAeU,OAAO,CAACV,OAAvB,CARqE,CAQrC;;AAChC,OAAKsC,MAAL,GAAc5B,OAAO,CAAC4B,MAAtB,CATqE,CASvC;;AAC9B,OAAKC,KAAL,GAAa7B,OAAO,CAAC6B,KAArB,CAVqE,CAUzC;;AAC5B,OAAKC,MAAL,GAAc9B,OAAO,CAAC8B,MAAtB,CAXqE,CAWvC;;AAC9B,OAAKC,MAAL,GAAc/B,OAAO,CAAC+B,MAAtB,CAZqE,CAYvC;;AAC9B,OAAKC,KAAL,GAAahC,OAAO,CAACgC,KAArB,CAbqE,CAazC;;AAC5B,OAAKC,gBAAL,GAAwBjC,OAAO,CAACkC,kBAAhC,CAdqE,CAcjB;;AACpD,OAAKC,WAAL,GAAmBlE,WAAW,CAACmE,eAAZ,CAA4BpC,OAAO,CAACqC,YAApC,CAAnB,CAfqE,CAeC;;AACtE,OAAKC,WAAL,GAAmBrE,WAAW,CAACmE,eAAZ,CAA4BpC,OAAO,CAACuC,YAApC,CAAnB,CAhBqE,CAgBC;;AACtE,OAAKC,GAAL,GAAWxC,OAAO,CAACwC,GAAnB,CAjBqE,CAiB7C;AAExB;;AACA,OAAKC,QAAL,GAAgBC,SAAhB;AACA,OAAK5D,SAAL,GAAiB;AAACL,IAAAA,UAAU,EAAEA,UAAb;AAAyBE,IAAAA,GAAG,EAAEA,GAAG,IAAI,KAAKA;AAA1C,GAAjB;AACD,CAvBD;;AAyBAgE,MAAM,CAACC,cAAP,CAAsBtE,oBAAoB,CAACyC,SAA3C,EACE,QADF,EACY;AACRnC,EAAAA,GAAG,EAAE,YAAW;AACd,QAAI,CAAC,KAAK6D,QAAV,EAAoB;AAClB,WAAKA,QAAL,GAAgB,IAAIlE,mBAAJ,CACd,KAAKM,QADS,EAEd,KAAKC,SAAL,CAAeL,UAFD,EAGd,KAAKK,SAAL,CAAeH,GAHD,CAAhB;AAKD;;AAED,WAAO,KAAK8D,QAAZ;AACD;AAXO,CADZ;AAeA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;AACAnE,oBAAoB,CAACyC,SAArB,CAA+B8B,MAA/B,GAAwC,SAASA,MAAT,CAAgB5D,IAAhB,EAAsBC,QAAtB,EAAgC;AACtE,SAAO,KAAK4D,MAAL,CAAYD,MAAZ,CAAmB5D,IAAnB,EAAyBC,QAAzB,CAAP;AACD,CAFD;AAIA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACAZ,oBAAoB,CAACyC,SAArB,CAA+BgC,KAA/B,GAAuC,SAASA,KAAT,CAAe7D,QAAf,EAAyB;AAC9D,SAAO,KAAK4D,MAAL,CAAYC,KAAZ,CAAkB7D,QAAlB,CAAP;AACD,CAFD;AAIA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACAZ,oBAAoB,CAACyC,SAArB,CAA+BP,MAA/B,GAAwC,SAASA,MAAT,GAAkB;AACxD,MAAIY,KAAK,GAAG,EAAZ;;AACAtD,EAAAA,CAAC,CAACuD,MAAF,CAAS,IAAT,EAAe,UAASC,KAAT,EAAgBC,GAAhB,EAAqB;AAClC,QAAI,CAACzD,CAAC,CAAC0D,UAAF,CAAaD,GAAb,EAAkB,GAAlB,CAAD,IAA2B,CAAEzD,CAAC,CAACwC,UAAF,CAAagB,KAAb,CAAjC,EAAsD;AACpDF,MAAAA,KAAK,CAACG,GAAD,CAAL,GAAaD,KAAb;AACD;AACF,GAJD;;AAKA,SAAOF,KAAP;AACD,CARD;;AAUA9C,oBAAoB,CAACyC,SAArB,CAA+BhD,IAAI,CAAC0C,OAAL,CAAaC,MAA5C,IAAsD,SAASD,OAAT,CAAiBE,KAAjB,EAClDC,OADkD,EACzC;AACX,SAAO7C,IAAI,CAAC0C,OAAL,CAAa,KAAKD,MAAL,EAAb,EAA4BI,OAA5B,CAAP;AACD,CAHD;AAMA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACArC,mBAAmB,GAAG,SAASA,mBAAT,CAA6BC,OAA7B,EAAsCC,UAAtC,EAAkDE,GAAlD,EAAuD;AAC3E,OAAKE,QAAL,GAAgBL,OAAhB,CAD2E,CAG3E;;AACA,OAAKM,SAAL,GAAiB;AAACL,IAAAA,UAAU,EAAEA,UAAb;AAAyBE,IAAAA,GAAG,EAAEA;AAA9B,GAAjB;AACA,OAAKI,IAAL,GAAa,aAAYN,UAAW,kBAAiBE,GAAI,EAAzD;AACD,CAND;AAQA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACAJ,mBAAmB,CAACwC,SAApB,CAA8B8B,MAA9B,GAAuC,SAASA,MAAT,CAAgB5D,IAAhB,EAAsBC,QAAtB,EAAgC;AACrE,MAAIpB,CAAC,CAACqB,WAAF,CAAcF,IAAd,CAAJ,EAAyB;AACvB,UAAM,IAAIG,KAAJ,CAAU,oCAAV,CAAN;AACD;;AACD,MAAItB,CAAC,CAACqB,WAAF,CAAcF,IAAI,CAAC2C,MAAnB,CAAJ,EAAgC;AAC9B,UAAM,IAAIxC,KAAJ,CAAU,2CAAV,CAAN;AACD;;AAED,MAAIG,QAAQ,GAAG3B,CAAC,CAAC4B,KAAF,EAAf;AACA,MAAIC,IAAI,GAAGtB,MAAM,CAACuB,EAAP,CAAU;AAAC,cAAU5B,CAAC,CAACc,GAAF,CAAMK,IAAN,EAAY,QAAZ;AAAX,GAAV,CAAX;;AAEA,MAAIW,OAAO,GAAG,KAAKf,QAAL,CAAcgE,MAAd,CAAqB;AAAChD,IAAAA,GAAG,EAAE,KAAKd,IAAX;AAAiBe,IAAAA,MAAM,EAAE,MAAzB;AAAiCL,IAAAA,IAAI,EAAEA;AAAvC,GAArB,CAAd;;AAEAG,EAAAA,OAAO,GAAGA,OAAO,CAACG,IAAR,CAAa,UAASC,OAAT,EAAkB;AACvCT,IAAAA,QAAQ,CAACU,OAAT,CAAiB,IAAI3B,oBAAJ,CACf,KAAKO,QADU,EAEfmB,OAFe,EAGf,KAAKlB,SAAL,CAAeL,UAHA,EAIf,KAAKK,SAAL,CAAeH,GAJA,CAAjB;AAMD,GAPsB,CAOrBuB,IAPqB,CAOhB,IAPgB,CAAb,CAAV;AASAN,EAAAA,OAAO,CAACO,KAAR,CAAc,UAASC,KAAT,EAAgB;AAC5Bb,IAAAA,QAAQ,CAACc,MAAT,CAAgBD,KAAhB;AACD,GAFD;;AAIA,MAAItC,CAAC,CAACwC,UAAF,CAAapB,QAAb,CAAJ,EAA4B;AAC1BK,IAAAA,QAAQ,CAACK,OAAT,CAAiBW,OAAjB,CAAyBrB,QAAzB;AACD;;AAED,SAAOK,QAAQ,CAACK,OAAhB;AACD,CA/BD;AAiCA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACArB,mBAAmB,CAACwC,SAApB,CAA8BgC,KAA9B,GAAsC,SAASA,KAAT,CAAe7D,QAAf,EAAyB;AAC7D,MAAIK,QAAQ,GAAG3B,CAAC,CAAC4B,KAAF,EAAf;;AACA,MAAII,OAAO,GAAG,KAAKf,QAAL,CAAckE,KAAd,CAAoB;AAAClD,IAAAA,GAAG,EAAE,KAAKd,IAAX;AAAiBe,IAAAA,MAAM,EAAE;AAAzB,GAApB,CAAd;;AAEAF,EAAAA,OAAO,GAAGA,OAAO,CAACG,IAAR,CAAa,UAASC,OAAT,EAAkB;AACvCT,IAAAA,QAAQ,CAACU,OAAT,CAAiB,IAAI3B,oBAAJ,CACf,KAAKO,QADU,EAEfmB,OAFe,EAGf,KAAKlB,SAAL,CAAeL,UAHA,EAIf,KAAKK,SAAL,CAAeH,GAJA,CAAjB;AAMD,GAPsB,CAOrBuB,IAPqB,CAOhB,IAPgB,CAAb,CAAV;AASAN,EAAAA,OAAO,CAACO,KAAR,CAAc,UAASC,KAAT,EAAgB;AAC5Bb,IAAAA,QAAQ,CAACc,MAAT,CAAgBD,KAAhB;AACD,GAFD;;AAIA,MAAItC,CAAC,CAACwC,UAAF,CAAapB,QAAb,CAAJ,EAA4B;AAC1BK,IAAAA,QAAQ,CAACK,OAAT,CAAiBW,OAAjB,CAAyBrB,QAAzB;AACD;;AAED,SAAOK,QAAQ,CAACK,OAAhB;AACD,CAtBD;AAwBA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACArB,mBAAmB,CAACwC,SAApB,CAA8BP,MAA9B,GAAuC,SAASA,MAAT,GAAkB;AACvD,SAAO,KAAK1B,SAAZ;AACD,CAFD;;AAIAP,mBAAmB,CAACwC,SAApB,CAA8BhD,IAAI,CAAC0C,OAAL,CAAaC,MAA3C,IAAqD,SAASD,OAAT,CAAiBE,KAAjB,EACjDC,OADiD,EACxC;AACX,SAAO7C,IAAI,CAAC0C,OAAL,CAAa,KAAKD,MAAL,EAAb,EAA4BI,OAA5B,CAAP;AACD,CAHD;;AAKAoC,MAAM,CAACC,OAAP,GAAiB;AACf7E,EAAAA,gBAAgB,EAAEA,gBADH;AAEfC,EAAAA,gBAAgB,EAAEA,gBAFH;AAGfC,EAAAA,oBAAoB,EAAEA,oBAHP;AAIfC,EAAAA,mBAAmB,EAAEA;AAJN,CAAjB","sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar Page = require('../../../../base/Page');  /* jshint ignore:line */\nvar deserialize = require(\n    '../../../../base/deserialize');  /* jshint ignore:line */\nvar serialize = require('../../../../base/serialize');  /* jshint ignore:line */\nvar values = require('../../../../base/values');  /* jshint ignore:line */\n\nvar VerificationList;\nvar VerificationPage;\nvar VerificationInstance;\nvar VerificationContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the VerificationList\n *\n * @constructor Twilio.Verify.V2.ServiceContext.VerificationList\n *\n * @param {Twilio.Verify.V2} version - Version of the resource\n * @param {string} serviceSid -\n *          The SID of the Service that the resource is associated with\n */\n/* jshint ignore:end */\nVerificationList = function VerificationList(version, serviceSid) {\n  /* jshint ignore:start */\n  /**\n   * @function verifications\n   * @memberof Twilio.Verify.V2.ServiceContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Verify.V2.ServiceContext.VerificationContext}\n   */\n  /* jshint ignore:end */\n  function VerificationListInstance(sid) {\n    return VerificationListInstance.get(sid);\n  }\n\n  VerificationListInstance._version = version;\n  // Path Solution\n  VerificationListInstance._solution = {serviceSid: serviceSid};\n  VerificationListInstance._uri = `/Services/${serviceSid}/Verifications`;\n  /* jshint ignore:start */\n  /**\n   * create a VerificationInstance\n   *\n   * @function create\n   * @memberof Twilio.Verify.V2.ServiceContext.VerificationList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.to - The phone number or email to verify\n   * @param {string} opts.channel - The verification method to use\n   * @param {string} [opts.customFriendlyName] - A custom user defined friendly name\n   * @param {string} [opts.customMessage] -\n   *          The text of a custom message to use for the verification\n   * @param {string} [opts.sendDigits] -\n   *          The digits to send after a phone call is answered\n   * @param {string} [opts.locale] -\n   *          The locale to use for the verification SMS or call\n   * @param {string} [opts.customCode] - A pre-generated code\n   * @param {string} [opts.amount] -\n   *          The amount of the associated PSD2 compliant transaction.\n   * @param {string} [opts.payee] -\n   *          The payee of the associated PSD2 compliant transaction\n   * @param {object} [opts.rateLimits] -\n   *          The custom key-value pairs of Programmable Rate Limits.\n   * @param {object} [opts.channelConfiguration] -\n   *          Channel specific configuration in json format.\n   * @param {string} [opts.appHash] -\n   *          Your App Hash to be appended at the end of an SMS.\n   * @param {string} [opts.templateSid] - The SID of the custom template to be used.\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed VerificationInstance\n   */\n  /* jshint ignore:end */\n  VerificationListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n    if (_.isUndefined(opts.to)) {\n      throw new Error('Required parameter \"opts.to\" missing.');\n    }\n    if (_.isUndefined(opts.channel)) {\n      throw new Error('Required parameter \"opts.channel\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'To': _.get(opts, 'to'),\n      'Channel': _.get(opts, 'channel'),\n      'CustomFriendlyName': _.get(opts, 'customFriendlyName'),\n      'CustomMessage': _.get(opts, 'customMessage'),\n      'SendDigits': _.get(opts, 'sendDigits'),\n      'Locale': _.get(opts, 'locale'),\n      'CustomCode': _.get(opts, 'customCode'),\n      'Amount': _.get(opts, 'amount'),\n      'Payee': _.get(opts, 'payee'),\n      'RateLimits': serialize.object(_.get(opts, 'rateLimits')),\n      'ChannelConfiguration': serialize.object(_.get(opts, 'channelConfiguration')),\n      'AppHash': _.get(opts, 'appHash'),\n      'TemplateSid': _.get(opts, 'templateSid')\n    });\n\n    var promise = this._version.create({uri: this._uri, method: 'POST', data: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new VerificationInstance(\n        this._version,\n        payload,\n        this._solution.serviceSid,\n        this._solution.sid\n      ));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a verification\n   *\n   * @function get\n   * @memberof Twilio.Verify.V2.ServiceContext.VerificationList#\n   *\n   * @param {string} sid - The unique string that identifies the resource\n   *\n   * @returns {Twilio.Verify.V2.ServiceContext.VerificationContext}\n   */\n  /* jshint ignore:end */\n  VerificationListInstance.get = function get(sid) {\n    return new VerificationContext(this._version, this._solution.serviceSid, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Verify.V2.ServiceContext.VerificationList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  VerificationListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  VerificationListInstance[util.inspect.custom] = function inspect(depth, options)\n      {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return VerificationListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the VerificationPage\n *\n * @constructor Twilio.Verify.V2.ServiceContext.VerificationPage\n *\n * @param {V2} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {VerificationSolution} solution - Path solution\n *\n * @returns VerificationPage\n */\n/* jshint ignore:end */\nVerificationPage = function VerificationPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(VerificationPage.prototype, Page.prototype);\nVerificationPage.prototype.constructor = VerificationPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of VerificationInstance\n *\n * @function getInstance\n * @memberof Twilio.Verify.V2.ServiceContext.VerificationPage#\n *\n * @param {VerificationPayload} payload - Payload response from the API\n *\n * @returns VerificationInstance\n */\n/* jshint ignore:end */\nVerificationPage.prototype.getInstance = function getInstance(payload) {\n  return new VerificationInstance(this._version, payload, this._solution.serviceSid);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Verify.V2.ServiceContext.VerificationPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nVerificationPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nVerificationPage.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the VerificationContext\n *\n * @constructor Twilio.Verify.V2.ServiceContext.VerificationInstance\n *\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} serviceSid -\n *          The SID of the Service that the resource is associated with\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {string} to - The phone number or email being verified\n * @property {verification.channel} channel - The verification method used.\n * @property {string} status - The status of the verification resource\n * @property {boolean} valid - Whether the verification was successful\n * @property {object} lookup - Information about the phone number being verified\n * @property {string} amount -\n *          The amount of the associated PSD2 compliant transaction.\n * @property {string} payee -\n *          The payee of the associated PSD2 compliant transaction\n * @property {object} sendCodeAttempts - An array of verification attempt objects.\n * @property {Date} dateCreated -\n *          The RFC 2822 date and time in GMT when the resource was created\n * @property {Date} dateUpdated -\n *          The RFC 2822 date and time in GMT when the resource was last updated\n * @property {string} url - The absolute URL of the Verification resource\n *\n * @param {V2} version - Version of the resource\n * @param {VerificationPayload} payload - The instance payload\n * @param {sid} serviceSid -\n *          The SID of the Service that the resource is associated with\n * @param {string} sid - The unique string that identifies the resource\n */\n/* jshint ignore:end */\nVerificationInstance = function VerificationInstance(version, payload,\n                                                      serviceSid, sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.sid = payload.sid; // jshint ignore:line\n  this.serviceSid = payload.service_sid; // jshint ignore:line\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.to = payload.to; // jshint ignore:line\n  this.channel = payload.channel; // jshint ignore:line\n  this.status = payload.status; // jshint ignore:line\n  this.valid = payload.valid; // jshint ignore:line\n  this.lookup = payload.lookup; // jshint ignore:line\n  this.amount = payload.amount; // jshint ignore:line\n  this.payee = payload.payee; // jshint ignore:line\n  this.sendCodeAttempts = payload.send_code_attempts; // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {serviceSid: serviceSid, sid: sid || this.sid, };\n};\n\nObject.defineProperty(VerificationInstance.prototype,\n  '_proxy', {\n    get: function() {\n      if (!this._context) {\n        this._context = new VerificationContext(\n          this._version,\n          this._solution.serviceSid,\n          this._solution.sid\n        );\n      }\n\n      return this._context;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * update a VerificationInstance\n *\n * @function update\n * @memberof Twilio.Verify.V2.ServiceContext.VerificationInstance#\n *\n * @param {object} opts - Options for request\n * @param {verification.status} opts.status - The new status of the resource\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed VerificationInstance\n */\n/* jshint ignore:end */\nVerificationInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * fetch a VerificationInstance\n *\n * @function fetch\n * @memberof Twilio.Verify.V2.ServiceContext.VerificationInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed VerificationInstance\n */\n/* jshint ignore:end */\nVerificationInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Verify.V2.ServiceContext.VerificationInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nVerificationInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nVerificationInstance.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the VerificationContext\n *\n * @constructor Twilio.Verify.V2.ServiceContext.VerificationContext\n *\n * @param {V2} version - Version of the resource\n * @param {sid} serviceSid -\n *          The SID of the verification Service to fetch the resource from\n * @param {string} sid - The unique string that identifies the resource\n */\n/* jshint ignore:end */\nVerificationContext = function VerificationContext(version, serviceSid, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {serviceSid: serviceSid, sid: sid, };\n  this._uri = `/Services/${serviceSid}/Verifications/${sid}`;\n};\n\n/* jshint ignore:start */\n/**\n * update a VerificationInstance\n *\n * @function update\n * @memberof Twilio.Verify.V2.ServiceContext.VerificationContext#\n *\n * @param {object} opts - Options for request\n * @param {verification.status} opts.status - The new status of the resource\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed VerificationInstance\n */\n/* jshint ignore:end */\nVerificationContext.prototype.update = function update(opts, callback) {\n  if (_.isUndefined(opts)) {\n    throw new Error('Required parameter \"opts\" missing.');\n  }\n  if (_.isUndefined(opts.status)) {\n    throw new Error('Required parameter \"opts.status\" missing.');\n  }\n\n  var deferred = Q.defer();\n  var data = values.of({'Status': _.get(opts, 'status')});\n\n  var promise = this._version.update({uri: this._uri, method: 'POST', data: data});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new VerificationInstance(\n      this._version,\n      payload,\n      this._solution.serviceSid,\n      this._solution.sid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a VerificationInstance\n *\n * @function fetch\n * @memberof Twilio.Verify.V2.ServiceContext.VerificationContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed VerificationInstance\n */\n/* jshint ignore:end */\nVerificationContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({uri: this._uri, method: 'GET'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new VerificationInstance(\n      this._version,\n      payload,\n      this._solution.serviceSid,\n      this._solution.sid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Verify.V2.ServiceContext.VerificationContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nVerificationContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nVerificationContext.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  VerificationList: VerificationList,\n  VerificationPage: VerificationPage,\n  VerificationInstance: VerificationInstance,\n  VerificationContext: VerificationContext\n};\n"]},"metadata":{},"sourceType":"module"}