{"ast":null,"code":"'use strict';\n/* jshint ignore:start */\n\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n\n/* jshint ignore:end */\n\nvar Q = require('q');\n/* jshint ignore:line */\n\n\nvar _ = require('lodash');\n/* jshint ignore:line */\n\n\nvar util = require('util');\n/* jshint ignore:line */\n\n\nvar Page = require('../../../base/Page');\n/* jshint ignore:line */\n\n\nvar SubscribedEventList = require('./subscription/subscribedEvent').SubscribedEventList;\n\nvar deserialize = require('../../../base/deserialize');\n/* jshint ignore:line */\n\n\nvar serialize = require('../../../base/serialize');\n/* jshint ignore:line */\n\n\nvar values = require('../../../base/values');\n/* jshint ignore:line */\n\n\nvar SubscriptionList;\nvar SubscriptionPage;\nvar SubscriptionInstance;\nvar SubscriptionContext;\n/* jshint ignore:start */\n\n/**\n * Initialize the SubscriptionList\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Events.V1.SubscriptionList\n *\n * @param {Twilio.Events.V1} version - Version of the resource\n */\n\n/* jshint ignore:end */\n\nSubscriptionList = function SubscriptionList(version) {\n  /* jshint ignore:start */\n\n  /**\n   * @function subscriptions\n   * @memberof Twilio.Events.V1#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Events.V1.SubscriptionContext}\n   */\n\n  /* jshint ignore:end */\n  function SubscriptionListInstance(sid) {\n    return SubscriptionListInstance.get(sid);\n  }\n\n  SubscriptionListInstance._version = version; // Path Solution\n\n  SubscriptionListInstance._solution = {};\n  SubscriptionListInstance._uri = `/Subscriptions`;\n  /* jshint ignore:start */\n\n  /**\n   * Streams SubscriptionInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Events.V1.SubscriptionList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.sinkSid] - Sink SID.\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n\n  /* jshint ignore:end */\n\n  SubscriptionListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Lists SubscriptionInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Events.V1.SubscriptionList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.sinkSid] - Sink SID.\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  SubscriptionListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single page of SubscriptionInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Events.V1.SubscriptionList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.sinkSid] - Sink SID.\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  SubscriptionListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'SinkSid': _.get(opts, 'sinkSid'),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new SubscriptionPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single target page of SubscriptionInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Events.V1.SubscriptionList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  SubscriptionListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new SubscriptionPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * create a SubscriptionInstance\n   *\n   * @function create\n   * @memberof Twilio.Events.V1.SubscriptionList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.description - Subscription description\n   * @param {string} opts.sinkSid - Sink SID.\n   * @param {object|list} opts.types - Subscribed Event Types\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed SubscriptionInstance\n   */\n\n  /* jshint ignore:end */\n\n\n  SubscriptionListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n\n    if (_.isUndefined(opts.description)) {\n      throw new Error('Required parameter \"opts.description\" missing.');\n    }\n\n    if (_.isUndefined(opts.sinkSid)) {\n      throw new Error('Required parameter \"opts.sinkSid\" missing.');\n    }\n\n    if (_.isUndefined(opts.types)) {\n      throw new Error('Required parameter \"opts.types\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'Description': _.get(opts, 'description'),\n      'SinkSid': _.get(opts, 'sinkSid'),\n      'Types': serialize.map(_.get(opts, 'types'), function (e) {\n        return serialize.object(e);\n      })\n    });\n\n    var promise = this._version.create({\n      uri: this._uri,\n      method: 'POST',\n      data: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new SubscriptionInstance(this._version, payload, this._solution.sid));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Constructs a subscription\n   *\n   * @function get\n   * @memberof Twilio.Events.V1.SubscriptionList#\n   *\n   * @param {string} sid - A string that uniquely identifies this Subscription.\n   *\n   * @returns {Twilio.Events.V1.SubscriptionContext}\n   */\n\n  /* jshint ignore:end */\n\n\n  SubscriptionListInstance.get = function get(sid) {\n    return new SubscriptionContext(this._version, sid);\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Events.V1.SubscriptionList#\n   *\n   * @returns Object\n   */\n\n  /* jshint ignore:end */\n\n\n  SubscriptionListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  SubscriptionListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return SubscriptionListInstance;\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the SubscriptionPage\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Events.V1.SubscriptionPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {SubscriptionSolution} solution - Path solution\n *\n * @returns SubscriptionPage\n */\n\n/* jshint ignore:end */\n\n\nSubscriptionPage = function SubscriptionPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(SubscriptionPage.prototype, Page.prototype);\n\nSubscriptionPage.prototype.constructor = SubscriptionPage;\n/* jshint ignore:start */\n\n/**\n * Build an instance of SubscriptionInstance\n *\n * @function getInstance\n * @memberof Twilio.Events.V1.SubscriptionPage#\n *\n * @param {SubscriptionPayload} payload - Payload response from the API\n *\n * @returns SubscriptionInstance\n */\n\n/* jshint ignore:end */\n\nSubscriptionPage.prototype.getInstance = function getInstance(payload) {\n  return new SubscriptionInstance(this._version, payload);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Events.V1.SubscriptionPage#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nSubscriptionPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nSubscriptionPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the SubscriptionContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Events.V1.SubscriptionInstance\n *\n * @property {string} accountSid - Account SID.\n * @property {string} sid - A string that uniquely identifies this Subscription.\n * @property {Date} dateCreated - The date this Subscription was created\n * @property {Date} dateUpdated - The date this Subscription was updated\n * @property {string} description - Subscription description\n * @property {string} sinkSid - Sink SID.\n * @property {string} url - The URL of this resource.\n * @property {string} links - Nested resource URLs.\n *\n * @param {V1} version - Version of the resource\n * @param {SubscriptionPayload} payload - The instance payload\n * @param {sid} sid - A string that uniquely identifies this Subscription.\n */\n\n/* jshint ignore:end */\n\n\nSubscriptionInstance = function SubscriptionInstance(version, payload, sid) {\n  this._version = version; // Marshaled Properties\n\n  this.accountSid = payload.account_sid; // jshint ignore:line\n\n  this.sid = payload.sid; // jshint ignore:line\n\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n\n  this.description = payload.description; // jshint ignore:line\n\n  this.sinkSid = payload.sink_sid; // jshint ignore:line\n\n  this.url = payload.url; // jshint ignore:line\n\n  this.links = payload.links; // jshint ignore:line\n  // Context\n\n  this._context = undefined;\n  this._solution = {\n    sid: sid || this.sid\n  };\n};\n\nObject.defineProperty(SubscriptionInstance.prototype, '_proxy', {\n  get: function () {\n    if (!this._context) {\n      this._context = new SubscriptionContext(this._version, this._solution.sid);\n    }\n\n    return this._context;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * fetch a SubscriptionInstance\n *\n * @function fetch\n * @memberof Twilio.Events.V1.SubscriptionInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SubscriptionInstance\n */\n\n/* jshint ignore:end */\n\nSubscriptionInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n/* jshint ignore:start */\n\n/**\n * update a SubscriptionInstance\n *\n * @function update\n * @memberof Twilio.Events.V1.SubscriptionInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.description] - Subscription description.\n * @param {string} [opts.sinkSid] - Sink SID.\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SubscriptionInstance\n */\n\n/* jshint ignore:end */\n\n\nSubscriptionInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n/* jshint ignore:start */\n\n/**\n * remove a SubscriptionInstance\n *\n * @function remove\n * @memberof Twilio.Events.V1.SubscriptionInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SubscriptionInstance\n */\n\n/* jshint ignore:end */\n\n\nSubscriptionInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n/* jshint ignore:start */\n\n/**\n * Access the subscribedEvents\n *\n * @function subscribedEvents\n * @memberof Twilio.Events.V1.SubscriptionInstance#\n *\n * @returns {Twilio.Events.V1.SubscriptionContext.SubscribedEventList}\n */\n\n/* jshint ignore:end */\n\n\nSubscriptionInstance.prototype.subscribedEvents = function subscribedEvents() {\n  return this._proxy.subscribedEvents;\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Events.V1.SubscriptionInstance#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nSubscriptionInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nSubscriptionInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the SubscriptionContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Events.V1.SubscriptionContext\n *\n * @property {Twilio.Events.V1.SubscriptionContext.SubscribedEventList} subscribedEvents -\n *          subscribedEvents resource\n *\n * @param {V1} version - Version of the resource\n * @param {sid} sid - A string that uniquely identifies this Subscription.\n */\n\n/* jshint ignore:end */\n\n\nSubscriptionContext = function SubscriptionContext(version, sid) {\n  this._version = version; // Path Solution\n\n  this._solution = {\n    sid: sid\n  };\n  this._uri = `/Subscriptions/${sid}`; // Dependents\n\n  this._subscribedEvents = undefined;\n};\n/* jshint ignore:start */\n\n/**\n * fetch a SubscriptionInstance\n *\n * @function fetch\n * @memberof Twilio.Events.V1.SubscriptionContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SubscriptionInstance\n */\n\n/* jshint ignore:end */\n\n\nSubscriptionContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new SubscriptionInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * update a SubscriptionInstance\n *\n * @function update\n * @memberof Twilio.Events.V1.SubscriptionContext#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.description] - Subscription description.\n * @param {string} [opts.sinkSid] - Sink SID.\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SubscriptionInstance\n */\n\n/* jshint ignore:end */\n\n\nSubscriptionContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n\n  opts = opts || {};\n  var deferred = Q.defer();\n  var data = values.of({\n    'Description': _.get(opts, 'description'),\n    'SinkSid': _.get(opts, 'sinkSid')\n  });\n\n  var promise = this._version.update({\n    uri: this._uri,\n    method: 'POST',\n    data: data\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new SubscriptionInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * remove a SubscriptionInstance\n *\n * @function remove\n * @memberof Twilio.Events.V1.SubscriptionContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SubscriptionInstance\n */\n\n/* jshint ignore:end */\n\n\nSubscriptionContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.remove({\n    uri: this._uri,\n    method: 'DELETE'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\nObject.defineProperty(SubscriptionContext.prototype, 'subscribedEvents', {\n  get: function () {\n    if (!this._subscribedEvents) {\n      this._subscribedEvents = new SubscribedEventList(this._version, this._solution.sid);\n    }\n\n    return this._subscribedEvents;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Events.V1.SubscriptionContext#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\nSubscriptionContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nSubscriptionContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  SubscriptionList: SubscriptionList,\n  SubscriptionPage: SubscriptionPage,\n  SubscriptionInstance: SubscriptionInstance,\n  SubscriptionContext: SubscriptionContext\n};","map":{"version":3,"sources":["/Users/tony_niu/Visual Studio/Twilio/twilio-video-starter-kit/node_modules/twilio/lib/rest/events/v1/subscription.js"],"names":["Q","require","_","util","Page","SubscribedEventList","deserialize","serialize","values","SubscriptionList","SubscriptionPage","SubscriptionInstance","SubscriptionContext","version","SubscriptionListInstance","sid","get","_version","_solution","_uri","each","opts","callback","isFunction","isUndefined","Error","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","error","fetchNextPage","fn","promise","then","page","instances","instance","bind","nextPage","catch","merge","list","deferred","defer","allResources","resource","push","length","resolve","reject","nodeify","data","of","pageToken","pageNumber","uri","method","params","payload","getPage","targetUrl","_domain","twilio","request","create","description","sinkSid","types","map","e","object","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","accountSid","account_sid","dateCreated","iso8601DateTime","date_created","dateUpdated","date_updated","sink_sid","url","links","_context","undefined","Object","defineProperty","fetch","_proxy","update","remove","subscribedEvents","_subscribedEvents","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar Page = require('../../../base/Page');  /* jshint ignore:line */\nvar SubscribedEventList = require(\n    './subscription/subscribedEvent').SubscribedEventList;\nvar deserialize = require(\n    '../../../base/deserialize');  /* jshint ignore:line */\nvar serialize = require('../../../base/serialize');  /* jshint ignore:line */\nvar values = require('../../../base/values');  /* jshint ignore:line */\n\nvar SubscriptionList;\nvar SubscriptionPage;\nvar SubscriptionInstance;\nvar SubscriptionContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the SubscriptionList\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Events.V1.SubscriptionList\n *\n * @param {Twilio.Events.V1} version - Version of the resource\n */\n/* jshint ignore:end */\nSubscriptionList = function SubscriptionList(version) {\n  /* jshint ignore:start */\n  /**\n   * @function subscriptions\n   * @memberof Twilio.Events.V1#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Events.V1.SubscriptionContext}\n   */\n  /* jshint ignore:end */\n  function SubscriptionListInstance(sid) {\n    return SubscriptionListInstance.get(sid);\n  }\n\n  SubscriptionListInstance._version = version;\n  // Path Solution\n  SubscriptionListInstance._solution = {};\n  SubscriptionListInstance._uri = `/Subscriptions`;\n  /* jshint ignore:start */\n  /**\n   * Streams SubscriptionInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Events.V1.SubscriptionList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.sinkSid] - Sink SID.\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  SubscriptionListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists SubscriptionInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Events.V1.SubscriptionList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.sinkSid] - Sink SID.\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  SubscriptionListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of SubscriptionInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Events.V1.SubscriptionList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.sinkSid] - Sink SID.\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  SubscriptionListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'SinkSid': _.get(opts, 'sinkSid'),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new SubscriptionPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of SubscriptionInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Events.V1.SubscriptionList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  SubscriptionListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new SubscriptionPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * create a SubscriptionInstance\n   *\n   * @function create\n   * @memberof Twilio.Events.V1.SubscriptionList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.description - Subscription description\n   * @param {string} opts.sinkSid - Sink SID.\n   * @param {object|list} opts.types - Subscribed Event Types\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed SubscriptionInstance\n   */\n  /* jshint ignore:end */\n  SubscriptionListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n    if (_.isUndefined(opts.description)) {\n      throw new Error('Required parameter \"opts.description\" missing.');\n    }\n    if (_.isUndefined(opts.sinkSid)) {\n      throw new Error('Required parameter \"opts.sinkSid\" missing.');\n    }\n    if (_.isUndefined(opts.types)) {\n      throw new Error('Required parameter \"opts.types\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'Description': _.get(opts, 'description'),\n      'SinkSid': _.get(opts, 'sinkSid'),\n      'Types': serialize.map(_.get(opts, 'types'), function(e) { return serialize.object(e); })\n    });\n\n    var promise = this._version.create({uri: this._uri, method: 'POST', data: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new SubscriptionInstance(this._version, payload, this._solution.sid));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a subscription\n   *\n   * @function get\n   * @memberof Twilio.Events.V1.SubscriptionList#\n   *\n   * @param {string} sid - A string that uniquely identifies this Subscription.\n   *\n   * @returns {Twilio.Events.V1.SubscriptionContext}\n   */\n  /* jshint ignore:end */\n  SubscriptionListInstance.get = function get(sid) {\n    return new SubscriptionContext(this._version, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Events.V1.SubscriptionList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  SubscriptionListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  SubscriptionListInstance[util.inspect.custom] = function inspect(depth, options)\n      {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return SubscriptionListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the SubscriptionPage\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Events.V1.SubscriptionPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {SubscriptionSolution} solution - Path solution\n *\n * @returns SubscriptionPage\n */\n/* jshint ignore:end */\nSubscriptionPage = function SubscriptionPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(SubscriptionPage.prototype, Page.prototype);\nSubscriptionPage.prototype.constructor = SubscriptionPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of SubscriptionInstance\n *\n * @function getInstance\n * @memberof Twilio.Events.V1.SubscriptionPage#\n *\n * @param {SubscriptionPayload} payload - Payload response from the API\n *\n * @returns SubscriptionInstance\n */\n/* jshint ignore:end */\nSubscriptionPage.prototype.getInstance = function getInstance(payload) {\n  return new SubscriptionInstance(this._version, payload);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Events.V1.SubscriptionPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nSubscriptionPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nSubscriptionPage.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the SubscriptionContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Events.V1.SubscriptionInstance\n *\n * @property {string} accountSid - Account SID.\n * @property {string} sid - A string that uniquely identifies this Subscription.\n * @property {Date} dateCreated - The date this Subscription was created\n * @property {Date} dateUpdated - The date this Subscription was updated\n * @property {string} description - Subscription description\n * @property {string} sinkSid - Sink SID.\n * @property {string} url - The URL of this resource.\n * @property {string} links - Nested resource URLs.\n *\n * @param {V1} version - Version of the resource\n * @param {SubscriptionPayload} payload - The instance payload\n * @param {sid} sid - A string that uniquely identifies this Subscription.\n */\n/* jshint ignore:end */\nSubscriptionInstance = function SubscriptionInstance(version, payload, sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.sid = payload.sid; // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n  this.description = payload.description; // jshint ignore:line\n  this.sinkSid = payload.sink_sid; // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n  this.links = payload.links; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {sid: sid || this.sid, };\n};\n\nObject.defineProperty(SubscriptionInstance.prototype,\n  '_proxy', {\n    get: function() {\n      if (!this._context) {\n        this._context = new SubscriptionContext(this._version, this._solution.sid);\n      }\n\n      return this._context;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a SubscriptionInstance\n *\n * @function fetch\n * @memberof Twilio.Events.V1.SubscriptionInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SubscriptionInstance\n */\n/* jshint ignore:end */\nSubscriptionInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * update a SubscriptionInstance\n *\n * @function update\n * @memberof Twilio.Events.V1.SubscriptionInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.description] - Subscription description.\n * @param {string} [opts.sinkSid] - Sink SID.\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SubscriptionInstance\n */\n/* jshint ignore:end */\nSubscriptionInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * remove a SubscriptionInstance\n *\n * @function remove\n * @memberof Twilio.Events.V1.SubscriptionInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SubscriptionInstance\n */\n/* jshint ignore:end */\nSubscriptionInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n\n/* jshint ignore:start */\n/**\n * Access the subscribedEvents\n *\n * @function subscribedEvents\n * @memberof Twilio.Events.V1.SubscriptionInstance#\n *\n * @returns {Twilio.Events.V1.SubscriptionContext.SubscribedEventList}\n */\n/* jshint ignore:end */\nSubscriptionInstance.prototype.subscribedEvents = function subscribedEvents() {\n  return this._proxy.subscribedEvents;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Events.V1.SubscriptionInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nSubscriptionInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nSubscriptionInstance.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the SubscriptionContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Events.V1.SubscriptionContext\n *\n * @property {Twilio.Events.V1.SubscriptionContext.SubscribedEventList} subscribedEvents -\n *          subscribedEvents resource\n *\n * @param {V1} version - Version of the resource\n * @param {sid} sid - A string that uniquely identifies this Subscription.\n */\n/* jshint ignore:end */\nSubscriptionContext = function SubscriptionContext(version, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {sid: sid, };\n  this._uri = `/Subscriptions/${sid}`;\n\n  // Dependents\n  this._subscribedEvents = undefined;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a SubscriptionInstance\n *\n * @function fetch\n * @memberof Twilio.Events.V1.SubscriptionContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SubscriptionInstance\n */\n/* jshint ignore:end */\nSubscriptionContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({uri: this._uri, method: 'GET'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new SubscriptionInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * update a SubscriptionInstance\n *\n * @function update\n * @memberof Twilio.Events.V1.SubscriptionContext#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.description] - Subscription description.\n * @param {string} [opts.sinkSid] - Sink SID.\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SubscriptionInstance\n */\n/* jshint ignore:end */\nSubscriptionContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n  opts = opts || {};\n\n  var deferred = Q.defer();\n  var data = values.of({\n    'Description': _.get(opts, 'description'),\n    'SinkSid': _.get(opts, 'sinkSid')\n  });\n\n  var promise = this._version.update({uri: this._uri, method: 'POST', data: data});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new SubscriptionInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * remove a SubscriptionInstance\n *\n * @function remove\n * @memberof Twilio.Events.V1.SubscriptionContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SubscriptionInstance\n */\n/* jshint ignore:end */\nSubscriptionContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.remove({uri: this._uri, method: 'DELETE'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\nObject.defineProperty(SubscriptionContext.prototype,\n  'subscribedEvents', {\n    get: function() {\n      if (!this._subscribedEvents) {\n        this._subscribedEvents = new SubscribedEventList(this._version, this._solution.sid);\n      }\n      return this._subscribedEvents;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Events.V1.SubscriptionContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nSubscriptionContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nSubscriptionContext.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  SubscriptionList: SubscriptionList,\n  SubscriptionPage: SubscriptionPage,\n  SubscriptionInstance: SubscriptionInstance,\n  SubscriptionContext: SubscriptionContext\n};\n"]},"metadata":{},"sourceType":"script"}