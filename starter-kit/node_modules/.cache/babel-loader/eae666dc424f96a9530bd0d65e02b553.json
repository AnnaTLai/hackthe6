{"ast":null,"code":"'use strict';\n/* jshint ignore:start */\n\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n\n/* jshint ignore:end */\n\nvar Q = require('q');\n/* jshint ignore:line */\n\n\nvar _ = require('lodash');\n/* jshint ignore:line */\n\n\nvar util = require('util');\n/* jshint ignore:line */\n\n\nvar Page = require('../../../../../base/Page');\n/* jshint ignore:line */\n\n\nvar deserialize = require('../../../../../base/deserialize');\n/* jshint ignore:line */\n\n\nvar values = require('../../../../../base/values');\n/* jshint ignore:line */\n\n\nvar TriggerList;\nvar TriggerPage;\nvar TriggerInstance;\nvar TriggerContext;\n/* jshint ignore:start */\n\n/**\n * Initialize the TriggerList\n *\n * @constructor Twilio.Api.V2010.AccountContext.UsageContext.TriggerList\n *\n * @param {Twilio.Api.V2010} version - Version of the resource\n * @param {string} accountSid -\n *          A 34 character string that uniquely identifies this resource.\n */\n\n/* jshint ignore:end */\n\nTriggerList = function TriggerList(version, accountSid) {\n  /* jshint ignore:start */\n\n  /**\n   * @function triggers\n   * @memberof Twilio.Api.V2010.AccountContext.UsageContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Api.V2010.AccountContext.UsageContext.TriggerContext}\n   */\n\n  /* jshint ignore:end */\n  function TriggerListInstance(sid) {\n    return TriggerListInstance.get(sid);\n  }\n\n  TriggerListInstance._version = version; // Path Solution\n\n  TriggerListInstance._solution = {\n    accountSid: accountSid\n  };\n  TriggerListInstance._uri = `/Accounts/${accountSid}/Usage/Triggers.json`;\n  /* jshint ignore:start */\n\n  /**\n   * create a TriggerInstance\n   *\n   * @function create\n   * @memberof Twilio.Api.V2010.AccountContext.UsageContext.TriggerList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.callbackUrl - The URL we call when the trigger fires\n   * @param {string} opts.triggerValue -\n   *          The usage value at which the trigger should fire\n   * @param {trigger.usage_category} opts.usageCategory -\n   *          The usage category the trigger watches\n   * @param {string} [opts.callbackMethod] -\n   *          The HTTP method to use to call callback_url\n   * @param {string} [opts.friendlyName] - A string to describe the resource\n   * @param {trigger.recurring} [opts.recurring] -\n   *          The frequency of a recurring UsageTrigger\n   * @param {trigger.trigger_field} [opts.triggerBy] -\n   *          The field in the UsageRecord resource that fires the trigger\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed TriggerInstance\n   */\n\n  /* jshint ignore:end */\n\n  TriggerListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n\n    if (_.isUndefined(opts.callbackUrl)) {\n      throw new Error('Required parameter \"opts.callbackUrl\" missing.');\n    }\n\n    if (_.isUndefined(opts.triggerValue)) {\n      throw new Error('Required parameter \"opts.triggerValue\" missing.');\n    }\n\n    if (_.isUndefined(opts.usageCategory)) {\n      throw new Error('Required parameter \"opts.usageCategory\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'CallbackUrl': _.get(opts, 'callbackUrl'),\n      'TriggerValue': _.get(opts, 'triggerValue'),\n      'UsageCategory': _.get(opts, 'usageCategory'),\n      'CallbackMethod': _.get(opts, 'callbackMethod'),\n      'FriendlyName': _.get(opts, 'friendlyName'),\n      'Recurring': _.get(opts, 'recurring'),\n      'TriggerBy': _.get(opts, 'triggerBy')\n    });\n\n    var promise = this._version.create({\n      uri: this._uri,\n      method: 'POST',\n      data: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new TriggerInstance(this._version, payload, this._solution.accountSid, this._solution.sid));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Streams TriggerInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Api.V2010.AccountContext.UsageContext.TriggerList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {trigger.recurring} [opts.recurring] -\n   *          The frequency of recurring UsageTriggers to read\n   * @param {trigger.trigger_field} [opts.triggerBy] -\n   *          The trigger field of the UsageTriggers to read\n   * @param {trigger.usage_category} [opts.usageCategory] -\n   *          The usage category of the UsageTriggers to read\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n\n  /* jshint ignore:end */\n\n\n  TriggerListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Lists TriggerInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Api.V2010.AccountContext.UsageContext.TriggerList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {trigger.recurring} [opts.recurring] -\n   *          The frequency of recurring UsageTriggers to read\n   * @param {trigger.trigger_field} [opts.triggerBy] -\n   *          The trigger field of the UsageTriggers to read\n   * @param {trigger.usage_category} [opts.usageCategory] -\n   *          The usage category of the UsageTriggers to read\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  TriggerListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single page of TriggerInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Api.V2010.AccountContext.UsageContext.TriggerList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {trigger.recurring} [opts.recurring] -\n   *          The frequency of recurring UsageTriggers to read\n   * @param {trigger.trigger_field} [opts.triggerBy] -\n   *          The trigger field of the UsageTriggers to read\n   * @param {trigger.usage_category} [opts.usageCategory] -\n   *          The usage category of the UsageTriggers to read\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  TriggerListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'Recurring': _.get(opts, 'recurring'),\n      'TriggerBy': _.get(opts, 'triggerBy'),\n      'UsageCategory': _.get(opts, 'usageCategory'),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new TriggerPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single target page of TriggerInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Api.V2010.AccountContext.UsageContext.TriggerList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  TriggerListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new TriggerPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Constructs a trigger\n   *\n   * @function get\n   * @memberof Twilio.Api.V2010.AccountContext.UsageContext.TriggerList#\n   *\n   * @param {string} sid - The unique string that identifies the resource\n   *\n   * @returns {Twilio.Api.V2010.AccountContext.UsageContext.TriggerContext}\n   */\n\n  /* jshint ignore:end */\n\n\n  TriggerListInstance.get = function get(sid) {\n    return new TriggerContext(this._version, this._solution.accountSid, sid);\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Api.V2010.AccountContext.UsageContext.TriggerList#\n   *\n   * @returns Object\n   */\n\n  /* jshint ignore:end */\n\n\n  TriggerListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  TriggerListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return TriggerListInstance;\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the TriggerPage\n *\n * @constructor Twilio.Api.V2010.AccountContext.UsageContext.TriggerPage\n *\n * @param {V2010} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {TriggerSolution} solution - Path solution\n *\n * @returns TriggerPage\n */\n\n/* jshint ignore:end */\n\n\nTriggerPage = function TriggerPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(TriggerPage.prototype, Page.prototype);\n\nTriggerPage.prototype.constructor = TriggerPage;\n/* jshint ignore:start */\n\n/**\n * Build an instance of TriggerInstance\n *\n * @function getInstance\n * @memberof Twilio.Api.V2010.AccountContext.UsageContext.TriggerPage#\n *\n * @param {TriggerPayload} payload - Payload response from the API\n *\n * @returns TriggerInstance\n */\n\n/* jshint ignore:end */\n\nTriggerPage.prototype.getInstance = function getInstance(payload) {\n  return new TriggerInstance(this._version, payload, this._solution.accountSid);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.UsageContext.TriggerPage#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nTriggerPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nTriggerPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the TriggerContext\n *\n * @constructor Twilio.Api.V2010.AccountContext.UsageContext.TriggerInstance\n *\n * @property {string} accountSid -\n *          The SID of the Account that this trigger monitors\n * @property {string} apiVersion - The API version used to create the resource\n * @property {string} callbackMethod - The HTTP method we use to call callback_url\n * @property {string} callbackUrl - he URL we call when the trigger fires\n * @property {string} currentValue -\n *          The current value of the field the trigger is watching\n * @property {Date} dateCreated -\n *          The RFC 2822 date and time in GMT that the resource was created\n * @property {Date} dateFired -\n *          The RFC 2822 date and time in GMT that the trigger was last fired\n * @property {Date} dateUpdated -\n *          The RFC 2822 date and time in GMT that the resource was last updated\n * @property {string} friendlyName -\n *          The string that you assigned to describe the trigger\n * @property {trigger.recurring} recurring -\n *          The frequency of a recurring UsageTrigger\n * @property {string} sid - The unique string that identifies the resource\n * @property {trigger.trigger_field} triggerBy -\n *          The field in the UsageRecord resource that fires the trigger\n * @property {string} triggerValue - The value at which the trigger will fire\n * @property {string} uri -\n *          The URI of the resource, relative to `https://api.twilio.com`\n * @property {trigger.usage_category} usageCategory -\n *          The usage category the trigger watches\n * @property {string} usageRecordUri -\n *          The URI of the UsageRecord resource this trigger watches\n *\n * @param {V2010} version - Version of the resource\n * @param {TriggerPayload} payload - The instance payload\n * @param {sid} accountSid -\n *          A 34 character string that uniquely identifies this resource.\n * @param {sid} sid - The unique string that identifies the resource\n */\n\n/* jshint ignore:end */\n\n\nTriggerInstance = function TriggerInstance(version, payload, accountSid, sid) {\n  this._version = version; // Marshaled Properties\n\n  this.accountSid = payload.account_sid; // jshint ignore:line\n\n  this.apiVersion = payload.api_version; // jshint ignore:line\n\n  this.callbackMethod = payload.callback_method; // jshint ignore:line\n\n  this.callbackUrl = payload.callback_url; // jshint ignore:line\n\n  this.currentValue = payload.current_value; // jshint ignore:line\n\n  this.dateCreated = deserialize.rfc2822DateTime(payload.date_created); // jshint ignore:line\n\n  this.dateFired = deserialize.rfc2822DateTime(payload.date_fired); // jshint ignore:line\n\n  this.dateUpdated = deserialize.rfc2822DateTime(payload.date_updated); // jshint ignore:line\n\n  this.friendlyName = payload.friendly_name; // jshint ignore:line\n\n  this.recurring = payload.recurring; // jshint ignore:line\n\n  this.sid = payload.sid; // jshint ignore:line\n\n  this.triggerBy = payload.trigger_by; // jshint ignore:line\n\n  this.triggerValue = payload.trigger_value; // jshint ignore:line\n\n  this.uri = payload.uri; // jshint ignore:line\n\n  this.usageCategory = payload.usage_category; // jshint ignore:line\n\n  this.usageRecordUri = payload.usage_record_uri; // jshint ignore:line\n  // Context\n\n  this._context = undefined;\n  this._solution = {\n    accountSid: accountSid,\n    sid: sid || this.sid\n  };\n};\n\nObject.defineProperty(TriggerInstance.prototype, '_proxy', {\n  get: function () {\n    if (!this._context) {\n      this._context = new TriggerContext(this._version, this._solution.accountSid, this._solution.sid);\n    }\n\n    return this._context;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * fetch a TriggerInstance\n *\n * @function fetch\n * @memberof Twilio.Api.V2010.AccountContext.UsageContext.TriggerInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TriggerInstance\n */\n\n/* jshint ignore:end */\n\nTriggerInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n/* jshint ignore:start */\n\n/**\n * update a TriggerInstance\n *\n * @function update\n * @memberof Twilio.Api.V2010.AccountContext.UsageContext.TriggerInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.callbackMethod] -\n *          The HTTP method to use to call callback_url\n * @param {string} [opts.callbackUrl] - The URL we call when the trigger fires\n * @param {string} [opts.friendlyName] - A string to describe the resource\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TriggerInstance\n */\n\n/* jshint ignore:end */\n\n\nTriggerInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n/* jshint ignore:start */\n\n/**\n * remove a TriggerInstance\n *\n * @function remove\n * @memberof Twilio.Api.V2010.AccountContext.UsageContext.TriggerInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TriggerInstance\n */\n\n/* jshint ignore:end */\n\n\nTriggerInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.UsageContext.TriggerInstance#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nTriggerInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nTriggerInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the TriggerContext\n *\n * @constructor Twilio.Api.V2010.AccountContext.UsageContext.TriggerContext\n *\n * @param {V2010} version - Version of the resource\n * @param {sid} accountSid -\n *          The SID of the Account that created the resource to fetch\n * @param {sid} sid - The unique string that identifies the resource\n */\n\n/* jshint ignore:end */\n\n\nTriggerContext = function TriggerContext(version, accountSid, sid) {\n  this._version = version; // Path Solution\n\n  this._solution = {\n    accountSid: accountSid,\n    sid: sid\n  };\n  this._uri = `/Accounts/${accountSid}/Usage/Triggers/${sid}.json`;\n};\n/* jshint ignore:start */\n\n/**\n * fetch a TriggerInstance\n *\n * @function fetch\n * @memberof Twilio.Api.V2010.AccountContext.UsageContext.TriggerContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TriggerInstance\n */\n\n/* jshint ignore:end */\n\n\nTriggerContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new TriggerInstance(this._version, payload, this._solution.accountSid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * update a TriggerInstance\n *\n * @function update\n * @memberof Twilio.Api.V2010.AccountContext.UsageContext.TriggerContext#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.callbackMethod] -\n *          The HTTP method to use to call callback_url\n * @param {string} [opts.callbackUrl] - The URL we call when the trigger fires\n * @param {string} [opts.friendlyName] - A string to describe the resource\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TriggerInstance\n */\n\n/* jshint ignore:end */\n\n\nTriggerContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n\n  opts = opts || {};\n  var deferred = Q.defer();\n  var data = values.of({\n    'CallbackMethod': _.get(opts, 'callbackMethod'),\n    'CallbackUrl': _.get(opts, 'callbackUrl'),\n    'FriendlyName': _.get(opts, 'friendlyName')\n  });\n\n  var promise = this._version.update({\n    uri: this._uri,\n    method: 'POST',\n    data: data\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new TriggerInstance(this._version, payload, this._solution.accountSid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * remove a TriggerInstance\n *\n * @function remove\n * @memberof Twilio.Api.V2010.AccountContext.UsageContext.TriggerContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TriggerInstance\n */\n\n/* jshint ignore:end */\n\n\nTriggerContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.remove({\n    uri: this._uri,\n    method: 'DELETE'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.UsageContext.TriggerContext#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nTriggerContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nTriggerContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  TriggerList: TriggerList,\n  TriggerPage: TriggerPage,\n  TriggerInstance: TriggerInstance,\n  TriggerContext: TriggerContext\n};","map":{"version":3,"sources":["/Users/tony_niu/Visual Studio/Twilio/twilio-video-starter-kit/node_modules/twilio/lib/rest/api/v2010/account/usage/trigger.js"],"names":["Q","require","_","util","Page","deserialize","values","TriggerList","TriggerPage","TriggerInstance","TriggerContext","version","accountSid","TriggerListInstance","sid","get","_version","_solution","_uri","create","opts","callback","isUndefined","Error","callbackUrl","triggerValue","usageCategory","deferred","defer","data","of","promise","uri","method","then","payload","resolve","bind","catch","error","reject","isFunction","nodeify","each","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","fetchNextPage","fn","page","instances","instance","nextPage","merge","list","allResources","resource","push","length","pageToken","pageNumber","params","getPage","targetUrl","_domain","twilio","request","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","account_sid","apiVersion","api_version","callbackMethod","callback_method","callback_url","currentValue","current_value","dateCreated","rfc2822DateTime","date_created","dateFired","date_fired","dateUpdated","date_updated","friendlyName","friendly_name","recurring","triggerBy","trigger_by","trigger_value","usage_category","usageRecordUri","usage_record_uri","_context","undefined","Object","defineProperty","fetch","_proxy","update","remove","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar Page = require('../../../../../base/Page');  /* jshint ignore:line */\nvar deserialize = require(\n    '../../../../../base/deserialize');  /* jshint ignore:line */\nvar values = require('../../../../../base/values');  /* jshint ignore:line */\n\nvar TriggerList;\nvar TriggerPage;\nvar TriggerInstance;\nvar TriggerContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the TriggerList\n *\n * @constructor Twilio.Api.V2010.AccountContext.UsageContext.TriggerList\n *\n * @param {Twilio.Api.V2010} version - Version of the resource\n * @param {string} accountSid -\n *          A 34 character string that uniquely identifies this resource.\n */\n/* jshint ignore:end */\nTriggerList = function TriggerList(version, accountSid) {\n  /* jshint ignore:start */\n  /**\n   * @function triggers\n   * @memberof Twilio.Api.V2010.AccountContext.UsageContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Api.V2010.AccountContext.UsageContext.TriggerContext}\n   */\n  /* jshint ignore:end */\n  function TriggerListInstance(sid) {\n    return TriggerListInstance.get(sid);\n  }\n\n  TriggerListInstance._version = version;\n  // Path Solution\n  TriggerListInstance._solution = {accountSid: accountSid};\n  TriggerListInstance._uri = `/Accounts/${accountSid}/Usage/Triggers.json`;\n  /* jshint ignore:start */\n  /**\n   * create a TriggerInstance\n   *\n   * @function create\n   * @memberof Twilio.Api.V2010.AccountContext.UsageContext.TriggerList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.callbackUrl - The URL we call when the trigger fires\n   * @param {string} opts.triggerValue -\n   *          The usage value at which the trigger should fire\n   * @param {trigger.usage_category} opts.usageCategory -\n   *          The usage category the trigger watches\n   * @param {string} [opts.callbackMethod] -\n   *          The HTTP method to use to call callback_url\n   * @param {string} [opts.friendlyName] - A string to describe the resource\n   * @param {trigger.recurring} [opts.recurring] -\n   *          The frequency of a recurring UsageTrigger\n   * @param {trigger.trigger_field} [opts.triggerBy] -\n   *          The field in the UsageRecord resource that fires the trigger\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed TriggerInstance\n   */\n  /* jshint ignore:end */\n  TriggerListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n    if (_.isUndefined(opts.callbackUrl)) {\n      throw new Error('Required parameter \"opts.callbackUrl\" missing.');\n    }\n    if (_.isUndefined(opts.triggerValue)) {\n      throw new Error('Required parameter \"opts.triggerValue\" missing.');\n    }\n    if (_.isUndefined(opts.usageCategory)) {\n      throw new Error('Required parameter \"opts.usageCategory\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'CallbackUrl': _.get(opts, 'callbackUrl'),\n      'TriggerValue': _.get(opts, 'triggerValue'),\n      'UsageCategory': _.get(opts, 'usageCategory'),\n      'CallbackMethod': _.get(opts, 'callbackMethod'),\n      'FriendlyName': _.get(opts, 'friendlyName'),\n      'Recurring': _.get(opts, 'recurring'),\n      'TriggerBy': _.get(opts, 'triggerBy')\n    });\n\n    var promise = this._version.create({uri: this._uri, method: 'POST', data: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new TriggerInstance(\n        this._version,\n        payload,\n        this._solution.accountSid,\n        this._solution.sid\n      ));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Streams TriggerInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Api.V2010.AccountContext.UsageContext.TriggerList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {trigger.recurring} [opts.recurring] -\n   *          The frequency of recurring UsageTriggers to read\n   * @param {trigger.trigger_field} [opts.triggerBy] -\n   *          The trigger field of the UsageTriggers to read\n   * @param {trigger.usage_category} [opts.usageCategory] -\n   *          The usage category of the UsageTriggers to read\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  TriggerListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists TriggerInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Api.V2010.AccountContext.UsageContext.TriggerList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {trigger.recurring} [opts.recurring] -\n   *          The frequency of recurring UsageTriggers to read\n   * @param {trigger.trigger_field} [opts.triggerBy] -\n   *          The trigger field of the UsageTriggers to read\n   * @param {trigger.usage_category} [opts.usageCategory] -\n   *          The usage category of the UsageTriggers to read\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  TriggerListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of TriggerInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Api.V2010.AccountContext.UsageContext.TriggerList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {trigger.recurring} [opts.recurring] -\n   *          The frequency of recurring UsageTriggers to read\n   * @param {trigger.trigger_field} [opts.triggerBy] -\n   *          The trigger field of the UsageTriggers to read\n   * @param {trigger.usage_category} [opts.usageCategory] -\n   *          The usage category of the UsageTriggers to read\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  TriggerListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'Recurring': _.get(opts, 'recurring'),\n      'TriggerBy': _.get(opts, 'triggerBy'),\n      'UsageCategory': _.get(opts, 'usageCategory'),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new TriggerPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of TriggerInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Api.V2010.AccountContext.UsageContext.TriggerList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  TriggerListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new TriggerPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a trigger\n   *\n   * @function get\n   * @memberof Twilio.Api.V2010.AccountContext.UsageContext.TriggerList#\n   *\n   * @param {string} sid - The unique string that identifies the resource\n   *\n   * @returns {Twilio.Api.V2010.AccountContext.UsageContext.TriggerContext}\n   */\n  /* jshint ignore:end */\n  TriggerListInstance.get = function get(sid) {\n    return new TriggerContext(this._version, this._solution.accountSid, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Api.V2010.AccountContext.UsageContext.TriggerList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  TriggerListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  TriggerListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return TriggerListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the TriggerPage\n *\n * @constructor Twilio.Api.V2010.AccountContext.UsageContext.TriggerPage\n *\n * @param {V2010} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {TriggerSolution} solution - Path solution\n *\n * @returns TriggerPage\n */\n/* jshint ignore:end */\nTriggerPage = function TriggerPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(TriggerPage.prototype, Page.prototype);\nTriggerPage.prototype.constructor = TriggerPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of TriggerInstance\n *\n * @function getInstance\n * @memberof Twilio.Api.V2010.AccountContext.UsageContext.TriggerPage#\n *\n * @param {TriggerPayload} payload - Payload response from the API\n *\n * @returns TriggerInstance\n */\n/* jshint ignore:end */\nTriggerPage.prototype.getInstance = function getInstance(payload) {\n  return new TriggerInstance(this._version, payload, this._solution.accountSid);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.UsageContext.TriggerPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nTriggerPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nTriggerPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the TriggerContext\n *\n * @constructor Twilio.Api.V2010.AccountContext.UsageContext.TriggerInstance\n *\n * @property {string} accountSid -\n *          The SID of the Account that this trigger monitors\n * @property {string} apiVersion - The API version used to create the resource\n * @property {string} callbackMethod - The HTTP method we use to call callback_url\n * @property {string} callbackUrl - he URL we call when the trigger fires\n * @property {string} currentValue -\n *          The current value of the field the trigger is watching\n * @property {Date} dateCreated -\n *          The RFC 2822 date and time in GMT that the resource was created\n * @property {Date} dateFired -\n *          The RFC 2822 date and time in GMT that the trigger was last fired\n * @property {Date} dateUpdated -\n *          The RFC 2822 date and time in GMT that the resource was last updated\n * @property {string} friendlyName -\n *          The string that you assigned to describe the trigger\n * @property {trigger.recurring} recurring -\n *          The frequency of a recurring UsageTrigger\n * @property {string} sid - The unique string that identifies the resource\n * @property {trigger.trigger_field} triggerBy -\n *          The field in the UsageRecord resource that fires the trigger\n * @property {string} triggerValue - The value at which the trigger will fire\n * @property {string} uri -\n *          The URI of the resource, relative to `https://api.twilio.com`\n * @property {trigger.usage_category} usageCategory -\n *          The usage category the trigger watches\n * @property {string} usageRecordUri -\n *          The URI of the UsageRecord resource this trigger watches\n *\n * @param {V2010} version - Version of the resource\n * @param {TriggerPayload} payload - The instance payload\n * @param {sid} accountSid -\n *          A 34 character string that uniquely identifies this resource.\n * @param {sid} sid - The unique string that identifies the resource\n */\n/* jshint ignore:end */\nTriggerInstance = function TriggerInstance(version, payload, accountSid, sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.apiVersion = payload.api_version; // jshint ignore:line\n  this.callbackMethod = payload.callback_method; // jshint ignore:line\n  this.callbackUrl = payload.callback_url; // jshint ignore:line\n  this.currentValue = payload.current_value; // jshint ignore:line\n  this.dateCreated = deserialize.rfc2822DateTime(payload.date_created); // jshint ignore:line\n  this.dateFired = deserialize.rfc2822DateTime(payload.date_fired); // jshint ignore:line\n  this.dateUpdated = deserialize.rfc2822DateTime(payload.date_updated); // jshint ignore:line\n  this.friendlyName = payload.friendly_name; // jshint ignore:line\n  this.recurring = payload.recurring; // jshint ignore:line\n  this.sid = payload.sid; // jshint ignore:line\n  this.triggerBy = payload.trigger_by; // jshint ignore:line\n  this.triggerValue = payload.trigger_value; // jshint ignore:line\n  this.uri = payload.uri; // jshint ignore:line\n  this.usageCategory = payload.usage_category; // jshint ignore:line\n  this.usageRecordUri = payload.usage_record_uri; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {accountSid: accountSid, sid: sid || this.sid, };\n};\n\nObject.defineProperty(TriggerInstance.prototype,\n  '_proxy', {\n    get: function() {\n      if (!this._context) {\n        this._context = new TriggerContext(this._version, this._solution.accountSid, this._solution.sid);\n      }\n\n      return this._context;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a TriggerInstance\n *\n * @function fetch\n * @memberof Twilio.Api.V2010.AccountContext.UsageContext.TriggerInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TriggerInstance\n */\n/* jshint ignore:end */\nTriggerInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * update a TriggerInstance\n *\n * @function update\n * @memberof Twilio.Api.V2010.AccountContext.UsageContext.TriggerInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.callbackMethod] -\n *          The HTTP method to use to call callback_url\n * @param {string} [opts.callbackUrl] - The URL we call when the trigger fires\n * @param {string} [opts.friendlyName] - A string to describe the resource\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TriggerInstance\n */\n/* jshint ignore:end */\nTriggerInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * remove a TriggerInstance\n *\n * @function remove\n * @memberof Twilio.Api.V2010.AccountContext.UsageContext.TriggerInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TriggerInstance\n */\n/* jshint ignore:end */\nTriggerInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.UsageContext.TriggerInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nTriggerInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nTriggerInstance.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the TriggerContext\n *\n * @constructor Twilio.Api.V2010.AccountContext.UsageContext.TriggerContext\n *\n * @param {V2010} version - Version of the resource\n * @param {sid} accountSid -\n *          The SID of the Account that created the resource to fetch\n * @param {sid} sid - The unique string that identifies the resource\n */\n/* jshint ignore:end */\nTriggerContext = function TriggerContext(version, accountSid, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {accountSid: accountSid, sid: sid, };\n  this._uri = `/Accounts/${accountSid}/Usage/Triggers/${sid}.json`;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a TriggerInstance\n *\n * @function fetch\n * @memberof Twilio.Api.V2010.AccountContext.UsageContext.TriggerContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TriggerInstance\n */\n/* jshint ignore:end */\nTriggerContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({uri: this._uri, method: 'GET'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new TriggerInstance(\n      this._version,\n      payload,\n      this._solution.accountSid,\n      this._solution.sid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * update a TriggerInstance\n *\n * @function update\n * @memberof Twilio.Api.V2010.AccountContext.UsageContext.TriggerContext#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.callbackMethod] -\n *          The HTTP method to use to call callback_url\n * @param {string} [opts.callbackUrl] - The URL we call when the trigger fires\n * @param {string} [opts.friendlyName] - A string to describe the resource\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TriggerInstance\n */\n/* jshint ignore:end */\nTriggerContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n  opts = opts || {};\n\n  var deferred = Q.defer();\n  var data = values.of({\n    'CallbackMethod': _.get(opts, 'callbackMethod'),\n    'CallbackUrl': _.get(opts, 'callbackUrl'),\n    'FriendlyName': _.get(opts, 'friendlyName')\n  });\n\n  var promise = this._version.update({uri: this._uri, method: 'POST', data: data});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new TriggerInstance(\n      this._version,\n      payload,\n      this._solution.accountSid,\n      this._solution.sid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * remove a TriggerInstance\n *\n * @function remove\n * @memberof Twilio.Api.V2010.AccountContext.UsageContext.TriggerContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TriggerInstance\n */\n/* jshint ignore:end */\nTriggerContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.remove({uri: this._uri, method: 'DELETE'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.UsageContext.TriggerContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nTriggerContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nTriggerContext.prototype[util.inspect.custom] = function inspect(depth, options)\n    {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  TriggerList: TriggerList,\n  TriggerPage: TriggerPage,\n  TriggerInstance: TriggerInstance,\n  TriggerContext: TriggerContext\n};\n"]},"metadata":{},"sourceType":"script"}