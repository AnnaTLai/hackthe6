{"ast":null,"code":"// Generated by CoffeeScript 2.4.1\n(function () {\n  var NodeType, XMLDTDAttList, XMLDTDElement, XMLDTDEntity, XMLDTDNotation, XMLDocType, XMLNamedNodeMap, XMLNode, isObject;\n  ({\n    isObject\n  } = require('./Utility'));\n  XMLNode = require('./XMLNode');\n  NodeType = require('./NodeType');\n  XMLDTDAttList = require('./XMLDTDAttList');\n  XMLDTDEntity = require('./XMLDTDEntity');\n  XMLDTDElement = require('./XMLDTDElement');\n  XMLDTDNotation = require('./XMLDTDNotation');\n  XMLNamedNodeMap = require('./XMLNamedNodeMap'); // Represents doctype declaration\n\n  module.exports = XMLDocType = function () {\n    class XMLDocType extends XMLNode {\n      // Initializes a new instance of `XMLDocType`\n      // `parent` the document object\n      // `pubID` public identifier of the external subset\n      // `sysID` system identifier of the external subset\n      constructor(parent, pubID, sysID) {\n        var child, i, len, ref;\n        super(parent);\n        this.type = NodeType.DocType; // set DTD name to the name of the root node\n\n        if (parent.children) {\n          ref = parent.children;\n\n          for (i = 0, len = ref.length; i < len; i++) {\n            child = ref[i];\n\n            if (child.type === NodeType.Element) {\n              this.name = child.name;\n              break;\n            }\n          }\n        }\n\n        this.documentObject = parent; // arguments may also be passed as an object\n\n        if (isObject(pubID)) {\n          ({\n            pubID,\n            sysID\n          } = pubID);\n        }\n\n        if (sysID == null) {\n          [sysID, pubID] = [pubID, sysID];\n        }\n\n        if (pubID != null) {\n          this.pubID = this.stringify.dtdPubID(pubID);\n        }\n\n        if (sysID != null) {\n          this.sysID = this.stringify.dtdSysID(sysID);\n        }\n      } // Creates an element type declaration\n      // `name` element name\n      // `value` element content (defaults to #PCDATA)\n\n\n      element(name, value) {\n        var child;\n        child = new XMLDTDElement(this, name, value);\n        this.children.push(child);\n        return this;\n      } // Creates an attribute declaration\n      // `elementName` the name of the element containing this attribute\n      // `attributeName` attribute name\n      // `attributeType` type of the attribute (defaults to CDATA)\n      // `defaultValueType` default value type (either #REQUIRED, #IMPLIED, #FIXED or\n      //                    #DEFAULT) (defaults to #IMPLIED)\n      // `defaultValue` default value of the attribute\n      //                (only used for #FIXED or #DEFAULT)\n\n\n      attList(elementName, attributeName, attributeType, defaultValueType, defaultValue) {\n        var child;\n        child = new XMLDTDAttList(this, elementName, attributeName, attributeType, defaultValueType, defaultValue);\n        this.children.push(child);\n        return this;\n      } // Creates a general entity declaration\n      // `name` the name of the entity\n      // `value` internal entity value or an object with external entity details\n      // `value.pubID` public identifier\n      // `value.sysID` system identifier\n      // `value.nData` notation declaration\n\n\n      entity(name, value) {\n        var child;\n        child = new XMLDTDEntity(this, false, name, value);\n        this.children.push(child);\n        return this;\n      } // Creates a parameter entity declaration\n      // `name` the name of the entity\n      // `value` internal entity value or an object with external entity details\n      // `value.pubID` public identifier\n      // `value.sysID` system identifier\n\n\n      pEntity(name, value) {\n        var child;\n        child = new XMLDTDEntity(this, true, name, value);\n        this.children.push(child);\n        return this;\n      } // Creates a NOTATION declaration\n      // `name` the name of the notation\n      // `value` an object with external entity details\n      // `value.pubID` public identifier\n      // `value.sysID` system identifier\n\n\n      notation(name, value) {\n        var child;\n        child = new XMLDTDNotation(this, name, value);\n        this.children.push(child);\n        return this;\n      } // Converts to string\n      // `options.pretty` pretty prints the result\n      // `options.indent` indentation for pretty print\n      // `options.offset` how many indentations to add to every line for pretty print\n      // `options.newline` newline sequence for pretty print\n\n\n      toString(options) {\n        return this.options.writer.docType(this, this.options.writer.filterOptions(options));\n      } // Aliases\n\n\n      ele(name, value) {\n        return this.element(name, value);\n      }\n\n      att(elementName, attributeName, attributeType, defaultValueType, defaultValue) {\n        return this.attList(elementName, attributeName, attributeType, defaultValueType, defaultValue);\n      }\n\n      ent(name, value) {\n        return this.entity(name, value);\n      }\n\n      pent(name, value) {\n        return this.pEntity(name, value);\n      }\n\n      not(name, value) {\n        return this.notation(name, value);\n      }\n\n      up() {\n        return this.root() || this.documentObject;\n      }\n\n      isEqualNode(node) {\n        if (!super.isEqualNode(node)) {\n          return false;\n        }\n\n        if (node.name !== this.name) {\n          return false;\n        }\n\n        if (node.publicId !== this.publicId) {\n          return false;\n        }\n\n        if (node.systemId !== this.systemId) {\n          return false;\n        }\n\n        return true;\n      }\n\n    }\n\n    ; // DOM level 1\n\n    Object.defineProperty(XMLDocType.prototype, 'entities', {\n      get: function () {\n        var child, i, len, nodes, ref;\n        nodes = {};\n        ref = this.children;\n\n        for (i = 0, len = ref.length; i < len; i++) {\n          child = ref[i];\n\n          if (child.type === NodeType.EntityDeclaration && !child.pe) {\n            nodes[child.name] = child;\n          }\n        }\n\n        return new XMLNamedNodeMap(nodes);\n      }\n    });\n    Object.defineProperty(XMLDocType.prototype, 'notations', {\n      get: function () {\n        var child, i, len, nodes, ref;\n        nodes = {};\n        ref = this.children;\n\n        for (i = 0, len = ref.length; i < len; i++) {\n          child = ref[i];\n\n          if (child.type === NodeType.NotationDeclaration) {\n            nodes[child.name] = child;\n          }\n        }\n\n        return new XMLNamedNodeMap(nodes);\n      }\n    }); // DOM level 2\n\n    Object.defineProperty(XMLDocType.prototype, 'publicId', {\n      get: function () {\n        return this.pubID;\n      }\n    });\n    Object.defineProperty(XMLDocType.prototype, 'systemId', {\n      get: function () {\n        return this.sysID;\n      }\n    });\n    Object.defineProperty(XMLDocType.prototype, 'internalSubset', {\n      get: function () {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n    });\n    return XMLDocType;\n  }.call(this);\n}).call(this);","map":{"version":3,"sources":["/Users/tony_niu/Visual Studio/Twilio/twilio-video-starter-kit/node_modules/xmlbuilder/lib/XMLDocType.js"],"names":["NodeType","XMLDTDAttList","XMLDTDElement","XMLDTDEntity","XMLDTDNotation","XMLDocType","XMLNamedNodeMap","XMLNode","isObject","require","module","exports","constructor","parent","pubID","sysID","child","i","len","ref","type","DocType","children","length","Element","name","documentObject","stringify","dtdPubID","dtdSysID","element","value","push","attList","elementName","attributeName","attributeType","defaultValueType","defaultValue","entity","pEntity","notation","toString","options","writer","docType","filterOptions","ele","att","ent","pent","not","up","root","isEqualNode","node","publicId","systemId","Object","defineProperty","prototype","get","nodes","EntityDeclaration","pe","NotationDeclaration","Error","debugInfo","call"],"mappings":"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","sourcesContent":["// Generated by CoffeeScript 2.4.1\n(function() {\n  var NodeType, XMLDTDAttList, XMLDTDElement, XMLDTDEntity, XMLDTDNotation, XMLDocType, XMLNamedNodeMap, XMLNode, isObject;\n\n  ({isObject} = require('./Utility'));\n\n  XMLNode = require('./XMLNode');\n\n  NodeType = require('./NodeType');\n\n  XMLDTDAttList = require('./XMLDTDAttList');\n\n  XMLDTDEntity = require('./XMLDTDEntity');\n\n  XMLDTDElement = require('./XMLDTDElement');\n\n  XMLDTDNotation = require('./XMLDTDNotation');\n\n  XMLNamedNodeMap = require('./XMLNamedNodeMap');\n\n  // Represents doctype declaration\n  module.exports = XMLDocType = (function() {\n    class XMLDocType extends XMLNode {\n      // Initializes a new instance of `XMLDocType`\n\n      // `parent` the document object\n\n      // `pubID` public identifier of the external subset\n      // `sysID` system identifier of the external subset\n      constructor(parent, pubID, sysID) {\n        var child, i, len, ref;\n        super(parent);\n        this.type = NodeType.DocType;\n        // set DTD name to the name of the root node\n        if (parent.children) {\n          ref = parent.children;\n          for (i = 0, len = ref.length; i < len; i++) {\n            child = ref[i];\n            if (child.type === NodeType.Element) {\n              this.name = child.name;\n              break;\n            }\n          }\n        }\n        this.documentObject = parent;\n        // arguments may also be passed as an object\n        if (isObject(pubID)) {\n          ({pubID, sysID} = pubID);\n        }\n        if (sysID == null) {\n          [sysID, pubID] = [pubID, sysID];\n        }\n        if (pubID != null) {\n          this.pubID = this.stringify.dtdPubID(pubID);\n        }\n        if (sysID != null) {\n          this.sysID = this.stringify.dtdSysID(sysID);\n        }\n      }\n\n      // Creates an element type declaration\n\n      // `name` element name\n      // `value` element content (defaults to #PCDATA)\n      element(name, value) {\n        var child;\n        child = new XMLDTDElement(this, name, value);\n        this.children.push(child);\n        return this;\n      }\n\n      // Creates an attribute declaration\n\n      // `elementName` the name of the element containing this attribute\n      // `attributeName` attribute name\n      // `attributeType` type of the attribute (defaults to CDATA)\n      // `defaultValueType` default value type (either #REQUIRED, #IMPLIED, #FIXED or\n      //                    #DEFAULT) (defaults to #IMPLIED)\n      // `defaultValue` default value of the attribute\n      //                (only used for #FIXED or #DEFAULT)\n      attList(elementName, attributeName, attributeType, defaultValueType, defaultValue) {\n        var child;\n        child = new XMLDTDAttList(this, elementName, attributeName, attributeType, defaultValueType, defaultValue);\n        this.children.push(child);\n        return this;\n      }\n\n      // Creates a general entity declaration\n\n      // `name` the name of the entity\n      // `value` internal entity value or an object with external entity details\n      // `value.pubID` public identifier\n      // `value.sysID` system identifier\n      // `value.nData` notation declaration\n      entity(name, value) {\n        var child;\n        child = new XMLDTDEntity(this, false, name, value);\n        this.children.push(child);\n        return this;\n      }\n\n      // Creates a parameter entity declaration\n\n      // `name` the name of the entity\n      // `value` internal entity value or an object with external entity details\n      // `value.pubID` public identifier\n      // `value.sysID` system identifier\n      pEntity(name, value) {\n        var child;\n        child = new XMLDTDEntity(this, true, name, value);\n        this.children.push(child);\n        return this;\n      }\n\n      // Creates a NOTATION declaration\n\n      // `name` the name of the notation\n      // `value` an object with external entity details\n      // `value.pubID` public identifier\n      // `value.sysID` system identifier\n      notation(name, value) {\n        var child;\n        child = new XMLDTDNotation(this, name, value);\n        this.children.push(child);\n        return this;\n      }\n\n      // Converts to string\n\n      // `options.pretty` pretty prints the result\n      // `options.indent` indentation for pretty print\n      // `options.offset` how many indentations to add to every line for pretty print\n      // `options.newline` newline sequence for pretty print\n      toString(options) {\n        return this.options.writer.docType(this, this.options.writer.filterOptions(options));\n      }\n\n      // Aliases\n      ele(name, value) {\n        return this.element(name, value);\n      }\n\n      att(elementName, attributeName, attributeType, defaultValueType, defaultValue) {\n        return this.attList(elementName, attributeName, attributeType, defaultValueType, defaultValue);\n      }\n\n      ent(name, value) {\n        return this.entity(name, value);\n      }\n\n      pent(name, value) {\n        return this.pEntity(name, value);\n      }\n\n      not(name, value) {\n        return this.notation(name, value);\n      }\n\n      up() {\n        return this.root() || this.documentObject;\n      }\n\n      isEqualNode(node) {\n        if (!super.isEqualNode(node)) {\n          return false;\n        }\n        if (node.name !== this.name) {\n          return false;\n        }\n        if (node.publicId !== this.publicId) {\n          return false;\n        }\n        if (node.systemId !== this.systemId) {\n          return false;\n        }\n        return true;\n      }\n\n    };\n\n    // DOM level 1\n    Object.defineProperty(XMLDocType.prototype, 'entities', {\n      get: function() {\n        var child, i, len, nodes, ref;\n        nodes = {};\n        ref = this.children;\n        for (i = 0, len = ref.length; i < len; i++) {\n          child = ref[i];\n          if ((child.type === NodeType.EntityDeclaration) && !child.pe) {\n            nodes[child.name] = child;\n          }\n        }\n        return new XMLNamedNodeMap(nodes);\n      }\n    });\n\n    Object.defineProperty(XMLDocType.prototype, 'notations', {\n      get: function() {\n        var child, i, len, nodes, ref;\n        nodes = {};\n        ref = this.children;\n        for (i = 0, len = ref.length; i < len; i++) {\n          child = ref[i];\n          if (child.type === NodeType.NotationDeclaration) {\n            nodes[child.name] = child;\n          }\n        }\n        return new XMLNamedNodeMap(nodes);\n      }\n    });\n\n    // DOM level 2\n    Object.defineProperty(XMLDocType.prototype, 'publicId', {\n      get: function() {\n        return this.pubID;\n      }\n    });\n\n    Object.defineProperty(XMLDocType.prototype, 'systemId', {\n      get: function() {\n        return this.sysID;\n      }\n    });\n\n    Object.defineProperty(XMLDocType.prototype, 'internalSubset', {\n      get: function() {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n    });\n\n    return XMLDocType;\n\n  }).call(this);\n\n}).call(this);\n"]},"metadata":{},"sourceType":"script"}