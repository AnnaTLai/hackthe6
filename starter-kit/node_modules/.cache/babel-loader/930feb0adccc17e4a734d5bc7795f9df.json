{"ast":null,"code":"'use strict';\n\nvar _ = require('lodash');\n\nvar Policy = require('./TaskRouterCapability').Policy;\n\nvar EVENT_URL_BASE = 'https://event-bridge.twilio.com/v1/wschannels';\nvar TASKROUTER_BASE_URL = 'https://taskrouter.twilio.com';\nvar TASKROUTER_VERSION = 'v1';\n/**\n * Build the default Policies for a worker\n *\n * @param {string} version TaskRouter version\n * @param {string} workspaceSid workspace sid\n * @param {string} workerSid worker sid\n * @returns {Array<Policy>} list of Policies\n */\n\nfunction defaultWorkerPolicies(version, workspaceSid, workerSid) {\n  var activities = new Policy({\n    url: _.join([TASKROUTER_BASE_URL, version, 'Workspaces', workspaceSid, 'Activities'], '/'),\n    method: 'GET',\n    allow: true\n  });\n  var tasks = new Policy({\n    url: _.join([TASKROUTER_BASE_URL, version, 'Workspaces', workspaceSid, 'Tasks', '**'], '/'),\n    method: 'GET',\n    allow: true\n  });\n  var reservations = new Policy({\n    url: _.join([TASKROUTER_BASE_URL, version, 'Workspaces', workspaceSid, 'Workers', workerSid, 'Reservations', '**'], '/'),\n    method: 'GET',\n    allow: true\n  });\n  var workerFetch = new Policy({\n    url: _.join([TASKROUTER_BASE_URL, version, 'Workspaces', workspaceSid, 'Workers', workerSid], '/'),\n    method: 'GET',\n    allow: true\n  });\n  return [activities, tasks, reservations, workerFetch];\n}\n/**\n * Build the default Event Bridge Policies\n *\n * @param {string} accountSid account sid\n * @param {string} channelId channel id\n * @returns {Array<Policy>} list of Policies\n */\n\n\nfunction defaultEventBridgePolicies(accountSid, channelId) {\n  var url = _.join([EVENT_URL_BASE, accountSid, channelId], '/');\n\n  return [new Policy({\n    url: url,\n    method: 'GET',\n    allow: true\n  }), new Policy({\n    url: url,\n    method: 'POST',\n    allow: true\n  })];\n}\n/**\n * Generate TaskRouter workspace url\n *\n * @param {string} [workspaceSid] workspace sid or '**' for all workspaces\n * @return {string} generated url\n */\n\n\nfunction workspacesUrl(workspaceSid) {\n  return _.join(_.filter([TASKROUTER_BASE_URL, TASKROUTER_VERSION, 'Workspaces', workspaceSid], _.isString), '/');\n}\n/**\n * Generate TaskRouter task queue url\n *\n * @param {string} workspaceSid workspace sid\n * @param {string} [taskQueueSid] task queue sid or '**' for all task queues\n * @return {string} generated url\n */\n\n\nfunction taskQueuesUrl(workspaceSid, taskQueueSid) {\n  return _.join(_.filter([workspacesUrl(workspaceSid), 'TaskQueues', taskQueueSid], _.isString), '/');\n}\n/**\n * Generate TaskRouter task url\n *\n * @param {string} workspaceSid workspace sid\n * @param {string} [taskSid] task sid or '**' for all tasks\n * @returns {string} generated url\n */\n\n\nfunction tasksUrl(workspaceSid, taskSid) {\n  return _.join(_.filter([workspacesUrl(workspaceSid), 'Tasks', taskSid], _.isString), '/');\n}\n/**\n * Generate TaskRouter activity url\n * \n * @param {string} workspaceSid workspace sid\n * @param {string} [activitySid] activity sid or '**' for all activities\n * @returns {string} generated url\n */\n\n\nfunction activitiesUrl(workspaceSid, activitySid) {\n  return _.join(_.filter([workspacesUrl(workspaceSid), 'Activities', activitySid], _.isString), '/');\n}\n/**\n * Generate TaskRouter worker url\n *\n * @param {string} workspaceSid workspace sid\n * @param {string} [workerSid] worker sid or '**' for all workers\n * @returns {string} generated url\n */\n\n\nfunction workersUrl(workspaceSid, workerSid) {\n  return _.join(_.filter([workspacesUrl(workspaceSid), 'Workers', workerSid], _.isString), '/');\n}\n/**\n * Generate TaskRouter worker reservation url\n *\n * @param {string} workspaceSid workspace sid\n * @param {string} workerSid worker sid\n * @param {string} [reservationSid] reservation sid or '**' for all reservations\n * @returns {string} generated url\n */\n\n\nfunction reservationsUrl(workspaceSid, workerSid, reservationSid) {\n  return _.join(_.filter([workersUrl(workspaceSid, workerSid), 'Reservations', reservationSid], _.isString), '/');\n}\n\nmodule.exports = {\n  defaultWorkerPolicies: defaultWorkerPolicies,\n  defaultEventBridgePolicies: defaultEventBridgePolicies,\n  workspacesUrl: workspacesUrl,\n  taskQueuesUrl: taskQueuesUrl,\n  tasksUrl: tasksUrl,\n  activitiesUrl: activitiesUrl,\n  workersUrl: workersUrl,\n  reservationsUrl: reservationsUrl\n};","map":{"version":3,"sources":["/Users/tony_niu/Visual Studio/Twilio/twilio-video-starter-kit/src/token-service/node_modules/twilio/lib/jwt/taskrouter/util.js"],"names":["_","require","Policy","EVENT_URL_BASE","TASKROUTER_BASE_URL","TASKROUTER_VERSION","defaultWorkerPolicies","version","workspaceSid","workerSid","activities","url","join","method","allow","tasks","reservations","workerFetch","defaultEventBridgePolicies","accountSid","channelId","workspacesUrl","filter","isString","taskQueuesUrl","taskQueueSid","tasksUrl","taskSid","activitiesUrl","activitySid","workersUrl","reservationsUrl","reservationSid","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nvar _ = require('lodash');\nvar Policy = require('./TaskRouterCapability').Policy;\n\nvar EVENT_URL_BASE = 'https://event-bridge.twilio.com/v1/wschannels';\nvar TASKROUTER_BASE_URL = 'https://taskrouter.twilio.com';\nvar TASKROUTER_VERSION = 'v1';\n\n/**\n * Build the default Policies for a worker\n *\n * @param {string} version TaskRouter version\n * @param {string} workspaceSid workspace sid\n * @param {string} workerSid worker sid\n * @returns {Array<Policy>} list of Policies\n */\nfunction defaultWorkerPolicies(version, workspaceSid, workerSid) {\n  var activities = new Policy({\n    url: _.join([TASKROUTER_BASE_URL, version, 'Workspaces', workspaceSid, 'Activities'], '/'),\n    method: 'GET',\n    allow: true\n  });\n  var tasks = new Policy({\n    url: _.join([TASKROUTER_BASE_URL, version, 'Workspaces', workspaceSid, 'Tasks', '**'], '/'),\n    method: 'GET',\n    allow: true\n  });\n  var reservations = new Policy({\n    url: _.join(\n      [TASKROUTER_BASE_URL, version, 'Workspaces', workspaceSid, 'Workers', workerSid, 'Reservations', '**'],\n      '/'\n    ),\n    method: 'GET',\n    allow: true\n  });\n  var workerFetch = new Policy({\n    url: _.join([TASKROUTER_BASE_URL, version, 'Workspaces', workspaceSid, 'Workers', workerSid], '/'),\n    method: 'GET',\n    allow: true\n  });\n\n  return [activities, tasks, reservations, workerFetch];\n}\n\n/**\n * Build the default Event Bridge Policies\n *\n * @param {string} accountSid account sid\n * @param {string} channelId channel id\n * @returns {Array<Policy>} list of Policies\n */\nfunction defaultEventBridgePolicies(accountSid, channelId) {\n  var url = _.join([EVENT_URL_BASE, accountSid, channelId], '/');\n  return [\n    new Policy({\n      url: url,\n      method: 'GET',\n      allow: true\n    }),\n    new Policy({\n      url: url,\n      method: 'POST',\n      allow: true\n    })\n  ];\n}\n\n/**\n * Generate TaskRouter workspace url\n *\n * @param {string} [workspaceSid] workspace sid or '**' for all workspaces\n * @return {string} generated url\n */\nfunction workspacesUrl(workspaceSid) {\n  return _.join(\n    _.filter([TASKROUTER_BASE_URL, TASKROUTER_VERSION, 'Workspaces', workspaceSid], _.isString),\n    '/'\n  );\n}\n\n/**\n * Generate TaskRouter task queue url\n *\n * @param {string} workspaceSid workspace sid\n * @param {string} [taskQueueSid] task queue sid or '**' for all task queues\n * @return {string} generated url\n */\nfunction taskQueuesUrl(workspaceSid, taskQueueSid) {\n  return _.join(\n    _.filter([workspacesUrl(workspaceSid), 'TaskQueues', taskQueueSid], _.isString),\n    '/'\n  );\n}\n\n/**\n * Generate TaskRouter task url\n *\n * @param {string} workspaceSid workspace sid\n * @param {string} [taskSid] task sid or '**' for all tasks\n * @returns {string} generated url\n */\nfunction tasksUrl(workspaceSid, taskSid) {\n  return _.join(\n    _.filter([workspacesUrl(workspaceSid), 'Tasks', taskSid], _.isString),\n    '/'\n  );\n}\n\n/**\n * Generate TaskRouter activity url\n * \n * @param {string} workspaceSid workspace sid\n * @param {string} [activitySid] activity sid or '**' for all activities\n * @returns {string} generated url\n */\nfunction activitiesUrl(workspaceSid, activitySid) {\n  return _.join(\n    _.filter([workspacesUrl(workspaceSid), 'Activities', activitySid], _.isString),\n    '/'\n  );\n}\n\n/**\n * Generate TaskRouter worker url\n *\n * @param {string} workspaceSid workspace sid\n * @param {string} [workerSid] worker sid or '**' for all workers\n * @returns {string} generated url\n */\nfunction workersUrl(workspaceSid, workerSid) {\n  return _.join(\n    _.filter([workspacesUrl(workspaceSid), 'Workers', workerSid], _.isString),\n    '/'\n  );\n}\n\n/**\n * Generate TaskRouter worker reservation url\n *\n * @param {string} workspaceSid workspace sid\n * @param {string} workerSid worker sid\n * @param {string} [reservationSid] reservation sid or '**' for all reservations\n * @returns {string} generated url\n */\nfunction reservationsUrl(workspaceSid, workerSid, reservationSid) {\n  return _.join(\n    _.filter([workersUrl(workspaceSid, workerSid), 'Reservations', reservationSid], _.isString),\n    '/'\n  );\n}\n\n\nmodule.exports = {\n  defaultWorkerPolicies: defaultWorkerPolicies,\n  defaultEventBridgePolicies: defaultEventBridgePolicies,\n\n  workspacesUrl: workspacesUrl,\n  taskQueuesUrl: taskQueuesUrl,\n  tasksUrl: tasksUrl,\n  activitiesUrl: activitiesUrl,\n  workersUrl: workersUrl,\n  reservationsUrl: reservationsUrl\n};\n"]},"metadata":{},"sourceType":"module"}