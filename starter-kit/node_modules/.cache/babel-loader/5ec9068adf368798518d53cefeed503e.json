{"ast":null,"code":"'use strict';\n/* jshint ignore:start */\n\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n\n/* jshint ignore:end */\n\nvar Q = require('q');\n/* jshint ignore:line */\n\n\nvar _ = require('lodash');\n/* jshint ignore:line */\n\n\nvar util = require('util');\n/* jshint ignore:line */\n\n\nvar FunctionVersionContentList = require('./functionVersion/functionVersionContent').FunctionVersionContentList;\n\nvar Page = require('../../../../../base/Page');\n/* jshint ignore:line */\n\n\nvar deserialize = require('../../../../../base/deserialize');\n/* jshint ignore:line */\n\n\nvar values = require('../../../../../base/values');\n/* jshint ignore:line */\n\n\nvar FunctionVersionList;\nvar FunctionVersionPage;\nvar FunctionVersionInstance;\nvar FunctionVersionContext;\n/* jshint ignore:start */\n\n/**\n * Initialize the FunctionVersionList\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Serverless.V1.ServiceContext.FunctionContext.FunctionVersionList\n *\n * @param {Twilio.Serverless.V1} version - Version of the resource\n * @param {string} serviceSid -\n *          The SID of the Service that the Function Version resource is associated with\n * @param {string} functionSid -\n *          The SID of the Function resource that is the parent of the Function Version resource\n */\n\n/* jshint ignore:end */\n\nFunctionVersionList = function FunctionVersionList(version, serviceSid, functionSid) {\n  /* jshint ignore:start */\n\n  /**\n   * @function functionVersions\n   * @memberof Twilio.Serverless.V1.ServiceContext.FunctionContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Serverless.V1.ServiceContext.FunctionContext.FunctionVersionContext}\n   */\n\n  /* jshint ignore:end */\n  function FunctionVersionListInstance(sid) {\n    return FunctionVersionListInstance.get(sid);\n  }\n\n  FunctionVersionListInstance._version = version; // Path Solution\n\n  FunctionVersionListInstance._solution = {\n    serviceSid: serviceSid,\n    functionSid: functionSid\n  };\n  FunctionVersionListInstance._uri = `/Services/${serviceSid}/Functions/${functionSid}/Versions`;\n  /* jshint ignore:start */\n\n  /**\n   * Streams FunctionVersionInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Serverless.V1.ServiceContext.FunctionContext.FunctionVersionList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n\n  /* jshint ignore:end */\n\n  FunctionVersionListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Lists FunctionVersionInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Serverless.V1.ServiceContext.FunctionContext.FunctionVersionList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  FunctionVersionListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single page of FunctionVersionInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Serverless.V1.ServiceContext.FunctionContext.FunctionVersionList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  FunctionVersionListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new FunctionVersionPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single target page of FunctionVersionInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Serverless.V1.ServiceContext.FunctionContext.FunctionVersionList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  FunctionVersionListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new FunctionVersionPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Constructs a function_version\n   *\n   * @function get\n   * @memberof Twilio.Serverless.V1.ServiceContext.FunctionContext.FunctionVersionList#\n   *\n   * @param {string} sid -\n   *          The SID that identifies the Function Version resource to fetch\n   *\n   * @returns {Twilio.Serverless.V1.ServiceContext.FunctionContext.FunctionVersionContext}\n   */\n\n  /* jshint ignore:end */\n\n\n  FunctionVersionListInstance.get = function get(sid) {\n    return new FunctionVersionContext(this._version, this._solution.serviceSid, this._solution.functionSid, sid);\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Serverless.V1.ServiceContext.FunctionContext.FunctionVersionList#\n   *\n   * @returns Object\n   */\n\n  /* jshint ignore:end */\n\n\n  FunctionVersionListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  FunctionVersionListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return FunctionVersionListInstance;\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the FunctionVersionPage\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Serverless.V1.ServiceContext.FunctionContext.FunctionVersionPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {FunctionVersionSolution} solution - Path solution\n *\n * @returns FunctionVersionPage\n */\n\n/* jshint ignore:end */\n\n\nFunctionVersionPage = function FunctionVersionPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(FunctionVersionPage.prototype, Page.prototype);\n\nFunctionVersionPage.prototype.constructor = FunctionVersionPage;\n/* jshint ignore:start */\n\n/**\n * Build an instance of FunctionVersionInstance\n *\n * @function getInstance\n * @memberof Twilio.Serverless.V1.ServiceContext.FunctionContext.FunctionVersionPage#\n *\n * @param {FunctionVersionPayload} payload - Payload response from the API\n *\n * @returns FunctionVersionInstance\n */\n\n/* jshint ignore:end */\n\nFunctionVersionPage.prototype.getInstance = function getInstance(payload) {\n  return new FunctionVersionInstance(this._version, payload, this._solution.serviceSid, this._solution.functionSid);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Serverless.V1.ServiceContext.FunctionContext.FunctionVersionPage#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nFunctionVersionPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nFunctionVersionPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the FunctionVersionContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Serverless.V1.ServiceContext.FunctionContext.FunctionVersionInstance\n *\n * @property {string} sid -\n *          The unique string that identifies the Function Version resource\n * @property {string} accountSid -\n *          The SID of the Account that created the Function Version resource\n * @property {string} serviceSid -\n *          The SID of the Service that the Function Version resource is associated with\n * @property {string} functionSid -\n *          The SID of the Function resource that is the parent of the Function Version resource\n * @property {string} path -\n *          The URL-friendly string by which the Function Version resource can be referenced\n * @property {function_version.visibility} visibility -\n *          The access control that determines how the Function Version resource can be accessed\n * @property {Date} dateCreated -\n *          The ISO 8601 date and time in GMT when the Function Version resource was created\n * @property {string} url - The absolute URL of the Function Version resource\n * @property {string} links - The links\n *\n * @param {V1} version - Version of the resource\n * @param {FunctionVersionPayload} payload - The instance payload\n * @param {sid} serviceSid -\n *          The SID of the Service that the Function Version resource is associated with\n * @param {sid} functionSid -\n *          The SID of the Function resource that is the parent of the Function Version resource\n * @param {sid} sid -\n *          The SID that identifies the Function Version resource to fetch\n */\n\n/* jshint ignore:end */\n\n\nFunctionVersionInstance = function FunctionVersionInstance(version, payload, serviceSid, functionSid, sid) {\n  this._version = version; // Marshaled Properties\n\n  this.sid = payload.sid; // jshint ignore:line\n\n  this.accountSid = payload.account_sid; // jshint ignore:line\n\n  this.serviceSid = payload.service_sid; // jshint ignore:line\n\n  this.functionSid = payload.function_sid; // jshint ignore:line\n\n  this.path = payload.path; // jshint ignore:line\n\n  this.visibility = payload.visibility; // jshint ignore:line\n\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n\n  this.url = payload.url; // jshint ignore:line\n\n  this.links = payload.links; // jshint ignore:line\n  // Context\n\n  this._context = undefined;\n  this._solution = {\n    serviceSid: serviceSid,\n    functionSid: functionSid,\n    sid: sid || this.sid\n  };\n};\n\nObject.defineProperty(FunctionVersionInstance.prototype, '_proxy', {\n  get: function () {\n    if (!this._context) {\n      this._context = new FunctionVersionContext(this._version, this._solution.serviceSid, this._solution.functionSid, this._solution.sid);\n    }\n\n    return this._context;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * fetch a FunctionVersionInstance\n *\n * @function fetch\n * @memberof Twilio.Serverless.V1.ServiceContext.FunctionContext.FunctionVersionInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed FunctionVersionInstance\n */\n\n/* jshint ignore:end */\n\nFunctionVersionInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n/* jshint ignore:start */\n\n/**\n * Access the functionVersionContent\n *\n * @function functionVersionContent\n * @memberof Twilio.Serverless.V1.ServiceContext.FunctionContext.FunctionVersionInstance#\n *\n * @returns {Twilio.Serverless.V1.ServiceContext.FunctionContext.FunctionVersionContext.FunctionVersionContentList}\n */\n\n/* jshint ignore:end */\n\n\nFunctionVersionInstance.prototype.functionVersionContent = function functionVersionContent() {\n  return this._proxy.functionVersionContent;\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Serverless.V1.ServiceContext.FunctionContext.FunctionVersionInstance#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nFunctionVersionInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nFunctionVersionInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the FunctionVersionContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Serverless.V1.ServiceContext.FunctionContext.FunctionVersionContext\n *\n * @property {Twilio.Serverless.V1.ServiceContext.FunctionContext.FunctionVersionContext.FunctionVersionContentList} functionVersionContent -\n *          functionVersionContent resource\n *\n * @param {V1} version - Version of the resource\n * @param {sid_like} serviceSid -\n *          The SID of the Service to fetch the Function Version resource from\n * @param {sid} functionSid -\n *          The SID of the function that is the parent of the Function Version resource to fetch\n * @param {sid} sid -\n *          The SID that identifies the Function Version resource to fetch\n */\n\n/* jshint ignore:end */\n\n\nFunctionVersionContext = function FunctionVersionContext(version, serviceSid, functionSid, sid) {\n  this._version = version; // Path Solution\n\n  this._solution = {\n    serviceSid: serviceSid,\n    functionSid: functionSid,\n    sid: sid\n  };\n  this._uri = `/Services/${serviceSid}/Functions/${functionSid}/Versions/${sid}`; // Dependents\n\n  this._functionVersionContent = undefined;\n};\n/* jshint ignore:start */\n\n/**\n * fetch a FunctionVersionInstance\n *\n * @function fetch\n * @memberof Twilio.Serverless.V1.ServiceContext.FunctionContext.FunctionVersionContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed FunctionVersionInstance\n */\n\n/* jshint ignore:end */\n\n\nFunctionVersionContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new FunctionVersionInstance(this._version, payload, this._solution.serviceSid, this._solution.functionSid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\nObject.defineProperty(FunctionVersionContext.prototype, 'functionVersionContent', {\n  get: function () {\n    if (!this._functionVersionContent) {\n      this._functionVersionContent = new FunctionVersionContentList(this._version, this._solution.serviceSid, this._solution.functionSid, this._solution.sid);\n    }\n\n    return this._functionVersionContent;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Serverless.V1.ServiceContext.FunctionContext.FunctionVersionContext#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\nFunctionVersionContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nFunctionVersionContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  FunctionVersionList: FunctionVersionList,\n  FunctionVersionPage: FunctionVersionPage,\n  FunctionVersionInstance: FunctionVersionInstance,\n  FunctionVersionContext: FunctionVersionContext\n};","map":{"version":3,"sources":["/Users/tony_niu/Visual Studio/Twilio/twilio-video-starter-kit/node_modules/twilio/lib/rest/serverless/v1/service/function/functionVersion.js"],"names":["Q","require","_","util","FunctionVersionContentList","Page","deserialize","values","FunctionVersionList","FunctionVersionPage","FunctionVersionInstance","FunctionVersionContext","version","serviceSid","functionSid","FunctionVersionListInstance","sid","get","_version","_solution","_uri","each","opts","callback","isFunction","isUndefined","Error","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","error","fetchNextPage","fn","promise","then","page","instances","instance","bind","nextPage","catch","merge","list","deferred","defer","allResources","resource","push","length","resolve","reject","nodeify","data","of","pageToken","pageNumber","uri","method","params","payload","getPage","targetUrl","_domain","twilio","request","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","accountSid","account_sid","service_sid","function_sid","path","visibility","dateCreated","iso8601DateTime","date_created","url","links","_context","undefined","Object","defineProperty","fetch","_proxy","functionVersionContent","_functionVersionContent","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar FunctionVersionContentList = require(\n    './functionVersion/functionVersionContent').FunctionVersionContentList;\nvar Page = require('../../../../../base/Page');  /* jshint ignore:line */\nvar deserialize = require(\n    '../../../../../base/deserialize');  /* jshint ignore:line */\nvar values = require('../../../../../base/values');  /* jshint ignore:line */\n\nvar FunctionVersionList;\nvar FunctionVersionPage;\nvar FunctionVersionInstance;\nvar FunctionVersionContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the FunctionVersionList\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Serverless.V1.ServiceContext.FunctionContext.FunctionVersionList\n *\n * @param {Twilio.Serverless.V1} version - Version of the resource\n * @param {string} serviceSid -\n *          The SID of the Service that the Function Version resource is associated with\n * @param {string} functionSid -\n *          The SID of the Function resource that is the parent of the Function Version resource\n */\n/* jshint ignore:end */\nFunctionVersionList = function FunctionVersionList(version, serviceSid,\n                                                    functionSid) {\n  /* jshint ignore:start */\n  /**\n   * @function functionVersions\n   * @memberof Twilio.Serverless.V1.ServiceContext.FunctionContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Serverless.V1.ServiceContext.FunctionContext.FunctionVersionContext}\n   */\n  /* jshint ignore:end */\n  function FunctionVersionListInstance(sid) {\n    return FunctionVersionListInstance.get(sid);\n  }\n\n  FunctionVersionListInstance._version = version;\n  // Path Solution\n  FunctionVersionListInstance._solution = {serviceSid: serviceSid, functionSid: functionSid};\n  FunctionVersionListInstance._uri = `/Services/${serviceSid}/Functions/${functionSid}/Versions`;\n  /* jshint ignore:start */\n  /**\n   * Streams FunctionVersionInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Serverless.V1.ServiceContext.FunctionContext.FunctionVersionList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  FunctionVersionListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists FunctionVersionInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Serverless.V1.ServiceContext.FunctionContext.FunctionVersionList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  FunctionVersionListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of FunctionVersionInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Serverless.V1.ServiceContext.FunctionContext.FunctionVersionList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  FunctionVersionListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new FunctionVersionPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of FunctionVersionInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Serverless.V1.ServiceContext.FunctionContext.FunctionVersionList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  FunctionVersionListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new FunctionVersionPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a function_version\n   *\n   * @function get\n   * @memberof Twilio.Serverless.V1.ServiceContext.FunctionContext.FunctionVersionList#\n   *\n   * @param {string} sid -\n   *          The SID that identifies the Function Version resource to fetch\n   *\n   * @returns {Twilio.Serverless.V1.ServiceContext.FunctionContext.FunctionVersionContext}\n   */\n  /* jshint ignore:end */\n  FunctionVersionListInstance.get = function get(sid) {\n    return new FunctionVersionContext(\n      this._version,\n      this._solution.serviceSid,\n      this._solution.functionSid,\n      sid\n    );\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Serverless.V1.ServiceContext.FunctionContext.FunctionVersionList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  FunctionVersionListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  FunctionVersionListInstance[util.inspect.custom] = function inspect(depth,\n      options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return FunctionVersionListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the FunctionVersionPage\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Serverless.V1.ServiceContext.FunctionContext.FunctionVersionPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {FunctionVersionSolution} solution - Path solution\n *\n * @returns FunctionVersionPage\n */\n/* jshint ignore:end */\nFunctionVersionPage = function FunctionVersionPage(version, response, solution)\n                                                    {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(FunctionVersionPage.prototype, Page.prototype);\nFunctionVersionPage.prototype.constructor = FunctionVersionPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of FunctionVersionInstance\n *\n * @function getInstance\n * @memberof Twilio.Serverless.V1.ServiceContext.FunctionContext.FunctionVersionPage#\n *\n * @param {FunctionVersionPayload} payload - Payload response from the API\n *\n * @returns FunctionVersionInstance\n */\n/* jshint ignore:end */\nFunctionVersionPage.prototype.getInstance = function getInstance(payload) {\n  return new FunctionVersionInstance(\n    this._version,\n    payload,\n    this._solution.serviceSid,\n    this._solution.functionSid\n  );\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Serverless.V1.ServiceContext.FunctionContext.FunctionVersionPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nFunctionVersionPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nFunctionVersionPage.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the FunctionVersionContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Serverless.V1.ServiceContext.FunctionContext.FunctionVersionInstance\n *\n * @property {string} sid -\n *          The unique string that identifies the Function Version resource\n * @property {string} accountSid -\n *          The SID of the Account that created the Function Version resource\n * @property {string} serviceSid -\n *          The SID of the Service that the Function Version resource is associated with\n * @property {string} functionSid -\n *          The SID of the Function resource that is the parent of the Function Version resource\n * @property {string} path -\n *          The URL-friendly string by which the Function Version resource can be referenced\n * @property {function_version.visibility} visibility -\n *          The access control that determines how the Function Version resource can be accessed\n * @property {Date} dateCreated -\n *          The ISO 8601 date and time in GMT when the Function Version resource was created\n * @property {string} url - The absolute URL of the Function Version resource\n * @property {string} links - The links\n *\n * @param {V1} version - Version of the resource\n * @param {FunctionVersionPayload} payload - The instance payload\n * @param {sid} serviceSid -\n *          The SID of the Service that the Function Version resource is associated with\n * @param {sid} functionSid -\n *          The SID of the Function resource that is the parent of the Function Version resource\n * @param {sid} sid -\n *          The SID that identifies the Function Version resource to fetch\n */\n/* jshint ignore:end */\nFunctionVersionInstance = function FunctionVersionInstance(version, payload,\n                                                            serviceSid,\n                                                            functionSid, sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.sid = payload.sid; // jshint ignore:line\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.serviceSid = payload.service_sid; // jshint ignore:line\n  this.functionSid = payload.function_sid; // jshint ignore:line\n  this.path = payload.path; // jshint ignore:line\n  this.visibility = payload.visibility; // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n  this.links = payload.links; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {serviceSid: serviceSid, functionSid: functionSid, sid: sid || this.sid, };\n};\n\nObject.defineProperty(FunctionVersionInstance.prototype,\n  '_proxy', {\n    get: function() {\n      if (!this._context) {\n        this._context = new FunctionVersionContext(\n          this._version,\n          this._solution.serviceSid,\n          this._solution.functionSid,\n          this._solution.sid\n        );\n      }\n\n      return this._context;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a FunctionVersionInstance\n *\n * @function fetch\n * @memberof Twilio.Serverless.V1.ServiceContext.FunctionContext.FunctionVersionInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed FunctionVersionInstance\n */\n/* jshint ignore:end */\nFunctionVersionInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * Access the functionVersionContent\n *\n * @function functionVersionContent\n * @memberof Twilio.Serverless.V1.ServiceContext.FunctionContext.FunctionVersionInstance#\n *\n * @returns {Twilio.Serverless.V1.ServiceContext.FunctionContext.FunctionVersionContext.FunctionVersionContentList}\n */\n/* jshint ignore:end */\nFunctionVersionInstance.prototype.functionVersionContent = function\n    functionVersionContent() {\n  return this._proxy.functionVersionContent;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Serverless.V1.ServiceContext.FunctionContext.FunctionVersionInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nFunctionVersionInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nFunctionVersionInstance.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the FunctionVersionContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Serverless.V1.ServiceContext.FunctionContext.FunctionVersionContext\n *\n * @property {Twilio.Serverless.V1.ServiceContext.FunctionContext.FunctionVersionContext.FunctionVersionContentList} functionVersionContent -\n *          functionVersionContent resource\n *\n * @param {V1} version - Version of the resource\n * @param {sid_like} serviceSid -\n *          The SID of the Service to fetch the Function Version resource from\n * @param {sid} functionSid -\n *          The SID of the function that is the parent of the Function Version resource to fetch\n * @param {sid} sid -\n *          The SID that identifies the Function Version resource to fetch\n */\n/* jshint ignore:end */\nFunctionVersionContext = function FunctionVersionContext(version, serviceSid,\n                                                          functionSid, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {serviceSid: serviceSid, functionSid: functionSid, sid: sid, };\n  this._uri = `/Services/${serviceSid}/Functions/${functionSid}/Versions/${sid}`;\n\n  // Dependents\n  this._functionVersionContent = undefined;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a FunctionVersionInstance\n *\n * @function fetch\n * @memberof Twilio.Serverless.V1.ServiceContext.FunctionContext.FunctionVersionContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed FunctionVersionInstance\n */\n/* jshint ignore:end */\nFunctionVersionContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({uri: this._uri, method: 'GET'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new FunctionVersionInstance(\n      this._version,\n      payload,\n      this._solution.serviceSid,\n      this._solution.functionSid,\n      this._solution.sid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\nObject.defineProperty(FunctionVersionContext.prototype,\n  'functionVersionContent', {\n    get: function() {\n      if (!this._functionVersionContent) {\n        this._functionVersionContent = new FunctionVersionContentList(\n          this._version,\n          this._solution.serviceSid,\n          this._solution.functionSid,\n          this._solution.sid\n        );\n      }\n      return this._functionVersionContent;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Serverless.V1.ServiceContext.FunctionContext.FunctionVersionContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nFunctionVersionContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nFunctionVersionContext.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  FunctionVersionList: FunctionVersionList,\n  FunctionVersionPage: FunctionVersionPage,\n  FunctionVersionInstance: FunctionVersionInstance,\n  FunctionVersionContext: FunctionVersionContext\n};\n"]},"metadata":{},"sourceType":"script"}