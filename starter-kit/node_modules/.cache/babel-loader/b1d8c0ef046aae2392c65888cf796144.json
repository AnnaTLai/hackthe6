{"ast":null,"code":"'use strict';\n/* jshint ignore:start */\n\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n\n/* jshint ignore:end */\n\nvar Q = require('q');\n/* jshint ignore:line */\n\n\nvar _ = require('lodash');\n/* jshint ignore:line */\n\n\nvar util = require('util');\n/* jshint ignore:line */\n\n\nvar Page = require('../../../../../base/Page');\n/* jshint ignore:line */\n\n\nvar deserialize = require('../../../../../base/deserialize');\n/* jshint ignore:line */\n\n\nvar values = require('../../../../../base/values');\n/* jshint ignore:line */\n\n\nvar SampleList;\nvar SamplePage;\nvar SampleInstance;\nvar SampleContext;\n/* jshint ignore:start */\n\n/**\n * Initialize the SampleList\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Autopilot.V1.AssistantContext.TaskContext.SampleList\n *\n * @param {Twilio.Autopilot.V1} version - Version of the resource\n * @param {string} assistantSid -\n *          The SID of the Assistant that is the parent of the Task associated with the resource\n * @param {string} taskSid - The SID of the Task associated with the resource\n */\n\n/* jshint ignore:end */\n\nSampleList = function SampleList(version, assistantSid, taskSid) {\n  /* jshint ignore:start */\n\n  /**\n   * @function samples\n   * @memberof Twilio.Autopilot.V1.AssistantContext.TaskContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Autopilot.V1.AssistantContext.TaskContext.SampleContext}\n   */\n\n  /* jshint ignore:end */\n  function SampleListInstance(sid) {\n    return SampleListInstance.get(sid);\n  }\n\n  SampleListInstance._version = version; // Path Solution\n\n  SampleListInstance._solution = {\n    assistantSid: assistantSid,\n    taskSid: taskSid\n  };\n  SampleListInstance._uri = `/Assistants/${assistantSid}/Tasks/${taskSid}/Samples`;\n  /* jshint ignore:start */\n\n  /**\n   * Streams SampleInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Autopilot.V1.AssistantContext.TaskContext.SampleList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.language] -\n   *          The ISO language-country string that specifies the language used for the sample\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n\n  /* jshint ignore:end */\n\n  SampleListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Lists SampleInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Autopilot.V1.AssistantContext.TaskContext.SampleList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.language] -\n   *          The ISO language-country string that specifies the language used for the sample\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  SampleListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single page of SampleInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Autopilot.V1.AssistantContext.TaskContext.SampleList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.language] -\n   *          The ISO language-country string that specifies the language used for the sample\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  SampleListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'Language': _.get(opts, 'language'),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new SamplePage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single target page of SampleInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Autopilot.V1.AssistantContext.TaskContext.SampleList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  SampleListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new SamplePage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * create a SampleInstance\n   *\n   * @function create\n   * @memberof Twilio.Autopilot.V1.AssistantContext.TaskContext.SampleList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.language -\n   *          The ISO language-country string that specifies the language used for the new sample\n   * @param {string} opts.taggedText -\n   *          The text example of how end users might express the task\n   * @param {string} [opts.sourceChannel] -\n   *          The communication channel from which the new sample was captured\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed SampleInstance\n   */\n\n  /* jshint ignore:end */\n\n\n  SampleListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n\n    if (_.isUndefined(opts.language)) {\n      throw new Error('Required parameter \"opts.language\" missing.');\n    }\n\n    if (_.isUndefined(opts.taggedText)) {\n      throw new Error('Required parameter \"opts.taggedText\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'Language': _.get(opts, 'language'),\n      'TaggedText': _.get(opts, 'taggedText'),\n      'SourceChannel': _.get(opts, 'sourceChannel')\n    });\n\n    var promise = this._version.create({\n      uri: this._uri,\n      method: 'POST',\n      data: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new SampleInstance(this._version, payload, this._solution.assistantSid, this._solution.taskSid, this._solution.sid));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Constructs a sample\n   *\n   * @function get\n   * @memberof Twilio.Autopilot.V1.AssistantContext.TaskContext.SampleList#\n   *\n   * @param {string} sid - The unique string that identifies the resource\n   *\n   * @returns {Twilio.Autopilot.V1.AssistantContext.TaskContext.SampleContext}\n   */\n\n  /* jshint ignore:end */\n\n\n  SampleListInstance.get = function get(sid) {\n    return new SampleContext(this._version, this._solution.assistantSid, this._solution.taskSid, sid);\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Autopilot.V1.AssistantContext.TaskContext.SampleList#\n   *\n   * @returns Object\n   */\n\n  /* jshint ignore:end */\n\n\n  SampleListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  SampleListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return SampleListInstance;\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the SamplePage\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Autopilot.V1.AssistantContext.TaskContext.SamplePage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {SampleSolution} solution - Path solution\n *\n * @returns SamplePage\n */\n\n/* jshint ignore:end */\n\n\nSamplePage = function SamplePage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(SamplePage.prototype, Page.prototype);\n\nSamplePage.prototype.constructor = SamplePage;\n/* jshint ignore:start */\n\n/**\n * Build an instance of SampleInstance\n *\n * @function getInstance\n * @memberof Twilio.Autopilot.V1.AssistantContext.TaskContext.SamplePage#\n *\n * @param {SamplePayload} payload - Payload response from the API\n *\n * @returns SampleInstance\n */\n\n/* jshint ignore:end */\n\nSamplePage.prototype.getInstance = function getInstance(payload) {\n  return new SampleInstance(this._version, payload, this._solution.assistantSid, this._solution.taskSid);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Autopilot.V1.AssistantContext.TaskContext.SamplePage#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nSamplePage.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nSamplePage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the SampleContext\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Autopilot.V1.AssistantContext.TaskContext.SampleInstance\n *\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {Date} dateCreated -\n *          The RFC 2822 date and time in GMT when the resource was created\n * @property {Date} dateUpdated -\n *          The RFC 2822 date and time in GMT when the resource was last updated\n * @property {string} taskSid - The SID of the Task associated with the resource\n * @property {string} language -\n *          An ISO language-country string that specifies the language used for the sample\n * @property {string} assistantSid -\n *          The SID of the Assistant that is the parent of the Task associated with the resource\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} taggedText -\n *          The text example of how end users might express the task\n * @property {string} url - The absolute URL of the Sample resource\n * @property {string} sourceChannel -\n *          The communication channel from which the sample was captured\n *\n * @param {V1} version - Version of the resource\n * @param {SamplePayload} payload - The instance payload\n * @param {sid} assistantSid -\n *          The SID of the Assistant that is the parent of the Task associated with the resource\n * @param {sid} taskSid - The SID of the Task associated with the resource\n * @param {sid} sid - The unique string that identifies the resource\n */\n\n/* jshint ignore:end */\n\n\nSampleInstance = function SampleInstance(version, payload, assistantSid, taskSid, sid) {\n  this._version = version; // Marshaled Properties\n\n  this.accountSid = payload.account_sid; // jshint ignore:line\n\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n\n  this.taskSid = payload.task_sid; // jshint ignore:line\n\n  this.language = payload.language; // jshint ignore:line\n\n  this.assistantSid = payload.assistant_sid; // jshint ignore:line\n\n  this.sid = payload.sid; // jshint ignore:line\n\n  this.taggedText = payload.tagged_text; // jshint ignore:line\n\n  this.url = payload.url; // jshint ignore:line\n\n  this.sourceChannel = payload.source_channel; // jshint ignore:line\n  // Context\n\n  this._context = undefined;\n  this._solution = {\n    assistantSid: assistantSid,\n    taskSid: taskSid,\n    sid: sid || this.sid\n  };\n};\n\nObject.defineProperty(SampleInstance.prototype, '_proxy', {\n  get: function () {\n    if (!this._context) {\n      this._context = new SampleContext(this._version, this._solution.assistantSid, this._solution.taskSid, this._solution.sid);\n    }\n\n    return this._context;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * fetch a SampleInstance\n *\n * @function fetch\n * @memberof Twilio.Autopilot.V1.AssistantContext.TaskContext.SampleInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SampleInstance\n */\n\n/* jshint ignore:end */\n\nSampleInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n/* jshint ignore:start */\n\n/**\n * update a SampleInstance\n *\n * @function update\n * @memberof Twilio.Autopilot.V1.AssistantContext.TaskContext.SampleInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.language] -\n *          The ISO language-country string that specifies the language used for the sample\n * @param {string} [opts.taggedText] -\n *          The text example of how end users might express the task\n * @param {string} [opts.sourceChannel] -\n *          The communication channel from which the sample was captured\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SampleInstance\n */\n\n/* jshint ignore:end */\n\n\nSampleInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n/* jshint ignore:start */\n\n/**\n * remove a SampleInstance\n *\n * @function remove\n * @memberof Twilio.Autopilot.V1.AssistantContext.TaskContext.SampleInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SampleInstance\n */\n\n/* jshint ignore:end */\n\n\nSampleInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Autopilot.V1.AssistantContext.TaskContext.SampleInstance#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nSampleInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nSampleInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the SampleContext\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Autopilot.V1.AssistantContext.TaskContext.SampleContext\n *\n * @param {V1} version - Version of the resource\n * @param {sid_like} assistantSid -\n *          The SID of the Assistant that is the parent of the Task associated with the resource to fetch\n * @param {sid_like} taskSid -\n *          The SID of the Task associated with the Sample resource to create\n * @param {sid} sid - The unique string that identifies the resource\n */\n\n/* jshint ignore:end */\n\n\nSampleContext = function SampleContext(version, assistantSid, taskSid, sid) {\n  this._version = version; // Path Solution\n\n  this._solution = {\n    assistantSid: assistantSid,\n    taskSid: taskSid,\n    sid: sid\n  };\n  this._uri = `/Assistants/${assistantSid}/Tasks/${taskSid}/Samples/${sid}`;\n};\n/* jshint ignore:start */\n\n/**\n * fetch a SampleInstance\n *\n * @function fetch\n * @memberof Twilio.Autopilot.V1.AssistantContext.TaskContext.SampleContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SampleInstance\n */\n\n/* jshint ignore:end */\n\n\nSampleContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new SampleInstance(this._version, payload, this._solution.assistantSid, this._solution.taskSid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * update a SampleInstance\n *\n * @function update\n * @memberof Twilio.Autopilot.V1.AssistantContext.TaskContext.SampleContext#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.language] -\n *          The ISO language-country string that specifies the language used for the sample\n * @param {string} [opts.taggedText] -\n *          The text example of how end users might express the task\n * @param {string} [opts.sourceChannel] -\n *          The communication channel from which the sample was captured\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SampleInstance\n */\n\n/* jshint ignore:end */\n\n\nSampleContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n\n  opts = opts || {};\n  var deferred = Q.defer();\n  var data = values.of({\n    'Language': _.get(opts, 'language'),\n    'TaggedText': _.get(opts, 'taggedText'),\n    'SourceChannel': _.get(opts, 'sourceChannel')\n  });\n\n  var promise = this._version.update({\n    uri: this._uri,\n    method: 'POST',\n    data: data\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new SampleInstance(this._version, payload, this._solution.assistantSid, this._solution.taskSid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * remove a SampleInstance\n *\n * @function remove\n * @memberof Twilio.Autopilot.V1.AssistantContext.TaskContext.SampleContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SampleInstance\n */\n\n/* jshint ignore:end */\n\n\nSampleContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.remove({\n    uri: this._uri,\n    method: 'DELETE'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Autopilot.V1.AssistantContext.TaskContext.SampleContext#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nSampleContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nSampleContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  SampleList: SampleList,\n  SamplePage: SamplePage,\n  SampleInstance: SampleInstance,\n  SampleContext: SampleContext\n};","map":{"version":3,"sources":["/Users/tony_niu/Visual Studio/Twilio/twilio-video-starter-kit/node_modules/twilio/lib/rest/autopilot/v1/assistant/task/sample.js"],"names":["Q","require","_","util","Page","deserialize","values","SampleList","SamplePage","SampleInstance","SampleContext","version","assistantSid","taskSid","SampleListInstance","sid","get","_version","_solution","_uri","each","opts","callback","isFunction","isUndefined","Error","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","error","fetchNextPage","fn","promise","then","page","instances","instance","bind","nextPage","catch","merge","list","deferred","defer","allResources","resource","push","length","resolve","reject","nodeify","data","of","pageToken","pageNumber","uri","method","params","payload","getPage","targetUrl","_domain","twilio","request","create","language","taggedText","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","accountSid","account_sid","dateCreated","iso8601DateTime","date_created","dateUpdated","date_updated","task_sid","assistant_sid","tagged_text","url","sourceChannel","source_channel","_context","undefined","Object","defineProperty","fetch","_proxy","update","remove","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar Page = require('../../../../../base/Page');  /* jshint ignore:line */\nvar deserialize = require(\n    '../../../../../base/deserialize');  /* jshint ignore:line */\nvar values = require('../../../../../base/values');  /* jshint ignore:line */\n\nvar SampleList;\nvar SamplePage;\nvar SampleInstance;\nvar SampleContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the SampleList\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Autopilot.V1.AssistantContext.TaskContext.SampleList\n *\n * @param {Twilio.Autopilot.V1} version - Version of the resource\n * @param {string} assistantSid -\n *          The SID of the Assistant that is the parent of the Task associated with the resource\n * @param {string} taskSid - The SID of the Task associated with the resource\n */\n/* jshint ignore:end */\nSampleList = function SampleList(version, assistantSid, taskSid) {\n  /* jshint ignore:start */\n  /**\n   * @function samples\n   * @memberof Twilio.Autopilot.V1.AssistantContext.TaskContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Autopilot.V1.AssistantContext.TaskContext.SampleContext}\n   */\n  /* jshint ignore:end */\n  function SampleListInstance(sid) {\n    return SampleListInstance.get(sid);\n  }\n\n  SampleListInstance._version = version;\n  // Path Solution\n  SampleListInstance._solution = {assistantSid: assistantSid, taskSid: taskSid};\n  SampleListInstance._uri = `/Assistants/${assistantSid}/Tasks/${taskSid}/Samples`;\n  /* jshint ignore:start */\n  /**\n   * Streams SampleInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Autopilot.V1.AssistantContext.TaskContext.SampleList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.language] -\n   *          The ISO language-country string that specifies the language used for the sample\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  SampleListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists SampleInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Autopilot.V1.AssistantContext.TaskContext.SampleList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.language] -\n   *          The ISO language-country string that specifies the language used for the sample\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  SampleListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of SampleInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Autopilot.V1.AssistantContext.TaskContext.SampleList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.language] -\n   *          The ISO language-country string that specifies the language used for the sample\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  SampleListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'Language': _.get(opts, 'language'),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new SamplePage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of SampleInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Autopilot.V1.AssistantContext.TaskContext.SampleList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  SampleListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new SamplePage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * create a SampleInstance\n   *\n   * @function create\n   * @memberof Twilio.Autopilot.V1.AssistantContext.TaskContext.SampleList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.language -\n   *          The ISO language-country string that specifies the language used for the new sample\n   * @param {string} opts.taggedText -\n   *          The text example of how end users might express the task\n   * @param {string} [opts.sourceChannel] -\n   *          The communication channel from which the new sample was captured\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed SampleInstance\n   */\n  /* jshint ignore:end */\n  SampleListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n    if (_.isUndefined(opts.language)) {\n      throw new Error('Required parameter \"opts.language\" missing.');\n    }\n    if (_.isUndefined(opts.taggedText)) {\n      throw new Error('Required parameter \"opts.taggedText\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'Language': _.get(opts, 'language'),\n      'TaggedText': _.get(opts, 'taggedText'),\n      'SourceChannel': _.get(opts, 'sourceChannel')\n    });\n\n    var promise = this._version.create({uri: this._uri, method: 'POST', data: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new SampleInstance(\n        this._version,\n        payload,\n        this._solution.assistantSid,\n        this._solution.taskSid,\n        this._solution.sid\n      ));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a sample\n   *\n   * @function get\n   * @memberof Twilio.Autopilot.V1.AssistantContext.TaskContext.SampleList#\n   *\n   * @param {string} sid - The unique string that identifies the resource\n   *\n   * @returns {Twilio.Autopilot.V1.AssistantContext.TaskContext.SampleContext}\n   */\n  /* jshint ignore:end */\n  SampleListInstance.get = function get(sid) {\n    return new SampleContext(this._version, this._solution.assistantSid, this._solution.taskSid, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Autopilot.V1.AssistantContext.TaskContext.SampleList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  SampleListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  SampleListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return SampleListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the SamplePage\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Autopilot.V1.AssistantContext.TaskContext.SamplePage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {SampleSolution} solution - Path solution\n *\n * @returns SamplePage\n */\n/* jshint ignore:end */\nSamplePage = function SamplePage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(SamplePage.prototype, Page.prototype);\nSamplePage.prototype.constructor = SamplePage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of SampleInstance\n *\n * @function getInstance\n * @memberof Twilio.Autopilot.V1.AssistantContext.TaskContext.SamplePage#\n *\n * @param {SamplePayload} payload - Payload response from the API\n *\n * @returns SampleInstance\n */\n/* jshint ignore:end */\nSamplePage.prototype.getInstance = function getInstance(payload) {\n  return new SampleInstance(\n    this._version,\n    payload,\n    this._solution.assistantSid,\n    this._solution.taskSid\n  );\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Autopilot.V1.AssistantContext.TaskContext.SamplePage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nSamplePage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nSamplePage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the SampleContext\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Autopilot.V1.AssistantContext.TaskContext.SampleInstance\n *\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {Date} dateCreated -\n *          The RFC 2822 date and time in GMT when the resource was created\n * @property {Date} dateUpdated -\n *          The RFC 2822 date and time in GMT when the resource was last updated\n * @property {string} taskSid - The SID of the Task associated with the resource\n * @property {string} language -\n *          An ISO language-country string that specifies the language used for the sample\n * @property {string} assistantSid -\n *          The SID of the Assistant that is the parent of the Task associated with the resource\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} taggedText -\n *          The text example of how end users might express the task\n * @property {string} url - The absolute URL of the Sample resource\n * @property {string} sourceChannel -\n *          The communication channel from which the sample was captured\n *\n * @param {V1} version - Version of the resource\n * @param {SamplePayload} payload - The instance payload\n * @param {sid} assistantSid -\n *          The SID of the Assistant that is the parent of the Task associated with the resource\n * @param {sid} taskSid - The SID of the Task associated with the resource\n * @param {sid} sid - The unique string that identifies the resource\n */\n/* jshint ignore:end */\nSampleInstance = function SampleInstance(version, payload, assistantSid,\n                                          taskSid, sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n  this.taskSid = payload.task_sid; // jshint ignore:line\n  this.language = payload.language; // jshint ignore:line\n  this.assistantSid = payload.assistant_sid; // jshint ignore:line\n  this.sid = payload.sid; // jshint ignore:line\n  this.taggedText = payload.tagged_text; // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n  this.sourceChannel = payload.source_channel; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {assistantSid: assistantSid, taskSid: taskSid, sid: sid || this.sid, };\n};\n\nObject.defineProperty(SampleInstance.prototype,\n  '_proxy', {\n    get: function() {\n      if (!this._context) {\n        this._context = new SampleContext(\n          this._version,\n          this._solution.assistantSid,\n          this._solution.taskSid,\n          this._solution.sid\n        );\n      }\n\n      return this._context;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a SampleInstance\n *\n * @function fetch\n * @memberof Twilio.Autopilot.V1.AssistantContext.TaskContext.SampleInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SampleInstance\n */\n/* jshint ignore:end */\nSampleInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * update a SampleInstance\n *\n * @function update\n * @memberof Twilio.Autopilot.V1.AssistantContext.TaskContext.SampleInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.language] -\n *          The ISO language-country string that specifies the language used for the sample\n * @param {string} [opts.taggedText] -\n *          The text example of how end users might express the task\n * @param {string} [opts.sourceChannel] -\n *          The communication channel from which the sample was captured\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SampleInstance\n */\n/* jshint ignore:end */\nSampleInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * remove a SampleInstance\n *\n * @function remove\n * @memberof Twilio.Autopilot.V1.AssistantContext.TaskContext.SampleInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SampleInstance\n */\n/* jshint ignore:end */\nSampleInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Autopilot.V1.AssistantContext.TaskContext.SampleInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nSampleInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nSampleInstance.prototype[util.inspect.custom] = function inspect(depth, options)\n    {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the SampleContext\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Autopilot.V1.AssistantContext.TaskContext.SampleContext\n *\n * @param {V1} version - Version of the resource\n * @param {sid_like} assistantSid -\n *          The SID of the Assistant that is the parent of the Task associated with the resource to fetch\n * @param {sid_like} taskSid -\n *          The SID of the Task associated with the Sample resource to create\n * @param {sid} sid - The unique string that identifies the resource\n */\n/* jshint ignore:end */\nSampleContext = function SampleContext(version, assistantSid, taskSid, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {assistantSid: assistantSid, taskSid: taskSid, sid: sid, };\n  this._uri = `/Assistants/${assistantSid}/Tasks/${taskSid}/Samples/${sid}`;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a SampleInstance\n *\n * @function fetch\n * @memberof Twilio.Autopilot.V1.AssistantContext.TaskContext.SampleContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SampleInstance\n */\n/* jshint ignore:end */\nSampleContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({uri: this._uri, method: 'GET'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new SampleInstance(\n      this._version,\n      payload,\n      this._solution.assistantSid,\n      this._solution.taskSid,\n      this._solution.sid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * update a SampleInstance\n *\n * @function update\n * @memberof Twilio.Autopilot.V1.AssistantContext.TaskContext.SampleContext#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.language] -\n *          The ISO language-country string that specifies the language used for the sample\n * @param {string} [opts.taggedText] -\n *          The text example of how end users might express the task\n * @param {string} [opts.sourceChannel] -\n *          The communication channel from which the sample was captured\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SampleInstance\n */\n/* jshint ignore:end */\nSampleContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n  opts = opts || {};\n\n  var deferred = Q.defer();\n  var data = values.of({\n    'Language': _.get(opts, 'language'),\n    'TaggedText': _.get(opts, 'taggedText'),\n    'SourceChannel': _.get(opts, 'sourceChannel')\n  });\n\n  var promise = this._version.update({uri: this._uri, method: 'POST', data: data});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new SampleInstance(\n      this._version,\n      payload,\n      this._solution.assistantSid,\n      this._solution.taskSid,\n      this._solution.sid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * remove a SampleInstance\n *\n * @function remove\n * @memberof Twilio.Autopilot.V1.AssistantContext.TaskContext.SampleContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SampleInstance\n */\n/* jshint ignore:end */\nSampleContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.remove({uri: this._uri, method: 'DELETE'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Autopilot.V1.AssistantContext.TaskContext.SampleContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nSampleContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nSampleContext.prototype[util.inspect.custom] = function inspect(depth, options)\n    {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  SampleList: SampleList,\n  SamplePage: SamplePage,\n  SampleInstance: SampleInstance,\n  SampleContext: SampleContext\n};\n"]},"metadata":{},"sourceType":"script"}