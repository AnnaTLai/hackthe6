{"ast":null,"code":"// Generated by CoffeeScript 2.4.1\n(function () {\n  var NodeType, XMLDeclaration, XMLNode, isObject;\n  ({\n    isObject\n  } = require('./Utility'));\n  XMLNode = require('./XMLNode');\n  NodeType = require('./NodeType'); // Represents the XML declaration\n\n  module.exports = XMLDeclaration = class XMLDeclaration extends XMLNode {\n    // Initializes a new instance of `XMLDeclaration`\n    // `parent` the document object\n    // `version` A version number string, e.g. 1.0\n    // `encoding` Encoding declaration, e.g. UTF-8\n    // `standalone` standalone document declaration: true or false\n    constructor(parent, version, encoding, standalone) {\n      super(parent); // arguments may also be passed as an object\n\n      if (isObject(version)) {\n        ({\n          version,\n          encoding,\n          standalone\n        } = version);\n      }\n\n      if (!version) {\n        version = '1.0';\n      }\n\n      this.type = NodeType.Declaration;\n      this.version = this.stringify.xmlVersion(version);\n\n      if (encoding != null) {\n        this.encoding = this.stringify.xmlEncoding(encoding);\n      }\n\n      if (standalone != null) {\n        this.standalone = this.stringify.xmlStandalone(standalone);\n      }\n    } // Converts to string\n    // `options.pretty` pretty prints the result\n    // `options.indent` indentation for pretty print\n    // `options.offset` how many indentations to add to every line for pretty print\n    // `options.newline` newline sequence for pretty print\n\n\n    toString(options) {\n      return this.options.writer.declaration(this, this.options.writer.filterOptions(options));\n    }\n\n  };\n}).call(this);","map":{"version":3,"sources":["/Users/tony_niu/Visual Studio/Twilio/twilio-video-starter-kit/src/token-service/node_modules/xmlbuilder/lib/XMLDeclaration.js"],"names":["NodeType","XMLDeclaration","XMLNode","isObject","require","module","exports","constructor","parent","version","encoding","standalone","type","Declaration","stringify","xmlVersion","xmlEncoding","xmlStandalone","toString","options","writer","declaration","filterOptions","call"],"mappings":"AAAA;AACA,CAAC,YAAW;AACV,MAAIA,QAAJ,EAAcC,cAAd,EAA8BC,OAA9B,EAAuCC,QAAvC;AAEA,GAAC;AAACA,IAAAA;AAAD,MAAaC,OAAO,CAAC,WAAD,CAArB;AAEAF,EAAAA,OAAO,GAAGE,OAAO,CAAC,WAAD,CAAjB;AAEAJ,EAAAA,QAAQ,GAAGI,OAAO,CAAC,YAAD,CAAlB,CAPU,CASV;;AACAC,EAAAA,MAAM,CAACC,OAAP,GAAiBL,cAAc,GAAG,MAAMA,cAAN,SAA6BC,OAA7B,CAAqC;AACrE;AAEA;AAEA;AACA;AACA;AACAK,IAAAA,WAAW,CAACC,MAAD,EAASC,OAAT,EAAkBC,QAAlB,EAA4BC,UAA5B,EAAwC;AACjD,YAAMH,MAAN,EADiD,CAEjD;;AACA,UAAIL,QAAQ,CAACM,OAAD,CAAZ,EAAuB;AACrB,SAAC;AAACA,UAAAA,OAAD;AAAUC,UAAAA,QAAV;AAAoBC,UAAAA;AAApB,YAAkCF,OAAnC;AACD;;AACD,UAAI,CAACA,OAAL,EAAc;AACZA,QAAAA,OAAO,GAAG,KAAV;AACD;;AACD,WAAKG,IAAL,GAAYZ,QAAQ,CAACa,WAArB;AACA,WAAKJ,OAAL,GAAe,KAAKK,SAAL,CAAeC,UAAf,CAA0BN,OAA1B,CAAf;;AACA,UAAIC,QAAQ,IAAI,IAAhB,EAAsB;AACpB,aAAKA,QAAL,GAAgB,KAAKI,SAAL,CAAeE,WAAf,CAA2BN,QAA3B,CAAhB;AACD;;AACD,UAAIC,UAAU,IAAI,IAAlB,EAAwB;AACtB,aAAKA,UAAL,GAAkB,KAAKG,SAAL,CAAeG,aAAf,CAA6BN,UAA7B,CAAlB;AACD;AACF,KAzBoE,CA2BrE;AAEA;AACA;AACA;AACA;;;AACAO,IAAAA,QAAQ,CAACC,OAAD,EAAU;AAChB,aAAO,KAAKA,OAAL,CAAaC,MAAb,CAAoBC,WAApB,CAAgC,IAAhC,EAAsC,KAAKF,OAAL,CAAaC,MAAb,CAAoBE,aAApB,CAAkCH,OAAlC,CAAtC,CAAP;AACD;;AAnCoE,GAAvE;AAuCD,CAjDD,EAiDGI,IAjDH,CAiDQ,IAjDR","sourcesContent":["// Generated by CoffeeScript 2.4.1\n(function() {\n  var NodeType, XMLDeclaration, XMLNode, isObject;\n\n  ({isObject} = require('./Utility'));\n\n  XMLNode = require('./XMLNode');\n\n  NodeType = require('./NodeType');\n\n  // Represents the XML declaration\n  module.exports = XMLDeclaration = class XMLDeclaration extends XMLNode {\n    // Initializes a new instance of `XMLDeclaration`\n\n    // `parent` the document object\n\n    // `version` A version number string, e.g. 1.0\n    // `encoding` Encoding declaration, e.g. UTF-8\n    // `standalone` standalone document declaration: true or false\n    constructor(parent, version, encoding, standalone) {\n      super(parent);\n      // arguments may also be passed as an object\n      if (isObject(version)) {\n        ({version, encoding, standalone} = version);\n      }\n      if (!version) {\n        version = '1.0';\n      }\n      this.type = NodeType.Declaration;\n      this.version = this.stringify.xmlVersion(version);\n      if (encoding != null) {\n        this.encoding = this.stringify.xmlEncoding(encoding);\n      }\n      if (standalone != null) {\n        this.standalone = this.stringify.xmlStandalone(standalone);\n      }\n    }\n\n    // Converts to string\n\n    // `options.pretty` pretty prints the result\n    // `options.indent` indentation for pretty print\n    // `options.offset` how many indentations to add to every line for pretty print\n    // `options.newline` newline sequence for pretty print\n    toString(options) {\n      return this.options.writer.declaration(this, this.options.writer.filterOptions(options));\n    }\n\n  };\n\n}).call(this);\n"]},"metadata":{},"sourceType":"module"}