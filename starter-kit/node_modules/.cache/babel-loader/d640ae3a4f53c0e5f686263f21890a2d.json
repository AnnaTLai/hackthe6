{"ast":null,"code":"'use strict';\n/* jshint ignore:start */\n\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n\n/* jshint ignore:end */\n\nvar Q = require('q');\n/* jshint ignore:line */\n\n\nvar _ = require('lodash');\n/* jshint ignore:line */\n\n\nvar util = require('util');\n/* jshint ignore:line */\n\n\nvar InviteList = require('./channel/invite').InviteList;\n\nvar MemberList = require('./channel/member').MemberList;\n\nvar MessageList = require('./channel/message').MessageList;\n\nvar Page = require('../../../../base/Page');\n/* jshint ignore:line */\n\n\nvar WebhookList = require('./channel/webhook').WebhookList;\n\nvar deserialize = require('../../../../base/deserialize');\n/* jshint ignore:line */\n\n\nvar serialize = require('../../../../base/serialize');\n/* jshint ignore:line */\n\n\nvar values = require('../../../../base/values');\n/* jshint ignore:line */\n\n\nvar ChannelList;\nvar ChannelPage;\nvar ChannelInstance;\nvar ChannelContext;\n/* jshint ignore:start */\n\n/**\n * Initialize the ChannelList\n *\n * @constructor Twilio.Chat.V2.ServiceContext.ChannelList\n *\n * @param {Twilio.Chat.V2} version - Version of the resource\n * @param {string} serviceSid -\n *          The SID of the Service that the resource is associated with\n */\n\n/* jshint ignore:end */\n\nChannelList = function ChannelList(version, serviceSid) {\n  /* jshint ignore:start */\n\n  /**\n   * @function channels\n   * @memberof Twilio.Chat.V2.ServiceContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Chat.V2.ServiceContext.ChannelContext}\n   */\n\n  /* jshint ignore:end */\n  function ChannelListInstance(sid) {\n    return ChannelListInstance.get(sid);\n  }\n\n  ChannelListInstance._version = version; // Path Solution\n\n  ChannelListInstance._solution = {\n    serviceSid: serviceSid\n  };\n  ChannelListInstance._uri = `/Services/${serviceSid}/Channels`;\n  /* jshint ignore:start */\n\n  /**\n   * create a ChannelInstance\n   *\n   * @function create\n   * @memberof Twilio.Chat.V2.ServiceContext.ChannelList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.friendlyName] - A string to describe the new resource\n   * @param {string} [opts.uniqueName] -\n   *          An application-defined string that uniquely identifies the Channel resource\n   * @param {string} [opts.attributes] -\n   *          A valid JSON string that contains application-specific data\n   * @param {channel.channel_type} [opts.type] - The visibility of the channel\n   * @param {Date} [opts.dateCreated] -\n   *          The ISO 8601 date and time in GMT when the resource was created\n   * @param {Date} [opts.dateUpdated] -\n   *          The ISO 8601 date and time in GMT when the resource was updated\n   * @param {string} [opts.createdBy] -\n   *          The identity of the User that created the Channel\n   * @param {channel.webhook_enabled_type} [opts.xTwilioWebhookEnabled] -\n   *          The X-Twilio-Webhook-Enabled HTTP request header\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed ChannelInstance\n   */\n\n  /* jshint ignore:end */\n\n  ChannelListInstance.create = function create(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'FriendlyName': _.get(opts, 'friendlyName'),\n      'UniqueName': _.get(opts, 'uniqueName'),\n      'Attributes': _.get(opts, 'attributes'),\n      'Type': _.get(opts, 'type'),\n      'DateCreated': serialize.iso8601DateTime(_.get(opts, 'dateCreated')),\n      'DateUpdated': serialize.iso8601DateTime(_.get(opts, 'dateUpdated')),\n      'CreatedBy': _.get(opts, 'createdBy')\n    });\n    var headers = values.of({\n      'X-Twilio-Webhook-Enabled': _.get(opts, 'xTwilioWebhookEnabled')\n    });\n\n    var promise = this._version.create({\n      uri: this._uri,\n      method: 'POST',\n      data: data,\n      headers: headers\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new ChannelInstance(this._version, payload, this._solution.serviceSid, this._solution.sid));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Streams ChannelInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Chat.V2.ServiceContext.ChannelList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {channel.channel_type|list} [opts.type] -\n   *          The visibility of the channel to read\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n\n  /* jshint ignore:end */\n\n\n  ChannelListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Lists ChannelInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Chat.V2.ServiceContext.ChannelList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {channel.channel_type|list} [opts.type] -\n   *          The visibility of the channel to read\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  ChannelListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single page of ChannelInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Chat.V2.ServiceContext.ChannelList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {channel.channel_type|list} [opts.type] -\n   *          The visibility of the channel to read\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  ChannelListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'Type': serialize.map(_.get(opts, 'type'), function (e) {\n        return e;\n      }),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new ChannelPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single target page of ChannelInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Chat.V2.ServiceContext.ChannelList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  ChannelListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new ChannelPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Constructs a channel\n   *\n   * @function get\n   * @memberof Twilio.Chat.V2.ServiceContext.ChannelList#\n   *\n   * @param {string} sid - The SID of the resource\n   *\n   * @returns {Twilio.Chat.V2.ServiceContext.ChannelContext}\n   */\n\n  /* jshint ignore:end */\n\n\n  ChannelListInstance.get = function get(sid) {\n    return new ChannelContext(this._version, this._solution.serviceSid, sid);\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Chat.V2.ServiceContext.ChannelList#\n   *\n   * @returns Object\n   */\n\n  /* jshint ignore:end */\n\n\n  ChannelListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  ChannelListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return ChannelListInstance;\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the ChannelPage\n *\n * @constructor Twilio.Chat.V2.ServiceContext.ChannelPage\n *\n * @param {V2} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {ChannelSolution} solution - Path solution\n *\n * @returns ChannelPage\n */\n\n/* jshint ignore:end */\n\n\nChannelPage = function ChannelPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(ChannelPage.prototype, Page.prototype);\n\nChannelPage.prototype.constructor = ChannelPage;\n/* jshint ignore:start */\n\n/**\n * Build an instance of ChannelInstance\n *\n * @function getInstance\n * @memberof Twilio.Chat.V2.ServiceContext.ChannelPage#\n *\n * @param {ChannelPayload} payload - Payload response from the API\n *\n * @returns ChannelInstance\n */\n\n/* jshint ignore:end */\n\nChannelPage.prototype.getInstance = function getInstance(payload) {\n  return new ChannelInstance(this._version, payload, this._solution.serviceSid);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Chat.V2.ServiceContext.ChannelPage#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nChannelPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nChannelPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the ChannelContext\n *\n * @constructor Twilio.Chat.V2.ServiceContext.ChannelInstance\n *\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {string} serviceSid -\n *          The SID of the Service that the resource is associated with\n * @property {string} friendlyName -\n *          The string that you assigned to describe the resource\n * @property {string} uniqueName -\n *          An application-defined string that uniquely identifies the resource\n * @property {string} attributes -\n *          The JSON string that stores application-specific data\n * @property {channel.channel_type} type -\n *          The visibility of the channel. Can be: `public` or `private`\n * @property {Date} dateCreated -\n *          The ISO 8601 date and time in GMT when the resource was created\n * @property {Date} dateUpdated -\n *          The ISO 8601 date and time in GMT when the resource was last updated\n * @property {string} createdBy - The identity of the User that created the channel\n * @property {number} membersCount - The number of Members in the Channel\n * @property {number} messagesCount -\n *          The number of Messages that have been passed in the Channel\n * @property {string} url - The absolute URL of the Channel resource\n * @property {string} links -\n *          Absolute URLs to access the Members, Messages , Invites and, if it exists, the last Message for the Channel\n *\n * @param {V2} version - Version of the resource\n * @param {ChannelPayload} payload - The instance payload\n * @param {sid} serviceSid -\n *          The SID of the Service that the resource is associated with\n * @param {sid_like} sid - The SID of the resource\n */\n\n/* jshint ignore:end */\n\n\nChannelInstance = function ChannelInstance(version, payload, serviceSid, sid) {\n  this._version = version; // Marshaled Properties\n\n  this.sid = payload.sid; // jshint ignore:line\n\n  this.accountSid = payload.account_sid; // jshint ignore:line\n\n  this.serviceSid = payload.service_sid; // jshint ignore:line\n\n  this.friendlyName = payload.friendly_name; // jshint ignore:line\n\n  this.uniqueName = payload.unique_name; // jshint ignore:line\n\n  this.attributes = payload.attributes; // jshint ignore:line\n\n  this.type = payload.type; // jshint ignore:line\n\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n\n  this.createdBy = payload.created_by; // jshint ignore:line\n\n  this.membersCount = deserialize.integer(payload.members_count); // jshint ignore:line\n\n  this.messagesCount = deserialize.integer(payload.messages_count); // jshint ignore:line\n\n  this.url = payload.url; // jshint ignore:line\n\n  this.links = payload.links; // jshint ignore:line\n  // Context\n\n  this._context = undefined;\n  this._solution = {\n    serviceSid: serviceSid,\n    sid: sid || this.sid\n  };\n};\n\nObject.defineProperty(ChannelInstance.prototype, '_proxy', {\n  get: function () {\n    if (!this._context) {\n      this._context = new ChannelContext(this._version, this._solution.serviceSid, this._solution.sid);\n    }\n\n    return this._context;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * fetch a ChannelInstance\n *\n * @function fetch\n * @memberof Twilio.Chat.V2.ServiceContext.ChannelInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ChannelInstance\n */\n\n/* jshint ignore:end */\n\nChannelInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n/* jshint ignore:start */\n\n/**\n * remove a ChannelInstance\n *\n * @function remove\n * @memberof Twilio.Chat.V2.ServiceContext.ChannelInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {channel.webhook_enabled_type} [opts.xTwilioWebhookEnabled] -\n *          The X-Twilio-Webhook-Enabled HTTP request header\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ChannelInstance\n */\n\n/* jshint ignore:end */\n\n\nChannelInstance.prototype.remove = function remove(opts, callback) {\n  return this._proxy.remove(opts, callback);\n};\n/* jshint ignore:start */\n\n/**\n * update a ChannelInstance\n *\n * @function update\n * @memberof Twilio.Chat.V2.ServiceContext.ChannelInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] - A string to describe the resource\n * @param {string} [opts.uniqueName] -\n *          An application-defined string that uniquely identifies the resource\n * @param {string} [opts.attributes] -\n *          A valid JSON string that contains application-specific data\n * @param {Date} [opts.dateCreated] -\n *          The ISO 8601 date and time in GMT when the resource was created\n * @param {Date} [opts.dateUpdated] -\n *          The ISO 8601 date and time in GMT when the resource was updated\n * @param {string} [opts.createdBy] -\n *          The identity of the User that created the Channel\n * @param {channel.webhook_enabled_type} [opts.xTwilioWebhookEnabled] -\n *          The X-Twilio-Webhook-Enabled HTTP request header\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ChannelInstance\n */\n\n/* jshint ignore:end */\n\n\nChannelInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n/* jshint ignore:start */\n\n/**\n * Access the members\n *\n * @function members\n * @memberof Twilio.Chat.V2.ServiceContext.ChannelInstance#\n *\n * @returns {Twilio.Chat.V2.ServiceContext.ChannelContext.MemberList}\n */\n\n/* jshint ignore:end */\n\n\nChannelInstance.prototype.members = function members() {\n  return this._proxy.members;\n};\n/* jshint ignore:start */\n\n/**\n * Access the messages\n *\n * @function messages\n * @memberof Twilio.Chat.V2.ServiceContext.ChannelInstance#\n *\n * @returns {Twilio.Chat.V2.ServiceContext.ChannelContext.MessageList}\n */\n\n/* jshint ignore:end */\n\n\nChannelInstance.prototype.messages = function messages() {\n  return this._proxy.messages;\n};\n/* jshint ignore:start */\n\n/**\n * Access the invites\n *\n * @function invites\n * @memberof Twilio.Chat.V2.ServiceContext.ChannelInstance#\n *\n * @returns {Twilio.Chat.V2.ServiceContext.ChannelContext.InviteList}\n */\n\n/* jshint ignore:end */\n\n\nChannelInstance.prototype.invites = function invites() {\n  return this._proxy.invites;\n};\n/* jshint ignore:start */\n\n/**\n * Access the webhooks\n *\n * @function webhooks\n * @memberof Twilio.Chat.V2.ServiceContext.ChannelInstance#\n *\n * @returns {Twilio.Chat.V2.ServiceContext.ChannelContext.WebhookList}\n */\n\n/* jshint ignore:end */\n\n\nChannelInstance.prototype.webhooks = function webhooks() {\n  return this._proxy.webhooks;\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Chat.V2.ServiceContext.ChannelInstance#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nChannelInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nChannelInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the ChannelContext\n *\n * @constructor Twilio.Chat.V2.ServiceContext.ChannelContext\n *\n * @property {Twilio.Chat.V2.ServiceContext.ChannelContext.MemberList} members -\n *          members resource\n * @property {Twilio.Chat.V2.ServiceContext.ChannelContext.MessageList} messages -\n *          messages resource\n * @property {Twilio.Chat.V2.ServiceContext.ChannelContext.InviteList} invites -\n *          invites resource\n * @property {Twilio.Chat.V2.ServiceContext.ChannelContext.WebhookList} webhooks -\n *          webhooks resource\n *\n * @param {V2} version - Version of the resource\n * @param {sid} serviceSid - The SID of the Service to fetch the resource from\n * @param {sid_like} sid - The SID of the resource\n */\n\n/* jshint ignore:end */\n\n\nChannelContext = function ChannelContext(version, serviceSid, sid) {\n  this._version = version; // Path Solution\n\n  this._solution = {\n    serviceSid: serviceSid,\n    sid: sid\n  };\n  this._uri = `/Services/${serviceSid}/Channels/${sid}`; // Dependents\n\n  this._members = undefined;\n  this._messages = undefined;\n  this._invites = undefined;\n  this._webhooks = undefined;\n};\n/* jshint ignore:start */\n\n/**\n * fetch a ChannelInstance\n *\n * @function fetch\n * @memberof Twilio.Chat.V2.ServiceContext.ChannelContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ChannelInstance\n */\n\n/* jshint ignore:end */\n\n\nChannelContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new ChannelInstance(this._version, payload, this._solution.serviceSid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * remove a ChannelInstance\n *\n * @function remove\n * @memberof Twilio.Chat.V2.ServiceContext.ChannelContext#\n *\n * @param {object} [opts] - Options for request\n * @param {channel.webhook_enabled_type} [opts.xTwilioWebhookEnabled] -\n *          The X-Twilio-Webhook-Enabled HTTP request header\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ChannelInstance\n */\n\n/* jshint ignore:end */\n\n\nChannelContext.prototype.remove = function remove(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n\n  opts = opts || {};\n  var deferred = Q.defer();\n  var headers = values.of({\n    'X-Twilio-Webhook-Enabled': _.get(opts, 'xTwilioWebhookEnabled')\n  });\n\n  var promise = this._version.remove({\n    uri: this._uri,\n    method: 'DELETE',\n    headers: headers\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * update a ChannelInstance\n *\n * @function update\n * @memberof Twilio.Chat.V2.ServiceContext.ChannelContext#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] - A string to describe the resource\n * @param {string} [opts.uniqueName] -\n *          An application-defined string that uniquely identifies the resource\n * @param {string} [opts.attributes] -\n *          A valid JSON string that contains application-specific data\n * @param {Date} [opts.dateCreated] -\n *          The ISO 8601 date and time in GMT when the resource was created\n * @param {Date} [opts.dateUpdated] -\n *          The ISO 8601 date and time in GMT when the resource was updated\n * @param {string} [opts.createdBy] -\n *          The identity of the User that created the Channel\n * @param {channel.webhook_enabled_type} [opts.xTwilioWebhookEnabled] -\n *          The X-Twilio-Webhook-Enabled HTTP request header\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ChannelInstance\n */\n\n/* jshint ignore:end */\n\n\nChannelContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n\n  opts = opts || {};\n  var deferred = Q.defer();\n  var data = values.of({\n    'FriendlyName': _.get(opts, 'friendlyName'),\n    'UniqueName': _.get(opts, 'uniqueName'),\n    'Attributes': _.get(opts, 'attributes'),\n    'DateCreated': serialize.iso8601DateTime(_.get(opts, 'dateCreated')),\n    'DateUpdated': serialize.iso8601DateTime(_.get(opts, 'dateUpdated')),\n    'CreatedBy': _.get(opts, 'createdBy')\n  });\n  var headers = values.of({\n    'X-Twilio-Webhook-Enabled': _.get(opts, 'xTwilioWebhookEnabled')\n  });\n\n  var promise = this._version.update({\n    uri: this._uri,\n    method: 'POST',\n    data: data,\n    headers: headers\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new ChannelInstance(this._version, payload, this._solution.serviceSid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\nObject.defineProperty(ChannelContext.prototype, 'members', {\n  get: function () {\n    if (!this._members) {\n      this._members = new MemberList(this._version, this._solution.serviceSid, this._solution.sid);\n    }\n\n    return this._members;\n  }\n});\nObject.defineProperty(ChannelContext.prototype, 'messages', {\n  get: function () {\n    if (!this._messages) {\n      this._messages = new MessageList(this._version, this._solution.serviceSid, this._solution.sid);\n    }\n\n    return this._messages;\n  }\n});\nObject.defineProperty(ChannelContext.prototype, 'invites', {\n  get: function () {\n    if (!this._invites) {\n      this._invites = new InviteList(this._version, this._solution.serviceSid, this._solution.sid);\n    }\n\n    return this._invites;\n  }\n});\nObject.defineProperty(ChannelContext.prototype, 'webhooks', {\n  get: function () {\n    if (!this._webhooks) {\n      this._webhooks = new WebhookList(this._version, this._solution.serviceSid, this._solution.sid);\n    }\n\n    return this._webhooks;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Chat.V2.ServiceContext.ChannelContext#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\nChannelContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nChannelContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  ChannelList: ChannelList,\n  ChannelPage: ChannelPage,\n  ChannelInstance: ChannelInstance,\n  ChannelContext: ChannelContext\n};","map":{"version":3,"sources":["/Users/tony_niu/Visual Studio/Twilio/twilio-video-starter-kit/node_modules/twilio/lib/rest/chat/v2/service/channel.js"],"names":["Q","require","_","util","InviteList","MemberList","MessageList","Page","WebhookList","deserialize","serialize","values","ChannelList","ChannelPage","ChannelInstance","ChannelContext","version","serviceSid","ChannelListInstance","sid","get","_version","_solution","_uri","create","opts","callback","isFunction","deferred","defer","data","of","iso8601DateTime","headers","promise","uri","method","then","payload","resolve","bind","catch","error","reject","nodeify","each","isUndefined","Error","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","fetchNextPage","fn","page","instances","instance","nextPage","merge","list","allResources","resource","push","length","map","e","pageToken","pageNumber","params","getPage","targetUrl","_domain","twilio","request","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","accountSid","account_sid","service_sid","friendlyName","friendly_name","uniqueName","unique_name","attributes","type","dateCreated","date_created","dateUpdated","date_updated","createdBy","created_by","membersCount","integer","members_count","messagesCount","messages_count","url","links","_context","undefined","Object","defineProperty","fetch","_proxy","remove","update","members","messages","invites","webhooks","_members","_messages","_invites","_webhooks","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar InviteList = require('./channel/invite').InviteList;\nvar MemberList = require('./channel/member').MemberList;\nvar MessageList = require('./channel/message').MessageList;\nvar Page = require('../../../../base/Page');  /* jshint ignore:line */\nvar WebhookList = require('./channel/webhook').WebhookList;\nvar deserialize = require(\n    '../../../../base/deserialize');  /* jshint ignore:line */\nvar serialize = require('../../../../base/serialize');  /* jshint ignore:line */\nvar values = require('../../../../base/values');  /* jshint ignore:line */\n\nvar ChannelList;\nvar ChannelPage;\nvar ChannelInstance;\nvar ChannelContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the ChannelList\n *\n * @constructor Twilio.Chat.V2.ServiceContext.ChannelList\n *\n * @param {Twilio.Chat.V2} version - Version of the resource\n * @param {string} serviceSid -\n *          The SID of the Service that the resource is associated with\n */\n/* jshint ignore:end */\nChannelList = function ChannelList(version, serviceSid) {\n  /* jshint ignore:start */\n  /**\n   * @function channels\n   * @memberof Twilio.Chat.V2.ServiceContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Chat.V2.ServiceContext.ChannelContext}\n   */\n  /* jshint ignore:end */\n  function ChannelListInstance(sid) {\n    return ChannelListInstance.get(sid);\n  }\n\n  ChannelListInstance._version = version;\n  // Path Solution\n  ChannelListInstance._solution = {serviceSid: serviceSid};\n  ChannelListInstance._uri = `/Services/${serviceSid}/Channels`;\n  /* jshint ignore:start */\n  /**\n   * create a ChannelInstance\n   *\n   * @function create\n   * @memberof Twilio.Chat.V2.ServiceContext.ChannelList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.friendlyName] - A string to describe the new resource\n   * @param {string} [opts.uniqueName] -\n   *          An application-defined string that uniquely identifies the Channel resource\n   * @param {string} [opts.attributes] -\n   *          A valid JSON string that contains application-specific data\n   * @param {channel.channel_type} [opts.type] - The visibility of the channel\n   * @param {Date} [opts.dateCreated] -\n   *          The ISO 8601 date and time in GMT when the resource was created\n   * @param {Date} [opts.dateUpdated] -\n   *          The ISO 8601 date and time in GMT when the resource was updated\n   * @param {string} [opts.createdBy] -\n   *          The identity of the User that created the Channel\n   * @param {channel.webhook_enabled_type} [opts.xTwilioWebhookEnabled] -\n   *          The X-Twilio-Webhook-Enabled HTTP request header\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed ChannelInstance\n   */\n  /* jshint ignore:end */\n  ChannelListInstance.create = function create(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'FriendlyName': _.get(opts, 'friendlyName'),\n      'UniqueName': _.get(opts, 'uniqueName'),\n      'Attributes': _.get(opts, 'attributes'),\n      'Type': _.get(opts, 'type'),\n      'DateCreated': serialize.iso8601DateTime(_.get(opts, 'dateCreated')),\n      'DateUpdated': serialize.iso8601DateTime(_.get(opts, 'dateUpdated')),\n      'CreatedBy': _.get(opts, 'createdBy')\n    });\n    var headers = values.of({'X-Twilio-Webhook-Enabled': _.get(opts, 'xTwilioWebhookEnabled')});\n\n    var promise = this._version.create({uri: this._uri, method: 'POST', data: data, headers: headers});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new ChannelInstance(\n        this._version,\n        payload,\n        this._solution.serviceSid,\n        this._solution.sid\n      ));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Streams ChannelInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Chat.V2.ServiceContext.ChannelList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {channel.channel_type|list} [opts.type] -\n   *          The visibility of the channel to read\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  ChannelListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists ChannelInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Chat.V2.ServiceContext.ChannelList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {channel.channel_type|list} [opts.type] -\n   *          The visibility of the channel to read\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  ChannelListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of ChannelInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Chat.V2.ServiceContext.ChannelList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {channel.channel_type|list} [opts.type] -\n   *          The visibility of the channel to read\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  ChannelListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'Type': serialize.map(_.get(opts, 'type'), function(e) { return e; }),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new ChannelPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of ChannelInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Chat.V2.ServiceContext.ChannelList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  ChannelListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new ChannelPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a channel\n   *\n   * @function get\n   * @memberof Twilio.Chat.V2.ServiceContext.ChannelList#\n   *\n   * @param {string} sid - The SID of the resource\n   *\n   * @returns {Twilio.Chat.V2.ServiceContext.ChannelContext}\n   */\n  /* jshint ignore:end */\n  ChannelListInstance.get = function get(sid) {\n    return new ChannelContext(this._version, this._solution.serviceSid, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Chat.V2.ServiceContext.ChannelList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  ChannelListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  ChannelListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return ChannelListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the ChannelPage\n *\n * @constructor Twilio.Chat.V2.ServiceContext.ChannelPage\n *\n * @param {V2} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {ChannelSolution} solution - Path solution\n *\n * @returns ChannelPage\n */\n/* jshint ignore:end */\nChannelPage = function ChannelPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(ChannelPage.prototype, Page.prototype);\nChannelPage.prototype.constructor = ChannelPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of ChannelInstance\n *\n * @function getInstance\n * @memberof Twilio.Chat.V2.ServiceContext.ChannelPage#\n *\n * @param {ChannelPayload} payload - Payload response from the API\n *\n * @returns ChannelInstance\n */\n/* jshint ignore:end */\nChannelPage.prototype.getInstance = function getInstance(payload) {\n  return new ChannelInstance(this._version, payload, this._solution.serviceSid);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Chat.V2.ServiceContext.ChannelPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nChannelPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nChannelPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the ChannelContext\n *\n * @constructor Twilio.Chat.V2.ServiceContext.ChannelInstance\n *\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {string} serviceSid -\n *          The SID of the Service that the resource is associated with\n * @property {string} friendlyName -\n *          The string that you assigned to describe the resource\n * @property {string} uniqueName -\n *          An application-defined string that uniquely identifies the resource\n * @property {string} attributes -\n *          The JSON string that stores application-specific data\n * @property {channel.channel_type} type -\n *          The visibility of the channel. Can be: `public` or `private`\n * @property {Date} dateCreated -\n *          The ISO 8601 date and time in GMT when the resource was created\n * @property {Date} dateUpdated -\n *          The ISO 8601 date and time in GMT when the resource was last updated\n * @property {string} createdBy - The identity of the User that created the channel\n * @property {number} membersCount - The number of Members in the Channel\n * @property {number} messagesCount -\n *          The number of Messages that have been passed in the Channel\n * @property {string} url - The absolute URL of the Channel resource\n * @property {string} links -\n *          Absolute URLs to access the Members, Messages , Invites and, if it exists, the last Message for the Channel\n *\n * @param {V2} version - Version of the resource\n * @param {ChannelPayload} payload - The instance payload\n * @param {sid} serviceSid -\n *          The SID of the Service that the resource is associated with\n * @param {sid_like} sid - The SID of the resource\n */\n/* jshint ignore:end */\nChannelInstance = function ChannelInstance(version, payload, serviceSid, sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.sid = payload.sid; // jshint ignore:line\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.serviceSid = payload.service_sid; // jshint ignore:line\n  this.friendlyName = payload.friendly_name; // jshint ignore:line\n  this.uniqueName = payload.unique_name; // jshint ignore:line\n  this.attributes = payload.attributes; // jshint ignore:line\n  this.type = payload.type; // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n  this.createdBy = payload.created_by; // jshint ignore:line\n  this.membersCount = deserialize.integer(payload.members_count); // jshint ignore:line\n  this.messagesCount = deserialize.integer(payload.messages_count); // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n  this.links = payload.links; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {serviceSid: serviceSid, sid: sid || this.sid, };\n};\n\nObject.defineProperty(ChannelInstance.prototype,\n  '_proxy', {\n    get: function() {\n      if (!this._context) {\n        this._context = new ChannelContext(this._version, this._solution.serviceSid, this._solution.sid);\n      }\n\n      return this._context;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a ChannelInstance\n *\n * @function fetch\n * @memberof Twilio.Chat.V2.ServiceContext.ChannelInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ChannelInstance\n */\n/* jshint ignore:end */\nChannelInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * remove a ChannelInstance\n *\n * @function remove\n * @memberof Twilio.Chat.V2.ServiceContext.ChannelInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {channel.webhook_enabled_type} [opts.xTwilioWebhookEnabled] -\n *          The X-Twilio-Webhook-Enabled HTTP request header\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ChannelInstance\n */\n/* jshint ignore:end */\nChannelInstance.prototype.remove = function remove(opts, callback) {\n  return this._proxy.remove(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * update a ChannelInstance\n *\n * @function update\n * @memberof Twilio.Chat.V2.ServiceContext.ChannelInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] - A string to describe the resource\n * @param {string} [opts.uniqueName] -\n *          An application-defined string that uniquely identifies the resource\n * @param {string} [opts.attributes] -\n *          A valid JSON string that contains application-specific data\n * @param {Date} [opts.dateCreated] -\n *          The ISO 8601 date and time in GMT when the resource was created\n * @param {Date} [opts.dateUpdated] -\n *          The ISO 8601 date and time in GMT when the resource was updated\n * @param {string} [opts.createdBy] -\n *          The identity of the User that created the Channel\n * @param {channel.webhook_enabled_type} [opts.xTwilioWebhookEnabled] -\n *          The X-Twilio-Webhook-Enabled HTTP request header\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ChannelInstance\n */\n/* jshint ignore:end */\nChannelInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * Access the members\n *\n * @function members\n * @memberof Twilio.Chat.V2.ServiceContext.ChannelInstance#\n *\n * @returns {Twilio.Chat.V2.ServiceContext.ChannelContext.MemberList}\n */\n/* jshint ignore:end */\nChannelInstance.prototype.members = function members() {\n  return this._proxy.members;\n};\n\n/* jshint ignore:start */\n/**\n * Access the messages\n *\n * @function messages\n * @memberof Twilio.Chat.V2.ServiceContext.ChannelInstance#\n *\n * @returns {Twilio.Chat.V2.ServiceContext.ChannelContext.MessageList}\n */\n/* jshint ignore:end */\nChannelInstance.prototype.messages = function messages() {\n  return this._proxy.messages;\n};\n\n/* jshint ignore:start */\n/**\n * Access the invites\n *\n * @function invites\n * @memberof Twilio.Chat.V2.ServiceContext.ChannelInstance#\n *\n * @returns {Twilio.Chat.V2.ServiceContext.ChannelContext.InviteList}\n */\n/* jshint ignore:end */\nChannelInstance.prototype.invites = function invites() {\n  return this._proxy.invites;\n};\n\n/* jshint ignore:start */\n/**\n * Access the webhooks\n *\n * @function webhooks\n * @memberof Twilio.Chat.V2.ServiceContext.ChannelInstance#\n *\n * @returns {Twilio.Chat.V2.ServiceContext.ChannelContext.WebhookList}\n */\n/* jshint ignore:end */\nChannelInstance.prototype.webhooks = function webhooks() {\n  return this._proxy.webhooks;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Chat.V2.ServiceContext.ChannelInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nChannelInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nChannelInstance.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the ChannelContext\n *\n * @constructor Twilio.Chat.V2.ServiceContext.ChannelContext\n *\n * @property {Twilio.Chat.V2.ServiceContext.ChannelContext.MemberList} members -\n *          members resource\n * @property {Twilio.Chat.V2.ServiceContext.ChannelContext.MessageList} messages -\n *          messages resource\n * @property {Twilio.Chat.V2.ServiceContext.ChannelContext.InviteList} invites -\n *          invites resource\n * @property {Twilio.Chat.V2.ServiceContext.ChannelContext.WebhookList} webhooks -\n *          webhooks resource\n *\n * @param {V2} version - Version of the resource\n * @param {sid} serviceSid - The SID of the Service to fetch the resource from\n * @param {sid_like} sid - The SID of the resource\n */\n/* jshint ignore:end */\nChannelContext = function ChannelContext(version, serviceSid, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {serviceSid: serviceSid, sid: sid, };\n  this._uri = `/Services/${serviceSid}/Channels/${sid}`;\n\n  // Dependents\n  this._members = undefined;\n  this._messages = undefined;\n  this._invites = undefined;\n  this._webhooks = undefined;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a ChannelInstance\n *\n * @function fetch\n * @memberof Twilio.Chat.V2.ServiceContext.ChannelContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ChannelInstance\n */\n/* jshint ignore:end */\nChannelContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({uri: this._uri, method: 'GET'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new ChannelInstance(\n      this._version,\n      payload,\n      this._solution.serviceSid,\n      this._solution.sid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * remove a ChannelInstance\n *\n * @function remove\n * @memberof Twilio.Chat.V2.ServiceContext.ChannelContext#\n *\n * @param {object} [opts] - Options for request\n * @param {channel.webhook_enabled_type} [opts.xTwilioWebhookEnabled] -\n *          The X-Twilio-Webhook-Enabled HTTP request header\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ChannelInstance\n */\n/* jshint ignore:end */\nChannelContext.prototype.remove = function remove(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n  opts = opts || {};\n\n  var deferred = Q.defer();\n  var headers = values.of({'X-Twilio-Webhook-Enabled': _.get(opts, 'xTwilioWebhookEnabled')});\n\n  var promise = this._version.remove({uri: this._uri, method: 'DELETE', headers: headers});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * update a ChannelInstance\n *\n * @function update\n * @memberof Twilio.Chat.V2.ServiceContext.ChannelContext#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] - A string to describe the resource\n * @param {string} [opts.uniqueName] -\n *          An application-defined string that uniquely identifies the resource\n * @param {string} [opts.attributes] -\n *          A valid JSON string that contains application-specific data\n * @param {Date} [opts.dateCreated] -\n *          The ISO 8601 date and time in GMT when the resource was created\n * @param {Date} [opts.dateUpdated] -\n *          The ISO 8601 date and time in GMT when the resource was updated\n * @param {string} [opts.createdBy] -\n *          The identity of the User that created the Channel\n * @param {channel.webhook_enabled_type} [opts.xTwilioWebhookEnabled] -\n *          The X-Twilio-Webhook-Enabled HTTP request header\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ChannelInstance\n */\n/* jshint ignore:end */\nChannelContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n  opts = opts || {};\n\n  var deferred = Q.defer();\n  var data = values.of({\n    'FriendlyName': _.get(opts, 'friendlyName'),\n    'UniqueName': _.get(opts, 'uniqueName'),\n    'Attributes': _.get(opts, 'attributes'),\n    'DateCreated': serialize.iso8601DateTime(_.get(opts, 'dateCreated')),\n    'DateUpdated': serialize.iso8601DateTime(_.get(opts, 'dateUpdated')),\n    'CreatedBy': _.get(opts, 'createdBy')\n  });\n  var headers = values.of({'X-Twilio-Webhook-Enabled': _.get(opts, 'xTwilioWebhookEnabled')});\n\n  var promise = this._version.update({uri: this._uri, method: 'POST', data: data, headers: headers});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new ChannelInstance(\n      this._version,\n      payload,\n      this._solution.serviceSid,\n      this._solution.sid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\nObject.defineProperty(ChannelContext.prototype,\n  'members', {\n    get: function() {\n      if (!this._members) {\n        this._members = new MemberList(this._version, this._solution.serviceSid, this._solution.sid);\n      }\n      return this._members;\n    }\n});\n\nObject.defineProperty(ChannelContext.prototype,\n  'messages', {\n    get: function() {\n      if (!this._messages) {\n        this._messages = new MessageList(this._version, this._solution.serviceSid, this._solution.sid);\n      }\n      return this._messages;\n    }\n});\n\nObject.defineProperty(ChannelContext.prototype,\n  'invites', {\n    get: function() {\n      if (!this._invites) {\n        this._invites = new InviteList(this._version, this._solution.serviceSid, this._solution.sid);\n      }\n      return this._invites;\n    }\n});\n\nObject.defineProperty(ChannelContext.prototype,\n  'webhooks', {\n    get: function() {\n      if (!this._webhooks) {\n        this._webhooks = new WebhookList(this._version, this._solution.serviceSid, this._solution.sid);\n      }\n      return this._webhooks;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Chat.V2.ServiceContext.ChannelContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nChannelContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nChannelContext.prototype[util.inspect.custom] = function inspect(depth, options)\n    {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  ChannelList: ChannelList,\n  ChannelPage: ChannelPage,\n  ChannelInstance: ChannelInstance,\n  ChannelContext: ChannelContext\n};\n"]},"metadata":{},"sourceType":"script"}