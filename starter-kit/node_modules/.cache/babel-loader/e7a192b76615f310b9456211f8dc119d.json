{"ast":null,"code":"'use strict';\n/* jshint ignore:start */\n\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n\n/* jshint ignore:end */\n\nvar Q = require('q');\n/* jshint ignore:line */\n\n\nvar _ = require('lodash');\n/* jshint ignore:line */\n\n\nvar util = require('util');\n/* jshint ignore:line */\n\n\nvar Page = require('../../../../../../base/Page');\n/* jshint ignore:line */\n\n\nvar deserialize = require('../../../../../../base/deserialize');\n/* jshint ignore:line */\n\n\nvar serialize = require('../../../../../../base/serialize');\n/* jshint ignore:line */\n\n\nvar values = require('../../../../../../base/values');\n/* jshint ignore:line */\n\n\nvar MessageInteractionList;\nvar MessageInteractionPage;\nvar MessageInteractionInstance;\nvar MessageInteractionContext;\n/* jshint ignore:start */\n\n/**\n * Initialize the MessageInteractionList\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Proxy.V1.ServiceContext.SessionContext.ParticipantContext.MessageInteractionList\n *\n * @param {Twilio.Proxy.V1} version - Version of the resource\n * @param {string} serviceSid - The SID of the resource's parent Service\n * @param {string} sessionSid - The SID of the resource's parent Session\n * @param {string} participantSid - The SID of the Participant resource\n */\n\n/* jshint ignore:end */\n\nMessageInteractionList = function MessageInteractionList(version, serviceSid, sessionSid, participantSid) {\n  /* jshint ignore:start */\n\n  /**\n   * @function messageInteractions\n   * @memberof Twilio.Proxy.V1.ServiceContext.SessionContext.ParticipantContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Proxy.V1.ServiceContext.SessionContext.ParticipantContext.MessageInteractionContext}\n   */\n\n  /* jshint ignore:end */\n  function MessageInteractionListInstance(sid) {\n    return MessageInteractionListInstance.get(sid);\n  }\n\n  MessageInteractionListInstance._version = version; // Path Solution\n\n  MessageInteractionListInstance._solution = {\n    serviceSid: serviceSid,\n    sessionSid: sessionSid,\n    participantSid: participantSid\n  };\n  MessageInteractionListInstance._uri = `/Services/${serviceSid}/Sessions/${sessionSid}/Participants/${participantSid}/MessageInteractions`;\n  /* jshint ignore:start */\n\n  /**\n   * create a MessageInteractionInstance\n   *\n   * @function create\n   * @memberof Twilio.Proxy.V1.ServiceContext.SessionContext.ParticipantContext.MessageInteractionList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.body] - Message body\n   * @param {string|list} [opts.mediaUrl] - Reserved\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed MessageInteractionInstance\n   */\n\n  /* jshint ignore:end */\n\n  MessageInteractionListInstance.create = function create(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'Body': _.get(opts, 'body'),\n      'MediaUrl': serialize.map(_.get(opts, 'mediaUrl'), function (e) {\n        return e;\n      })\n    });\n\n    var promise = this._version.create({\n      uri: this._uri,\n      method: 'POST',\n      data: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new MessageInteractionInstance(this._version, payload, this._solution.serviceSid, this._solution.sessionSid, this._solution.participantSid, this._solution.sid));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Streams MessageInteractionInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Proxy.V1.ServiceContext.SessionContext.ParticipantContext.MessageInteractionList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n\n  /* jshint ignore:end */\n\n\n  MessageInteractionListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Lists MessageInteractionInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Proxy.V1.ServiceContext.SessionContext.ParticipantContext.MessageInteractionList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  MessageInteractionListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single page of MessageInteractionInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Proxy.V1.ServiceContext.SessionContext.ParticipantContext.MessageInteractionList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  MessageInteractionListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new MessageInteractionPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single target page of MessageInteractionInstance records from the\n   * API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Proxy.V1.ServiceContext.SessionContext.ParticipantContext.MessageInteractionList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  MessageInteractionListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new MessageInteractionPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Constructs a message_interaction\n   *\n   * @function get\n   * @memberof Twilio.Proxy.V1.ServiceContext.SessionContext.ParticipantContext.MessageInteractionList#\n   *\n   * @param {string} sid - The unique string that identifies the resource\n   *\n   * @returns {Twilio.Proxy.V1.ServiceContext.SessionContext.ParticipantContext.MessageInteractionContext}\n   */\n\n  /* jshint ignore:end */\n\n\n  MessageInteractionListInstance.get = function get(sid) {\n    return new MessageInteractionContext(this._version, this._solution.serviceSid, this._solution.sessionSid, this._solution.participantSid, sid);\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Proxy.V1.ServiceContext.SessionContext.ParticipantContext.MessageInteractionList#\n   *\n   * @returns Object\n   */\n\n  /* jshint ignore:end */\n\n\n  MessageInteractionListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  MessageInteractionListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return MessageInteractionListInstance;\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the MessageInteractionPage\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Proxy.V1.ServiceContext.SessionContext.ParticipantContext.MessageInteractionPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {MessageInteractionSolution} solution - Path solution\n *\n * @returns MessageInteractionPage\n */\n\n/* jshint ignore:end */\n\n\nMessageInteractionPage = function MessageInteractionPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(MessageInteractionPage.prototype, Page.prototype);\n\nMessageInteractionPage.prototype.constructor = MessageInteractionPage;\n/* jshint ignore:start */\n\n/**\n * Build an instance of MessageInteractionInstance\n *\n * @function getInstance\n * @memberof Twilio.Proxy.V1.ServiceContext.SessionContext.ParticipantContext.MessageInteractionPage#\n *\n * @param {MessageInteractionPayload} payload - Payload response from the API\n *\n * @returns MessageInteractionInstance\n */\n\n/* jshint ignore:end */\n\nMessageInteractionPage.prototype.getInstance = function getInstance(payload) {\n  return new MessageInteractionInstance(this._version, payload, this._solution.serviceSid, this._solution.sessionSid, this._solution.participantSid);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Proxy.V1.ServiceContext.SessionContext.ParticipantContext.MessageInteractionPage#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nMessageInteractionPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nMessageInteractionPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the MessageInteractionContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Proxy.V1.ServiceContext.SessionContext.ParticipantContext.MessageInteractionInstance\n *\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} sessionSid - The SID of the resource's parent Session\n * @property {string} serviceSid - The SID of the resource's parent Service\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {string} data -\n *          A JSON string that includes the message body sent to the participant\n * @property {message_interaction.type} type - The Type of Message Interaction\n * @property {string} participantSid - The SID of the Participant resource\n * @property {string} inboundParticipantSid - Always empty for Message Interactions\n * @property {string} inboundResourceSid - Always empty for Message Interactions\n * @property {message_interaction.resource_status} inboundResourceStatus -\n *          Always empty for Message Interactions\n * @property {string} inboundResourceType - Always empty for Message Interactions\n * @property {string} inboundResourceUrl - Always empty for Message Interactions\n * @property {string} outboundParticipantSid -\n *          The SID of the outbound Participant resource\n * @property {string} outboundResourceSid -\n *          The SID of the outbound Message resource\n * @property {message_interaction.resource_status} outboundResourceStatus -\n *          The outbound resource status\n * @property {string} outboundResourceType - The outbound resource type\n * @property {string} outboundResourceUrl - The URL of the Twilio message resource\n * @property {Date} dateCreated -\n *          The ISO 8601 date and time in GMT when the resource was created\n * @property {Date} dateUpdated -\n *          The ISO 8601 date and time in GMT when the resource was last updated\n * @property {string} url - The absolute URL of the MessageInteraction resource\n *\n * @param {V1} version - Version of the resource\n * @param {MessageInteractionPayload} payload - The instance payload\n * @param {sid} serviceSid - The SID of the resource's parent Service\n * @param {sid} sessionSid - The SID of the resource's parent Session\n * @param {sid} participantSid - The SID of the Participant resource\n * @param {sid} sid - The unique string that identifies the resource\n */\n\n/* jshint ignore:end */\n\n\nMessageInteractionInstance = function MessageInteractionInstance(version, payload, serviceSid, sessionSid, participantSid, sid) {\n  this._version = version; // Marshaled Properties\n\n  this.sid = payload.sid; // jshint ignore:line\n\n  this.sessionSid = payload.session_sid; // jshint ignore:line\n\n  this.serviceSid = payload.service_sid; // jshint ignore:line\n\n  this.accountSid = payload.account_sid; // jshint ignore:line\n\n  this.data = payload.data; // jshint ignore:line\n\n  this.type = payload.type; // jshint ignore:line\n\n  this.participantSid = payload.participant_sid; // jshint ignore:line\n\n  this.inboundParticipantSid = payload.inbound_participant_sid; // jshint ignore:line\n\n  this.inboundResourceSid = payload.inbound_resource_sid; // jshint ignore:line\n\n  this.inboundResourceStatus = payload.inbound_resource_status; // jshint ignore:line\n\n  this.inboundResourceType = payload.inbound_resource_type; // jshint ignore:line\n\n  this.inboundResourceUrl = payload.inbound_resource_url; // jshint ignore:line\n\n  this.outboundParticipantSid = payload.outbound_participant_sid; // jshint ignore:line\n\n  this.outboundResourceSid = payload.outbound_resource_sid; // jshint ignore:line\n\n  this.outboundResourceStatus = payload.outbound_resource_status; // jshint ignore:line\n\n  this.outboundResourceType = payload.outbound_resource_type; // jshint ignore:line\n\n  this.outboundResourceUrl = payload.outbound_resource_url; // jshint ignore:line\n\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n\n  this.url = payload.url; // jshint ignore:line\n  // Context\n\n  this._context = undefined;\n  this._solution = {\n    serviceSid: serviceSid,\n    sessionSid: sessionSid,\n    participantSid: participantSid,\n    sid: sid || this.sid\n  };\n};\n\nObject.defineProperty(MessageInteractionInstance.prototype, '_proxy', {\n  get: function () {\n    if (!this._context) {\n      this._context = new MessageInteractionContext(this._version, this._solution.serviceSid, this._solution.sessionSid, this._solution.participantSid, this._solution.sid);\n    }\n\n    return this._context;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * fetch a MessageInteractionInstance\n *\n * @function fetch\n * @memberof Twilio.Proxy.V1.ServiceContext.SessionContext.ParticipantContext.MessageInteractionInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed MessageInteractionInstance\n */\n\n/* jshint ignore:end */\n\nMessageInteractionInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Proxy.V1.ServiceContext.SessionContext.ParticipantContext.MessageInteractionInstance#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nMessageInteractionInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nMessageInteractionInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the MessageInteractionContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Proxy.V1.ServiceContext.SessionContext.ParticipantContext.MessageInteractionContext\n *\n * @param {V1} version - Version of the resource\n * @param {sid} serviceSid - The SID of the Service to fetch the resource from\n * @param {sid} sessionSid - The SID of the parent Session\n * @param {sid} participantSid - The SID of the Participant resource\n * @param {sid} sid - The unique string that identifies the resource\n */\n\n/* jshint ignore:end */\n\n\nMessageInteractionContext = function MessageInteractionContext(version, serviceSid, sessionSid, participantSid, sid) {\n  this._version = version; // Path Solution\n\n  this._solution = {\n    serviceSid: serviceSid,\n    sessionSid: sessionSid,\n    participantSid: participantSid,\n    sid: sid\n  };\n  this._uri = `/Services/${serviceSid}/Sessions/${sessionSid}/Participants/${participantSid}/MessageInteractions/${sid}`;\n};\n/* jshint ignore:start */\n\n/**\n * fetch a MessageInteractionInstance\n *\n * @function fetch\n * @memberof Twilio.Proxy.V1.ServiceContext.SessionContext.ParticipantContext.MessageInteractionContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed MessageInteractionInstance\n */\n\n/* jshint ignore:end */\n\n\nMessageInteractionContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new MessageInteractionInstance(this._version, payload, this._solution.serviceSid, this._solution.sessionSid, this._solution.participantSid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Proxy.V1.ServiceContext.SessionContext.ParticipantContext.MessageInteractionContext#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nMessageInteractionContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nMessageInteractionContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  MessageInteractionList: MessageInteractionList,\n  MessageInteractionPage: MessageInteractionPage,\n  MessageInteractionInstance: MessageInteractionInstance,\n  MessageInteractionContext: MessageInteractionContext\n};","map":{"version":3,"sources":["/Users/tony_niu/Visual Studio/Twilio/twilio-video-starter-kit/src/token-service/node_modules/twilio/lib/rest/proxy/v1/service/session/participant/messageInteraction.js"],"names":["Q","require","_","util","Page","deserialize","serialize","values","MessageInteractionList","MessageInteractionPage","MessageInteractionInstance","MessageInteractionContext","version","serviceSid","sessionSid","participantSid","MessageInteractionListInstance","sid","get","_version","_solution","_uri","create","opts","callback","isFunction","deferred","defer","data","of","map","e","promise","uri","method","then","payload","resolve","bind","catch","error","reject","nodeify","each","isUndefined","Error","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","fetchNextPage","fn","page","instances","instance","nextPage","merge","list","allResources","resource","push","length","pageToken","pageNumber","params","getPage","targetUrl","_domain","twilio","request","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","session_sid","service_sid","accountSid","account_sid","type","participant_sid","inboundParticipantSid","inbound_participant_sid","inboundResourceSid","inbound_resource_sid","inboundResourceStatus","inbound_resource_status","inboundResourceType","inbound_resource_type","inboundResourceUrl","inbound_resource_url","outboundParticipantSid","outbound_participant_sid","outboundResourceSid","outbound_resource_sid","outboundResourceStatus","outbound_resource_status","outboundResourceType","outbound_resource_type","outboundResourceUrl","outbound_resource_url","dateCreated","iso8601DateTime","date_created","dateUpdated","date_updated","url","_context","undefined","Object","defineProperty","fetch","_proxy","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar Page = require('../../../../../../base/Page');  /* jshint ignore:line */\nvar deserialize = require(\n    '../../../../../../base/deserialize');  /* jshint ignore:line */\nvar serialize = require(\n    '../../../../../../base/serialize');  /* jshint ignore:line */\nvar values = require('../../../../../../base/values');  /* jshint ignore:line */\n\nvar MessageInteractionList;\nvar MessageInteractionPage;\nvar MessageInteractionInstance;\nvar MessageInteractionContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the MessageInteractionList\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Proxy.V1.ServiceContext.SessionContext.ParticipantContext.MessageInteractionList\n *\n * @param {Twilio.Proxy.V1} version - Version of the resource\n * @param {string} serviceSid - The SID of the resource's parent Service\n * @param {string} sessionSid - The SID of the resource's parent Session\n * @param {string} participantSid - The SID of the Participant resource\n */\n/* jshint ignore:end */\nMessageInteractionList = function MessageInteractionList(version, serviceSid,\n                                                          sessionSid,\n                                                          participantSid) {\n  /* jshint ignore:start */\n  /**\n   * @function messageInteractions\n   * @memberof Twilio.Proxy.V1.ServiceContext.SessionContext.ParticipantContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Proxy.V1.ServiceContext.SessionContext.ParticipantContext.MessageInteractionContext}\n   */\n  /* jshint ignore:end */\n  function MessageInteractionListInstance(sid) {\n    return MessageInteractionListInstance.get(sid);\n  }\n\n  MessageInteractionListInstance._version = version;\n  // Path Solution\n  MessageInteractionListInstance._solution = {\n    serviceSid: serviceSid,\n    sessionSid: sessionSid,\n    participantSid: participantSid\n  };\n  MessageInteractionListInstance._uri = `/Services/${serviceSid}/Sessions/${sessionSid}/Participants/${participantSid}/MessageInteractions`;\n  /* jshint ignore:start */\n  /**\n   * create a MessageInteractionInstance\n   *\n   * @function create\n   * @memberof Twilio.Proxy.V1.ServiceContext.SessionContext.ParticipantContext.MessageInteractionList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.body] - Message body\n   * @param {string|list} [opts.mediaUrl] - Reserved\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed MessageInteractionInstance\n   */\n  /* jshint ignore:end */\n  MessageInteractionListInstance.create = function create(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'Body': _.get(opts, 'body'),\n      'MediaUrl': serialize.map(_.get(opts, 'mediaUrl'), function(e) { return e; })\n    });\n\n    var promise = this._version.create({uri: this._uri, method: 'POST', data: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new MessageInteractionInstance(\n        this._version,\n        payload,\n        this._solution.serviceSid,\n        this._solution.sessionSid,\n        this._solution.participantSid,\n        this._solution.sid\n      ));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Streams MessageInteractionInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Proxy.V1.ServiceContext.SessionContext.ParticipantContext.MessageInteractionList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  MessageInteractionListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists MessageInteractionInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Proxy.V1.ServiceContext.SessionContext.ParticipantContext.MessageInteractionList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  MessageInteractionListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of MessageInteractionInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Proxy.V1.ServiceContext.SessionContext.ParticipantContext.MessageInteractionList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  MessageInteractionListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new MessageInteractionPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of MessageInteractionInstance records from the\n   * API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Proxy.V1.ServiceContext.SessionContext.ParticipantContext.MessageInteractionList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  MessageInteractionListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new MessageInteractionPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a message_interaction\n   *\n   * @function get\n   * @memberof Twilio.Proxy.V1.ServiceContext.SessionContext.ParticipantContext.MessageInteractionList#\n   *\n   * @param {string} sid - The unique string that identifies the resource\n   *\n   * @returns {Twilio.Proxy.V1.ServiceContext.SessionContext.ParticipantContext.MessageInteractionContext}\n   */\n  /* jshint ignore:end */\n  MessageInteractionListInstance.get = function get(sid) {\n    return new MessageInteractionContext(\n      this._version,\n      this._solution.serviceSid,\n      this._solution.sessionSid,\n      this._solution.participantSid,\n      sid\n    );\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Proxy.V1.ServiceContext.SessionContext.ParticipantContext.MessageInteractionList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  MessageInteractionListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  MessageInteractionListInstance[util.inspect.custom] = function inspect(depth,\n      options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return MessageInteractionListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the MessageInteractionPage\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Proxy.V1.ServiceContext.SessionContext.ParticipantContext.MessageInteractionPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {MessageInteractionSolution} solution - Path solution\n *\n * @returns MessageInteractionPage\n */\n/* jshint ignore:end */\nMessageInteractionPage = function MessageInteractionPage(version, response,\n                                                          solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(MessageInteractionPage.prototype, Page.prototype);\nMessageInteractionPage.prototype.constructor = MessageInteractionPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of MessageInteractionInstance\n *\n * @function getInstance\n * @memberof Twilio.Proxy.V1.ServiceContext.SessionContext.ParticipantContext.MessageInteractionPage#\n *\n * @param {MessageInteractionPayload} payload - Payload response from the API\n *\n * @returns MessageInteractionInstance\n */\n/* jshint ignore:end */\nMessageInteractionPage.prototype.getInstance = function getInstance(payload) {\n  return new MessageInteractionInstance(\n    this._version,\n    payload,\n    this._solution.serviceSid,\n    this._solution.sessionSid,\n    this._solution.participantSid\n  );\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Proxy.V1.ServiceContext.SessionContext.ParticipantContext.MessageInteractionPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nMessageInteractionPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nMessageInteractionPage.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the MessageInteractionContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Proxy.V1.ServiceContext.SessionContext.ParticipantContext.MessageInteractionInstance\n *\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} sessionSid - The SID of the resource's parent Session\n * @property {string} serviceSid - The SID of the resource's parent Service\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {string} data -\n *          A JSON string that includes the message body sent to the participant\n * @property {message_interaction.type} type - The Type of Message Interaction\n * @property {string} participantSid - The SID of the Participant resource\n * @property {string} inboundParticipantSid - Always empty for Message Interactions\n * @property {string} inboundResourceSid - Always empty for Message Interactions\n * @property {message_interaction.resource_status} inboundResourceStatus -\n *          Always empty for Message Interactions\n * @property {string} inboundResourceType - Always empty for Message Interactions\n * @property {string} inboundResourceUrl - Always empty for Message Interactions\n * @property {string} outboundParticipantSid -\n *          The SID of the outbound Participant resource\n * @property {string} outboundResourceSid -\n *          The SID of the outbound Message resource\n * @property {message_interaction.resource_status} outboundResourceStatus -\n *          The outbound resource status\n * @property {string} outboundResourceType - The outbound resource type\n * @property {string} outboundResourceUrl - The URL of the Twilio message resource\n * @property {Date} dateCreated -\n *          The ISO 8601 date and time in GMT when the resource was created\n * @property {Date} dateUpdated -\n *          The ISO 8601 date and time in GMT when the resource was last updated\n * @property {string} url - The absolute URL of the MessageInteraction resource\n *\n * @param {V1} version - Version of the resource\n * @param {MessageInteractionPayload} payload - The instance payload\n * @param {sid} serviceSid - The SID of the resource's parent Service\n * @param {sid} sessionSid - The SID of the resource's parent Session\n * @param {sid} participantSid - The SID of the Participant resource\n * @param {sid} sid - The unique string that identifies the resource\n */\n/* jshint ignore:end */\nMessageInteractionInstance = function MessageInteractionInstance(version,\n    payload, serviceSid, sessionSid, participantSid, sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.sid = payload.sid; // jshint ignore:line\n  this.sessionSid = payload.session_sid; // jshint ignore:line\n  this.serviceSid = payload.service_sid; // jshint ignore:line\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.data = payload.data; // jshint ignore:line\n  this.type = payload.type; // jshint ignore:line\n  this.participantSid = payload.participant_sid; // jshint ignore:line\n  this.inboundParticipantSid = payload.inbound_participant_sid; // jshint ignore:line\n  this.inboundResourceSid = payload.inbound_resource_sid; // jshint ignore:line\n  this.inboundResourceStatus = payload.inbound_resource_status; // jshint ignore:line\n  this.inboundResourceType = payload.inbound_resource_type; // jshint ignore:line\n  this.inboundResourceUrl = payload.inbound_resource_url; // jshint ignore:line\n  this.outboundParticipantSid = payload.outbound_participant_sid; // jshint ignore:line\n  this.outboundResourceSid = payload.outbound_resource_sid; // jshint ignore:line\n  this.outboundResourceStatus = payload.outbound_resource_status; // jshint ignore:line\n  this.outboundResourceType = payload.outbound_resource_type; // jshint ignore:line\n  this.outboundResourceUrl = payload.outbound_resource_url; // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {\n    serviceSid: serviceSid,\n    sessionSid: sessionSid,\n    participantSid: participantSid,\n    sid: sid || this.sid,\n  };\n};\n\nObject.defineProperty(MessageInteractionInstance.prototype,\n  '_proxy', {\n    get: function() {\n      if (!this._context) {\n        this._context = new MessageInteractionContext(\n          this._version,\n          this._solution.serviceSid,\n          this._solution.sessionSid,\n          this._solution.participantSid,\n          this._solution.sid\n        );\n      }\n\n      return this._context;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a MessageInteractionInstance\n *\n * @function fetch\n * @memberof Twilio.Proxy.V1.ServiceContext.SessionContext.ParticipantContext.MessageInteractionInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed MessageInteractionInstance\n */\n/* jshint ignore:end */\nMessageInteractionInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Proxy.V1.ServiceContext.SessionContext.ParticipantContext.MessageInteractionInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nMessageInteractionInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nMessageInteractionInstance.prototype[util.inspect.custom] = function\n    inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the MessageInteractionContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Proxy.V1.ServiceContext.SessionContext.ParticipantContext.MessageInteractionContext\n *\n * @param {V1} version - Version of the resource\n * @param {sid} serviceSid - The SID of the Service to fetch the resource from\n * @param {sid} sessionSid - The SID of the parent Session\n * @param {sid} participantSid - The SID of the Participant resource\n * @param {sid} sid - The unique string that identifies the resource\n */\n/* jshint ignore:end */\nMessageInteractionContext = function MessageInteractionContext(version,\n    serviceSid, sessionSid, participantSid, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {\n    serviceSid: serviceSid,\n    sessionSid: sessionSid,\n    participantSid: participantSid,\n    sid: sid,\n  };\n  this._uri = `/Services/${serviceSid}/Sessions/${sessionSid}/Participants/${participantSid}/MessageInteractions/${sid}`;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a MessageInteractionInstance\n *\n * @function fetch\n * @memberof Twilio.Proxy.V1.ServiceContext.SessionContext.ParticipantContext.MessageInteractionContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed MessageInteractionInstance\n */\n/* jshint ignore:end */\nMessageInteractionContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({uri: this._uri, method: 'GET'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new MessageInteractionInstance(\n      this._version,\n      payload,\n      this._solution.serviceSid,\n      this._solution.sessionSid,\n      this._solution.participantSid,\n      this._solution.sid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Proxy.V1.ServiceContext.SessionContext.ParticipantContext.MessageInteractionContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nMessageInteractionContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nMessageInteractionContext.prototype[util.inspect.custom] = function\n    inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  MessageInteractionList: MessageInteractionList,\n  MessageInteractionPage: MessageInteractionPage,\n  MessageInteractionInstance: MessageInteractionInstance,\n  MessageInteractionContext: MessageInteractionContext\n};\n"]},"metadata":{},"sourceType":"module"}