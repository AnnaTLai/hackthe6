{"ast":null,"code":"'use strict';\n/* jshint ignore:start */\n\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n\n/* jshint ignore:end */\n\nvar Q = require('q');\n/* jshint ignore:line */\n\n\nvar _ = require('lodash');\n/* jshint ignore:line */\n\n\nvar util = require('util');\n/* jshint ignore:line */\n\n\nvar Page = require('../../../../base/Page');\n/* jshint ignore:line */\n\n\nvar deserialize = require('../../../../base/deserialize');\n/* jshint ignore:line */\n\n\nvar values = require('../../../../base/values');\n/* jshint ignore:line */\n\n\nvar ShortCodeList;\nvar ShortCodePage;\nvar ShortCodeInstance;\nvar ShortCodeContext;\n/* jshint ignore:start */\n\n/**\n * Initialize the ShortCodeList\n *\n * @constructor Twilio.Api.V2010.AccountContext.ShortCodeList\n *\n * @param {Twilio.Api.V2010} version - Version of the resource\n * @param {string} accountSid - The SID of the Account that created this resource\n */\n\n/* jshint ignore:end */\n\nShortCodeList = function ShortCodeList(version, accountSid) {\n  /* jshint ignore:start */\n\n  /**\n   * @function shortCodes\n   * @memberof Twilio.Api.V2010.AccountContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Api.V2010.AccountContext.ShortCodeContext}\n   */\n\n  /* jshint ignore:end */\n  function ShortCodeListInstance(sid) {\n    return ShortCodeListInstance.get(sid);\n  }\n\n  ShortCodeListInstance._version = version; // Path Solution\n\n  ShortCodeListInstance._solution = {\n    accountSid: accountSid\n  };\n  ShortCodeListInstance._uri = `/Accounts/${accountSid}/SMS/ShortCodes.json`;\n  /* jshint ignore:start */\n\n  /**\n   * Streams ShortCodeInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Api.V2010.AccountContext.ShortCodeList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.friendlyName] -\n   *          The string that identifies the ShortCode resources to read\n   * @param {string} [opts.shortCode] - Filter by ShortCode\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n\n  /* jshint ignore:end */\n\n  ShortCodeListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Lists ShortCodeInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Api.V2010.AccountContext.ShortCodeList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.friendlyName] -\n   *          The string that identifies the ShortCode resources to read\n   * @param {string} [opts.shortCode] - Filter by ShortCode\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  ShortCodeListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single page of ShortCodeInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Api.V2010.AccountContext.ShortCodeList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.friendlyName] -\n   *          The string that identifies the ShortCode resources to read\n   * @param {string} [opts.shortCode] - Filter by ShortCode\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  ShortCodeListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'FriendlyName': _.get(opts, 'friendlyName'),\n      'ShortCode': _.get(opts, 'shortCode'),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new ShortCodePage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single target page of ShortCodeInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Api.V2010.AccountContext.ShortCodeList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  ShortCodeListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new ShortCodePage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Constructs a short_code\n   *\n   * @function get\n   * @memberof Twilio.Api.V2010.AccountContext.ShortCodeList#\n   *\n   * @param {string} sid - The unique string that identifies this resource\n   *\n   * @returns {Twilio.Api.V2010.AccountContext.ShortCodeContext}\n   */\n\n  /* jshint ignore:end */\n\n\n  ShortCodeListInstance.get = function get(sid) {\n    return new ShortCodeContext(this._version, this._solution.accountSid, sid);\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Api.V2010.AccountContext.ShortCodeList#\n   *\n   * @returns Object\n   */\n\n  /* jshint ignore:end */\n\n\n  ShortCodeListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  ShortCodeListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return ShortCodeListInstance;\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the ShortCodePage\n *\n * @constructor Twilio.Api.V2010.AccountContext.ShortCodePage\n *\n * @param {V2010} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {ShortCodeSolution} solution - Path solution\n *\n * @returns ShortCodePage\n */\n\n/* jshint ignore:end */\n\n\nShortCodePage = function ShortCodePage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(ShortCodePage.prototype, Page.prototype);\n\nShortCodePage.prototype.constructor = ShortCodePage;\n/* jshint ignore:start */\n\n/**\n * Build an instance of ShortCodeInstance\n *\n * @function getInstance\n * @memberof Twilio.Api.V2010.AccountContext.ShortCodePage#\n *\n * @param {ShortCodePayload} payload - Payload response from the API\n *\n * @returns ShortCodeInstance\n */\n\n/* jshint ignore:end */\n\nShortCodePage.prototype.getInstance = function getInstance(payload) {\n  return new ShortCodeInstance(this._version, payload, this._solution.accountSid);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.ShortCodePage#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nShortCodePage.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nShortCodePage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the ShortCodeContext\n *\n * @constructor Twilio.Api.V2010.AccountContext.ShortCodeInstance\n *\n * @property {string} accountSid -\n *          The SID of the Account that created this resource\n * @property {string} apiVersion -\n *          The API version used to start a new TwiML session\n * @property {Date} dateCreated -\n *          The RFC 2822 date and time in GMT that this resource was created\n * @property {Date} dateUpdated -\n *          The RFC 2822 date and time in GMT that this resource was last updated\n * @property {string} friendlyName -\n *          A string that you assigned to describe this resource\n * @property {string} shortCode - The short code. e.g., 894546.\n * @property {string} sid - The unique string that identifies this resource\n * @property {string} smsFallbackMethod -\n *          HTTP method we use to call the sms_fallback_url\n * @property {string} smsFallbackUrl -\n *          URL Twilio will request if an error occurs in executing TwiML\n * @property {string} smsMethod - HTTP method to use when requesting the sms url\n * @property {string} smsUrl -\n *          URL we call when receiving an incoming SMS message to this short code\n * @property {string} uri -\n *          The URI of this resource, relative to `https://api.twilio.com`\n *\n * @param {V2010} version - Version of the resource\n * @param {ShortCodePayload} payload - The instance payload\n * @param {sid} accountSid - The SID of the Account that created this resource\n * @param {sid} sid - The unique string that identifies this resource\n */\n\n/* jshint ignore:end */\n\n\nShortCodeInstance = function ShortCodeInstance(version, payload, accountSid, sid) {\n  this._version = version; // Marshaled Properties\n\n  this.accountSid = payload.account_sid; // jshint ignore:line\n\n  this.apiVersion = payload.api_version; // jshint ignore:line\n\n  this.dateCreated = deserialize.rfc2822DateTime(payload.date_created); // jshint ignore:line\n\n  this.dateUpdated = deserialize.rfc2822DateTime(payload.date_updated); // jshint ignore:line\n\n  this.friendlyName = payload.friendly_name; // jshint ignore:line\n\n  this.shortCode = payload.short_code; // jshint ignore:line\n\n  this.sid = payload.sid; // jshint ignore:line\n\n  this.smsFallbackMethod = payload.sms_fallback_method; // jshint ignore:line\n\n  this.smsFallbackUrl = payload.sms_fallback_url; // jshint ignore:line\n\n  this.smsMethod = payload.sms_method; // jshint ignore:line\n\n  this.smsUrl = payload.sms_url; // jshint ignore:line\n\n  this.uri = payload.uri; // jshint ignore:line\n  // Context\n\n  this._context = undefined;\n  this._solution = {\n    accountSid: accountSid,\n    sid: sid || this.sid\n  };\n};\n\nObject.defineProperty(ShortCodeInstance.prototype, '_proxy', {\n  get: function () {\n    if (!this._context) {\n      this._context = new ShortCodeContext(this._version, this._solution.accountSid, this._solution.sid);\n    }\n\n    return this._context;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * fetch a ShortCodeInstance\n *\n * @function fetch\n * @memberof Twilio.Api.V2010.AccountContext.ShortCodeInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ShortCodeInstance\n */\n\n/* jshint ignore:end */\n\nShortCodeInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n/* jshint ignore:start */\n\n/**\n * update a ShortCodeInstance\n *\n * @function update\n * @memberof Twilio.Api.V2010.AccountContext.ShortCodeInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] - A string to describe this resource\n * @param {string} [opts.apiVersion] -\n *          The API version to use to start a new TwiML session\n * @param {string} [opts.smsUrl] - URL Twilio will request when receiving an SMS\n * @param {string} [opts.smsMethod] -\n *          HTTP method to use when requesting the sms url\n * @param {string} [opts.smsFallbackUrl] -\n *          URL Twilio will request if an error occurs in executing TwiML\n * @param {string} [opts.smsFallbackMethod] -\n *          HTTP method Twilio will use with sms_fallback_url\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ShortCodeInstance\n */\n\n/* jshint ignore:end */\n\n\nShortCodeInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.ShortCodeInstance#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nShortCodeInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nShortCodeInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the ShortCodeContext\n *\n * @constructor Twilio.Api.V2010.AccountContext.ShortCodeContext\n *\n * @param {V2010} version - Version of the resource\n * @param {sid} accountSid -\n *          The SID of the Account that created the resource(s) to fetch\n * @param {sid} sid - The unique string that identifies this resource\n */\n\n/* jshint ignore:end */\n\n\nShortCodeContext = function ShortCodeContext(version, accountSid, sid) {\n  this._version = version; // Path Solution\n\n  this._solution = {\n    accountSid: accountSid,\n    sid: sid\n  };\n  this._uri = `/Accounts/${accountSid}/SMS/ShortCodes/${sid}.json`;\n};\n/* jshint ignore:start */\n\n/**\n * fetch a ShortCodeInstance\n *\n * @function fetch\n * @memberof Twilio.Api.V2010.AccountContext.ShortCodeContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ShortCodeInstance\n */\n\n/* jshint ignore:end */\n\n\nShortCodeContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new ShortCodeInstance(this._version, payload, this._solution.accountSid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * update a ShortCodeInstance\n *\n * @function update\n * @memberof Twilio.Api.V2010.AccountContext.ShortCodeContext#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] - A string to describe this resource\n * @param {string} [opts.apiVersion] -\n *          The API version to use to start a new TwiML session\n * @param {string} [opts.smsUrl] - URL Twilio will request when receiving an SMS\n * @param {string} [opts.smsMethod] -\n *          HTTP method to use when requesting the sms url\n * @param {string} [opts.smsFallbackUrl] -\n *          URL Twilio will request if an error occurs in executing TwiML\n * @param {string} [opts.smsFallbackMethod] -\n *          HTTP method Twilio will use with sms_fallback_url\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ShortCodeInstance\n */\n\n/* jshint ignore:end */\n\n\nShortCodeContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n\n  opts = opts || {};\n  var deferred = Q.defer();\n  var data = values.of({\n    'FriendlyName': _.get(opts, 'friendlyName'),\n    'ApiVersion': _.get(opts, 'apiVersion'),\n    'SmsUrl': _.get(opts, 'smsUrl'),\n    'SmsMethod': _.get(opts, 'smsMethod'),\n    'SmsFallbackUrl': _.get(opts, 'smsFallbackUrl'),\n    'SmsFallbackMethod': _.get(opts, 'smsFallbackMethod')\n  });\n\n  var promise = this._version.update({\n    uri: this._uri,\n    method: 'POST',\n    data: data\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new ShortCodeInstance(this._version, payload, this._solution.accountSid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.ShortCodeContext#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nShortCodeContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nShortCodeContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  ShortCodeList: ShortCodeList,\n  ShortCodePage: ShortCodePage,\n  ShortCodeInstance: ShortCodeInstance,\n  ShortCodeContext: ShortCodeContext\n};","map":{"version":3,"sources":["/Users/tony_niu/Visual Studio/Twilio/twilio-video-starter-kit/src/token-service/node_modules/twilio/lib/rest/api/v2010/account/shortCode.js"],"names":["Q","require","_","util","Page","deserialize","values","ShortCodeList","ShortCodePage","ShortCodeInstance","ShortCodeContext","version","accountSid","ShortCodeListInstance","sid","get","_version","_solution","_uri","each","opts","callback","isFunction","isUndefined","Error","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","error","fetchNextPage","fn","promise","then","page","instances","instance","bind","nextPage","catch","merge","list","deferred","defer","allResources","resource","push","length","resolve","reject","nodeify","data","of","pageToken","pageNumber","uri","method","params","payload","getPage","targetUrl","_domain","twilio","request","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","account_sid","apiVersion","api_version","dateCreated","rfc2822DateTime","date_created","dateUpdated","date_updated","friendlyName","friendly_name","shortCode","short_code","smsFallbackMethod","sms_fallback_method","smsFallbackUrl","sms_fallback_url","smsMethod","sms_method","smsUrl","sms_url","_context","undefined","Object","defineProperty","fetch","_proxy","update","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar Page = require('../../../../base/Page');  /* jshint ignore:line */\nvar deserialize = require(\n    '../../../../base/deserialize');  /* jshint ignore:line */\nvar values = require('../../../../base/values');  /* jshint ignore:line */\n\nvar ShortCodeList;\nvar ShortCodePage;\nvar ShortCodeInstance;\nvar ShortCodeContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the ShortCodeList\n *\n * @constructor Twilio.Api.V2010.AccountContext.ShortCodeList\n *\n * @param {Twilio.Api.V2010} version - Version of the resource\n * @param {string} accountSid - The SID of the Account that created this resource\n */\n/* jshint ignore:end */\nShortCodeList = function ShortCodeList(version, accountSid) {\n  /* jshint ignore:start */\n  /**\n   * @function shortCodes\n   * @memberof Twilio.Api.V2010.AccountContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Api.V2010.AccountContext.ShortCodeContext}\n   */\n  /* jshint ignore:end */\n  function ShortCodeListInstance(sid) {\n    return ShortCodeListInstance.get(sid);\n  }\n\n  ShortCodeListInstance._version = version;\n  // Path Solution\n  ShortCodeListInstance._solution = {accountSid: accountSid};\n  ShortCodeListInstance._uri = `/Accounts/${accountSid}/SMS/ShortCodes.json`;\n  /* jshint ignore:start */\n  /**\n   * Streams ShortCodeInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Api.V2010.AccountContext.ShortCodeList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.friendlyName] -\n   *          The string that identifies the ShortCode resources to read\n   * @param {string} [opts.shortCode] - Filter by ShortCode\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  ShortCodeListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists ShortCodeInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Api.V2010.AccountContext.ShortCodeList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.friendlyName] -\n   *          The string that identifies the ShortCode resources to read\n   * @param {string} [opts.shortCode] - Filter by ShortCode\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  ShortCodeListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of ShortCodeInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Api.V2010.AccountContext.ShortCodeList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.friendlyName] -\n   *          The string that identifies the ShortCode resources to read\n   * @param {string} [opts.shortCode] - Filter by ShortCode\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  ShortCodeListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'FriendlyName': _.get(opts, 'friendlyName'),\n      'ShortCode': _.get(opts, 'shortCode'),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new ShortCodePage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of ShortCodeInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Api.V2010.AccountContext.ShortCodeList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  ShortCodeListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new ShortCodePage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a short_code\n   *\n   * @function get\n   * @memberof Twilio.Api.V2010.AccountContext.ShortCodeList#\n   *\n   * @param {string} sid - The unique string that identifies this resource\n   *\n   * @returns {Twilio.Api.V2010.AccountContext.ShortCodeContext}\n   */\n  /* jshint ignore:end */\n  ShortCodeListInstance.get = function get(sid) {\n    return new ShortCodeContext(this._version, this._solution.accountSid, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Api.V2010.AccountContext.ShortCodeList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  ShortCodeListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  ShortCodeListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return ShortCodeListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the ShortCodePage\n *\n * @constructor Twilio.Api.V2010.AccountContext.ShortCodePage\n *\n * @param {V2010} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {ShortCodeSolution} solution - Path solution\n *\n * @returns ShortCodePage\n */\n/* jshint ignore:end */\nShortCodePage = function ShortCodePage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(ShortCodePage.prototype, Page.prototype);\nShortCodePage.prototype.constructor = ShortCodePage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of ShortCodeInstance\n *\n * @function getInstance\n * @memberof Twilio.Api.V2010.AccountContext.ShortCodePage#\n *\n * @param {ShortCodePayload} payload - Payload response from the API\n *\n * @returns ShortCodeInstance\n */\n/* jshint ignore:end */\nShortCodePage.prototype.getInstance = function getInstance(payload) {\n  return new ShortCodeInstance(this._version, payload, this._solution.accountSid);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.ShortCodePage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nShortCodePage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nShortCodePage.prototype[util.inspect.custom] = function inspect(depth, options)\n    {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the ShortCodeContext\n *\n * @constructor Twilio.Api.V2010.AccountContext.ShortCodeInstance\n *\n * @property {string} accountSid -\n *          The SID of the Account that created this resource\n * @property {string} apiVersion -\n *          The API version used to start a new TwiML session\n * @property {Date} dateCreated -\n *          The RFC 2822 date and time in GMT that this resource was created\n * @property {Date} dateUpdated -\n *          The RFC 2822 date and time in GMT that this resource was last updated\n * @property {string} friendlyName -\n *          A string that you assigned to describe this resource\n * @property {string} shortCode - The short code. e.g., 894546.\n * @property {string} sid - The unique string that identifies this resource\n * @property {string} smsFallbackMethod -\n *          HTTP method we use to call the sms_fallback_url\n * @property {string} smsFallbackUrl -\n *          URL Twilio will request if an error occurs in executing TwiML\n * @property {string} smsMethod - HTTP method to use when requesting the sms url\n * @property {string} smsUrl -\n *          URL we call when receiving an incoming SMS message to this short code\n * @property {string} uri -\n *          The URI of this resource, relative to `https://api.twilio.com`\n *\n * @param {V2010} version - Version of the resource\n * @param {ShortCodePayload} payload - The instance payload\n * @param {sid} accountSid - The SID of the Account that created this resource\n * @param {sid} sid - The unique string that identifies this resource\n */\n/* jshint ignore:end */\nShortCodeInstance = function ShortCodeInstance(version, payload, accountSid,\n                                                sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.apiVersion = payload.api_version; // jshint ignore:line\n  this.dateCreated = deserialize.rfc2822DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.rfc2822DateTime(payload.date_updated); // jshint ignore:line\n  this.friendlyName = payload.friendly_name; // jshint ignore:line\n  this.shortCode = payload.short_code; // jshint ignore:line\n  this.sid = payload.sid; // jshint ignore:line\n  this.smsFallbackMethod = payload.sms_fallback_method; // jshint ignore:line\n  this.smsFallbackUrl = payload.sms_fallback_url; // jshint ignore:line\n  this.smsMethod = payload.sms_method; // jshint ignore:line\n  this.smsUrl = payload.sms_url; // jshint ignore:line\n  this.uri = payload.uri; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {accountSid: accountSid, sid: sid || this.sid, };\n};\n\nObject.defineProperty(ShortCodeInstance.prototype,\n  '_proxy', {\n    get: function() {\n      if (!this._context) {\n        this._context = new ShortCodeContext(this._version, this._solution.accountSid, this._solution.sid);\n      }\n\n      return this._context;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a ShortCodeInstance\n *\n * @function fetch\n * @memberof Twilio.Api.V2010.AccountContext.ShortCodeInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ShortCodeInstance\n */\n/* jshint ignore:end */\nShortCodeInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * update a ShortCodeInstance\n *\n * @function update\n * @memberof Twilio.Api.V2010.AccountContext.ShortCodeInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] - A string to describe this resource\n * @param {string} [opts.apiVersion] -\n *          The API version to use to start a new TwiML session\n * @param {string} [opts.smsUrl] - URL Twilio will request when receiving an SMS\n * @param {string} [opts.smsMethod] -\n *          HTTP method to use when requesting the sms url\n * @param {string} [opts.smsFallbackUrl] -\n *          URL Twilio will request if an error occurs in executing TwiML\n * @param {string} [opts.smsFallbackMethod] -\n *          HTTP method Twilio will use with sms_fallback_url\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ShortCodeInstance\n */\n/* jshint ignore:end */\nShortCodeInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.ShortCodeInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nShortCodeInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nShortCodeInstance.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the ShortCodeContext\n *\n * @constructor Twilio.Api.V2010.AccountContext.ShortCodeContext\n *\n * @param {V2010} version - Version of the resource\n * @param {sid} accountSid -\n *          The SID of the Account that created the resource(s) to fetch\n * @param {sid} sid - The unique string that identifies this resource\n */\n/* jshint ignore:end */\nShortCodeContext = function ShortCodeContext(version, accountSid, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {accountSid: accountSid, sid: sid, };\n  this._uri = `/Accounts/${accountSid}/SMS/ShortCodes/${sid}.json`;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a ShortCodeInstance\n *\n * @function fetch\n * @memberof Twilio.Api.V2010.AccountContext.ShortCodeContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ShortCodeInstance\n */\n/* jshint ignore:end */\nShortCodeContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({uri: this._uri, method: 'GET'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new ShortCodeInstance(\n      this._version,\n      payload,\n      this._solution.accountSid,\n      this._solution.sid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * update a ShortCodeInstance\n *\n * @function update\n * @memberof Twilio.Api.V2010.AccountContext.ShortCodeContext#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] - A string to describe this resource\n * @param {string} [opts.apiVersion] -\n *          The API version to use to start a new TwiML session\n * @param {string} [opts.smsUrl] - URL Twilio will request when receiving an SMS\n * @param {string} [opts.smsMethod] -\n *          HTTP method to use when requesting the sms url\n * @param {string} [opts.smsFallbackUrl] -\n *          URL Twilio will request if an error occurs in executing TwiML\n * @param {string} [opts.smsFallbackMethod] -\n *          HTTP method Twilio will use with sms_fallback_url\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ShortCodeInstance\n */\n/* jshint ignore:end */\nShortCodeContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n  opts = opts || {};\n\n  var deferred = Q.defer();\n  var data = values.of({\n    'FriendlyName': _.get(opts, 'friendlyName'),\n    'ApiVersion': _.get(opts, 'apiVersion'),\n    'SmsUrl': _.get(opts, 'smsUrl'),\n    'SmsMethod': _.get(opts, 'smsMethod'),\n    'SmsFallbackUrl': _.get(opts, 'smsFallbackUrl'),\n    'SmsFallbackMethod': _.get(opts, 'smsFallbackMethod')\n  });\n\n  var promise = this._version.update({uri: this._uri, method: 'POST', data: data});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new ShortCodeInstance(\n      this._version,\n      payload,\n      this._solution.accountSid,\n      this._solution.sid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.ShortCodeContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nShortCodeContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nShortCodeContext.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  ShortCodeList: ShortCodeList,\n  ShortCodePage: ShortCodePage,\n  ShortCodeInstance: ShortCodeInstance,\n  ShortCodeContext: ShortCodeContext\n};\n"]},"metadata":{},"sourceType":"module"}