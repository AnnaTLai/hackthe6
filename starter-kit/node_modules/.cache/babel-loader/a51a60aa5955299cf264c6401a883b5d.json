{"ast":null,"code":"'use strict';\n/* jshint ignore:start */\n\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n\n/* jshint ignore:end */\n\nvar Q = require('q');\n/* jshint ignore:line */\n\n\nvar _ = require('lodash');\n/* jshint ignore:line */\n\n\nvar util = require('util');\n/* jshint ignore:line */\n\n\nvar Page = require('../../../../base/Page');\n/* jshint ignore:line */\n\n\nvar deserialize = require('../../../../base/deserialize');\n/* jshint ignore:line */\n\n\nvar serialize = require('../../../../base/serialize');\n/* jshint ignore:line */\n\n\nvar values = require('../../../../base/values');\n/* jshint ignore:line */\n\n\nvar RoomRecordingList;\nvar RoomRecordingPage;\nvar RoomRecordingInstance;\nvar RoomRecordingContext;\n/* jshint ignore:start */\n\n/**\n * Initialize the RoomRecordingList\n *\n * @constructor Twilio.Video.V1.RoomContext.RoomRecordingList\n *\n * @param {Twilio.Video.V1} version - Version of the resource\n * @param {string} roomSid -\n *          The SID of the Room resource the recording is associated with\n */\n\n/* jshint ignore:end */\n\nRoomRecordingList = function RoomRecordingList(version, roomSid) {\n  /* jshint ignore:start */\n\n  /**\n   * @function recordings\n   * @memberof Twilio.Video.V1.RoomContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Video.V1.RoomContext.RoomRecordingContext}\n   */\n\n  /* jshint ignore:end */\n  function RoomRecordingListInstance(sid) {\n    return RoomRecordingListInstance.get(sid);\n  }\n\n  RoomRecordingListInstance._version = version; // Path Solution\n\n  RoomRecordingListInstance._solution = {\n    roomSid: roomSid\n  };\n  RoomRecordingListInstance._uri = `/Rooms/${roomSid}/Recordings`;\n  /* jshint ignore:start */\n\n  /**\n   * Streams RoomRecordingInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Video.V1.RoomContext.RoomRecordingList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {room_recording.status} [opts.status] -\n   *          Read only the recordings with this status\n   * @param {string} [opts.sourceSid] -\n   *          Read only the recordings that have this source_sid\n   * @param {Date} [opts.dateCreatedAfter] -\n   *          Read only Recordings that started on or after this ISO 8601 datetime with time zone\n   * @param {Date} [opts.dateCreatedBefore] -\n   *          Read only Recordings that started before this ISO 8601 date-time with time zone\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n\n  /* jshint ignore:end */\n\n  RoomRecordingListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Lists RoomRecordingInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Video.V1.RoomContext.RoomRecordingList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {room_recording.status} [opts.status] -\n   *          Read only the recordings with this status\n   * @param {string} [opts.sourceSid] -\n   *          Read only the recordings that have this source_sid\n   * @param {Date} [opts.dateCreatedAfter] -\n   *          Read only Recordings that started on or after this ISO 8601 datetime with time zone\n   * @param {Date} [opts.dateCreatedBefore] -\n   *          Read only Recordings that started before this ISO 8601 date-time with time zone\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  RoomRecordingListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single page of RoomRecordingInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Video.V1.RoomContext.RoomRecordingList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {room_recording.status} [opts.status] -\n   *          Read only the recordings with this status\n   * @param {string} [opts.sourceSid] -\n   *          Read only the recordings that have this source_sid\n   * @param {Date} [opts.dateCreatedAfter] -\n   *          Read only Recordings that started on or after this ISO 8601 datetime with time zone\n   * @param {Date} [opts.dateCreatedBefore] -\n   *          Read only Recordings that started before this ISO 8601 date-time with time zone\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  RoomRecordingListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'Status': _.get(opts, 'status'),\n      'SourceSid': _.get(opts, 'sourceSid'),\n      'DateCreatedAfter': serialize.iso8601DateTime(_.get(opts, 'dateCreatedAfter')),\n      'DateCreatedBefore': serialize.iso8601DateTime(_.get(opts, 'dateCreatedBefore')),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new RoomRecordingPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single target page of RoomRecordingInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Video.V1.RoomContext.RoomRecordingList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  RoomRecordingListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new RoomRecordingPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Constructs a room_recording\n   *\n   * @function get\n   * @memberof Twilio.Video.V1.RoomContext.RoomRecordingList#\n   *\n   * @param {string} sid - The SID that identifies the resource to fetch\n   *\n   * @returns {Twilio.Video.V1.RoomContext.RoomRecordingContext}\n   */\n\n  /* jshint ignore:end */\n\n\n  RoomRecordingListInstance.get = function get(sid) {\n    return new RoomRecordingContext(this._version, this._solution.roomSid, sid);\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Video.V1.RoomContext.RoomRecordingList#\n   *\n   * @returns Object\n   */\n\n  /* jshint ignore:end */\n\n\n  RoomRecordingListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  RoomRecordingListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return RoomRecordingListInstance;\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the RoomRecordingPage\n *\n * @constructor Twilio.Video.V1.RoomContext.RoomRecordingPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {RoomRecordingSolution} solution - Path solution\n *\n * @returns RoomRecordingPage\n */\n\n/* jshint ignore:end */\n\n\nRoomRecordingPage = function RoomRecordingPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(RoomRecordingPage.prototype, Page.prototype);\n\nRoomRecordingPage.prototype.constructor = RoomRecordingPage;\n/* jshint ignore:start */\n\n/**\n * Build an instance of RoomRecordingInstance\n *\n * @function getInstance\n * @memberof Twilio.Video.V1.RoomContext.RoomRecordingPage#\n *\n * @param {RoomRecordingPayload} payload - Payload response from the API\n *\n * @returns RoomRecordingInstance\n */\n\n/* jshint ignore:end */\n\nRoomRecordingPage.prototype.getInstance = function getInstance(payload) {\n  return new RoomRecordingInstance(this._version, payload, this._solution.roomSid);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Video.V1.RoomContext.RoomRecordingPage#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nRoomRecordingPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nRoomRecordingPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the RoomRecordingContext\n *\n * @constructor Twilio.Video.V1.RoomContext.RoomRecordingInstance\n *\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {room_recording.status} status - The status of the recording\n * @property {Date} dateCreated -\n *          The ISO 8601 date and time in GMT when the resource was created\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} sourceSid - The SID of the recording source\n * @property {number} size - The size of the recorded track in bytes\n * @property {string} url - The absolute URL of the resource\n * @property {room_recording.type} type - The recording's media type\n * @property {number} duration - The duration of the recording in seconds\n * @property {room_recording.format} containerFormat -\n *          The file format for the recording\n * @property {room_recording.codec} codec - The codec used for the recording\n * @property {object} groupingSids - A list of SIDs related to the Recording\n * @property {string} trackName -\n *          The name that was given to the source track of the recording\n * @property {number} offset -\n *          The number of milliseconds between a point in time that is common to all rooms in a group and when the source room of the recording started\n * @property {string} roomSid -\n *          The SID of the Room resource the recording is associated with\n * @property {string} links - The URLs of related resources\n *\n * @param {V1} version - Version of the resource\n * @param {RoomRecordingPayload} payload - The instance payload\n * @param {sid} roomSid -\n *          The SID of the Room resource the recording is associated with\n * @param {sid} sid - The SID that identifies the resource to fetch\n */\n\n/* jshint ignore:end */\n\n\nRoomRecordingInstance = function RoomRecordingInstance(version, payload, roomSid, sid) {\n  this._version = version; // Marshaled Properties\n\n  this.accountSid = payload.account_sid; // jshint ignore:line\n\n  this.status = payload.status; // jshint ignore:line\n\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n\n  this.sid = payload.sid; // jshint ignore:line\n\n  this.sourceSid = payload.source_sid; // jshint ignore:line\n\n  this.size = deserialize.integer(payload.size); // jshint ignore:line\n\n  this.url = payload.url; // jshint ignore:line\n\n  this.type = payload.type; // jshint ignore:line\n\n  this.duration = deserialize.integer(payload.duration); // jshint ignore:line\n\n  this.containerFormat = payload.container_format; // jshint ignore:line\n\n  this.codec = payload.codec; // jshint ignore:line\n\n  this.groupingSids = payload.grouping_sids; // jshint ignore:line\n\n  this.trackName = payload.track_name; // jshint ignore:line\n\n  this.offset = deserialize.integer(payload.offset); // jshint ignore:line\n\n  this.roomSid = payload.room_sid; // jshint ignore:line\n\n  this.links = payload.links; // jshint ignore:line\n  // Context\n\n  this._context = undefined;\n  this._solution = {\n    roomSid: roomSid,\n    sid: sid || this.sid\n  };\n};\n\nObject.defineProperty(RoomRecordingInstance.prototype, '_proxy', {\n  get: function () {\n    if (!this._context) {\n      this._context = new RoomRecordingContext(this._version, this._solution.roomSid, this._solution.sid);\n    }\n\n    return this._context;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * fetch a RoomRecordingInstance\n *\n * @function fetch\n * @memberof Twilio.Video.V1.RoomContext.RoomRecordingInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed RoomRecordingInstance\n */\n\n/* jshint ignore:end */\n\nRoomRecordingInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n/* jshint ignore:start */\n\n/**\n * remove a RoomRecordingInstance\n *\n * @function remove\n * @memberof Twilio.Video.V1.RoomContext.RoomRecordingInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed RoomRecordingInstance\n */\n\n/* jshint ignore:end */\n\n\nRoomRecordingInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Video.V1.RoomContext.RoomRecordingInstance#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nRoomRecordingInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nRoomRecordingInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the RoomRecordingContext\n *\n * @constructor Twilio.Video.V1.RoomContext.RoomRecordingContext\n *\n * @param {V1} version - Version of the resource\n * @param {sid} roomSid - The SID of the Room resource with the recording to fetch\n * @param {sid} sid - The SID that identifies the resource to fetch\n */\n\n/* jshint ignore:end */\n\n\nRoomRecordingContext = function RoomRecordingContext(version, roomSid, sid) {\n  this._version = version; // Path Solution\n\n  this._solution = {\n    roomSid: roomSid,\n    sid: sid\n  };\n  this._uri = `/Rooms/${roomSid}/Recordings/${sid}`;\n};\n/* jshint ignore:start */\n\n/**\n * fetch a RoomRecordingInstance\n *\n * @function fetch\n * @memberof Twilio.Video.V1.RoomContext.RoomRecordingContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed RoomRecordingInstance\n */\n\n/* jshint ignore:end */\n\n\nRoomRecordingContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new RoomRecordingInstance(this._version, payload, this._solution.roomSid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * remove a RoomRecordingInstance\n *\n * @function remove\n * @memberof Twilio.Video.V1.RoomContext.RoomRecordingContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed RoomRecordingInstance\n */\n\n/* jshint ignore:end */\n\n\nRoomRecordingContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.remove({\n    uri: this._uri,\n    method: 'DELETE'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Video.V1.RoomContext.RoomRecordingContext#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nRoomRecordingContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nRoomRecordingContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  RoomRecordingList: RoomRecordingList,\n  RoomRecordingPage: RoomRecordingPage,\n  RoomRecordingInstance: RoomRecordingInstance,\n  RoomRecordingContext: RoomRecordingContext\n};","map":{"version":3,"sources":["/Users/tony_niu/Visual Studio/Twilio/twilio-video-starter-kit/node_modules/twilio/lib/rest/video/v1/room/recording.js"],"names":["Q","require","_","util","Page","deserialize","serialize","values","RoomRecordingList","RoomRecordingPage","RoomRecordingInstance","RoomRecordingContext","version","roomSid","RoomRecordingListInstance","sid","get","_version","_solution","_uri","each","opts","callback","isFunction","isUndefined","Error","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","error","fetchNextPage","fn","promise","then","page","instances","instance","bind","nextPage","catch","merge","list","deferred","defer","allResources","resource","push","length","resolve","reject","nodeify","data","of","iso8601DateTime","pageToken","pageNumber","uri","method","params","payload","getPage","targetUrl","_domain","twilio","request","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","accountSid","account_sid","status","dateCreated","date_created","sourceSid","source_sid","size","integer","url","type","duration","containerFormat","container_format","codec","groupingSids","grouping_sids","trackName","track_name","offset","room_sid","links","_context","undefined","Object","defineProperty","fetch","_proxy","remove","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar Page = require('../../../../base/Page');  /* jshint ignore:line */\nvar deserialize = require(\n    '../../../../base/deserialize');  /* jshint ignore:line */\nvar serialize = require('../../../../base/serialize');  /* jshint ignore:line */\nvar values = require('../../../../base/values');  /* jshint ignore:line */\n\nvar RoomRecordingList;\nvar RoomRecordingPage;\nvar RoomRecordingInstance;\nvar RoomRecordingContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the RoomRecordingList\n *\n * @constructor Twilio.Video.V1.RoomContext.RoomRecordingList\n *\n * @param {Twilio.Video.V1} version - Version of the resource\n * @param {string} roomSid -\n *          The SID of the Room resource the recording is associated with\n */\n/* jshint ignore:end */\nRoomRecordingList = function RoomRecordingList(version, roomSid) {\n  /* jshint ignore:start */\n  /**\n   * @function recordings\n   * @memberof Twilio.Video.V1.RoomContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Video.V1.RoomContext.RoomRecordingContext}\n   */\n  /* jshint ignore:end */\n  function RoomRecordingListInstance(sid) {\n    return RoomRecordingListInstance.get(sid);\n  }\n\n  RoomRecordingListInstance._version = version;\n  // Path Solution\n  RoomRecordingListInstance._solution = {roomSid: roomSid};\n  RoomRecordingListInstance._uri = `/Rooms/${roomSid}/Recordings`;\n  /* jshint ignore:start */\n  /**\n   * Streams RoomRecordingInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Video.V1.RoomContext.RoomRecordingList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {room_recording.status} [opts.status] -\n   *          Read only the recordings with this status\n   * @param {string} [opts.sourceSid] -\n   *          Read only the recordings that have this source_sid\n   * @param {Date} [opts.dateCreatedAfter] -\n   *          Read only Recordings that started on or after this ISO 8601 datetime with time zone\n   * @param {Date} [opts.dateCreatedBefore] -\n   *          Read only Recordings that started before this ISO 8601 date-time with time zone\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  RoomRecordingListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists RoomRecordingInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Video.V1.RoomContext.RoomRecordingList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {room_recording.status} [opts.status] -\n   *          Read only the recordings with this status\n   * @param {string} [opts.sourceSid] -\n   *          Read only the recordings that have this source_sid\n   * @param {Date} [opts.dateCreatedAfter] -\n   *          Read only Recordings that started on or after this ISO 8601 datetime with time zone\n   * @param {Date} [opts.dateCreatedBefore] -\n   *          Read only Recordings that started before this ISO 8601 date-time with time zone\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  RoomRecordingListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of RoomRecordingInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Video.V1.RoomContext.RoomRecordingList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {room_recording.status} [opts.status] -\n   *          Read only the recordings with this status\n   * @param {string} [opts.sourceSid] -\n   *          Read only the recordings that have this source_sid\n   * @param {Date} [opts.dateCreatedAfter] -\n   *          Read only Recordings that started on or after this ISO 8601 datetime with time zone\n   * @param {Date} [opts.dateCreatedBefore] -\n   *          Read only Recordings that started before this ISO 8601 date-time with time zone\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  RoomRecordingListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'Status': _.get(opts, 'status'),\n      'SourceSid': _.get(opts, 'sourceSid'),\n      'DateCreatedAfter': serialize.iso8601DateTime(_.get(opts, 'dateCreatedAfter')),\n      'DateCreatedBefore': serialize.iso8601DateTime(_.get(opts, 'dateCreatedBefore')),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new RoomRecordingPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of RoomRecordingInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Video.V1.RoomContext.RoomRecordingList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  RoomRecordingListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new RoomRecordingPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a room_recording\n   *\n   * @function get\n   * @memberof Twilio.Video.V1.RoomContext.RoomRecordingList#\n   *\n   * @param {string} sid - The SID that identifies the resource to fetch\n   *\n   * @returns {Twilio.Video.V1.RoomContext.RoomRecordingContext}\n   */\n  /* jshint ignore:end */\n  RoomRecordingListInstance.get = function get(sid) {\n    return new RoomRecordingContext(this._version, this._solution.roomSid, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Video.V1.RoomContext.RoomRecordingList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  RoomRecordingListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  RoomRecordingListInstance[util.inspect.custom] = function inspect(depth,\n      options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return RoomRecordingListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the RoomRecordingPage\n *\n * @constructor Twilio.Video.V1.RoomContext.RoomRecordingPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {RoomRecordingSolution} solution - Path solution\n *\n * @returns RoomRecordingPage\n */\n/* jshint ignore:end */\nRoomRecordingPage = function RoomRecordingPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(RoomRecordingPage.prototype, Page.prototype);\nRoomRecordingPage.prototype.constructor = RoomRecordingPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of RoomRecordingInstance\n *\n * @function getInstance\n * @memberof Twilio.Video.V1.RoomContext.RoomRecordingPage#\n *\n * @param {RoomRecordingPayload} payload - Payload response from the API\n *\n * @returns RoomRecordingInstance\n */\n/* jshint ignore:end */\nRoomRecordingPage.prototype.getInstance = function getInstance(payload) {\n  return new RoomRecordingInstance(this._version, payload, this._solution.roomSid);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Video.V1.RoomContext.RoomRecordingPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nRoomRecordingPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nRoomRecordingPage.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the RoomRecordingContext\n *\n * @constructor Twilio.Video.V1.RoomContext.RoomRecordingInstance\n *\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {room_recording.status} status - The status of the recording\n * @property {Date} dateCreated -\n *          The ISO 8601 date and time in GMT when the resource was created\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} sourceSid - The SID of the recording source\n * @property {number} size - The size of the recorded track in bytes\n * @property {string} url - The absolute URL of the resource\n * @property {room_recording.type} type - The recording's media type\n * @property {number} duration - The duration of the recording in seconds\n * @property {room_recording.format} containerFormat -\n *          The file format for the recording\n * @property {room_recording.codec} codec - The codec used for the recording\n * @property {object} groupingSids - A list of SIDs related to the Recording\n * @property {string} trackName -\n *          The name that was given to the source track of the recording\n * @property {number} offset -\n *          The number of milliseconds between a point in time that is common to all rooms in a group and when the source room of the recording started\n * @property {string} roomSid -\n *          The SID of the Room resource the recording is associated with\n * @property {string} links - The URLs of related resources\n *\n * @param {V1} version - Version of the resource\n * @param {RoomRecordingPayload} payload - The instance payload\n * @param {sid} roomSid -\n *          The SID of the Room resource the recording is associated with\n * @param {sid} sid - The SID that identifies the resource to fetch\n */\n/* jshint ignore:end */\nRoomRecordingInstance = function RoomRecordingInstance(version, payload,\n                                                        roomSid, sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.status = payload.status; // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.sid = payload.sid; // jshint ignore:line\n  this.sourceSid = payload.source_sid; // jshint ignore:line\n  this.size = deserialize.integer(payload.size); // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n  this.type = payload.type; // jshint ignore:line\n  this.duration = deserialize.integer(payload.duration); // jshint ignore:line\n  this.containerFormat = payload.container_format; // jshint ignore:line\n  this.codec = payload.codec; // jshint ignore:line\n  this.groupingSids = payload.grouping_sids; // jshint ignore:line\n  this.trackName = payload.track_name; // jshint ignore:line\n  this.offset = deserialize.integer(payload.offset); // jshint ignore:line\n  this.roomSid = payload.room_sid; // jshint ignore:line\n  this.links = payload.links; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {roomSid: roomSid, sid: sid || this.sid, };\n};\n\nObject.defineProperty(RoomRecordingInstance.prototype,\n  '_proxy', {\n    get: function() {\n      if (!this._context) {\n        this._context = new RoomRecordingContext(this._version, this._solution.roomSid, this._solution.sid);\n      }\n\n      return this._context;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a RoomRecordingInstance\n *\n * @function fetch\n * @memberof Twilio.Video.V1.RoomContext.RoomRecordingInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed RoomRecordingInstance\n */\n/* jshint ignore:end */\nRoomRecordingInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * remove a RoomRecordingInstance\n *\n * @function remove\n * @memberof Twilio.Video.V1.RoomContext.RoomRecordingInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed RoomRecordingInstance\n */\n/* jshint ignore:end */\nRoomRecordingInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Video.V1.RoomContext.RoomRecordingInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nRoomRecordingInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nRoomRecordingInstance.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the RoomRecordingContext\n *\n * @constructor Twilio.Video.V1.RoomContext.RoomRecordingContext\n *\n * @param {V1} version - Version of the resource\n * @param {sid} roomSid - The SID of the Room resource with the recording to fetch\n * @param {sid} sid - The SID that identifies the resource to fetch\n */\n/* jshint ignore:end */\nRoomRecordingContext = function RoomRecordingContext(version, roomSid, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {roomSid: roomSid, sid: sid, };\n  this._uri = `/Rooms/${roomSid}/Recordings/${sid}`;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a RoomRecordingInstance\n *\n * @function fetch\n * @memberof Twilio.Video.V1.RoomContext.RoomRecordingContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed RoomRecordingInstance\n */\n/* jshint ignore:end */\nRoomRecordingContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({uri: this._uri, method: 'GET'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new RoomRecordingInstance(\n      this._version,\n      payload,\n      this._solution.roomSid,\n      this._solution.sid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * remove a RoomRecordingInstance\n *\n * @function remove\n * @memberof Twilio.Video.V1.RoomContext.RoomRecordingContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed RoomRecordingInstance\n */\n/* jshint ignore:end */\nRoomRecordingContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.remove({uri: this._uri, method: 'DELETE'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Video.V1.RoomContext.RoomRecordingContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nRoomRecordingContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nRoomRecordingContext.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  RoomRecordingList: RoomRecordingList,\n  RoomRecordingPage: RoomRecordingPage,\n  RoomRecordingInstance: RoomRecordingInstance,\n  RoomRecordingContext: RoomRecordingContext\n};\n"]},"metadata":{},"sourceType":"script"}