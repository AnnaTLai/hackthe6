{"ast":null,"code":"'use strict';\n\nvar jwt = require('jsonwebtoken');\n\nvar _ = require('lodash');\n/**\n * Create a new Policy\n *\n * @constructor\n * @param {object} options - ...\n * @param {string} [options.url] - Policy URL\n * @param {string} [options.method] - HTTP Method\n * @param {object} [options.queryFilter] - Request query filter allowances\n * @param {object} [options.postFilter] - Request post filter allowances\n * @param {boolean} [options.allowed] - Allow the policy\n */\n\n\nfunction Policy(options) {\n  options = options || {};\n  this.url = options.url;\n  this.method = options.method || 'GET';\n  this.queryFilter = options.queryFilter || {};\n  this.postFilter = options.postFilter || {};\n  this.allow = options.allow || true;\n}\n\n_c = Policy;\n\n_.extend(Policy.prototype, {\n  payload: function () {\n    return {\n      url: this.url,\n      method: this.method,\n      query_filter: this.queryFilter,\n      post_filter: this.postFilter,\n      allow: this.allow\n    };\n  }\n});\n/**\n * @constructor\n * @param {object} options - ...\n * @param {string} options.accountSid - account sid\n * @param {string} options.authToken - auth token\n * @param {string} options.workspaceSid - workspace sid\n * @param {string} options.channelId - taskrouter channel id\n * @param {string} [options.friendlyName] - friendly name for the jwt\n * @param {number} [options.ttl] - time to live\n * @param {string} [options.version] - taskrouter version\n */\n\n\nfunction TaskRouterCapability(options) {\n  if (_.isUndefined(options)) {\n    throw new Error('Required parameter \"options\" missing.');\n  }\n\n  if (_.isUndefined(options.accountSid)) {\n    throw new Error('Required parameter \"options.accountSid\" missing.');\n  }\n\n  if (_.isUndefined(options.authToken)) {\n    throw new Error('Required parameter \"options.authToken\" missing.');\n  }\n\n  if (_.isUndefined(options.workspaceSid)) {\n    throw new Error('Required parameter \"options.workspaceSid\" missing.');\n  }\n\n  if (_.isUndefined(options.channelId)) {\n    throw new Error('Required parameter \"options.channelId\" missing.');\n  }\n\n  this.accountSid = options.accountSid;\n  this.authToken = options.authToken;\n  this.workspaceSid = options.workspaceSid;\n  this.channelId = options.channelId;\n  this.friendlyName = options.friendlyName;\n  this.ttl = options.ttl || 3600;\n  this.version = options.version || 'v1';\n  this.policies = [];\n}\n\n_c2 = TaskRouterCapability;\nTaskRouterCapability.Policy = Policy;\n\n_.extend(TaskRouterCapability.prototype, {\n  addPolicy: function (policy) {\n    this.policies.push(policy);\n  },\n  toJwt: function () {\n    var payload = {\n      iss: this.accountSid,\n      exp: Math.floor(new Date() / 1000) + this.ttl,\n      version: this.version,\n      friendly_name: this.friendlyName,\n      account_sid: this.accountSid,\n      channel: this.channelId,\n      workspace_sid: this.workspaceSid,\n      policies: _.map(this.policies, function (policy) {\n        return policy.payload();\n      })\n    };\n\n    if (_.startsWith(this.channelId, 'WK')) {\n      payload.worker_sid = this.channelId;\n    } else if (_.startsWith(this.channelId, 'WQ')) {\n      payload.taskqueue_sid = this.channelId;\n    }\n\n    return jwt.sign(payload, this.authToken);\n  }\n});\n\nmodule.exports = TaskRouterCapability;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Policy\");\n$RefreshReg$(_c2, \"TaskRouterCapability\");","map":{"version":3,"sources":["/Users/tony_niu/Visual Studio/Twilio/twilio-video-starter-kit/src/token-service/node_modules/twilio/lib/jwt/taskrouter/TaskRouterCapability.js"],"names":["jwt","require","_","Policy","options","url","method","queryFilter","postFilter","allow","extend","prototype","payload","query_filter","post_filter","TaskRouterCapability","isUndefined","Error","accountSid","authToken","workspaceSid","channelId","friendlyName","ttl","version","policies","addPolicy","policy","push","toJwt","iss","exp","Math","floor","Date","friendly_name","account_sid","channel","workspace_sid","map","startsWith","worker_sid","taskqueue_sid","sign","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nvar jwt = require('jsonwebtoken');\nvar _ = require('lodash');\n\n/**\n * Create a new Policy\n *\n * @constructor\n * @param {object} options - ...\n * @param {string} [options.url] - Policy URL\n * @param {string} [options.method] - HTTP Method\n * @param {object} [options.queryFilter] - Request query filter allowances\n * @param {object} [options.postFilter] - Request post filter allowances\n * @param {boolean} [options.allowed] - Allow the policy\n */\nfunction Policy(options) {\n  options = options || {};\n  this.url = options.url;\n  this.method = options.method || 'GET';\n  this.queryFilter = options.queryFilter || {};\n  this.postFilter = options.postFilter || {};\n  this.allow = options.allow || true;\n}\n\n_.extend(Policy.prototype, {\n  payload: function() {\n    return {\n      url: this.url,\n      method: this.method,\n      query_filter: this.queryFilter,\n      post_filter: this.postFilter,\n      allow: this.allow\n    };\n  }\n});\n\n/**\n * @constructor\n * @param {object} options - ...\n * @param {string} options.accountSid - account sid\n * @param {string} options.authToken - auth token\n * @param {string} options.workspaceSid - workspace sid\n * @param {string} options.channelId - taskrouter channel id\n * @param {string} [options.friendlyName] - friendly name for the jwt\n * @param {number} [options.ttl] - time to live\n * @param {string} [options.version] - taskrouter version\n */\nfunction TaskRouterCapability(options) {\n  if (_.isUndefined(options)) {\n    throw new Error('Required parameter \"options\" missing.');\n  }\n  if (_.isUndefined(options.accountSid)) {\n    throw new Error('Required parameter \"options.accountSid\" missing.');\n  }\n  if (_.isUndefined(options.authToken)) {\n    throw new Error('Required parameter \"options.authToken\" missing.');\n  }\n  if (_.isUndefined(options.workspaceSid)) {\n    throw new Error('Required parameter \"options.workspaceSid\" missing.');\n  }\n  if (_.isUndefined(options.channelId)) {\n    throw new Error('Required parameter \"options.channelId\" missing.');\n  }\n\n  this.accountSid = options.accountSid;\n  this.authToken = options.authToken;\n  this.workspaceSid = options.workspaceSid;\n  this.channelId = options.channelId;\n  this.friendlyName = options.friendlyName;\n  this.ttl = options.ttl || 3600;\n  this.version = options.version || 'v1';\n  this.policies = [];\n}\n\nTaskRouterCapability.Policy = Policy;\n\n_.extend(TaskRouterCapability.prototype, {\n  addPolicy: function(policy) {\n    this.policies.push(policy);\n  },\n\n  toJwt: function() {\n    var payload = {\n      iss: this.accountSid,\n      exp: (Math.floor(new Date() / 1000)) + this.ttl,\n      version: this.version,\n      friendly_name: this.friendlyName,\n      account_sid: this.accountSid,\n      channel: this.channelId,\n      workspace_sid: this.workspaceSid,\n      policies: _.map(this.policies, function(policy) {\n        return policy.payload();\n      })\n    };\n\n    if (_.startsWith(this.channelId, 'WK')) {\n      payload.worker_sid = this.channelId;\n    } else if (_.startsWith(this.channelId, 'WQ')) {\n      payload.taskqueue_sid = this.channelId;\n    }\n\n    return jwt.sign(payload, this.authToken);\n  }\n});\n\nmodule.exports = TaskRouterCapability;\n"]},"metadata":{},"sourceType":"module"}