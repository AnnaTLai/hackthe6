{"ast":null,"code":"// Generated by CoffeeScript 2.4.1\n(function () {\n  var NodeType, XMLCharacterData, XMLProcessingInstruction;\n  NodeType = require('./NodeType');\n  XMLCharacterData = require('./XMLCharacterData'); // Represents a processing instruction\n\n  module.exports = XMLProcessingInstruction = class XMLProcessingInstruction extends XMLCharacterData {\n    // Initializes a new instance of `XMLProcessingInstruction`\n    // `parent` the parent node\n    // `target` instruction target\n    // `value` instruction value\n    constructor(parent, target, value) {\n      super(parent);\n\n      if (target == null) {\n        throw new Error(\"Missing instruction target. \" + this.debugInfo());\n      }\n\n      this.type = NodeType.ProcessingInstruction;\n      this.target = this.stringify.insTarget(target);\n      this.name = this.target;\n\n      if (value) {\n        this.value = this.stringify.insValue(value);\n      }\n    } // Creates and returns a deep clone of `this`\n\n\n    clone() {\n      return Object.create(this);\n    } // Converts the XML fragment to string\n    // `options.pretty` pretty prints the result\n    // `options.indent` indentation for pretty print\n    // `options.offset` how many indentations to add to every line for pretty print\n    // `options.newline` newline sequence for pretty print\n\n\n    toString(options) {\n      return this.options.writer.processingInstruction(this, this.options.writer.filterOptions(options));\n    }\n\n    isEqualNode(node) {\n      if (!super.isEqualNode(node)) {\n        return false;\n      }\n\n      if (node.target !== this.target) {\n        return false;\n      }\n\n      return true;\n    }\n\n  };\n}).call(this);","map":{"version":3,"sources":["/Users/tony_niu/Visual Studio/Twilio/twilio-video-starter-kit/node_modules/xmlbuilder/lib/XMLProcessingInstruction.js"],"names":["NodeType","XMLCharacterData","XMLProcessingInstruction","require","module","exports","constructor","parent","target","value","Error","debugInfo","type","ProcessingInstruction","stringify","insTarget","name","insValue","clone","Object","create","toString","options","writer","processingInstruction","filterOptions","isEqualNode","node","call"],"mappings":"AAAA;AACA,CAAC,YAAW;AACV,MAAIA,QAAJ,EAAcC,gBAAd,EAAgCC,wBAAhC;AAEAF,EAAAA,QAAQ,GAAGG,OAAO,CAAC,YAAD,CAAlB;AAEAF,EAAAA,gBAAgB,GAAGE,OAAO,CAAC,oBAAD,CAA1B,CALU,CAOV;;AACAC,EAAAA,MAAM,CAACC,OAAP,GAAiBH,wBAAwB,GAAG,MAAMA,wBAAN,SAAuCD,gBAAvC,CAAwD;AAClG;AAEA;AACA;AACA;AACAK,IAAAA,WAAW,CAACC,MAAD,EAASC,MAAT,EAAiBC,KAAjB,EAAwB;AACjC,YAAMF,MAAN;;AACA,UAAIC,MAAM,IAAI,IAAd,EAAoB;AAClB,cAAM,IAAIE,KAAJ,CAAU,iCAAiC,KAAKC,SAAL,EAA3C,CAAN;AACD;;AACD,WAAKC,IAAL,GAAYZ,QAAQ,CAACa,qBAArB;AACA,WAAKL,MAAL,GAAc,KAAKM,SAAL,CAAeC,SAAf,CAAyBP,MAAzB,CAAd;AACA,WAAKQ,IAAL,GAAY,KAAKR,MAAjB;;AACA,UAAIC,KAAJ,EAAW;AACT,aAAKA,KAAL,GAAa,KAAKK,SAAL,CAAeG,QAAf,CAAwBR,KAAxB,CAAb;AACD;AACF,KAjBiG,CAmBlG;;;AACAS,IAAAA,KAAK,GAAG;AACN,aAAOC,MAAM,CAACC,MAAP,CAAc,IAAd,CAAP;AACD,KAtBiG,CAwBlG;AAEA;AACA;AACA;AACA;;;AACAC,IAAAA,QAAQ,CAACC,OAAD,EAAU;AAChB,aAAO,KAAKA,OAAL,CAAaC,MAAb,CAAoBC,qBAApB,CAA0C,IAA1C,EAAgD,KAAKF,OAAL,CAAaC,MAAb,CAAoBE,aAApB,CAAkCH,OAAlC,CAAhD,CAAP;AACD;;AAEDI,IAAAA,WAAW,CAACC,IAAD,EAAO;AAChB,UAAI,CAAC,MAAMD,WAAN,CAAkBC,IAAlB,CAAL,EAA8B;AAC5B,eAAO,KAAP;AACD;;AACD,UAAIA,IAAI,CAACnB,MAAL,KAAgB,KAAKA,MAAzB,EAAiC;AAC/B,eAAO,KAAP;AACD;;AACD,aAAO,IAAP;AACD;;AA1CiG,GAApG;AA8CD,CAtDD,EAsDGoB,IAtDH,CAsDQ,IAtDR","sourcesContent":["// Generated by CoffeeScript 2.4.1\n(function() {\n  var NodeType, XMLCharacterData, XMLProcessingInstruction;\n\n  NodeType = require('./NodeType');\n\n  XMLCharacterData = require('./XMLCharacterData');\n\n  // Represents a processing instruction\n  module.exports = XMLProcessingInstruction = class XMLProcessingInstruction extends XMLCharacterData {\n    // Initializes a new instance of `XMLProcessingInstruction`\n\n    // `parent` the parent node\n    // `target` instruction target\n    // `value` instruction value\n    constructor(parent, target, value) {\n      super(parent);\n      if (target == null) {\n        throw new Error(\"Missing instruction target. \" + this.debugInfo());\n      }\n      this.type = NodeType.ProcessingInstruction;\n      this.target = this.stringify.insTarget(target);\n      this.name = this.target;\n      if (value) {\n        this.value = this.stringify.insValue(value);\n      }\n    }\n\n    // Creates and returns a deep clone of `this`\n    clone() {\n      return Object.create(this);\n    }\n\n    // Converts the XML fragment to string\n\n    // `options.pretty` pretty prints the result\n    // `options.indent` indentation for pretty print\n    // `options.offset` how many indentations to add to every line for pretty print\n    // `options.newline` newline sequence for pretty print\n    toString(options) {\n      return this.options.writer.processingInstruction(this, this.options.writer.filterOptions(options));\n    }\n\n    isEqualNode(node) {\n      if (!super.isEqualNode(node)) {\n        return false;\n      }\n      if (node.target !== this.target) {\n        return false;\n      }\n      return true;\n    }\n\n  };\n\n}).call(this);\n"]},"metadata":{},"sourceType":"script"}