{"ast":null,"code":"'use strict';\n/* jshint ignore:start */\n\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n\n/* jshint ignore:end */\n\nvar Q = require('q');\n/* jshint ignore:line */\n\n\nvar _ = require('lodash');\n/* jshint ignore:line */\n\n\nvar util = require('util');\n/* jshint ignore:line */\n\n\nvar EngagementList = require('./flow/engagement').EngagementList;\n\nvar ExecutionList = require('./flow/execution').ExecutionList;\n\nvar Page = require('../../../base/Page');\n/* jshint ignore:line */\n\n\nvar deserialize = require('../../../base/deserialize');\n/* jshint ignore:line */\n\n\nvar values = require('../../../base/values');\n/* jshint ignore:line */\n\n\nvar FlowList;\nvar FlowPage;\nvar FlowInstance;\nvar FlowContext;\n/* jshint ignore:start */\n\n/**\n * Initialize the FlowList\n *\n * @constructor Twilio.Studio.V1.FlowList\n *\n * @param {Twilio.Studio.V1} version - Version of the resource\n */\n\n/* jshint ignore:end */\n\nFlowList = function FlowList(version) {\n  /* jshint ignore:start */\n\n  /**\n   * @function flows\n   * @memberof Twilio.Studio.V1#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Studio.V1.FlowContext}\n   */\n\n  /* jshint ignore:end */\n  function FlowListInstance(sid) {\n    return FlowListInstance.get(sid);\n  }\n\n  FlowListInstance._version = version; // Path Solution\n\n  FlowListInstance._solution = {};\n  FlowListInstance._uri = `/Flows`;\n  /* jshint ignore:start */\n\n  /**\n   * Streams FlowInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Studio.V1.FlowList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n\n  /* jshint ignore:end */\n\n  FlowListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Lists FlowInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Studio.V1.FlowList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  FlowListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single page of FlowInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Studio.V1.FlowList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  FlowListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new FlowPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single target page of FlowInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Studio.V1.FlowList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  FlowListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new FlowPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Constructs a flow\n   *\n   * @function get\n   * @memberof Twilio.Studio.V1.FlowList#\n   *\n   * @param {string} sid - The SID that identifies the resource to fetch\n   *\n   * @returns {Twilio.Studio.V1.FlowContext}\n   */\n\n  /* jshint ignore:end */\n\n\n  FlowListInstance.get = function get(sid) {\n    return new FlowContext(this._version, sid);\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Studio.V1.FlowList#\n   *\n   * @returns Object\n   */\n\n  /* jshint ignore:end */\n\n\n  FlowListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  FlowListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return FlowListInstance;\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the FlowPage\n *\n * @constructor Twilio.Studio.V1.FlowPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {FlowSolution} solution - Path solution\n *\n * @returns FlowPage\n */\n\n/* jshint ignore:end */\n\n\nFlowPage = function FlowPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(FlowPage.prototype, Page.prototype);\n\nFlowPage.prototype.constructor = FlowPage;\n/* jshint ignore:start */\n\n/**\n * Build an instance of FlowInstance\n *\n * @function getInstance\n * @memberof Twilio.Studio.V1.FlowPage#\n *\n * @param {FlowPayload} payload - Payload response from the API\n *\n * @returns FlowInstance\n */\n\n/* jshint ignore:end */\n\nFlowPage.prototype.getInstance = function getInstance(payload) {\n  return new FlowInstance(this._version, payload);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Studio.V1.FlowPage#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nFlowPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nFlowPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the FlowContext\n *\n * @constructor Twilio.Studio.V1.FlowInstance\n *\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {string} friendlyName -\n *          The string that you assigned to describe the Flow\n * @property {flow.status} status - The status of the Flow\n * @property {number} version - The latest version number of the Flow's definition\n * @property {Date} dateCreated -\n *          The ISO 8601 date and time in GMT when the resource was created\n * @property {Date} dateUpdated -\n *          The ISO 8601 date and time in GMT when the resource was last updated\n * @property {string} url - The absolute URL of the resource\n * @property {string} links - Nested resource URLs\n *\n * @param {V1} version - Version of the resource\n * @param {FlowPayload} payload - The instance payload\n * @param {sid} sid - The SID that identifies the resource to fetch\n */\n\n/* jshint ignore:end */\n\n\nFlowInstance = function FlowInstance(version, payload, sid) {\n  this._version = version; // Marshaled Properties\n\n  this.sid = payload.sid; // jshint ignore:line\n\n  this.accountSid = payload.account_sid; // jshint ignore:line\n\n  this.friendlyName = payload.friendly_name; // jshint ignore:line\n\n  this.status = payload.status; // jshint ignore:line\n\n  this.version = deserialize.integer(payload.version); // jshint ignore:line\n\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n\n  this.url = payload.url; // jshint ignore:line\n\n  this.links = payload.links; // jshint ignore:line\n  // Context\n\n  this._context = undefined;\n  this._solution = {\n    sid: sid || this.sid\n  };\n};\n\nObject.defineProperty(FlowInstance.prototype, '_proxy', {\n  get: function () {\n    if (!this._context) {\n      this._context = new FlowContext(this._version, this._solution.sid);\n    }\n\n    return this._context;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * fetch a FlowInstance\n *\n * @function fetch\n * @memberof Twilio.Studio.V1.FlowInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed FlowInstance\n */\n\n/* jshint ignore:end */\n\nFlowInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n/* jshint ignore:start */\n\n/**\n * remove a FlowInstance\n *\n * @function remove\n * @memberof Twilio.Studio.V1.FlowInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed FlowInstance\n */\n\n/* jshint ignore:end */\n\n\nFlowInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n/* jshint ignore:start */\n\n/**\n * Access the engagements\n *\n * @function engagements\n * @memberof Twilio.Studio.V1.FlowInstance#\n *\n * @returns {Twilio.Studio.V1.FlowContext.EngagementList}\n */\n\n/* jshint ignore:end */\n\n\nFlowInstance.prototype.engagements = function engagements() {\n  return this._proxy.engagements;\n};\n/* jshint ignore:start */\n\n/**\n * Access the executions\n *\n * @function executions\n * @memberof Twilio.Studio.V1.FlowInstance#\n *\n * @returns {Twilio.Studio.V1.FlowContext.ExecutionList}\n */\n\n/* jshint ignore:end */\n\n\nFlowInstance.prototype.executions = function executions() {\n  return this._proxy.executions;\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Studio.V1.FlowInstance#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nFlowInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nFlowInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the FlowContext\n *\n * @constructor Twilio.Studio.V1.FlowContext\n *\n * @property {Twilio.Studio.V1.FlowContext.EngagementList} engagements -\n *          engagements resource\n * @property {Twilio.Studio.V1.FlowContext.ExecutionList} executions -\n *          executions resource\n *\n * @param {V1} version - Version of the resource\n * @param {sid} sid - The SID that identifies the resource to fetch\n */\n\n/* jshint ignore:end */\n\n\nFlowContext = function FlowContext(version, sid) {\n  this._version = version; // Path Solution\n\n  this._solution = {\n    sid: sid\n  };\n  this._uri = `/Flows/${sid}`; // Dependents\n\n  this._engagements = undefined;\n  this._executions = undefined;\n};\n/* jshint ignore:start */\n\n/**\n * fetch a FlowInstance\n *\n * @function fetch\n * @memberof Twilio.Studio.V1.FlowContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed FlowInstance\n */\n\n/* jshint ignore:end */\n\n\nFlowContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new FlowInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * remove a FlowInstance\n *\n * @function remove\n * @memberof Twilio.Studio.V1.FlowContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed FlowInstance\n */\n\n/* jshint ignore:end */\n\n\nFlowContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.remove({\n    uri: this._uri,\n    method: 'DELETE'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\nObject.defineProperty(FlowContext.prototype, 'engagements', {\n  get: function () {\n    if (!this._engagements) {\n      this._engagements = new EngagementList(this._version, this._solution.sid);\n    }\n\n    return this._engagements;\n  }\n});\nObject.defineProperty(FlowContext.prototype, 'executions', {\n  get: function () {\n    if (!this._executions) {\n      this._executions = new ExecutionList(this._version, this._solution.sid);\n    }\n\n    return this._executions;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Studio.V1.FlowContext#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\nFlowContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nFlowContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  FlowList: FlowList,\n  FlowPage: FlowPage,\n  FlowInstance: FlowInstance,\n  FlowContext: FlowContext\n};","map":{"version":3,"sources":["/Users/tony_niu/Visual Studio/Twilio/twilio-video-starter-kit/src/token-service/node_modules/twilio/lib/rest/studio/v1/flow.js"],"names":["Q","require","_","util","EngagementList","ExecutionList","Page","deserialize","values","FlowList","FlowPage","FlowInstance","FlowContext","version","FlowListInstance","sid","get","_version","_solution","_uri","each","opts","callback","isFunction","isUndefined","Error","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","error","fetchNextPage","fn","promise","then","page","instances","instance","bind","nextPage","catch","merge","list","deferred","defer","allResources","resource","push","length","resolve","reject","nodeify","data","of","pageToken","pageNumber","uri","method","params","payload","getPage","targetUrl","_domain","twilio","request","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","accountSid","account_sid","friendlyName","friendly_name","status","integer","dateCreated","iso8601DateTime","date_created","dateUpdated","date_updated","url","links","_context","undefined","Object","defineProperty","fetch","_proxy","remove","engagements","executions","_engagements","_executions","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar EngagementList = require('./flow/engagement').EngagementList;\nvar ExecutionList = require('./flow/execution').ExecutionList;\nvar Page = require('../../../base/Page');  /* jshint ignore:line */\nvar deserialize = require(\n    '../../../base/deserialize');  /* jshint ignore:line */\nvar values = require('../../../base/values');  /* jshint ignore:line */\n\nvar FlowList;\nvar FlowPage;\nvar FlowInstance;\nvar FlowContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the FlowList\n *\n * @constructor Twilio.Studio.V1.FlowList\n *\n * @param {Twilio.Studio.V1} version - Version of the resource\n */\n/* jshint ignore:end */\nFlowList = function FlowList(version) {\n  /* jshint ignore:start */\n  /**\n   * @function flows\n   * @memberof Twilio.Studio.V1#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Studio.V1.FlowContext}\n   */\n  /* jshint ignore:end */\n  function FlowListInstance(sid) {\n    return FlowListInstance.get(sid);\n  }\n\n  FlowListInstance._version = version;\n  // Path Solution\n  FlowListInstance._solution = {};\n  FlowListInstance._uri = `/Flows`;\n  /* jshint ignore:start */\n  /**\n   * Streams FlowInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Studio.V1.FlowList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  FlowListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists FlowInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Studio.V1.FlowList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  FlowListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of FlowInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Studio.V1.FlowList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  FlowListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new FlowPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of FlowInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Studio.V1.FlowList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  FlowListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new FlowPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a flow\n   *\n   * @function get\n   * @memberof Twilio.Studio.V1.FlowList#\n   *\n   * @param {string} sid - The SID that identifies the resource to fetch\n   *\n   * @returns {Twilio.Studio.V1.FlowContext}\n   */\n  /* jshint ignore:end */\n  FlowListInstance.get = function get(sid) {\n    return new FlowContext(this._version, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Studio.V1.FlowList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  FlowListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  FlowListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return FlowListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the FlowPage\n *\n * @constructor Twilio.Studio.V1.FlowPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {FlowSolution} solution - Path solution\n *\n * @returns FlowPage\n */\n/* jshint ignore:end */\nFlowPage = function FlowPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(FlowPage.prototype, Page.prototype);\nFlowPage.prototype.constructor = FlowPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of FlowInstance\n *\n * @function getInstance\n * @memberof Twilio.Studio.V1.FlowPage#\n *\n * @param {FlowPayload} payload - Payload response from the API\n *\n * @returns FlowInstance\n */\n/* jshint ignore:end */\nFlowPage.prototype.getInstance = function getInstance(payload) {\n  return new FlowInstance(this._version, payload);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Studio.V1.FlowPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nFlowPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nFlowPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the FlowContext\n *\n * @constructor Twilio.Studio.V1.FlowInstance\n *\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {string} friendlyName -\n *          The string that you assigned to describe the Flow\n * @property {flow.status} status - The status of the Flow\n * @property {number} version - The latest version number of the Flow's definition\n * @property {Date} dateCreated -\n *          The ISO 8601 date and time in GMT when the resource was created\n * @property {Date} dateUpdated -\n *          The ISO 8601 date and time in GMT when the resource was last updated\n * @property {string} url - The absolute URL of the resource\n * @property {string} links - Nested resource URLs\n *\n * @param {V1} version - Version of the resource\n * @param {FlowPayload} payload - The instance payload\n * @param {sid} sid - The SID that identifies the resource to fetch\n */\n/* jshint ignore:end */\nFlowInstance = function FlowInstance(version, payload, sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.sid = payload.sid; // jshint ignore:line\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.friendlyName = payload.friendly_name; // jshint ignore:line\n  this.status = payload.status; // jshint ignore:line\n  this.version = deserialize.integer(payload.version); // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n  this.links = payload.links; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {sid: sid || this.sid, };\n};\n\nObject.defineProperty(FlowInstance.prototype,\n  '_proxy', {\n    get: function() {\n      if (!this._context) {\n        this._context = new FlowContext(this._version, this._solution.sid);\n      }\n\n      return this._context;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a FlowInstance\n *\n * @function fetch\n * @memberof Twilio.Studio.V1.FlowInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed FlowInstance\n */\n/* jshint ignore:end */\nFlowInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * remove a FlowInstance\n *\n * @function remove\n * @memberof Twilio.Studio.V1.FlowInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed FlowInstance\n */\n/* jshint ignore:end */\nFlowInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n\n/* jshint ignore:start */\n/**\n * Access the engagements\n *\n * @function engagements\n * @memberof Twilio.Studio.V1.FlowInstance#\n *\n * @returns {Twilio.Studio.V1.FlowContext.EngagementList}\n */\n/* jshint ignore:end */\nFlowInstance.prototype.engagements = function engagements() {\n  return this._proxy.engagements;\n};\n\n/* jshint ignore:start */\n/**\n * Access the executions\n *\n * @function executions\n * @memberof Twilio.Studio.V1.FlowInstance#\n *\n * @returns {Twilio.Studio.V1.FlowContext.ExecutionList}\n */\n/* jshint ignore:end */\nFlowInstance.prototype.executions = function executions() {\n  return this._proxy.executions;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Studio.V1.FlowInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nFlowInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nFlowInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the FlowContext\n *\n * @constructor Twilio.Studio.V1.FlowContext\n *\n * @property {Twilio.Studio.V1.FlowContext.EngagementList} engagements -\n *          engagements resource\n * @property {Twilio.Studio.V1.FlowContext.ExecutionList} executions -\n *          executions resource\n *\n * @param {V1} version - Version of the resource\n * @param {sid} sid - The SID that identifies the resource to fetch\n */\n/* jshint ignore:end */\nFlowContext = function FlowContext(version, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {sid: sid, };\n  this._uri = `/Flows/${sid}`;\n\n  // Dependents\n  this._engagements = undefined;\n  this._executions = undefined;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a FlowInstance\n *\n * @function fetch\n * @memberof Twilio.Studio.V1.FlowContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed FlowInstance\n */\n/* jshint ignore:end */\nFlowContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({uri: this._uri, method: 'GET'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new FlowInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * remove a FlowInstance\n *\n * @function remove\n * @memberof Twilio.Studio.V1.FlowContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed FlowInstance\n */\n/* jshint ignore:end */\nFlowContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.remove({uri: this._uri, method: 'DELETE'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\nObject.defineProperty(FlowContext.prototype,\n  'engagements', {\n    get: function() {\n      if (!this._engagements) {\n        this._engagements = new EngagementList(this._version, this._solution.sid);\n      }\n      return this._engagements;\n    }\n});\n\nObject.defineProperty(FlowContext.prototype,\n  'executions', {\n    get: function() {\n      if (!this._executions) {\n        this._executions = new ExecutionList(this._version, this._solution.sid);\n      }\n      return this._executions;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Studio.V1.FlowContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nFlowContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nFlowContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  FlowList: FlowList,\n  FlowPage: FlowPage,\n  FlowInstance: FlowInstance,\n  FlowContext: FlowContext\n};\n"]},"metadata":{},"sourceType":"module"}