{"ast":null,"code":"'use strict';\n/* jshint ignore:start */\n\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n\n/* jshint ignore:end */\n\nvar Q = require('q');\n/* jshint ignore:line */\n\n\nvar _ = require('lodash');\n/* jshint ignore:line */\n\n\nvar util = require('util');\n/* jshint ignore:line */\n\n\nvar DeliveryReceiptList = require('./message/deliveryReceipt').DeliveryReceiptList;\n\nvar Page = require('../../../../../base/Page');\n/* jshint ignore:line */\n\n\nvar deserialize = require('../../../../../base/deserialize');\n/* jshint ignore:line */\n\n\nvar serialize = require('../../../../../base/serialize');\n/* jshint ignore:line */\n\n\nvar values = require('../../../../../base/values');\n/* jshint ignore:line */\n\n\nvar MessageList;\nvar MessagePage;\nvar MessageInstance;\nvar MessageContext;\n/* jshint ignore:start */\n\n/**\n * Initialize the MessageList\n *\n * @constructor Twilio.Conversations.V1.ServiceContext.ConversationContext.MessageList\n *\n * @param {Twilio.Conversations.V1} version - Version of the resource\n * @param {string} chatServiceSid -\n *          The SID of the Conversation Service that the resource is associated with.\n * @param {string} conversationSid -\n *          The unique ID of the Conversation for this message.\n */\n\n/* jshint ignore:end */\n\nMessageList = function MessageList(version, chatServiceSid, conversationSid) {\n  /* jshint ignore:start */\n\n  /**\n   * @function messages\n   * @memberof Twilio.Conversations.V1.ServiceContext.ConversationContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Conversations.V1.ServiceContext.ConversationContext.MessageContext}\n   */\n\n  /* jshint ignore:end */\n  function MessageListInstance(sid) {\n    return MessageListInstance.get(sid);\n  }\n\n  MessageListInstance._version = version; // Path Solution\n\n  MessageListInstance._solution = {\n    chatServiceSid: chatServiceSid,\n    conversationSid: conversationSid\n  };\n  MessageListInstance._uri = `/Services/${chatServiceSid}/Conversations/${conversationSid}/Messages`;\n  /* jshint ignore:start */\n\n  /**\n   * create a MessageInstance\n   *\n   * @function create\n   * @memberof Twilio.Conversations.V1.ServiceContext.ConversationContext.MessageList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.author] -\n   *          The channel specific identifier of the message's author.\n   * @param {string} [opts.body] - The content of the message.\n   * @param {Date} [opts.dateCreated] - The date that this resource was created.\n   * @param {Date} [opts.dateUpdated] - The date that this resource was last updated.\n   * @param {string} [opts.attributes] -\n   *          A string metadata field you can use to store any data you wish.\n   * @param {string} [opts.mediaSid] -\n   *          The Media SID to be attached to the new Message.\n   * @param {message.webhook_enabled_type} [opts.xTwilioWebhookEnabled] -\n   *          The X-Twilio-Webhook-Enabled HTTP request header\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed MessageInstance\n   */\n\n  /* jshint ignore:end */\n\n  MessageListInstance.create = function create(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'Author': _.get(opts, 'author'),\n      'Body': _.get(opts, 'body'),\n      'DateCreated': serialize.iso8601DateTime(_.get(opts, 'dateCreated')),\n      'DateUpdated': serialize.iso8601DateTime(_.get(opts, 'dateUpdated')),\n      'Attributes': _.get(opts, 'attributes'),\n      'MediaSid': _.get(opts, 'mediaSid')\n    });\n    var headers = values.of({\n      'X-Twilio-Webhook-Enabled': _.get(opts, 'xTwilioWebhookEnabled')\n    });\n\n    var promise = this._version.create({\n      uri: this._uri,\n      method: 'POST',\n      data: data,\n      headers: headers\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new MessageInstance(this._version, payload, this._solution.chatServiceSid, this._solution.conversationSid, this._solution.sid));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Streams MessageInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Conversations.V1.ServiceContext.ConversationContext.MessageList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n\n  /* jshint ignore:end */\n\n\n  MessageListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Lists MessageInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Conversations.V1.ServiceContext.ConversationContext.MessageList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  MessageListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single page of MessageInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Conversations.V1.ServiceContext.ConversationContext.MessageList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  MessageListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new MessagePage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single target page of MessageInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Conversations.V1.ServiceContext.ConversationContext.MessageList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  MessageListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new MessagePage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Constructs a message\n   *\n   * @function get\n   * @memberof Twilio.Conversations.V1.ServiceContext.ConversationContext.MessageList#\n   *\n   * @param {string} sid -\n   *          A 34 character string that uniquely identifies this resource.\n   *\n   * @returns {Twilio.Conversations.V1.ServiceContext.ConversationContext.MessageContext}\n   */\n\n  /* jshint ignore:end */\n\n\n  MessageListInstance.get = function get(sid) {\n    return new MessageContext(this._version, this._solution.chatServiceSid, this._solution.conversationSid, sid);\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Conversations.V1.ServiceContext.ConversationContext.MessageList#\n   *\n   * @returns Object\n   */\n\n  /* jshint ignore:end */\n\n\n  MessageListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  MessageListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return MessageListInstance;\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the MessagePage\n *\n * @constructor Twilio.Conversations.V1.ServiceContext.ConversationContext.MessagePage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {MessageSolution} solution - Path solution\n *\n * @returns MessagePage\n */\n\n/* jshint ignore:end */\n\n\nMessagePage = function MessagePage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(MessagePage.prototype, Page.prototype);\n\nMessagePage.prototype.constructor = MessagePage;\n/* jshint ignore:start */\n\n/**\n * Build an instance of MessageInstance\n *\n * @function getInstance\n * @memberof Twilio.Conversations.V1.ServiceContext.ConversationContext.MessagePage#\n *\n * @param {MessagePayload} payload - Payload response from the API\n *\n * @returns MessageInstance\n */\n\n/* jshint ignore:end */\n\nMessagePage.prototype.getInstance = function getInstance(payload) {\n  return new MessageInstance(this._version, payload, this._solution.chatServiceSid, this._solution.conversationSid);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Conversations.V1.ServiceContext.ConversationContext.MessagePage#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nMessagePage.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nMessagePage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the MessageContext\n *\n * @constructor Twilio.Conversations.V1.ServiceContext.ConversationContext.MessageInstance\n *\n * @property {string} accountSid -\n *          The unique ID of the Account responsible for this message.\n * @property {string} chatServiceSid -\n *          The SID of the Conversation Service that the resource is associated with.\n * @property {string} conversationSid -\n *          The unique ID of the Conversation for this message.\n * @property {string} sid -\n *          A 34 character string that uniquely identifies this resource.\n * @property {number} index - The index of the message within the Conversation.\n * @property {string} author -\n *          The channel specific identifier of the message's author.\n * @property {string} body - The content of the message.\n * @property {object} media -\n *          An array of objects that describe the Message's media if attached, otherwise, null.\n * @property {string} attributes -\n *          A string metadata field you can use to store any data you wish.\n * @property {string} participantSid -\n *          The unique ID of messages's author participant.\n * @property {Date} dateCreated - The date that this resource was created.\n * @property {Date} dateUpdated - The date that this resource was last updated.\n * @property {object} delivery -\n *          An object that contains the summary of delivery statuses for the message to non-chat participants.\n * @property {string} url - An absolute URL for this message.\n * @property {string} links - Absolute URL to access the receipts of this message.\n *\n * @param {V1} version - Version of the resource\n * @param {MessagePayload} payload - The instance payload\n * @param {sid} chatServiceSid -\n *          The SID of the Conversation Service that the resource is associated with.\n * @param {sid} conversationSid -\n *          The unique ID of the Conversation for this message.\n * @param {sid} sid - A 34 character string that uniquely identifies this resource.\n */\n\n/* jshint ignore:end */\n\n\nMessageInstance = function MessageInstance(version, payload, chatServiceSid, conversationSid, sid) {\n  this._version = version; // Marshaled Properties\n\n  this.accountSid = payload.account_sid; // jshint ignore:line\n\n  this.chatServiceSid = payload.chat_service_sid; // jshint ignore:line\n\n  this.conversationSid = payload.conversation_sid; // jshint ignore:line\n\n  this.sid = payload.sid; // jshint ignore:line\n\n  this.index = deserialize.integer(payload.index); // jshint ignore:line\n\n  this.author = payload.author; // jshint ignore:line\n\n  this.body = payload.body; // jshint ignore:line\n\n  this.media = payload.media; // jshint ignore:line\n\n  this.attributes = payload.attributes; // jshint ignore:line\n\n  this.participantSid = payload.participant_sid; // jshint ignore:line\n\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n\n  this.delivery = payload.delivery; // jshint ignore:line\n\n  this.url = payload.url; // jshint ignore:line\n\n  this.links = payload.links; // jshint ignore:line\n  // Context\n\n  this._context = undefined;\n  this._solution = {\n    chatServiceSid: chatServiceSid,\n    conversationSid: conversationSid,\n    sid: sid || this.sid\n  };\n};\n\nObject.defineProperty(MessageInstance.prototype, '_proxy', {\n  get: function () {\n    if (!this._context) {\n      this._context = new MessageContext(this._version, this._solution.chatServiceSid, this._solution.conversationSid, this._solution.sid);\n    }\n\n    return this._context;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * update a MessageInstance\n *\n * @function update\n * @memberof Twilio.Conversations.V1.ServiceContext.ConversationContext.MessageInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.author] -\n *          The channel specific identifier of the message's author.\n * @param {string} [opts.body] - The content of the message.\n * @param {Date} [opts.dateCreated] - The date that this resource was created.\n * @param {Date} [opts.dateUpdated] - The date that this resource was last updated.\n * @param {string} [opts.attributes] -\n *          A string metadata field you can use to store any data you wish.\n * @param {message.webhook_enabled_type} [opts.xTwilioWebhookEnabled] -\n *          The X-Twilio-Webhook-Enabled HTTP request header\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed MessageInstance\n */\n\n/* jshint ignore:end */\n\nMessageInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n/* jshint ignore:start */\n\n/**\n * remove a MessageInstance\n *\n * @function remove\n * @memberof Twilio.Conversations.V1.ServiceContext.ConversationContext.MessageInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {message.webhook_enabled_type} [opts.xTwilioWebhookEnabled] -\n *          The X-Twilio-Webhook-Enabled HTTP request header\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed MessageInstance\n */\n\n/* jshint ignore:end */\n\n\nMessageInstance.prototype.remove = function remove(opts, callback) {\n  return this._proxy.remove(opts, callback);\n};\n/* jshint ignore:start */\n\n/**\n * fetch a MessageInstance\n *\n * @function fetch\n * @memberof Twilio.Conversations.V1.ServiceContext.ConversationContext.MessageInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed MessageInstance\n */\n\n/* jshint ignore:end */\n\n\nMessageInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n/* jshint ignore:start */\n\n/**\n * Access the deliveryReceipts\n *\n * @function deliveryReceipts\n * @memberof Twilio.Conversations.V1.ServiceContext.ConversationContext.MessageInstance#\n *\n * @returns {Twilio.Conversations.V1.ServiceContext.ConversationContext.MessageContext.DeliveryReceiptList}\n */\n\n/* jshint ignore:end */\n\n\nMessageInstance.prototype.deliveryReceipts = function deliveryReceipts() {\n  return this._proxy.deliveryReceipts;\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Conversations.V1.ServiceContext.ConversationContext.MessageInstance#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nMessageInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nMessageInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the MessageContext\n *\n * @constructor Twilio.Conversations.V1.ServiceContext.ConversationContext.MessageContext\n *\n * @property {Twilio.Conversations.V1.ServiceContext.ConversationContext.MessageContext.DeliveryReceiptList} deliveryReceipts -\n *          deliveryReceipts resource\n *\n * @param {V1} version - Version of the resource\n * @param {sid} chatServiceSid -\n *          The SID of the Conversation Service that the resource is associated with.\n * @param {sid_like} conversationSid -\n *          The unique ID of the Conversation for this message.\n * @param {sid} sid - A 34 character string that uniquely identifies this resource.\n */\n\n/* jshint ignore:end */\n\n\nMessageContext = function MessageContext(version, chatServiceSid, conversationSid, sid) {\n  this._version = version; // Path Solution\n\n  this._solution = {\n    chatServiceSid: chatServiceSid,\n    conversationSid: conversationSid,\n    sid: sid\n  };\n  this._uri = `/Services/${chatServiceSid}/Conversations/${conversationSid}/Messages/${sid}`; // Dependents\n\n  this._deliveryReceipts = undefined;\n};\n/* jshint ignore:start */\n\n/**\n * update a MessageInstance\n *\n * @function update\n * @memberof Twilio.Conversations.V1.ServiceContext.ConversationContext.MessageContext#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.author] -\n *          The channel specific identifier of the message's author.\n * @param {string} [opts.body] - The content of the message.\n * @param {Date} [opts.dateCreated] - The date that this resource was created.\n * @param {Date} [opts.dateUpdated] - The date that this resource was last updated.\n * @param {string} [opts.attributes] -\n *          A string metadata field you can use to store any data you wish.\n * @param {message.webhook_enabled_type} [opts.xTwilioWebhookEnabled] -\n *          The X-Twilio-Webhook-Enabled HTTP request header\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed MessageInstance\n */\n\n/* jshint ignore:end */\n\n\nMessageContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n\n  opts = opts || {};\n  var deferred = Q.defer();\n  var data = values.of({\n    'Author': _.get(opts, 'author'),\n    'Body': _.get(opts, 'body'),\n    'DateCreated': serialize.iso8601DateTime(_.get(opts, 'dateCreated')),\n    'DateUpdated': serialize.iso8601DateTime(_.get(opts, 'dateUpdated')),\n    'Attributes': _.get(opts, 'attributes')\n  });\n  var headers = values.of({\n    'X-Twilio-Webhook-Enabled': _.get(opts, 'xTwilioWebhookEnabled')\n  });\n\n  var promise = this._version.update({\n    uri: this._uri,\n    method: 'POST',\n    data: data,\n    headers: headers\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new MessageInstance(this._version, payload, this._solution.chatServiceSid, this._solution.conversationSid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * remove a MessageInstance\n *\n * @function remove\n * @memberof Twilio.Conversations.V1.ServiceContext.ConversationContext.MessageContext#\n *\n * @param {object} [opts] - Options for request\n * @param {message.webhook_enabled_type} [opts.xTwilioWebhookEnabled] -\n *          The X-Twilio-Webhook-Enabled HTTP request header\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed MessageInstance\n */\n\n/* jshint ignore:end */\n\n\nMessageContext.prototype.remove = function remove(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n\n  opts = opts || {};\n  var deferred = Q.defer();\n  var headers = values.of({\n    'X-Twilio-Webhook-Enabled': _.get(opts, 'xTwilioWebhookEnabled')\n  });\n\n  var promise = this._version.remove({\n    uri: this._uri,\n    method: 'DELETE',\n    headers: headers\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * fetch a MessageInstance\n *\n * @function fetch\n * @memberof Twilio.Conversations.V1.ServiceContext.ConversationContext.MessageContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed MessageInstance\n */\n\n/* jshint ignore:end */\n\n\nMessageContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new MessageInstance(this._version, payload, this._solution.chatServiceSid, this._solution.conversationSid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\nObject.defineProperty(MessageContext.prototype, 'deliveryReceipts', {\n  get: function () {\n    if (!this._deliveryReceipts) {\n      this._deliveryReceipts = new DeliveryReceiptList(this._version, this._solution.chatServiceSid, this._solution.conversationSid, this._solution.sid);\n    }\n\n    return this._deliveryReceipts;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Conversations.V1.ServiceContext.ConversationContext.MessageContext#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\nMessageContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nMessageContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  MessageList: MessageList,\n  MessagePage: MessagePage,\n  MessageInstance: MessageInstance,\n  MessageContext: MessageContext\n};","map":{"version":3,"sources":["/Users/tony_niu/Visual Studio/Twilio/twilio-video-starter-kit/src/token-service/node_modules/twilio/lib/rest/conversations/v1/service/conversation/message.js"],"names":["Q","require","_","util","DeliveryReceiptList","Page","deserialize","serialize","values","MessageList","MessagePage","MessageInstance","MessageContext","version","chatServiceSid","conversationSid","MessageListInstance","sid","get","_version","_solution","_uri","create","opts","callback","isFunction","deferred","defer","data","of","iso8601DateTime","headers","promise","uri","method","then","payload","resolve","bind","catch","error","reject","nodeify","each","isUndefined","Error","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","fetchNextPage","fn","page","instances","instance","nextPage","merge","list","allResources","resource","push","length","pageToken","pageNumber","params","getPage","targetUrl","_domain","twilio","request","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","accountSid","account_sid","chat_service_sid","conversation_sid","index","integer","author","body","media","attributes","participantSid","participant_sid","dateCreated","date_created","dateUpdated","date_updated","delivery","url","links","_context","undefined","Object","defineProperty","update","_proxy","remove","fetch","deliveryReceipts","_deliveryReceipts","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar DeliveryReceiptList = require(\n    './message/deliveryReceipt').DeliveryReceiptList;\nvar Page = require('../../../../../base/Page');  /* jshint ignore:line */\nvar deserialize = require(\n    '../../../../../base/deserialize');  /* jshint ignore:line */\nvar serialize = require(\n    '../../../../../base/serialize');  /* jshint ignore:line */\nvar values = require('../../../../../base/values');  /* jshint ignore:line */\n\nvar MessageList;\nvar MessagePage;\nvar MessageInstance;\nvar MessageContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the MessageList\n *\n * @constructor Twilio.Conversations.V1.ServiceContext.ConversationContext.MessageList\n *\n * @param {Twilio.Conversations.V1} version - Version of the resource\n * @param {string} chatServiceSid -\n *          The SID of the Conversation Service that the resource is associated with.\n * @param {string} conversationSid -\n *          The unique ID of the Conversation for this message.\n */\n/* jshint ignore:end */\nMessageList = function MessageList(version, chatServiceSid, conversationSid) {\n  /* jshint ignore:start */\n  /**\n   * @function messages\n   * @memberof Twilio.Conversations.V1.ServiceContext.ConversationContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Conversations.V1.ServiceContext.ConversationContext.MessageContext}\n   */\n  /* jshint ignore:end */\n  function MessageListInstance(sid) {\n    return MessageListInstance.get(sid);\n  }\n\n  MessageListInstance._version = version;\n  // Path Solution\n  MessageListInstance._solution = {chatServiceSid: chatServiceSid, conversationSid: conversationSid};\n  MessageListInstance._uri = `/Services/${chatServiceSid}/Conversations/${conversationSid}/Messages`;\n  /* jshint ignore:start */\n  /**\n   * create a MessageInstance\n   *\n   * @function create\n   * @memberof Twilio.Conversations.V1.ServiceContext.ConversationContext.MessageList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.author] -\n   *          The channel specific identifier of the message's author.\n   * @param {string} [opts.body] - The content of the message.\n   * @param {Date} [opts.dateCreated] - The date that this resource was created.\n   * @param {Date} [opts.dateUpdated] - The date that this resource was last updated.\n   * @param {string} [opts.attributes] -\n   *          A string metadata field you can use to store any data you wish.\n   * @param {string} [opts.mediaSid] -\n   *          The Media SID to be attached to the new Message.\n   * @param {message.webhook_enabled_type} [opts.xTwilioWebhookEnabled] -\n   *          The X-Twilio-Webhook-Enabled HTTP request header\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed MessageInstance\n   */\n  /* jshint ignore:end */\n  MessageListInstance.create = function create(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'Author': _.get(opts, 'author'),\n      'Body': _.get(opts, 'body'),\n      'DateCreated': serialize.iso8601DateTime(_.get(opts, 'dateCreated')),\n      'DateUpdated': serialize.iso8601DateTime(_.get(opts, 'dateUpdated')),\n      'Attributes': _.get(opts, 'attributes'),\n      'MediaSid': _.get(opts, 'mediaSid')\n    });\n    var headers = values.of({'X-Twilio-Webhook-Enabled': _.get(opts, 'xTwilioWebhookEnabled')});\n\n    var promise = this._version.create({uri: this._uri, method: 'POST', data: data, headers: headers});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new MessageInstance(\n        this._version,\n        payload,\n        this._solution.chatServiceSid,\n        this._solution.conversationSid,\n        this._solution.sid\n      ));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Streams MessageInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Conversations.V1.ServiceContext.ConversationContext.MessageList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  MessageListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists MessageInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Conversations.V1.ServiceContext.ConversationContext.MessageList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  MessageListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of MessageInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Conversations.V1.ServiceContext.ConversationContext.MessageList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  MessageListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new MessagePage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of MessageInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Conversations.V1.ServiceContext.ConversationContext.MessageList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  MessageListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new MessagePage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a message\n   *\n   * @function get\n   * @memberof Twilio.Conversations.V1.ServiceContext.ConversationContext.MessageList#\n   *\n   * @param {string} sid -\n   *          A 34 character string that uniquely identifies this resource.\n   *\n   * @returns {Twilio.Conversations.V1.ServiceContext.ConversationContext.MessageContext}\n   */\n  /* jshint ignore:end */\n  MessageListInstance.get = function get(sid) {\n    return new MessageContext(\n      this._version,\n      this._solution.chatServiceSid,\n      this._solution.conversationSid,\n      sid\n    );\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Conversations.V1.ServiceContext.ConversationContext.MessageList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  MessageListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  MessageListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return MessageListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the MessagePage\n *\n * @constructor Twilio.Conversations.V1.ServiceContext.ConversationContext.MessagePage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {MessageSolution} solution - Path solution\n *\n * @returns MessagePage\n */\n/* jshint ignore:end */\nMessagePage = function MessagePage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(MessagePage.prototype, Page.prototype);\nMessagePage.prototype.constructor = MessagePage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of MessageInstance\n *\n * @function getInstance\n * @memberof Twilio.Conversations.V1.ServiceContext.ConversationContext.MessagePage#\n *\n * @param {MessagePayload} payload - Payload response from the API\n *\n * @returns MessageInstance\n */\n/* jshint ignore:end */\nMessagePage.prototype.getInstance = function getInstance(payload) {\n  return new MessageInstance(\n    this._version,\n    payload,\n    this._solution.chatServiceSid,\n    this._solution.conversationSid\n  );\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Conversations.V1.ServiceContext.ConversationContext.MessagePage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nMessagePage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nMessagePage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the MessageContext\n *\n * @constructor Twilio.Conversations.V1.ServiceContext.ConversationContext.MessageInstance\n *\n * @property {string} accountSid -\n *          The unique ID of the Account responsible for this message.\n * @property {string} chatServiceSid -\n *          The SID of the Conversation Service that the resource is associated with.\n * @property {string} conversationSid -\n *          The unique ID of the Conversation for this message.\n * @property {string} sid -\n *          A 34 character string that uniquely identifies this resource.\n * @property {number} index - The index of the message within the Conversation.\n * @property {string} author -\n *          The channel specific identifier of the message's author.\n * @property {string} body - The content of the message.\n * @property {object} media -\n *          An array of objects that describe the Message's media if attached, otherwise, null.\n * @property {string} attributes -\n *          A string metadata field you can use to store any data you wish.\n * @property {string} participantSid -\n *          The unique ID of messages's author participant.\n * @property {Date} dateCreated - The date that this resource was created.\n * @property {Date} dateUpdated - The date that this resource was last updated.\n * @property {object} delivery -\n *          An object that contains the summary of delivery statuses for the message to non-chat participants.\n * @property {string} url - An absolute URL for this message.\n * @property {string} links - Absolute URL to access the receipts of this message.\n *\n * @param {V1} version - Version of the resource\n * @param {MessagePayload} payload - The instance payload\n * @param {sid} chatServiceSid -\n *          The SID of the Conversation Service that the resource is associated with.\n * @param {sid} conversationSid -\n *          The unique ID of the Conversation for this message.\n * @param {sid} sid - A 34 character string that uniquely identifies this resource.\n */\n/* jshint ignore:end */\nMessageInstance = function MessageInstance(version, payload, chatServiceSid,\n                                            conversationSid, sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.chatServiceSid = payload.chat_service_sid; // jshint ignore:line\n  this.conversationSid = payload.conversation_sid; // jshint ignore:line\n  this.sid = payload.sid; // jshint ignore:line\n  this.index = deserialize.integer(payload.index); // jshint ignore:line\n  this.author = payload.author; // jshint ignore:line\n  this.body = payload.body; // jshint ignore:line\n  this.media = payload.media; // jshint ignore:line\n  this.attributes = payload.attributes; // jshint ignore:line\n  this.participantSid = payload.participant_sid; // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n  this.delivery = payload.delivery; // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n  this.links = payload.links; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {\n    chatServiceSid: chatServiceSid,\n    conversationSid: conversationSid,\n    sid: sid || this.sid,\n  };\n};\n\nObject.defineProperty(MessageInstance.prototype,\n  '_proxy', {\n    get: function() {\n      if (!this._context) {\n        this._context = new MessageContext(\n          this._version,\n          this._solution.chatServiceSid,\n          this._solution.conversationSid,\n          this._solution.sid\n        );\n      }\n\n      return this._context;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * update a MessageInstance\n *\n * @function update\n * @memberof Twilio.Conversations.V1.ServiceContext.ConversationContext.MessageInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.author] -\n *          The channel specific identifier of the message's author.\n * @param {string} [opts.body] - The content of the message.\n * @param {Date} [opts.dateCreated] - The date that this resource was created.\n * @param {Date} [opts.dateUpdated] - The date that this resource was last updated.\n * @param {string} [opts.attributes] -\n *          A string metadata field you can use to store any data you wish.\n * @param {message.webhook_enabled_type} [opts.xTwilioWebhookEnabled] -\n *          The X-Twilio-Webhook-Enabled HTTP request header\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed MessageInstance\n */\n/* jshint ignore:end */\nMessageInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * remove a MessageInstance\n *\n * @function remove\n * @memberof Twilio.Conversations.V1.ServiceContext.ConversationContext.MessageInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {message.webhook_enabled_type} [opts.xTwilioWebhookEnabled] -\n *          The X-Twilio-Webhook-Enabled HTTP request header\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed MessageInstance\n */\n/* jshint ignore:end */\nMessageInstance.prototype.remove = function remove(opts, callback) {\n  return this._proxy.remove(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * fetch a MessageInstance\n *\n * @function fetch\n * @memberof Twilio.Conversations.V1.ServiceContext.ConversationContext.MessageInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed MessageInstance\n */\n/* jshint ignore:end */\nMessageInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * Access the deliveryReceipts\n *\n * @function deliveryReceipts\n * @memberof Twilio.Conversations.V1.ServiceContext.ConversationContext.MessageInstance#\n *\n * @returns {Twilio.Conversations.V1.ServiceContext.ConversationContext.MessageContext.DeliveryReceiptList}\n */\n/* jshint ignore:end */\nMessageInstance.prototype.deliveryReceipts = function deliveryReceipts() {\n  return this._proxy.deliveryReceipts;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Conversations.V1.ServiceContext.ConversationContext.MessageInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nMessageInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nMessageInstance.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the MessageContext\n *\n * @constructor Twilio.Conversations.V1.ServiceContext.ConversationContext.MessageContext\n *\n * @property {Twilio.Conversations.V1.ServiceContext.ConversationContext.MessageContext.DeliveryReceiptList} deliveryReceipts -\n *          deliveryReceipts resource\n *\n * @param {V1} version - Version of the resource\n * @param {sid} chatServiceSid -\n *          The SID of the Conversation Service that the resource is associated with.\n * @param {sid_like} conversationSid -\n *          The unique ID of the Conversation for this message.\n * @param {sid} sid - A 34 character string that uniquely identifies this resource.\n */\n/* jshint ignore:end */\nMessageContext = function MessageContext(version, chatServiceSid,\n                                          conversationSid, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {chatServiceSid: chatServiceSid, conversationSid: conversationSid, sid: sid, };\n  this._uri = `/Services/${chatServiceSid}/Conversations/${conversationSid}/Messages/${sid}`;\n\n  // Dependents\n  this._deliveryReceipts = undefined;\n};\n\n/* jshint ignore:start */\n/**\n * update a MessageInstance\n *\n * @function update\n * @memberof Twilio.Conversations.V1.ServiceContext.ConversationContext.MessageContext#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.author] -\n *          The channel specific identifier of the message's author.\n * @param {string} [opts.body] - The content of the message.\n * @param {Date} [opts.dateCreated] - The date that this resource was created.\n * @param {Date} [opts.dateUpdated] - The date that this resource was last updated.\n * @param {string} [opts.attributes] -\n *          A string metadata field you can use to store any data you wish.\n * @param {message.webhook_enabled_type} [opts.xTwilioWebhookEnabled] -\n *          The X-Twilio-Webhook-Enabled HTTP request header\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed MessageInstance\n */\n/* jshint ignore:end */\nMessageContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n  opts = opts || {};\n\n  var deferred = Q.defer();\n  var data = values.of({\n    'Author': _.get(opts, 'author'),\n    'Body': _.get(opts, 'body'),\n    'DateCreated': serialize.iso8601DateTime(_.get(opts, 'dateCreated')),\n    'DateUpdated': serialize.iso8601DateTime(_.get(opts, 'dateUpdated')),\n    'Attributes': _.get(opts, 'attributes')\n  });\n  var headers = values.of({'X-Twilio-Webhook-Enabled': _.get(opts, 'xTwilioWebhookEnabled')});\n\n  var promise = this._version.update({uri: this._uri, method: 'POST', data: data, headers: headers});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new MessageInstance(\n      this._version,\n      payload,\n      this._solution.chatServiceSid,\n      this._solution.conversationSid,\n      this._solution.sid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * remove a MessageInstance\n *\n * @function remove\n * @memberof Twilio.Conversations.V1.ServiceContext.ConversationContext.MessageContext#\n *\n * @param {object} [opts] - Options for request\n * @param {message.webhook_enabled_type} [opts.xTwilioWebhookEnabled] -\n *          The X-Twilio-Webhook-Enabled HTTP request header\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed MessageInstance\n */\n/* jshint ignore:end */\nMessageContext.prototype.remove = function remove(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n  opts = opts || {};\n\n  var deferred = Q.defer();\n  var headers = values.of({'X-Twilio-Webhook-Enabled': _.get(opts, 'xTwilioWebhookEnabled')});\n\n  var promise = this._version.remove({uri: this._uri, method: 'DELETE', headers: headers});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a MessageInstance\n *\n * @function fetch\n * @memberof Twilio.Conversations.V1.ServiceContext.ConversationContext.MessageContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed MessageInstance\n */\n/* jshint ignore:end */\nMessageContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({uri: this._uri, method: 'GET'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new MessageInstance(\n      this._version,\n      payload,\n      this._solution.chatServiceSid,\n      this._solution.conversationSid,\n      this._solution.sid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\nObject.defineProperty(MessageContext.prototype,\n  'deliveryReceipts', {\n    get: function() {\n      if (!this._deliveryReceipts) {\n        this._deliveryReceipts = new DeliveryReceiptList(\n          this._version,\n          this._solution.chatServiceSid,\n          this._solution.conversationSid,\n          this._solution.sid\n        );\n      }\n      return this._deliveryReceipts;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Conversations.V1.ServiceContext.ConversationContext.MessageContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nMessageContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nMessageContext.prototype[util.inspect.custom] = function inspect(depth, options)\n    {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  MessageList: MessageList,\n  MessagePage: MessagePage,\n  MessageInstance: MessageInstance,\n  MessageContext: MessageContext\n};\n"]},"metadata":{},"sourceType":"module"}