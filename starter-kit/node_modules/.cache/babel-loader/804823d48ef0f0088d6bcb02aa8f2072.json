{"ast":null,"code":"'use strict';\n/* jshint ignore:start */\n\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n\n/* jshint ignore:end */\n\nvar Q = require('q');\n/* jshint ignore:line */\n\n\nvar _ = require('lodash');\n/* jshint ignore:line */\n\n\nvar util = require('util');\n/* jshint ignore:line */\n\n\nvar Page = require('../../../../../base/Page');\n/* jshint ignore:line */\n\n\nvar deserialize = require('../../../../../base/deserialize');\n/* jshint ignore:line */\n\n\nvar serialize = require('../../../../../base/serialize');\n/* jshint ignore:line */\n\n\nvar values = require('../../../../../base/values');\n/* jshint ignore:line */\n\n\nvar UserChannelList;\nvar UserChannelPage;\nvar UserChannelInstance;\nvar UserChannelContext;\n/* jshint ignore:start */\n\n/**\n * Initialize the UserChannelList\n *\n * @constructor Twilio.Chat.V2.ServiceContext.UserContext.UserChannelList\n *\n * @param {Twilio.Chat.V2} version - Version of the resource\n * @param {string} serviceSid -\n *          The SID of the Service that the resource is associated with\n * @param {string} userSid - The SID of the User the User Channel belongs to\n */\n\n/* jshint ignore:end */\n\nUserChannelList = function UserChannelList(version, serviceSid, userSid) {\n  /* jshint ignore:start */\n\n  /**\n   * @function userChannels\n   * @memberof Twilio.Chat.V2.ServiceContext.UserContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Chat.V2.ServiceContext.UserContext.UserChannelContext}\n   */\n\n  /* jshint ignore:end */\n  function UserChannelListInstance(sid) {\n    return UserChannelListInstance.get(sid);\n  }\n\n  UserChannelListInstance._version = version; // Path Solution\n\n  UserChannelListInstance._solution = {\n    serviceSid: serviceSid,\n    userSid: userSid\n  };\n  UserChannelListInstance._uri = `/Services/${serviceSid}/Users/${userSid}/Channels`;\n  /* jshint ignore:start */\n\n  /**\n   * Streams UserChannelInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Chat.V2.ServiceContext.UserContext.UserChannelList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n\n  /* jshint ignore:end */\n\n  UserChannelListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Lists UserChannelInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Chat.V2.ServiceContext.UserContext.UserChannelList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  UserChannelListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single page of UserChannelInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Chat.V2.ServiceContext.UserContext.UserChannelList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  UserChannelListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new UserChannelPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single target page of UserChannelInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Chat.V2.ServiceContext.UserContext.UserChannelList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  UserChannelListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new UserChannelPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Constructs a user_channel\n   *\n   * @function get\n   * @memberof Twilio.Chat.V2.ServiceContext.UserContext.UserChannelList#\n   *\n   * @param {string} channelSid -\n   *          The SID of the Channel that has the User Channel to fetch\n   *\n   * @returns {Twilio.Chat.V2.ServiceContext.UserContext.UserChannelContext}\n   */\n\n  /* jshint ignore:end */\n\n\n  UserChannelListInstance.get = function get(channelSid) {\n    return new UserChannelContext(this._version, this._solution.serviceSid, this._solution.userSid, channelSid);\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Chat.V2.ServiceContext.UserContext.UserChannelList#\n   *\n   * @returns Object\n   */\n\n  /* jshint ignore:end */\n\n\n  UserChannelListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  UserChannelListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return UserChannelListInstance;\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the UserChannelPage\n *\n * @constructor Twilio.Chat.V2.ServiceContext.UserContext.UserChannelPage\n *\n * @param {V2} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {UserChannelSolution} solution - Path solution\n *\n * @returns UserChannelPage\n */\n\n/* jshint ignore:end */\n\n\nUserChannelPage = function UserChannelPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(UserChannelPage.prototype, Page.prototype);\n\nUserChannelPage.prototype.constructor = UserChannelPage;\n/* jshint ignore:start */\n\n/**\n * Build an instance of UserChannelInstance\n *\n * @function getInstance\n * @memberof Twilio.Chat.V2.ServiceContext.UserContext.UserChannelPage#\n *\n * @param {UserChannelPayload} payload - Payload response from the API\n *\n * @returns UserChannelInstance\n */\n\n/* jshint ignore:end */\n\nUserChannelPage.prototype.getInstance = function getInstance(payload) {\n  return new UserChannelInstance(this._version, payload, this._solution.serviceSid, this._solution.userSid);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Chat.V2.ServiceContext.UserContext.UserChannelPage#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nUserChannelPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nUserChannelPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the UserChannelContext\n *\n * @constructor Twilio.Chat.V2.ServiceContext.UserContext.UserChannelInstance\n *\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {string} serviceSid -\n *          The SID of the Service that the resource is associated with\n * @property {string} channelSid - The SID of the Channel the resource belongs to\n * @property {string} userSid - The SID of the User the User Channel belongs to\n * @property {string} memberSid - The SID of the User as a Member in the Channel\n * @property {user_channel.channel_status} status -\n *          The status of the User on the Channel\n * @property {number} lastConsumedMessageIndex -\n *          The index of the last Message in the Channel the Member has read\n * @property {number} unreadMessagesCount -\n *          The number of unread Messages in the Channel for the User\n * @property {string} links -\n *          Absolute URLs to access the Members, Messages , Invites and, if it exists, the last Message for the Channel\n * @property {string} url - The absolute URL of the resource\n * @property {user_channel.notification_level} notificationLevel -\n *          The push notification level of the User for the Channel\n *\n * @param {V2} version - Version of the resource\n * @param {UserChannelPayload} payload - The instance payload\n * @param {sid} serviceSid -\n *          The SID of the Service that the resource is associated with\n * @param {sid} userSid - The SID of the User the User Channel belongs to\n * @param {sid_like} channelSid -\n *          The SID of the Channel that has the User Channel to fetch\n */\n\n/* jshint ignore:end */\n\n\nUserChannelInstance = function UserChannelInstance(version, payload, serviceSid, userSid, channelSid) {\n  this._version = version; // Marshaled Properties\n\n  this.accountSid = payload.account_sid; // jshint ignore:line\n\n  this.serviceSid = payload.service_sid; // jshint ignore:line\n\n  this.channelSid = payload.channel_sid; // jshint ignore:line\n\n  this.userSid = payload.user_sid; // jshint ignore:line\n\n  this.memberSid = payload.member_sid; // jshint ignore:line\n\n  this.status = payload.status; // jshint ignore:line\n\n  this.lastConsumedMessageIndex = deserialize.integer(payload.last_consumed_message_index); // jshint ignore:line\n\n  this.unreadMessagesCount = deserialize.integer(payload.unread_messages_count); // jshint ignore:line\n\n  this.links = payload.links; // jshint ignore:line\n\n  this.url = payload.url; // jshint ignore:line\n\n  this.notificationLevel = payload.notification_level; // jshint ignore:line\n  // Context\n\n  this._context = undefined;\n  this._solution = {\n    serviceSid: serviceSid,\n    userSid: userSid,\n    channelSid: channelSid || this.channelSid\n  };\n};\n\nObject.defineProperty(UserChannelInstance.prototype, '_proxy', {\n  get: function () {\n    if (!this._context) {\n      this._context = new UserChannelContext(this._version, this._solution.serviceSid, this._solution.userSid, this._solution.channelSid);\n    }\n\n    return this._context;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * fetch a UserChannelInstance\n *\n * @function fetch\n * @memberof Twilio.Chat.V2.ServiceContext.UserContext.UserChannelInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed UserChannelInstance\n */\n\n/* jshint ignore:end */\n\nUserChannelInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n/* jshint ignore:start */\n\n/**\n * remove a UserChannelInstance\n *\n * @function remove\n * @memberof Twilio.Chat.V2.ServiceContext.UserContext.UserChannelInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed UserChannelInstance\n */\n\n/* jshint ignore:end */\n\n\nUserChannelInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n/* jshint ignore:start */\n\n/**\n * update a UserChannelInstance\n *\n * @function update\n * @memberof Twilio.Chat.V2.ServiceContext.UserContext.UserChannelInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {user_channel.notification_level} [opts.notificationLevel] -\n *          The push notification level to assign to the User Channel\n * @param {number} [opts.lastConsumedMessageIndex] -\n *          The index of the last Message that the Member has read within the Channel\n * @param {Date} [opts.lastConsumptionTimestamp] -\n *          The ISO 8601 based timestamp string that represents the datetime of the last Message read event for the Member within the Channel\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed UserChannelInstance\n */\n\n/* jshint ignore:end */\n\n\nUserChannelInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Chat.V2.ServiceContext.UserContext.UserChannelInstance#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nUserChannelInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nUserChannelInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the UserChannelContext\n *\n * @constructor Twilio.Chat.V2.ServiceContext.UserContext.UserChannelContext\n *\n * @param {V2} version - Version of the resource\n * @param {sid} serviceSid -\n *          The SID of the Service to fetch the User Channel resource from\n * @param {sid_like} userSid -\n *          The SID of the User to fetch the User Channel resource from\n * @param {sid_like} channelSid -\n *          The SID of the Channel that has the User Channel to fetch\n */\n\n/* jshint ignore:end */\n\n\nUserChannelContext = function UserChannelContext(version, serviceSid, userSid, channelSid) {\n  this._version = version; // Path Solution\n\n  this._solution = {\n    serviceSid: serviceSid,\n    userSid: userSid,\n    channelSid: channelSid\n  };\n  this._uri = `/Services/${serviceSid}/Users/${userSid}/Channels/${channelSid}`;\n};\n/* jshint ignore:start */\n\n/**\n * fetch a UserChannelInstance\n *\n * @function fetch\n * @memberof Twilio.Chat.V2.ServiceContext.UserContext.UserChannelContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed UserChannelInstance\n */\n\n/* jshint ignore:end */\n\n\nUserChannelContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new UserChannelInstance(this._version, payload, this._solution.serviceSid, this._solution.userSid, this._solution.channelSid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * remove a UserChannelInstance\n *\n * @function remove\n * @memberof Twilio.Chat.V2.ServiceContext.UserContext.UserChannelContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed UserChannelInstance\n */\n\n/* jshint ignore:end */\n\n\nUserChannelContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.remove({\n    uri: this._uri,\n    method: 'DELETE'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * update a UserChannelInstance\n *\n * @function update\n * @memberof Twilio.Chat.V2.ServiceContext.UserContext.UserChannelContext#\n *\n * @param {object} [opts] - Options for request\n * @param {user_channel.notification_level} [opts.notificationLevel] -\n *          The push notification level to assign to the User Channel\n * @param {number} [opts.lastConsumedMessageIndex] -\n *          The index of the last Message that the Member has read within the Channel\n * @param {Date} [opts.lastConsumptionTimestamp] -\n *          The ISO 8601 based timestamp string that represents the datetime of the last Message read event for the Member within the Channel\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed UserChannelInstance\n */\n\n/* jshint ignore:end */\n\n\nUserChannelContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n\n  opts = opts || {};\n  var deferred = Q.defer();\n  var data = values.of({\n    'NotificationLevel': _.get(opts, 'notificationLevel'),\n    'LastConsumedMessageIndex': _.get(opts, 'lastConsumedMessageIndex'),\n    'LastConsumptionTimestamp': serialize.iso8601DateTime(_.get(opts, 'lastConsumptionTimestamp'))\n  });\n\n  var promise = this._version.update({\n    uri: this._uri,\n    method: 'POST',\n    data: data\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new UserChannelInstance(this._version, payload, this._solution.serviceSid, this._solution.userSid, this._solution.channelSid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Chat.V2.ServiceContext.UserContext.UserChannelContext#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nUserChannelContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nUserChannelContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  UserChannelList: UserChannelList,\n  UserChannelPage: UserChannelPage,\n  UserChannelInstance: UserChannelInstance,\n  UserChannelContext: UserChannelContext\n};","map":{"version":3,"sources":["/Users/tony_niu/Visual Studio/Twilio/twilio-video-starter-kit/node_modules/twilio/lib/rest/chat/v2/service/user/userChannel.js"],"names":["Q","require","_","util","Page","deserialize","serialize","values","UserChannelList","UserChannelPage","UserChannelInstance","UserChannelContext","version","serviceSid","userSid","UserChannelListInstance","sid","get","_version","_solution","_uri","each","opts","callback","isFunction","isUndefined","Error","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","error","fetchNextPage","fn","promise","then","page","instances","instance","bind","nextPage","catch","merge","list","deferred","defer","allResources","resource","push","length","resolve","reject","nodeify","data","of","pageToken","pageNumber","uri","method","params","payload","getPage","targetUrl","_domain","twilio","request","channelSid","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","accountSid","account_sid","service_sid","channel_sid","user_sid","memberSid","member_sid","status","lastConsumedMessageIndex","integer","last_consumed_message_index","unreadMessagesCount","unread_messages_count","links","url","notificationLevel","notification_level","_context","undefined","Object","defineProperty","fetch","_proxy","remove","update","iso8601DateTime","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar Page = require('../../../../../base/Page');  /* jshint ignore:line */\nvar deserialize = require(\n    '../../../../../base/deserialize');  /* jshint ignore:line */\nvar serialize = require(\n    '../../../../../base/serialize');  /* jshint ignore:line */\nvar values = require('../../../../../base/values');  /* jshint ignore:line */\n\nvar UserChannelList;\nvar UserChannelPage;\nvar UserChannelInstance;\nvar UserChannelContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the UserChannelList\n *\n * @constructor Twilio.Chat.V2.ServiceContext.UserContext.UserChannelList\n *\n * @param {Twilio.Chat.V2} version - Version of the resource\n * @param {string} serviceSid -\n *          The SID of the Service that the resource is associated with\n * @param {string} userSid - The SID of the User the User Channel belongs to\n */\n/* jshint ignore:end */\nUserChannelList = function UserChannelList(version, serviceSid, userSid) {\n  /* jshint ignore:start */\n  /**\n   * @function userChannels\n   * @memberof Twilio.Chat.V2.ServiceContext.UserContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Chat.V2.ServiceContext.UserContext.UserChannelContext}\n   */\n  /* jshint ignore:end */\n  function UserChannelListInstance(sid) {\n    return UserChannelListInstance.get(sid);\n  }\n\n  UserChannelListInstance._version = version;\n  // Path Solution\n  UserChannelListInstance._solution = {serviceSid: serviceSid, userSid: userSid};\n  UserChannelListInstance._uri = `/Services/${serviceSid}/Users/${userSid}/Channels`;\n  /* jshint ignore:start */\n  /**\n   * Streams UserChannelInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Chat.V2.ServiceContext.UserContext.UserChannelList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  UserChannelListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists UserChannelInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Chat.V2.ServiceContext.UserContext.UserChannelList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  UserChannelListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of UserChannelInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Chat.V2.ServiceContext.UserContext.UserChannelList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  UserChannelListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new UserChannelPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of UserChannelInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Chat.V2.ServiceContext.UserContext.UserChannelList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  UserChannelListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new UserChannelPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a user_channel\n   *\n   * @function get\n   * @memberof Twilio.Chat.V2.ServiceContext.UserContext.UserChannelList#\n   *\n   * @param {string} channelSid -\n   *          The SID of the Channel that has the User Channel to fetch\n   *\n   * @returns {Twilio.Chat.V2.ServiceContext.UserContext.UserChannelContext}\n   */\n  /* jshint ignore:end */\n  UserChannelListInstance.get = function get(channelSid) {\n    return new UserChannelContext(\n      this._version,\n      this._solution.serviceSid,\n      this._solution.userSid,\n      channelSid\n    );\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Chat.V2.ServiceContext.UserContext.UserChannelList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  UserChannelListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  UserChannelListInstance[util.inspect.custom] = function inspect(depth, options)\n      {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return UserChannelListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the UserChannelPage\n *\n * @constructor Twilio.Chat.V2.ServiceContext.UserContext.UserChannelPage\n *\n * @param {V2} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {UserChannelSolution} solution - Path solution\n *\n * @returns UserChannelPage\n */\n/* jshint ignore:end */\nUserChannelPage = function UserChannelPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(UserChannelPage.prototype, Page.prototype);\nUserChannelPage.prototype.constructor = UserChannelPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of UserChannelInstance\n *\n * @function getInstance\n * @memberof Twilio.Chat.V2.ServiceContext.UserContext.UserChannelPage#\n *\n * @param {UserChannelPayload} payload - Payload response from the API\n *\n * @returns UserChannelInstance\n */\n/* jshint ignore:end */\nUserChannelPage.prototype.getInstance = function getInstance(payload) {\n  return new UserChannelInstance(\n    this._version,\n    payload,\n    this._solution.serviceSid,\n    this._solution.userSid\n  );\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Chat.V2.ServiceContext.UserContext.UserChannelPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nUserChannelPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nUserChannelPage.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the UserChannelContext\n *\n * @constructor Twilio.Chat.V2.ServiceContext.UserContext.UserChannelInstance\n *\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {string} serviceSid -\n *          The SID of the Service that the resource is associated with\n * @property {string} channelSid - The SID of the Channel the resource belongs to\n * @property {string} userSid - The SID of the User the User Channel belongs to\n * @property {string} memberSid - The SID of the User as a Member in the Channel\n * @property {user_channel.channel_status} status -\n *          The status of the User on the Channel\n * @property {number} lastConsumedMessageIndex -\n *          The index of the last Message in the Channel the Member has read\n * @property {number} unreadMessagesCount -\n *          The number of unread Messages in the Channel for the User\n * @property {string} links -\n *          Absolute URLs to access the Members, Messages , Invites and, if it exists, the last Message for the Channel\n * @property {string} url - The absolute URL of the resource\n * @property {user_channel.notification_level} notificationLevel -\n *          The push notification level of the User for the Channel\n *\n * @param {V2} version - Version of the resource\n * @param {UserChannelPayload} payload - The instance payload\n * @param {sid} serviceSid -\n *          The SID of the Service that the resource is associated with\n * @param {sid} userSid - The SID of the User the User Channel belongs to\n * @param {sid_like} channelSid -\n *          The SID of the Channel that has the User Channel to fetch\n */\n/* jshint ignore:end */\nUserChannelInstance = function UserChannelInstance(version, payload, serviceSid,\n                                                    userSid, channelSid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.serviceSid = payload.service_sid; // jshint ignore:line\n  this.channelSid = payload.channel_sid; // jshint ignore:line\n  this.userSid = payload.user_sid; // jshint ignore:line\n  this.memberSid = payload.member_sid; // jshint ignore:line\n  this.status = payload.status; // jshint ignore:line\n  this.lastConsumedMessageIndex = deserialize.integer(payload.last_consumed_message_index); // jshint ignore:line\n  this.unreadMessagesCount = deserialize.integer(payload.unread_messages_count); // jshint ignore:line\n  this.links = payload.links; // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n  this.notificationLevel = payload.notification_level; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {\n    serviceSid: serviceSid,\n    userSid: userSid,\n    channelSid: channelSid || this.channelSid,\n  };\n};\n\nObject.defineProperty(UserChannelInstance.prototype,\n  '_proxy', {\n    get: function() {\n      if (!this._context) {\n        this._context = new UserChannelContext(\n          this._version,\n          this._solution.serviceSid,\n          this._solution.userSid,\n          this._solution.channelSid\n        );\n      }\n\n      return this._context;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a UserChannelInstance\n *\n * @function fetch\n * @memberof Twilio.Chat.V2.ServiceContext.UserContext.UserChannelInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed UserChannelInstance\n */\n/* jshint ignore:end */\nUserChannelInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * remove a UserChannelInstance\n *\n * @function remove\n * @memberof Twilio.Chat.V2.ServiceContext.UserContext.UserChannelInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed UserChannelInstance\n */\n/* jshint ignore:end */\nUserChannelInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n\n/* jshint ignore:start */\n/**\n * update a UserChannelInstance\n *\n * @function update\n * @memberof Twilio.Chat.V2.ServiceContext.UserContext.UserChannelInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {user_channel.notification_level} [opts.notificationLevel] -\n *          The push notification level to assign to the User Channel\n * @param {number} [opts.lastConsumedMessageIndex] -\n *          The index of the last Message that the Member has read within the Channel\n * @param {Date} [opts.lastConsumptionTimestamp] -\n *          The ISO 8601 based timestamp string that represents the datetime of the last Message read event for the Member within the Channel\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed UserChannelInstance\n */\n/* jshint ignore:end */\nUserChannelInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Chat.V2.ServiceContext.UserContext.UserChannelInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nUserChannelInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nUserChannelInstance.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the UserChannelContext\n *\n * @constructor Twilio.Chat.V2.ServiceContext.UserContext.UserChannelContext\n *\n * @param {V2} version - Version of the resource\n * @param {sid} serviceSid -\n *          The SID of the Service to fetch the User Channel resource from\n * @param {sid_like} userSid -\n *          The SID of the User to fetch the User Channel resource from\n * @param {sid_like} channelSid -\n *          The SID of the Channel that has the User Channel to fetch\n */\n/* jshint ignore:end */\nUserChannelContext = function UserChannelContext(version, serviceSid, userSid,\n                                                  channelSid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {serviceSid: serviceSid, userSid: userSid, channelSid: channelSid, };\n  this._uri = `/Services/${serviceSid}/Users/${userSid}/Channels/${channelSid}`;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a UserChannelInstance\n *\n * @function fetch\n * @memberof Twilio.Chat.V2.ServiceContext.UserContext.UserChannelContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed UserChannelInstance\n */\n/* jshint ignore:end */\nUserChannelContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({uri: this._uri, method: 'GET'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new UserChannelInstance(\n      this._version,\n      payload,\n      this._solution.serviceSid,\n      this._solution.userSid,\n      this._solution.channelSid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * remove a UserChannelInstance\n *\n * @function remove\n * @memberof Twilio.Chat.V2.ServiceContext.UserContext.UserChannelContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed UserChannelInstance\n */\n/* jshint ignore:end */\nUserChannelContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.remove({uri: this._uri, method: 'DELETE'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * update a UserChannelInstance\n *\n * @function update\n * @memberof Twilio.Chat.V2.ServiceContext.UserContext.UserChannelContext#\n *\n * @param {object} [opts] - Options for request\n * @param {user_channel.notification_level} [opts.notificationLevel] -\n *          The push notification level to assign to the User Channel\n * @param {number} [opts.lastConsumedMessageIndex] -\n *          The index of the last Message that the Member has read within the Channel\n * @param {Date} [opts.lastConsumptionTimestamp] -\n *          The ISO 8601 based timestamp string that represents the datetime of the last Message read event for the Member within the Channel\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed UserChannelInstance\n */\n/* jshint ignore:end */\nUserChannelContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n  opts = opts || {};\n\n  var deferred = Q.defer();\n  var data = values.of({\n    'NotificationLevel': _.get(opts, 'notificationLevel'),\n    'LastConsumedMessageIndex': _.get(opts, 'lastConsumedMessageIndex'),\n    'LastConsumptionTimestamp': serialize.iso8601DateTime(_.get(opts, 'lastConsumptionTimestamp'))\n  });\n\n  var promise = this._version.update({uri: this._uri, method: 'POST', data: data});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new UserChannelInstance(\n      this._version,\n      payload,\n      this._solution.serviceSid,\n      this._solution.userSid,\n      this._solution.channelSid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Chat.V2.ServiceContext.UserContext.UserChannelContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nUserChannelContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nUserChannelContext.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  UserChannelList: UserChannelList,\n  UserChannelPage: UserChannelPage,\n  UserChannelInstance: UserChannelInstance,\n  UserChannelContext: UserChannelContext\n};\n"]},"metadata":{},"sourceType":"script"}