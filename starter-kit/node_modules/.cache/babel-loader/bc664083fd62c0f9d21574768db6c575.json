{"ast":null,"code":"'use strict';\n/* jshint ignore:start */\n\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n\n/* jshint ignore:end */\n\nvar Q = require('q');\n/* jshint ignore:line */\n\n\nvar _ = require('lodash');\n/* jshint ignore:line */\n\n\nvar util = require('util');\n/* jshint ignore:line */\n\n\nvar Page = require('../../../base/Page');\n/* jshint ignore:line */\n\n\nvar deserialize = require('../../../base/deserialize');\n/* jshint ignore:line */\n\n\nvar serialize = require('../../../base/serialize');\n/* jshint ignore:line */\n\n\nvar values = require('../../../base/values');\n/* jshint ignore:line */\n\n\nvar VerificationAttemptList;\nvar VerificationAttemptPage;\nvar VerificationAttemptInstance;\nvar VerificationAttemptContext;\n/* jshint ignore:start */\n\n/**\n * Initialize the VerificationAttemptList\n *\n * @constructor Twilio.Verify.V2.VerificationAttemptList\n *\n * @param {Twilio.Verify.V2} version - Version of the resource\n */\n\n/* jshint ignore:end */\n\nVerificationAttemptList = function VerificationAttemptList(version) {\n  /* jshint ignore:start */\n\n  /**\n   * @function verificationAttempts\n   * @memberof Twilio.Verify.V2#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Verify.V2.VerificationAttemptContext}\n   */\n\n  /* jshint ignore:end */\n  function VerificationAttemptListInstance(sid) {\n    return VerificationAttemptListInstance.get(sid);\n  }\n\n  VerificationAttemptListInstance._version = version; // Path Solution\n\n  VerificationAttemptListInstance._solution = {};\n  VerificationAttemptListInstance._uri = `/Attempts`;\n  /* jshint ignore:start */\n\n  /**\n   * Streams VerificationAttemptInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Verify.V2.VerificationAttemptList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {Date} [opts.dateCreatedAfter] -\n   *          Filter verification attempts after this date\n   * @param {Date} [opts.dateCreatedBefore] -\n   *          Filter verification attempts befor this date\n   * @param {string} [opts.channelData.to] - Destination of a verification\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n\n  /* jshint ignore:end */\n\n  VerificationAttemptListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Lists VerificationAttemptInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Verify.V2.VerificationAttemptList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {Date} [opts.dateCreatedAfter] -\n   *          Filter verification attempts after this date\n   * @param {Date} [opts.dateCreatedBefore] -\n   *          Filter verification attempts befor this date\n   * @param {string} [opts.channelData.to] - Destination of a verification\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  VerificationAttemptListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single page of VerificationAttemptInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Verify.V2.VerificationAttemptList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {Date} [opts.dateCreatedAfter] -\n   *          Filter verification attempts after this date\n   * @param {Date} [opts.dateCreatedBefore] -\n   *          Filter verification attempts befor this date\n   * @param {string} [opts.channelData.to] - Destination of a verification\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  VerificationAttemptListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'DateCreatedAfter': serialize.iso8601DateTime(_.get(opts, 'dateCreatedAfter')),\n      'DateCreatedBefore': serialize.iso8601DateTime(_.get(opts, 'dateCreatedBefore')),\n      'ChannelData.To': _.get(opts, 'channelData.to'),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new VerificationAttemptPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single target page of VerificationAttemptInstance records from the\n   * API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Verify.V2.VerificationAttemptList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  VerificationAttemptListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new VerificationAttemptPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Constructs a verification_attempt\n   *\n   * @function get\n   * @memberof Twilio.Verify.V2.VerificationAttemptList#\n   *\n   * @param {string} sid - Verification Attempt Sid.\n   *\n   * @returns {Twilio.Verify.V2.VerificationAttemptContext}\n   */\n\n  /* jshint ignore:end */\n\n\n  VerificationAttemptListInstance.get = function get(sid) {\n    return new VerificationAttemptContext(this._version, sid);\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Verify.V2.VerificationAttemptList#\n   *\n   * @returns Object\n   */\n\n  /* jshint ignore:end */\n\n\n  VerificationAttemptListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  VerificationAttemptListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return VerificationAttemptListInstance;\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the VerificationAttemptPage\n *\n * @constructor Twilio.Verify.V2.VerificationAttemptPage\n *\n * @param {V2} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {VerificationAttemptSolution} solution - Path solution\n *\n * @returns VerificationAttemptPage\n */\n\n/* jshint ignore:end */\n\n\nVerificationAttemptPage = function VerificationAttemptPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(VerificationAttemptPage.prototype, Page.prototype);\n\nVerificationAttemptPage.prototype.constructor = VerificationAttemptPage;\n/* jshint ignore:start */\n\n/**\n * Build an instance of VerificationAttemptInstance\n *\n * @function getInstance\n * @memberof Twilio.Verify.V2.VerificationAttemptPage#\n *\n * @param {VerificationAttemptPayload} payload - Payload response from the API\n *\n * @returns VerificationAttemptInstance\n */\n\n/* jshint ignore:end */\n\nVerificationAttemptPage.prototype.getInstance = function getInstance(payload) {\n  return new VerificationAttemptInstance(this._version, payload);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Verify.V2.VerificationAttemptPage#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nVerificationAttemptPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nVerificationAttemptPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the VerificationAttemptContext\n *\n * @constructor Twilio.Verify.V2.VerificationAttemptInstance\n *\n * @property {string} sid -\n *          A string that uniquely identifies this Verification Attempt\n * @property {string} accountSid - Account Sid\n * @property {string} serviceSid - The service_sid\n * @property {Date} dateCreated - The date this Attempt was created\n * @property {Date} dateUpdated - The date this Attempt was updated\n * @property {verification_attempt.conversion_status} conversionStatus -\n *          Status of a conversion\n * @property {verification_attempt.channels} channel - Channel used for the attempt\n * @property {object} channelData -\n *          Object with the channel information for an attempt\n * @property {string} url - The url\n *\n * @param {V2} version - Version of the resource\n * @param {VerificationAttemptPayload} payload - The instance payload\n * @param {sid} sid - Verification Attempt Sid.\n */\n\n/* jshint ignore:end */\n\n\nVerificationAttemptInstance = function VerificationAttemptInstance(version, payload, sid) {\n  this._version = version; // Marshaled Properties\n\n  this.sid = payload.sid; // jshint ignore:line\n\n  this.accountSid = payload.account_sid; // jshint ignore:line\n\n  this.serviceSid = payload.service_sid; // jshint ignore:line\n\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n\n  this.conversionStatus = payload.conversion_status; // jshint ignore:line\n\n  this.channel = payload.channel; // jshint ignore:line\n\n  this.channelData = payload.channel_data; // jshint ignore:line\n\n  this.url = payload.url; // jshint ignore:line\n  // Context\n\n  this._context = undefined;\n  this._solution = {\n    sid: sid || this.sid\n  };\n};\n\nObject.defineProperty(VerificationAttemptInstance.prototype, '_proxy', {\n  get: function () {\n    if (!this._context) {\n      this._context = new VerificationAttemptContext(this._version, this._solution.sid);\n    }\n\n    return this._context;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * fetch a VerificationAttemptInstance\n *\n * @function fetch\n * @memberof Twilio.Verify.V2.VerificationAttemptInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed VerificationAttemptInstance\n */\n\n/* jshint ignore:end */\n\nVerificationAttemptInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Verify.V2.VerificationAttemptInstance#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nVerificationAttemptInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nVerificationAttemptInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the VerificationAttemptContext\n *\n * @constructor Twilio.Verify.V2.VerificationAttemptContext\n *\n * @param {V2} version - Version of the resource\n * @param {sid} sid - Verification Attempt Sid.\n */\n\n/* jshint ignore:end */\n\n\nVerificationAttemptContext = function VerificationAttemptContext(version, sid) {\n  this._version = version; // Path Solution\n\n  this._solution = {\n    sid: sid\n  };\n  this._uri = `/Attempts/${sid}`;\n};\n/* jshint ignore:start */\n\n/**\n * fetch a VerificationAttemptInstance\n *\n * @function fetch\n * @memberof Twilio.Verify.V2.VerificationAttemptContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed VerificationAttemptInstance\n */\n\n/* jshint ignore:end */\n\n\nVerificationAttemptContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new VerificationAttemptInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Verify.V2.VerificationAttemptContext#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nVerificationAttemptContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nVerificationAttemptContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  VerificationAttemptList: VerificationAttemptList,\n  VerificationAttemptPage: VerificationAttemptPage,\n  VerificationAttemptInstance: VerificationAttemptInstance,\n  VerificationAttemptContext: VerificationAttemptContext\n};","map":{"version":3,"sources":["/Users/tony_niu/Visual Studio/Twilio/twilio-video-starter-kit/src/token-service/node_modules/twilio/lib/rest/verify/v2/verificationAttempt.js"],"names":["Q","require","_","util","Page","deserialize","serialize","values","VerificationAttemptList","VerificationAttemptPage","VerificationAttemptInstance","VerificationAttemptContext","version","VerificationAttemptListInstance","sid","get","_version","_solution","_uri","each","opts","callback","isFunction","isUndefined","Error","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","error","fetchNextPage","fn","promise","then","page","instances","instance","bind","nextPage","catch","merge","list","deferred","defer","allResources","resource","push","length","resolve","reject","nodeify","data","of","iso8601DateTime","pageToken","pageNumber","uri","method","params","payload","getPage","targetUrl","_domain","twilio","request","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","accountSid","account_sid","serviceSid","service_sid","dateCreated","date_created","dateUpdated","date_updated","conversionStatus","conversion_status","channel","channelData","channel_data","url","_context","undefined","Object","defineProperty","fetch","_proxy","module","exports"],"mappings":"AAAA;AAEA;;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;AAEA,IAAIA,CAAC,GAAGC,OAAO,CAAC,GAAD,CAAf;AAAuB;;;AACvB,IAAIC,CAAC,GAAGD,OAAO,CAAC,QAAD,CAAf;AAA4B;;;AAC5B,IAAIE,IAAI,GAAGF,OAAO,CAAC,MAAD,CAAlB;AAA6B;;;AAC7B,IAAIG,IAAI,GAAGH,OAAO,CAAC,oBAAD,CAAlB;AAA2C;;;AAC3C,IAAII,WAAW,GAAGJ,OAAO,CACrB,2BADqB,CAAzB;AACmC;;;AACnC,IAAIK,SAAS,GAAGL,OAAO,CAAC,yBAAD,CAAvB;AAAqD;;;AACrD,IAAIM,MAAM,GAAGN,OAAO,CAAC,sBAAD,CAApB;AAA+C;;;AAE/C,IAAIO,uBAAJ;AACA,IAAIC,uBAAJ;AACA,IAAIC,2BAAJ;AACA,IAAIC,0BAAJ;AAEA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;AACAH,uBAAuB,GAAG,SAASA,uBAAT,CAAiCI,OAAjC,EAA0C;AAClE;;AACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;AACE;AACA,WAASC,+BAAT,CAAyCC,GAAzC,EAA8C;AAC5C,WAAOD,+BAA+B,CAACE,GAAhC,CAAoCD,GAApC,CAAP;AACD;;AAEDD,EAAAA,+BAA+B,CAACG,QAAhC,GAA2CJ,OAA3C,CAfkE,CAgBlE;;AACAC,EAAAA,+BAA+B,CAACI,SAAhC,GAA4C,EAA5C;AACAJ,EAAAA,+BAA+B,CAACK,IAAhC,GAAwC,WAAxC;AACA;;AACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE;;AACAL,EAAAA,+BAA+B,CAACM,IAAhC,GAAuC,SAASA,IAAT,CAAcC,IAAd,EAAoBC,QAApB,EAA8B;AACnE,QAAInB,CAAC,CAACoB,UAAF,CAAaF,IAAb,CAAJ,EAAwB;AACtBC,MAAAA,QAAQ,GAAGD,IAAX;AACAA,MAAAA,IAAI,GAAG,EAAP;AACD;;AACDA,IAAAA,IAAI,GAAGA,IAAI,IAAI,EAAf;;AACA,QAAIA,IAAI,CAACC,QAAT,EAAmB;AACjBA,MAAAA,QAAQ,GAAGD,IAAI,CAACC,QAAhB;AACD;;AACD,QAAInB,CAAC,CAACqB,WAAF,CAAcF,QAAd,CAAJ,EAA6B;AAC3B,YAAM,IAAIG,KAAJ,CAAU,oCAAV,CAAN;AACD;;AAED,QAAIC,IAAI,GAAG,KAAX;AACA,QAAIC,WAAW,GAAG,CAAlB;AACA,QAAIC,eAAe,GAAG,CAAtB;;AACA,QAAIC,MAAM,GAAG,KAAKZ,QAAL,CAAca,UAAd,CAAyB;AACpCC,MAAAA,KAAK,EAAEV,IAAI,CAACU,KADwB;AAEpCC,MAAAA,QAAQ,EAAEX,IAAI,CAACW;AAFqB,KAAzB,CAAb;;AAKA,aAASC,UAAT,CAAoBC,KAApB,EAA2B;AACzBR,MAAAA,IAAI,GAAG,IAAP;;AACA,UAAIvB,CAAC,CAACoB,UAAF,CAAaF,IAAI,CAACK,IAAlB,CAAJ,EAA6B;AAC3BL,QAAAA,IAAI,CAACK,IAAL,CAAUQ,KAAV;AACD;AACF;;AAED,aAASC,aAAT,CAAuBC,EAAvB,EAA2B;AACzB,UAAIC,OAAO,GAAGD,EAAE,EAAhB;;AACA,UAAIjC,CAAC,CAACqB,WAAF,CAAca,OAAd,CAAJ,EAA4B;AAC1BJ,QAAAA,UAAU;AACV;AACD;;AAEDI,MAAAA,OAAO,CAACC,IAAR,CAAa,UAASC,IAAT,EAAe;AAC1BpC,QAAAA,CAAC,CAACiB,IAAF,CAAOmB,IAAI,CAACC,SAAZ,EAAuB,UAASC,QAAT,EAAmB;AACxC,cAAIf,IAAI,IAAK,CAACvB,CAAC,CAACqB,WAAF,CAAcH,IAAI,CAACU,KAAnB,CAAD,IAA8BH,eAAe,IAAIP,IAAI,CAACU,KAAnE,EAA2E;AACzEL,YAAAA,IAAI,GAAG,IAAP;AACA,mBAAO,KAAP;AACD;;AAEDE,UAAAA,eAAe;AACfN,UAAAA,QAAQ,CAACmB,QAAD,EAAWR,UAAX,CAAR;AACD,SARD;;AAUA,YAAI,CAACP,IAAL,EAAW;AACTC,UAAAA,WAAW;AACXQ,UAAAA,aAAa,CAAChC,CAAC,CAACuC,IAAF,CAAOH,IAAI,CAACI,QAAZ,EAAsBJ,IAAtB,CAAD,CAAb;AACD;AACF,OAfD;AAiBAF,MAAAA,OAAO,CAACO,KAAR,CAAcX,UAAd;AACD;;AAEDE,IAAAA,aAAa,CAAChC,CAAC,CAACuC,IAAF,CAAO,KAAKH,IAAZ,EAAkB,IAAlB,EAAwBpC,CAAC,CAAC0C,KAAF,CAAQxB,IAAR,EAAcQ,MAAd,CAAxB,CAAD,CAAb;AACD,GAxDD;AA0DA;;AACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE;;;AACAf,EAAAA,+BAA+B,CAACgC,IAAhC,GAAuC,SAASA,IAAT,CAAczB,IAAd,EAAoBC,QAApB,EAA8B;AACnE,QAAInB,CAAC,CAACoB,UAAF,CAAaF,IAAb,CAAJ,EAAwB;AACtBC,MAAAA,QAAQ,GAAGD,IAAX;AACAA,MAAAA,IAAI,GAAG,EAAP;AACD;;AACDA,IAAAA,IAAI,GAAGA,IAAI,IAAI,EAAf;AACA,QAAI0B,QAAQ,GAAG9C,CAAC,CAAC+C,KAAF,EAAf;AACA,QAAIC,YAAY,GAAG,EAAnB;;AACA5B,IAAAA,IAAI,CAACC,QAAL,GAAgB,UAAS4B,QAAT,EAAmBxB,IAAnB,EAAyB;AACvCuB,MAAAA,YAAY,CAACE,IAAb,CAAkBD,QAAlB;;AAEA,UAAI,CAAC/C,CAAC,CAACqB,WAAF,CAAcH,IAAI,CAACU,KAAnB,CAAD,IAA8BkB,YAAY,CAACG,MAAb,KAAwB/B,IAAI,CAACU,KAA/D,EAAsE;AACpEL,QAAAA,IAAI;AACL;AACF,KAND;;AAQAL,IAAAA,IAAI,CAACK,IAAL,GAAY,UAASQ,KAAT,EAAgB;AAC1B,UAAI/B,CAAC,CAACqB,WAAF,CAAcU,KAAd,CAAJ,EAA0B;AACxBa,QAAAA,QAAQ,CAACM,OAAT,CAAiBJ,YAAjB;AACD,OAFD,MAEO;AACLF,QAAAA,QAAQ,CAACO,MAAT,CAAgBpB,KAAhB;AACD;AACF,KAND;;AAQA,QAAI/B,CAAC,CAACoB,UAAF,CAAaD,QAAb,CAAJ,EAA4B;AAC1ByB,MAAAA,QAAQ,CAACV,OAAT,CAAiBkB,OAAjB,CAAyBjC,QAAzB;AACD;;AAED,SAAKF,IAAL,CAAUC,IAAV;AACA,WAAO0B,QAAQ,CAACV,OAAhB;AACD,GA9BD;AAgCA;;AACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE;;;AACAvB,EAAAA,+BAA+B,CAACyB,IAAhC,GAAuC,SAASA,IAAT,CAAclB,IAAd,EAAoBC,QAApB,EAA8B;AACnE,QAAInB,CAAC,CAACoB,UAAF,CAAaF,IAAb,CAAJ,EAAwB;AACtBC,MAAAA,QAAQ,GAAGD,IAAX;AACAA,MAAAA,IAAI,GAAG,EAAP;AACD;;AACDA,IAAAA,IAAI,GAAGA,IAAI,IAAI,EAAf;AAEA,QAAI0B,QAAQ,GAAG9C,CAAC,CAAC+C,KAAF,EAAf;AACA,QAAIQ,IAAI,GAAGhD,MAAM,CAACiD,EAAP,CAAU;AACnB,0BAAoBlD,SAAS,CAACmD,eAAV,CAA0BvD,CAAC,CAACa,GAAF,CAAMK,IAAN,EAAY,kBAAZ,CAA1B,CADD;AAEnB,2BAAqBd,SAAS,CAACmD,eAAV,CAA0BvD,CAAC,CAACa,GAAF,CAAMK,IAAN,EAAY,mBAAZ,CAA1B,CAFF;AAGnB,wBAAkBlB,CAAC,CAACa,GAAF,CAAMK,IAAN,EAAY,gBAAZ,CAHC;AAInB,mBAAaA,IAAI,CAACsC,SAJC;AAKnB,cAAQtC,IAAI,CAACuC,UALM;AAMnB,kBAAYvC,IAAI,CAACW;AANE,KAAV,CAAX;;AASA,QAAIK,OAAO,GAAG,KAAKpB,QAAL,CAAcsB,IAAd,CAAmB;AAACsB,MAAAA,GAAG,EAAE,KAAK1C,IAAX;AAAiB2C,MAAAA,MAAM,EAAE,KAAzB;AAAgCC,MAAAA,MAAM,EAAEP;AAAxC,KAAnB,CAAd;;AAEAnB,IAAAA,OAAO,GAAGA,OAAO,CAACC,IAAR,CAAa,UAAS0B,OAAT,EAAkB;AACvCjB,MAAAA,QAAQ,CAACM,OAAT,CAAiB,IAAI3C,uBAAJ,CAA4B,KAAKO,QAAjC,EAA2C+C,OAA3C,EAAoD,KAAK9C,SAAzD,CAAjB;AACD,KAFsB,CAErBwB,IAFqB,CAEhB,IAFgB,CAAb,CAAV;AAIAL,IAAAA,OAAO,CAACO,KAAR,CAAc,UAASV,KAAT,EAAgB;AAC5Ba,MAAAA,QAAQ,CAACO,MAAT,CAAgBpB,KAAhB;AACD,KAFD;;AAIA,QAAI/B,CAAC,CAACoB,UAAF,CAAaD,QAAb,CAAJ,EAA4B;AAC1ByB,MAAAA,QAAQ,CAACV,OAAT,CAAiBkB,OAAjB,CAAyBjC,QAAzB;AACD;;AAED,WAAOyB,QAAQ,CAACV,OAAhB;AACD,GAhCD;AAkCA;;AACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE;;;AACAvB,EAAAA,+BAA+B,CAACmD,OAAhC,GAA0C,SAASA,OAAT,CAAiBC,SAAjB,EAA4B5C,QAA5B,EACkB;AAC1D,QAAIyB,QAAQ,GAAG9C,CAAC,CAAC+C,KAAF,EAAf;;AAEA,QAAIX,OAAO,GAAG,KAAKpB,QAAL,CAAckD,OAAd,CAAsBC,MAAtB,CAA6BC,OAA7B,CAAqC;AAACP,MAAAA,MAAM,EAAE,KAAT;AAAgBD,MAAAA,GAAG,EAAEK;AAArB,KAArC,CAAd;;AAEA7B,IAAAA,OAAO,GAAGA,OAAO,CAACC,IAAR,CAAa,UAAS0B,OAAT,EAAkB;AACvCjB,MAAAA,QAAQ,CAACM,OAAT,CAAiB,IAAI3C,uBAAJ,CAA4B,KAAKO,QAAjC,EAA2C+C,OAA3C,EAAoD,KAAK9C,SAAzD,CAAjB;AACD,KAFsB,CAErBwB,IAFqB,CAEhB,IAFgB,CAAb,CAAV;AAIAL,IAAAA,OAAO,CAACO,KAAR,CAAc,UAASV,KAAT,EAAgB;AAC5Ba,MAAAA,QAAQ,CAACO,MAAT,CAAgBpB,KAAhB;AACD,KAFD;;AAIA,QAAI/B,CAAC,CAACoB,UAAF,CAAaD,QAAb,CAAJ,EAA4B;AAC1ByB,MAAAA,QAAQ,CAACV,OAAT,CAAiBkB,OAAjB,CAAyBjC,QAAzB;AACD;;AAED,WAAOyB,QAAQ,CAACV,OAAhB;AACD,GAnBD;AAqBA;;AACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE;;;AACAvB,EAAAA,+BAA+B,CAACE,GAAhC,GAAsC,SAASA,GAAT,CAAaD,GAAb,EAAkB;AACtD,WAAO,IAAIH,0BAAJ,CAA+B,KAAKK,QAApC,EAA8CF,GAA9C,CAAP;AACD,GAFD;AAIA;;AACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;AACE;;;AACAD,EAAAA,+BAA+B,CAACwD,MAAhC,GAAyC,SAASA,MAAT,GAAkB;AACzD,WAAO,KAAKpD,SAAZ;AACD,GAFD;;AAIAJ,EAAAA,+BAA+B,CAACV,IAAI,CAACmE,OAAL,CAAaC,MAAd,CAA/B,GAAuD,SAASD,OAAT,CAAiBE,KAAjB,EACnDC,OADmD,EAC1C;AACX,WAAOtE,IAAI,CAACmE,OAAL,CAAa,KAAKD,MAAL,EAAb,EAA4BI,OAA5B,CAAP;AACD,GAHD;;AAKA,SAAO5D,+BAAP;AACD,CA7TD;AAgUA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACAJ,uBAAuB,GAAG,SAASA,uBAAT,CAAiCG,OAAjC,EAA0C8D,QAA1C,EACkCC,QADlC,EAC4C;AACpE;AACA,OAAK1D,SAAL,GAAiB0D,QAAjB;AAEAvE,EAAAA,IAAI,CAACwE,SAAL,CAAeC,WAAf,CAA2BC,IAA3B,CAAgC,IAAhC,EAAsClE,OAAtC,EAA+C8D,QAA/C,EAAyD,KAAKzD,SAA9D;AACD,CAND;;AAQAf,CAAC,CAAC6E,MAAF,CAAStE,uBAAuB,CAACmE,SAAjC,EAA4CxE,IAAI,CAACwE,SAAjD;;AACAnE,uBAAuB,CAACmE,SAAxB,CAAkCC,WAAlC,GAAgDpE,uBAAhD;AAEA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;AACAA,uBAAuB,CAACmE,SAAxB,CAAkCI,WAAlC,GAAgD,SAASA,WAAT,CAAqBjB,OAArB,EAA8B;AAC5E,SAAO,IAAIrD,2BAAJ,CAAgC,KAAKM,QAArC,EAA+C+C,OAA/C,CAAP;AACD,CAFD;AAIA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACAtD,uBAAuB,CAACmE,SAAxB,CAAkCP,MAAlC,GAA2C,SAASA,MAAT,GAAkB;AAC3D,MAAIY,KAAK,GAAG,EAAZ;;AACA/E,EAAAA,CAAC,CAACgF,MAAF,CAAS,IAAT,EAAe,UAASC,KAAT,EAAgBC,GAAhB,EAAqB;AAClC,QAAI,CAAClF,CAAC,CAACmF,UAAF,CAAaD,GAAb,EAAkB,GAAlB,CAAD,IAA2B,CAAElF,CAAC,CAACoB,UAAF,CAAa6D,KAAb,CAAjC,EAAsD;AACpDF,MAAAA,KAAK,CAACG,GAAD,CAAL,GAAaD,KAAb;AACD;AACF,GAJD;;AAKA,SAAOF,KAAP;AACD,CARD;;AAUAxE,uBAAuB,CAACmE,SAAxB,CAAkCzE,IAAI,CAACmE,OAAL,CAAaC,MAA/C,IAAyD,SAASD,OAAT,CAAiBE,KAAjB,EACrDC,OADqD,EAC5C;AACX,SAAOtE,IAAI,CAACmE,OAAL,CAAa,KAAKD,MAAL,EAAb,EAA4BI,OAA5B,CAAP;AACD,CAHD;AAMA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACA/D,2BAA2B,GAAG,SAASA,2BAAT,CAAqCE,OAArC,EAC1BmD,OAD0B,EACjBjD,GADiB,EACZ;AAChB,OAAKE,QAAL,GAAgBJ,OAAhB,CADgB,CAGhB;;AACA,OAAKE,GAAL,GAAWiD,OAAO,CAACjD,GAAnB,CAJgB,CAIQ;;AACxB,OAAKwE,UAAL,GAAkBvB,OAAO,CAACwB,WAA1B,CALgB,CAKuB;;AACvC,OAAKC,UAAL,GAAkBzB,OAAO,CAAC0B,WAA1B,CANgB,CAMuB;;AACvC,OAAKC,WAAL,GAAmBrF,WAAW,CAACoD,eAAZ,CAA4BM,OAAO,CAAC4B,YAApC,CAAnB,CAPgB,CAOsD;;AACtE,OAAKC,WAAL,GAAmBvF,WAAW,CAACoD,eAAZ,CAA4BM,OAAO,CAAC8B,YAApC,CAAnB,CARgB,CAQsD;;AACtE,OAAKC,gBAAL,GAAwB/B,OAAO,CAACgC,iBAAhC,CATgB,CASmC;;AACnD,OAAKC,OAAL,GAAejC,OAAO,CAACiC,OAAvB,CAVgB,CAUgB;;AAChC,OAAKC,WAAL,GAAmBlC,OAAO,CAACmC,YAA3B,CAXgB,CAWyB;;AACzC,OAAKC,GAAL,GAAWpC,OAAO,CAACoC,GAAnB,CAZgB,CAYQ;AAExB;;AACA,OAAKC,QAAL,GAAgBC,SAAhB;AACA,OAAKpF,SAAL,GAAiB;AAACH,IAAAA,GAAG,EAAEA,GAAG,IAAI,KAAKA;AAAlB,GAAjB;AACD,CAlBD;;AAoBAwF,MAAM,CAACC,cAAP,CAAsB7F,2BAA2B,CAACkE,SAAlD,EACE,QADF,EACY;AACR7D,EAAAA,GAAG,EAAE,YAAW;AACd,QAAI,CAAC,KAAKqF,QAAV,EAAoB;AAClB,WAAKA,QAAL,GAAgB,IAAIzF,0BAAJ,CAA+B,KAAKK,QAApC,EAA8C,KAAKC,SAAL,CAAeH,GAA7D,CAAhB;AACD;;AAED,WAAO,KAAKsF,QAAZ;AACD;AAPO,CADZ;AAWA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;AACA1F,2BAA2B,CAACkE,SAA5B,CAAsC4B,KAAtC,GAA8C,SAASA,KAAT,CAAenF,QAAf,EAAyB;AACrE,SAAO,KAAKoF,MAAL,CAAYD,KAAZ,CAAkBnF,QAAlB,CAAP;AACD,CAFD;AAIA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACAX,2BAA2B,CAACkE,SAA5B,CAAsCP,MAAtC,GAA+C,SAASA,MAAT,GAAkB;AAC/D,MAAIY,KAAK,GAAG,EAAZ;;AACA/E,EAAAA,CAAC,CAACgF,MAAF,CAAS,IAAT,EAAe,UAASC,KAAT,EAAgBC,GAAhB,EAAqB;AAClC,QAAI,CAAClF,CAAC,CAACmF,UAAF,CAAaD,GAAb,EAAkB,GAAlB,CAAD,IAA2B,CAAElF,CAAC,CAACoB,UAAF,CAAa6D,KAAb,CAAjC,EAAsD;AACpDF,MAAAA,KAAK,CAACG,GAAD,CAAL,GAAaD,KAAb;AACD;AACF,GAJD;;AAKA,SAAOF,KAAP;AACD,CARD;;AAUAvE,2BAA2B,CAACkE,SAA5B,CAAsCzE,IAAI,CAACmE,OAAL,CAAaC,MAAnD,IAA6D,SACzDD,OADyD,CACjDE,KADiD,EAC1CC,OAD0C,EACjC;AAC1B,SAAOtE,IAAI,CAACmE,OAAL,CAAa,KAAKD,MAAL,EAAb,EAA4BI,OAA5B,CAAP;AACD,CAHD;AAMA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACA9D,0BAA0B,GAAG,SAASA,0BAAT,CAAoCC,OAApC,EAA6CE,GAA7C,EAAkD;AAC7E,OAAKE,QAAL,GAAgBJ,OAAhB,CAD6E,CAG7E;;AACA,OAAKK,SAAL,GAAiB;AAACH,IAAAA,GAAG,EAAEA;AAAN,GAAjB;AACA,OAAKI,IAAL,GAAa,aAAYJ,GAAI,EAA7B;AACD,CAND;AAQA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACAH,0BAA0B,CAACiE,SAA3B,CAAqC4B,KAArC,GAA6C,SAASA,KAAT,CAAenF,QAAf,EAAyB;AACpE,MAAIyB,QAAQ,GAAG9C,CAAC,CAAC+C,KAAF,EAAf;;AACA,MAAIX,OAAO,GAAG,KAAKpB,QAAL,CAAcwF,KAAd,CAAoB;AAAC5C,IAAAA,GAAG,EAAE,KAAK1C,IAAX;AAAiB2C,IAAAA,MAAM,EAAE;AAAzB,GAApB,CAAd;;AAEAzB,EAAAA,OAAO,GAAGA,OAAO,CAACC,IAAR,CAAa,UAAS0B,OAAT,EAAkB;AACvCjB,IAAAA,QAAQ,CAACM,OAAT,CAAiB,IAAI1C,2BAAJ,CAAgC,KAAKM,QAArC,EAA+C+C,OAA/C,EAAwD,KAAK9C,SAAL,CAAeH,GAAvE,CAAjB;AACD,GAFsB,CAErB2B,IAFqB,CAEhB,IAFgB,CAAb,CAAV;AAIAL,EAAAA,OAAO,CAACO,KAAR,CAAc,UAASV,KAAT,EAAgB;AAC5Ba,IAAAA,QAAQ,CAACO,MAAT,CAAgBpB,KAAhB;AACD,GAFD;;AAIA,MAAI/B,CAAC,CAACoB,UAAF,CAAaD,QAAb,CAAJ,EAA4B;AAC1ByB,IAAAA,QAAQ,CAACV,OAAT,CAAiBkB,OAAjB,CAAyBjC,QAAzB;AACD;;AAED,SAAOyB,QAAQ,CAACV,OAAhB;AACD,CAjBD;AAmBA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACAzB,0BAA0B,CAACiE,SAA3B,CAAqCP,MAArC,GAA8C,SAASA,MAAT,GAAkB;AAC9D,SAAO,KAAKpD,SAAZ;AACD,CAFD;;AAIAN,0BAA0B,CAACiE,SAA3B,CAAqCzE,IAAI,CAACmE,OAAL,CAAaC,MAAlD,IAA4D,SACxDD,OADwD,CAChDE,KADgD,EACzCC,OADyC,EAChC;AAC1B,SAAOtE,IAAI,CAACmE,OAAL,CAAa,KAAKD,MAAL,EAAb,EAA4BI,OAA5B,CAAP;AACD,CAHD;;AAKAiC,MAAM,CAACC,OAAP,GAAiB;AACfnG,EAAAA,uBAAuB,EAAEA,uBADV;AAEfC,EAAAA,uBAAuB,EAAEA,uBAFV;AAGfC,EAAAA,2BAA2B,EAAEA,2BAHd;AAIfC,EAAAA,0BAA0B,EAAEA;AAJb,CAAjB","sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar Page = require('../../../base/Page');  /* jshint ignore:line */\nvar deserialize = require(\n    '../../../base/deserialize');  /* jshint ignore:line */\nvar serialize = require('../../../base/serialize');  /* jshint ignore:line */\nvar values = require('../../../base/values');  /* jshint ignore:line */\n\nvar VerificationAttemptList;\nvar VerificationAttemptPage;\nvar VerificationAttemptInstance;\nvar VerificationAttemptContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the VerificationAttemptList\n *\n * @constructor Twilio.Verify.V2.VerificationAttemptList\n *\n * @param {Twilio.Verify.V2} version - Version of the resource\n */\n/* jshint ignore:end */\nVerificationAttemptList = function VerificationAttemptList(version) {\n  /* jshint ignore:start */\n  /**\n   * @function verificationAttempts\n   * @memberof Twilio.Verify.V2#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Verify.V2.VerificationAttemptContext}\n   */\n  /* jshint ignore:end */\n  function VerificationAttemptListInstance(sid) {\n    return VerificationAttemptListInstance.get(sid);\n  }\n\n  VerificationAttemptListInstance._version = version;\n  // Path Solution\n  VerificationAttemptListInstance._solution = {};\n  VerificationAttemptListInstance._uri = `/Attempts`;\n  /* jshint ignore:start */\n  /**\n   * Streams VerificationAttemptInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Verify.V2.VerificationAttemptList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {Date} [opts.dateCreatedAfter] -\n   *          Filter verification attempts after this date\n   * @param {Date} [opts.dateCreatedBefore] -\n   *          Filter verification attempts befor this date\n   * @param {string} [opts.channelData.to] - Destination of a verification\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  VerificationAttemptListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists VerificationAttemptInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Verify.V2.VerificationAttemptList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {Date} [opts.dateCreatedAfter] -\n   *          Filter verification attempts after this date\n   * @param {Date} [opts.dateCreatedBefore] -\n   *          Filter verification attempts befor this date\n   * @param {string} [opts.channelData.to] - Destination of a verification\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  VerificationAttemptListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of VerificationAttemptInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Verify.V2.VerificationAttemptList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {Date} [opts.dateCreatedAfter] -\n   *          Filter verification attempts after this date\n   * @param {Date} [opts.dateCreatedBefore] -\n   *          Filter verification attempts befor this date\n   * @param {string} [opts.channelData.to] - Destination of a verification\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  VerificationAttemptListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'DateCreatedAfter': serialize.iso8601DateTime(_.get(opts, 'dateCreatedAfter')),\n      'DateCreatedBefore': serialize.iso8601DateTime(_.get(opts, 'dateCreatedBefore')),\n      'ChannelData.To': _.get(opts, 'channelData.to'),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new VerificationAttemptPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of VerificationAttemptInstance records from the\n   * API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Verify.V2.VerificationAttemptList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  VerificationAttemptListInstance.getPage = function getPage(targetUrl, callback)\n                                                              {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new VerificationAttemptPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a verification_attempt\n   *\n   * @function get\n   * @memberof Twilio.Verify.V2.VerificationAttemptList#\n   *\n   * @param {string} sid - Verification Attempt Sid.\n   *\n   * @returns {Twilio.Verify.V2.VerificationAttemptContext}\n   */\n  /* jshint ignore:end */\n  VerificationAttemptListInstance.get = function get(sid) {\n    return new VerificationAttemptContext(this._version, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Verify.V2.VerificationAttemptList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  VerificationAttemptListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  VerificationAttemptListInstance[util.inspect.custom] = function inspect(depth,\n      options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return VerificationAttemptListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the VerificationAttemptPage\n *\n * @constructor Twilio.Verify.V2.VerificationAttemptPage\n *\n * @param {V2} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {VerificationAttemptSolution} solution - Path solution\n *\n * @returns VerificationAttemptPage\n */\n/* jshint ignore:end */\nVerificationAttemptPage = function VerificationAttemptPage(version, response,\n                                                            solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(VerificationAttemptPage.prototype, Page.prototype);\nVerificationAttemptPage.prototype.constructor = VerificationAttemptPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of VerificationAttemptInstance\n *\n * @function getInstance\n * @memberof Twilio.Verify.V2.VerificationAttemptPage#\n *\n * @param {VerificationAttemptPayload} payload - Payload response from the API\n *\n * @returns VerificationAttemptInstance\n */\n/* jshint ignore:end */\nVerificationAttemptPage.prototype.getInstance = function getInstance(payload) {\n  return new VerificationAttemptInstance(this._version, payload);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Verify.V2.VerificationAttemptPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nVerificationAttemptPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nVerificationAttemptPage.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the VerificationAttemptContext\n *\n * @constructor Twilio.Verify.V2.VerificationAttemptInstance\n *\n * @property {string} sid -\n *          A string that uniquely identifies this Verification Attempt\n * @property {string} accountSid - Account Sid\n * @property {string} serviceSid - The service_sid\n * @property {Date} dateCreated - The date this Attempt was created\n * @property {Date} dateUpdated - The date this Attempt was updated\n * @property {verification_attempt.conversion_status} conversionStatus -\n *          Status of a conversion\n * @property {verification_attempt.channels} channel - Channel used for the attempt\n * @property {object} channelData -\n *          Object with the channel information for an attempt\n * @property {string} url - The url\n *\n * @param {V2} version - Version of the resource\n * @param {VerificationAttemptPayload} payload - The instance payload\n * @param {sid} sid - Verification Attempt Sid.\n */\n/* jshint ignore:end */\nVerificationAttemptInstance = function VerificationAttemptInstance(version,\n    payload, sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.sid = payload.sid; // jshint ignore:line\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.serviceSid = payload.service_sid; // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n  this.conversionStatus = payload.conversion_status; // jshint ignore:line\n  this.channel = payload.channel; // jshint ignore:line\n  this.channelData = payload.channel_data; // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {sid: sid || this.sid, };\n};\n\nObject.defineProperty(VerificationAttemptInstance.prototype,\n  '_proxy', {\n    get: function() {\n      if (!this._context) {\n        this._context = new VerificationAttemptContext(this._version, this._solution.sid);\n      }\n\n      return this._context;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a VerificationAttemptInstance\n *\n * @function fetch\n * @memberof Twilio.Verify.V2.VerificationAttemptInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed VerificationAttemptInstance\n */\n/* jshint ignore:end */\nVerificationAttemptInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Verify.V2.VerificationAttemptInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nVerificationAttemptInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nVerificationAttemptInstance.prototype[util.inspect.custom] = function\n    inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the VerificationAttemptContext\n *\n * @constructor Twilio.Verify.V2.VerificationAttemptContext\n *\n * @param {V2} version - Version of the resource\n * @param {sid} sid - Verification Attempt Sid.\n */\n/* jshint ignore:end */\nVerificationAttemptContext = function VerificationAttemptContext(version, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {sid: sid, };\n  this._uri = `/Attempts/${sid}`;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a VerificationAttemptInstance\n *\n * @function fetch\n * @memberof Twilio.Verify.V2.VerificationAttemptContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed VerificationAttemptInstance\n */\n/* jshint ignore:end */\nVerificationAttemptContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({uri: this._uri, method: 'GET'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new VerificationAttemptInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Verify.V2.VerificationAttemptContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nVerificationAttemptContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nVerificationAttemptContext.prototype[util.inspect.custom] = function\n    inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  VerificationAttemptList: VerificationAttemptList,\n  VerificationAttemptPage: VerificationAttemptPage,\n  VerificationAttemptInstance: VerificationAttemptInstance,\n  VerificationAttemptContext: VerificationAttemptContext\n};\n"]},"metadata":{},"sourceType":"module"}