{"ast":null,"code":"'use strict';\n/* jshint ignore:start */\n\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n\n/* jshint ignore:end */\n\nvar Q = require('q');\n/* jshint ignore:line */\n\n\nvar _ = require('lodash');\n/* jshint ignore:line */\n\n\nvar util = require('util');\n/* jshint ignore:line */\n\n\nvar ExecutionContextList = require('./execution/executionContext').ExecutionContextList;\n\nvar ExecutionStepList = require('./execution/executionStep').ExecutionStepList;\n\nvar Page = require('../../../../base/Page');\n/* jshint ignore:line */\n\n\nvar deserialize = require('../../../../base/deserialize');\n/* jshint ignore:line */\n\n\nvar serialize = require('../../../../base/serialize');\n/* jshint ignore:line */\n\n\nvar values = require('../../../../base/values');\n/* jshint ignore:line */\n\n\nvar ExecutionList;\nvar ExecutionPage;\nvar ExecutionInstance;\nvar ExecutionContext;\n/* jshint ignore:start */\n\n/**\n * Initialize the ExecutionList\n *\n * @constructor Twilio.Studio.V1.FlowContext.ExecutionList\n *\n * @param {Twilio.Studio.V1} version - Version of the resource\n * @param {string} flowSid - The SID of the Flow\n */\n\n/* jshint ignore:end */\n\nExecutionList = function ExecutionList(version, flowSid) {\n  /* jshint ignore:start */\n\n  /**\n   * @function executions\n   * @memberof Twilio.Studio.V1.FlowContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Studio.V1.FlowContext.ExecutionContext}\n   */\n\n  /* jshint ignore:end */\n  function ExecutionListInstance(sid) {\n    return ExecutionListInstance.get(sid);\n  }\n\n  ExecutionListInstance._version = version; // Path Solution\n\n  ExecutionListInstance._solution = {\n    flowSid: flowSid\n  };\n  ExecutionListInstance._uri = `/Flows/${flowSid}/Executions`;\n  /* jshint ignore:start */\n\n  /**\n   * Streams ExecutionInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Studio.V1.FlowContext.ExecutionList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {Date} [opts.dateCreatedFrom] -\n   *          Only show Executions that started on or after this ISO 8601 date-time\n   * @param {Date} [opts.dateCreatedTo] -\n   *          Only show Executions that started before this ISO 8601 date-time\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n\n  /* jshint ignore:end */\n\n  ExecutionListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Lists ExecutionInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Studio.V1.FlowContext.ExecutionList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {Date} [opts.dateCreatedFrom] -\n   *          Only show Executions that started on or after this ISO 8601 date-time\n   * @param {Date} [opts.dateCreatedTo] -\n   *          Only show Executions that started before this ISO 8601 date-time\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  ExecutionListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single page of ExecutionInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Studio.V1.FlowContext.ExecutionList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {Date} [opts.dateCreatedFrom] -\n   *          Only show Executions that started on or after this ISO 8601 date-time\n   * @param {Date} [opts.dateCreatedTo] -\n   *          Only show Executions that started before this ISO 8601 date-time\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  ExecutionListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'DateCreatedFrom': serialize.iso8601DateTime(_.get(opts, 'dateCreatedFrom')),\n      'DateCreatedTo': serialize.iso8601DateTime(_.get(opts, 'dateCreatedTo')),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new ExecutionPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single target page of ExecutionInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Studio.V1.FlowContext.ExecutionList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  ExecutionListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new ExecutionPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * create a ExecutionInstance\n   *\n   * @function create\n   * @memberof Twilio.Studio.V1.FlowContext.ExecutionList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.to -\n   *          The Contact phone number to start a Studio Flow Execution\n   * @param {string} opts.from -\n   *          The Twilio phone number or Messaging Service SID to send messages or initiate calls from during the Flow Execution\n   * @param {object} [opts.parameters] -\n   *          JSON data that will be added to the Flow's context\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed ExecutionInstance\n   */\n\n  /* jshint ignore:end */\n\n\n  ExecutionListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n\n    if (_.isUndefined(opts.to)) {\n      throw new Error('Required parameter \"opts.to\" missing.');\n    }\n\n    if (_.isUndefined(opts.from)) {\n      throw new Error('Required parameter \"opts.from\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'To': _.get(opts, 'to'),\n      'From': _.get(opts, 'from'),\n      'Parameters': serialize.object(_.get(opts, 'parameters'))\n    });\n\n    var promise = this._version.create({\n      uri: this._uri,\n      method: 'POST',\n      data: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new ExecutionInstance(this._version, payload, this._solution.flowSid, this._solution.sid));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Constructs a execution\n   *\n   * @function get\n   * @memberof Twilio.Studio.V1.FlowContext.ExecutionList#\n   *\n   * @param {string} sid - The SID of the Execution resource to fetch\n   *\n   * @returns {Twilio.Studio.V1.FlowContext.ExecutionContext}\n   */\n\n  /* jshint ignore:end */\n\n\n  ExecutionListInstance.get = function get(sid) {\n    return new ExecutionContext(this._version, this._solution.flowSid, sid);\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Studio.V1.FlowContext.ExecutionList#\n   *\n   * @returns Object\n   */\n\n  /* jshint ignore:end */\n\n\n  ExecutionListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  ExecutionListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return ExecutionListInstance;\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the ExecutionPage\n *\n * @constructor Twilio.Studio.V1.FlowContext.ExecutionPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {ExecutionSolution} solution - Path solution\n *\n * @returns ExecutionPage\n */\n\n/* jshint ignore:end */\n\n\nExecutionPage = function ExecutionPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(ExecutionPage.prototype, Page.prototype);\n\nExecutionPage.prototype.constructor = ExecutionPage;\n/* jshint ignore:start */\n\n/**\n * Build an instance of ExecutionInstance\n *\n * @function getInstance\n * @memberof Twilio.Studio.V1.FlowContext.ExecutionPage#\n *\n * @param {ExecutionPayload} payload - Payload response from the API\n *\n * @returns ExecutionInstance\n */\n\n/* jshint ignore:end */\n\nExecutionPage.prototype.getInstance = function getInstance(payload) {\n  return new ExecutionInstance(this._version, payload, this._solution.flowSid);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Studio.V1.FlowContext.ExecutionPage#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nExecutionPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nExecutionPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the ExecutionContext\n *\n * @constructor Twilio.Studio.V1.FlowContext.ExecutionInstance\n *\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {string} flowSid - The SID of the Flow\n * @property {string} contactSid - The SID of the Contact\n * @property {string} contactChannelAddress -\n *          The phone number, SIP address or Client identifier that triggered the Execution\n * @property {object} context - The current state of the flow\n * @property {execution.status} status - The status of the Execution\n * @property {Date} dateCreated -\n *          The ISO 8601 date and time in GMT when the resource was created\n * @property {Date} dateUpdated -\n *          The ISO 8601 date and time in GMT when the resource was last updated\n * @property {string} url - The absolute URL of the resource\n * @property {string} links - Nested resource URLs\n *\n * @param {V1} version - Version of the resource\n * @param {ExecutionPayload} payload - The instance payload\n * @param {sid} flowSid - The SID of the Flow\n * @param {sid} sid - The SID of the Execution resource to fetch\n */\n\n/* jshint ignore:end */\n\n\nExecutionInstance = function ExecutionInstance(version, payload, flowSid, sid) {\n  this._version = version; // Marshaled Properties\n\n  this.sid = payload.sid; // jshint ignore:line\n\n  this.accountSid = payload.account_sid; // jshint ignore:line\n\n  this.flowSid = payload.flow_sid; // jshint ignore:line\n\n  this.contactSid = payload.contact_sid; // jshint ignore:line\n\n  this.contactChannelAddress = payload.contact_channel_address; // jshint ignore:line\n\n  this.context = payload.context; // jshint ignore:line\n\n  this.status = payload.status; // jshint ignore:line\n\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n\n  this.url = payload.url; // jshint ignore:line\n\n  this.links = payload.links; // jshint ignore:line\n  // Context\n\n  this._context = undefined;\n  this._solution = {\n    flowSid: flowSid,\n    sid: sid || this.sid\n  };\n};\n\nObject.defineProperty(ExecutionInstance.prototype, '_proxy', {\n  get: function () {\n    if (!this._context) {\n      this._context = new ExecutionContext(this._version, this._solution.flowSid, this._solution.sid);\n    }\n\n    return this._context;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * fetch a ExecutionInstance\n *\n * @function fetch\n * @memberof Twilio.Studio.V1.FlowContext.ExecutionInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ExecutionInstance\n */\n\n/* jshint ignore:end */\n\nExecutionInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n/* jshint ignore:start */\n\n/**\n * remove a ExecutionInstance\n *\n * @function remove\n * @memberof Twilio.Studio.V1.FlowContext.ExecutionInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ExecutionInstance\n */\n\n/* jshint ignore:end */\n\n\nExecutionInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n/* jshint ignore:start */\n\n/**\n * update a ExecutionInstance\n *\n * @function update\n * @memberof Twilio.Studio.V1.FlowContext.ExecutionInstance#\n *\n * @param {object} opts - Options for request\n * @param {execution.status} opts.status - The status of the Execution\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ExecutionInstance\n */\n\n/* jshint ignore:end */\n\n\nExecutionInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n/* jshint ignore:start */\n\n/**\n * Access the steps\n *\n * @function steps\n * @memberof Twilio.Studio.V1.FlowContext.ExecutionInstance#\n *\n * @returns {Twilio.Studio.V1.FlowContext.ExecutionContext.ExecutionStepList}\n */\n\n/* jshint ignore:end */\n\n\nExecutionInstance.prototype.steps = function steps() {\n  return this._proxy.steps;\n};\n/* jshint ignore:start */\n\n/**\n * Access the executionContext\n *\n * @function executionContext\n * @memberof Twilio.Studio.V1.FlowContext.ExecutionInstance#\n *\n * @returns {Twilio.Studio.V1.FlowContext.ExecutionContext.ExecutionContextList}\n */\n\n/* jshint ignore:end */\n\n\nExecutionInstance.prototype.executionContext = function executionContext() {\n  return this._proxy.executionContext;\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Studio.V1.FlowContext.ExecutionInstance#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nExecutionInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nExecutionInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the ExecutionContext\n *\n * @constructor Twilio.Studio.V1.FlowContext.ExecutionContext\n *\n * @property {Twilio.Studio.V1.FlowContext.ExecutionContext.ExecutionStepList} steps -\n *          steps resource\n * @property {Twilio.Studio.V1.FlowContext.ExecutionContext.ExecutionContextList} executionContext -\n *          executionContext resource\n *\n * @param {V1} version - Version of the resource\n * @param {sid} flowSid - The SID of the Flow\n * @param {sid} sid - The SID of the Execution resource to fetch\n */\n\n/* jshint ignore:end */\n\n\nExecutionContext = function ExecutionContext(version, flowSid, sid) {\n  this._version = version; // Path Solution\n\n  this._solution = {\n    flowSid: flowSid,\n    sid: sid\n  };\n  this._uri = `/Flows/${flowSid}/Executions/${sid}`; // Dependents\n\n  this._steps = undefined;\n  this._executionContext = undefined;\n};\n/* jshint ignore:start */\n\n/**\n * fetch a ExecutionInstance\n *\n * @function fetch\n * @memberof Twilio.Studio.V1.FlowContext.ExecutionContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ExecutionInstance\n */\n\n/* jshint ignore:end */\n\n\nExecutionContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new ExecutionInstance(this._version, payload, this._solution.flowSid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * remove a ExecutionInstance\n *\n * @function remove\n * @memberof Twilio.Studio.V1.FlowContext.ExecutionContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ExecutionInstance\n */\n\n/* jshint ignore:end */\n\n\nExecutionContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.remove({\n    uri: this._uri,\n    method: 'DELETE'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * update a ExecutionInstance\n *\n * @function update\n * @memberof Twilio.Studio.V1.FlowContext.ExecutionContext#\n *\n * @param {object} opts - Options for request\n * @param {execution.status} opts.status - The status of the Execution\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ExecutionInstance\n */\n\n/* jshint ignore:end */\n\n\nExecutionContext.prototype.update = function update(opts, callback) {\n  if (_.isUndefined(opts)) {\n    throw new Error('Required parameter \"opts\" missing.');\n  }\n\n  if (_.isUndefined(opts.status)) {\n    throw new Error('Required parameter \"opts.status\" missing.');\n  }\n\n  var deferred = Q.defer();\n  var data = values.of({\n    'Status': _.get(opts, 'status')\n  });\n\n  var promise = this._version.update({\n    uri: this._uri,\n    method: 'POST',\n    data: data\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new ExecutionInstance(this._version, payload, this._solution.flowSid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\nObject.defineProperty(ExecutionContext.prototype, 'steps', {\n  get: function () {\n    if (!this._steps) {\n      this._steps = new ExecutionStepList(this._version, this._solution.flowSid, this._solution.sid);\n    }\n\n    return this._steps;\n  }\n});\nObject.defineProperty(ExecutionContext.prototype, 'executionContext', {\n  get: function () {\n    if (!this._executionContext) {\n      this._executionContext = new ExecutionContextList(this._version, this._solution.flowSid, this._solution.sid);\n    }\n\n    return this._executionContext;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Studio.V1.FlowContext.ExecutionContext#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\nExecutionContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nExecutionContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  ExecutionList: ExecutionList,\n  ExecutionPage: ExecutionPage,\n  ExecutionInstance: ExecutionInstance,\n  ExecutionContext: ExecutionContext\n};","map":{"version":3,"sources":["/Users/tony_niu/Visual Studio/Twilio/twilio-video-starter-kit/node_modules/twilio/lib/rest/studio/v1/flow/execution.js"],"names":["Q","require","_","util","ExecutionContextList","ExecutionStepList","Page","deserialize","serialize","values","ExecutionList","ExecutionPage","ExecutionInstance","ExecutionContext","version","flowSid","ExecutionListInstance","sid","get","_version","_solution","_uri","each","opts","callback","isFunction","isUndefined","Error","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","error","fetchNextPage","fn","promise","then","page","instances","instance","bind","nextPage","catch","merge","list","deferred","defer","allResources","resource","push","length","resolve","reject","nodeify","data","of","iso8601DateTime","pageToken","pageNumber","uri","method","params","payload","getPage","targetUrl","_domain","twilio","request","create","to","from","object","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","accountSid","account_sid","flow_sid","contactSid","contact_sid","contactChannelAddress","contact_channel_address","context","status","dateCreated","date_created","dateUpdated","date_updated","url","links","_context","undefined","Object","defineProperty","fetch","_proxy","remove","update","steps","executionContext","_steps","_executionContext","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar ExecutionContextList = require(\n    './execution/executionContext').ExecutionContextList;\nvar ExecutionStepList = require('./execution/executionStep').ExecutionStepList;\nvar Page = require('../../../../base/Page');  /* jshint ignore:line */\nvar deserialize = require(\n    '../../../../base/deserialize');  /* jshint ignore:line */\nvar serialize = require('../../../../base/serialize');  /* jshint ignore:line */\nvar values = require('../../../../base/values');  /* jshint ignore:line */\n\nvar ExecutionList;\nvar ExecutionPage;\nvar ExecutionInstance;\nvar ExecutionContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the ExecutionList\n *\n * @constructor Twilio.Studio.V1.FlowContext.ExecutionList\n *\n * @param {Twilio.Studio.V1} version - Version of the resource\n * @param {string} flowSid - The SID of the Flow\n */\n/* jshint ignore:end */\nExecutionList = function ExecutionList(version, flowSid) {\n  /* jshint ignore:start */\n  /**\n   * @function executions\n   * @memberof Twilio.Studio.V1.FlowContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Studio.V1.FlowContext.ExecutionContext}\n   */\n  /* jshint ignore:end */\n  function ExecutionListInstance(sid) {\n    return ExecutionListInstance.get(sid);\n  }\n\n  ExecutionListInstance._version = version;\n  // Path Solution\n  ExecutionListInstance._solution = {flowSid: flowSid};\n  ExecutionListInstance._uri = `/Flows/${flowSid}/Executions`;\n  /* jshint ignore:start */\n  /**\n   * Streams ExecutionInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Studio.V1.FlowContext.ExecutionList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {Date} [opts.dateCreatedFrom] -\n   *          Only show Executions that started on or after this ISO 8601 date-time\n   * @param {Date} [opts.dateCreatedTo] -\n   *          Only show Executions that started before this ISO 8601 date-time\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  ExecutionListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists ExecutionInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Studio.V1.FlowContext.ExecutionList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {Date} [opts.dateCreatedFrom] -\n   *          Only show Executions that started on or after this ISO 8601 date-time\n   * @param {Date} [opts.dateCreatedTo] -\n   *          Only show Executions that started before this ISO 8601 date-time\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  ExecutionListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of ExecutionInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Studio.V1.FlowContext.ExecutionList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {Date} [opts.dateCreatedFrom] -\n   *          Only show Executions that started on or after this ISO 8601 date-time\n   * @param {Date} [opts.dateCreatedTo] -\n   *          Only show Executions that started before this ISO 8601 date-time\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  ExecutionListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'DateCreatedFrom': serialize.iso8601DateTime(_.get(opts, 'dateCreatedFrom')),\n      'DateCreatedTo': serialize.iso8601DateTime(_.get(opts, 'dateCreatedTo')),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new ExecutionPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of ExecutionInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Studio.V1.FlowContext.ExecutionList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  ExecutionListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new ExecutionPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * create a ExecutionInstance\n   *\n   * @function create\n   * @memberof Twilio.Studio.V1.FlowContext.ExecutionList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.to -\n   *          The Contact phone number to start a Studio Flow Execution\n   * @param {string} opts.from -\n   *          The Twilio phone number or Messaging Service SID to send messages or initiate calls from during the Flow Execution\n   * @param {object} [opts.parameters] -\n   *          JSON data that will be added to the Flow's context\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed ExecutionInstance\n   */\n  /* jshint ignore:end */\n  ExecutionListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n    if (_.isUndefined(opts.to)) {\n      throw new Error('Required parameter \"opts.to\" missing.');\n    }\n    if (_.isUndefined(opts.from)) {\n      throw new Error('Required parameter \"opts.from\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'To': _.get(opts, 'to'),\n      'From': _.get(opts, 'from'),\n      'Parameters': serialize.object(_.get(opts, 'parameters'))\n    });\n\n    var promise = this._version.create({uri: this._uri, method: 'POST', data: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new ExecutionInstance(\n        this._version,\n        payload,\n        this._solution.flowSid,\n        this._solution.sid\n      ));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a execution\n   *\n   * @function get\n   * @memberof Twilio.Studio.V1.FlowContext.ExecutionList#\n   *\n   * @param {string} sid - The SID of the Execution resource to fetch\n   *\n   * @returns {Twilio.Studio.V1.FlowContext.ExecutionContext}\n   */\n  /* jshint ignore:end */\n  ExecutionListInstance.get = function get(sid) {\n    return new ExecutionContext(this._version, this._solution.flowSid, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Studio.V1.FlowContext.ExecutionList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  ExecutionListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  ExecutionListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return ExecutionListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the ExecutionPage\n *\n * @constructor Twilio.Studio.V1.FlowContext.ExecutionPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {ExecutionSolution} solution - Path solution\n *\n * @returns ExecutionPage\n */\n/* jshint ignore:end */\nExecutionPage = function ExecutionPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(ExecutionPage.prototype, Page.prototype);\nExecutionPage.prototype.constructor = ExecutionPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of ExecutionInstance\n *\n * @function getInstance\n * @memberof Twilio.Studio.V1.FlowContext.ExecutionPage#\n *\n * @param {ExecutionPayload} payload - Payload response from the API\n *\n * @returns ExecutionInstance\n */\n/* jshint ignore:end */\nExecutionPage.prototype.getInstance = function getInstance(payload) {\n  return new ExecutionInstance(this._version, payload, this._solution.flowSid);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Studio.V1.FlowContext.ExecutionPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nExecutionPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nExecutionPage.prototype[util.inspect.custom] = function inspect(depth, options)\n    {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the ExecutionContext\n *\n * @constructor Twilio.Studio.V1.FlowContext.ExecutionInstance\n *\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {string} flowSid - The SID of the Flow\n * @property {string} contactSid - The SID of the Contact\n * @property {string} contactChannelAddress -\n *          The phone number, SIP address or Client identifier that triggered the Execution\n * @property {object} context - The current state of the flow\n * @property {execution.status} status - The status of the Execution\n * @property {Date} dateCreated -\n *          The ISO 8601 date and time in GMT when the resource was created\n * @property {Date} dateUpdated -\n *          The ISO 8601 date and time in GMT when the resource was last updated\n * @property {string} url - The absolute URL of the resource\n * @property {string} links - Nested resource URLs\n *\n * @param {V1} version - Version of the resource\n * @param {ExecutionPayload} payload - The instance payload\n * @param {sid} flowSid - The SID of the Flow\n * @param {sid} sid - The SID of the Execution resource to fetch\n */\n/* jshint ignore:end */\nExecutionInstance = function ExecutionInstance(version, payload, flowSid, sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.sid = payload.sid; // jshint ignore:line\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.flowSid = payload.flow_sid; // jshint ignore:line\n  this.contactSid = payload.contact_sid; // jshint ignore:line\n  this.contactChannelAddress = payload.contact_channel_address; // jshint ignore:line\n  this.context = payload.context; // jshint ignore:line\n  this.status = payload.status; // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n  this.links = payload.links; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {flowSid: flowSid, sid: sid || this.sid, };\n};\n\nObject.defineProperty(ExecutionInstance.prototype,\n  '_proxy', {\n    get: function() {\n      if (!this._context) {\n        this._context = new ExecutionContext(this._version, this._solution.flowSid, this._solution.sid);\n      }\n\n      return this._context;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a ExecutionInstance\n *\n * @function fetch\n * @memberof Twilio.Studio.V1.FlowContext.ExecutionInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ExecutionInstance\n */\n/* jshint ignore:end */\nExecutionInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * remove a ExecutionInstance\n *\n * @function remove\n * @memberof Twilio.Studio.V1.FlowContext.ExecutionInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ExecutionInstance\n */\n/* jshint ignore:end */\nExecutionInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n\n/* jshint ignore:start */\n/**\n * update a ExecutionInstance\n *\n * @function update\n * @memberof Twilio.Studio.V1.FlowContext.ExecutionInstance#\n *\n * @param {object} opts - Options for request\n * @param {execution.status} opts.status - The status of the Execution\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ExecutionInstance\n */\n/* jshint ignore:end */\nExecutionInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * Access the steps\n *\n * @function steps\n * @memberof Twilio.Studio.V1.FlowContext.ExecutionInstance#\n *\n * @returns {Twilio.Studio.V1.FlowContext.ExecutionContext.ExecutionStepList}\n */\n/* jshint ignore:end */\nExecutionInstance.prototype.steps = function steps() {\n  return this._proxy.steps;\n};\n\n/* jshint ignore:start */\n/**\n * Access the executionContext\n *\n * @function executionContext\n * @memberof Twilio.Studio.V1.FlowContext.ExecutionInstance#\n *\n * @returns {Twilio.Studio.V1.FlowContext.ExecutionContext.ExecutionContextList}\n */\n/* jshint ignore:end */\nExecutionInstance.prototype.executionContext = function executionContext() {\n  return this._proxy.executionContext;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Studio.V1.FlowContext.ExecutionInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nExecutionInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nExecutionInstance.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the ExecutionContext\n *\n * @constructor Twilio.Studio.V1.FlowContext.ExecutionContext\n *\n * @property {Twilio.Studio.V1.FlowContext.ExecutionContext.ExecutionStepList} steps -\n *          steps resource\n * @property {Twilio.Studio.V1.FlowContext.ExecutionContext.ExecutionContextList} executionContext -\n *          executionContext resource\n *\n * @param {V1} version - Version of the resource\n * @param {sid} flowSid - The SID of the Flow\n * @param {sid} sid - The SID of the Execution resource to fetch\n */\n/* jshint ignore:end */\nExecutionContext = function ExecutionContext(version, flowSid, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {flowSid: flowSid, sid: sid, };\n  this._uri = `/Flows/${flowSid}/Executions/${sid}`;\n\n  // Dependents\n  this._steps = undefined;\n  this._executionContext = undefined;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a ExecutionInstance\n *\n * @function fetch\n * @memberof Twilio.Studio.V1.FlowContext.ExecutionContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ExecutionInstance\n */\n/* jshint ignore:end */\nExecutionContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({uri: this._uri, method: 'GET'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new ExecutionInstance(\n      this._version,\n      payload,\n      this._solution.flowSid,\n      this._solution.sid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * remove a ExecutionInstance\n *\n * @function remove\n * @memberof Twilio.Studio.V1.FlowContext.ExecutionContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ExecutionInstance\n */\n/* jshint ignore:end */\nExecutionContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.remove({uri: this._uri, method: 'DELETE'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * update a ExecutionInstance\n *\n * @function update\n * @memberof Twilio.Studio.V1.FlowContext.ExecutionContext#\n *\n * @param {object} opts - Options for request\n * @param {execution.status} opts.status - The status of the Execution\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ExecutionInstance\n */\n/* jshint ignore:end */\nExecutionContext.prototype.update = function update(opts, callback) {\n  if (_.isUndefined(opts)) {\n    throw new Error('Required parameter \"opts\" missing.');\n  }\n  if (_.isUndefined(opts.status)) {\n    throw new Error('Required parameter \"opts.status\" missing.');\n  }\n\n  var deferred = Q.defer();\n  var data = values.of({'Status': _.get(opts, 'status')});\n\n  var promise = this._version.update({uri: this._uri, method: 'POST', data: data});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new ExecutionInstance(\n      this._version,\n      payload,\n      this._solution.flowSid,\n      this._solution.sid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\nObject.defineProperty(ExecutionContext.prototype,\n  'steps', {\n    get: function() {\n      if (!this._steps) {\n        this._steps = new ExecutionStepList(this._version, this._solution.flowSid, this._solution.sid);\n      }\n      return this._steps;\n    }\n});\n\nObject.defineProperty(ExecutionContext.prototype,\n  'executionContext', {\n    get: function() {\n      if (!this._executionContext) {\n        this._executionContext = new ExecutionContextList(\n          this._version,\n          this._solution.flowSid,\n          this._solution.sid\n        );\n      }\n      return this._executionContext;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Studio.V1.FlowContext.ExecutionContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nExecutionContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nExecutionContext.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  ExecutionList: ExecutionList,\n  ExecutionPage: ExecutionPage,\n  ExecutionInstance: ExecutionInstance,\n  ExecutionContext: ExecutionContext\n};\n"]},"metadata":{},"sourceType":"script"}