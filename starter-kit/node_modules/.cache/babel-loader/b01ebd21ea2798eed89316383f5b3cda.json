{"ast":null,"code":"'use strict';\n/* jshint ignore:start */\n\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n\n/* jshint ignore:end */\n\nvar Q = require('q');\n/* jshint ignore:line */\n\n\nvar _ = require('lodash');\n/* jshint ignore:line */\n\n\nvar util = require('util');\n/* jshint ignore:line */\n\n\nvar Page = require('../../../../../base/Page');\n/* jshint ignore:line */\n\n\nvar deserialize = require('../../../../../base/deserialize');\n/* jshint ignore:line */\n\n\nvar serialize = require('../../../../../base/serialize');\n/* jshint ignore:line */\n\n\nvar values = require('../../../../../base/values');\n/* jshint ignore:line */\n\n\nvar TollFreeList;\nvar TollFreePage;\nvar TollFreeInstance;\n/* jshint ignore:start */\n\n/**\n * Initialize the TollFreeList\n *\n * @constructor Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext.TollFreeList\n *\n * @param {Twilio.Api.V2010} version - Version of the resource\n * @param {string} accountSid - The account_sid\n * @param {string} countryCode - The ISO-3166-1 country code of the country.\n */\n\n/* jshint ignore:end */\n\nTollFreeList = function TollFreeList(version, accountSid, countryCode) {\n  /* jshint ignore:start */\n\n  /**\n   * @function tollFree\n   * @memberof Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext.TollFreeContext}\n   */\n\n  /* jshint ignore:end */\n  function TollFreeListInstance(sid) {\n    return TollFreeListInstance.get(sid);\n  }\n\n  TollFreeListInstance._version = version; // Path Solution\n\n  TollFreeListInstance._solution = {\n    accountSid: accountSid,\n    countryCode: countryCode\n  };\n  TollFreeListInstance._uri = `/Accounts/${accountSid}/AvailablePhoneNumbers/${countryCode}/TollFree.json`;\n  /* jshint ignore:start */\n\n  /**\n   * Streams TollFreeInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext.TollFreeList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.areaCode] - The area code of the phone numbers to read\n   * @param {string} [opts.contains] - The pattern on which to match phone numbers\n   * @param {boolean} [opts.smsEnabled] -\n   *          Whether the phone numbers can receive text messages\n   * @param {boolean} [opts.mmsEnabled] -\n   *          Whether the phone numbers can receive MMS messages\n   * @param {boolean} [opts.voiceEnabled] -\n   *          Whether the phone numbers can receive calls.\n   * @param {boolean} [opts.excludeAllAddressRequired] -\n   *          Whether to exclude phone numbers that require an Address\n   * @param {boolean} [opts.excludeLocalAddressRequired] -\n   *          Whether to exclude phone numbers that require a local address\n   * @param {boolean} [opts.excludeForeignAddressRequired] -\n   *          Whether to exclude phone numbers that require a foreign address\n   * @param {boolean} [opts.beta] -\n   *          Whether to read phone numbers new to the Twilio platform\n   * @param {string} [opts.nearNumber] -\n   *          Given a phone number, find a geographically close number within distance miles. (US/Canada only)\n   * @param {string} [opts.nearLatLong] -\n   *          Given a latitude/longitude pair lat,long find geographically close numbers within distance miles. (US/Canada only)\n   * @param {number} [opts.distance] -\n   *          The search radius, in miles, for a near_ query. (US/Canada only)\n   * @param {string} [opts.inPostalCode] -\n   *          Limit results to a particular postal code. (US/Canada only)\n   * @param {string} [opts.inRegion] -\n   *          Limit results to a particular region. (US/Canada only)\n   * @param {string} [opts.inRateCenter] -\n   *          Limit results to a specific rate center, or given a phone number search within the same rate center as that number. (US/Canada only)\n   * @param {string} [opts.inLata] -\n   *          Limit results to a specific local access and transport area. (US/Canada only)\n   * @param {string} [opts.inLocality] - Limit results to a particular locality\n   * @param {boolean} [opts.faxEnabled] - Whether the phone numbers can receive faxes\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n\n  /* jshint ignore:end */\n\n  TollFreeListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Lists TollFreeInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext.TollFreeList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.areaCode] - The area code of the phone numbers to read\n   * @param {string} [opts.contains] - The pattern on which to match phone numbers\n   * @param {boolean} [opts.smsEnabled] -\n   *          Whether the phone numbers can receive text messages\n   * @param {boolean} [opts.mmsEnabled] -\n   *          Whether the phone numbers can receive MMS messages\n   * @param {boolean} [opts.voiceEnabled] -\n   *          Whether the phone numbers can receive calls.\n   * @param {boolean} [opts.excludeAllAddressRequired] -\n   *          Whether to exclude phone numbers that require an Address\n   * @param {boolean} [opts.excludeLocalAddressRequired] -\n   *          Whether to exclude phone numbers that require a local address\n   * @param {boolean} [opts.excludeForeignAddressRequired] -\n   *          Whether to exclude phone numbers that require a foreign address\n   * @param {boolean} [opts.beta] -\n   *          Whether to read phone numbers new to the Twilio platform\n   * @param {string} [opts.nearNumber] -\n   *          Given a phone number, find a geographically close number within distance miles. (US/Canada only)\n   * @param {string} [opts.nearLatLong] -\n   *          Given a latitude/longitude pair lat,long find geographically close numbers within distance miles. (US/Canada only)\n   * @param {number} [opts.distance] -\n   *          The search radius, in miles, for a near_ query. (US/Canada only)\n   * @param {string} [opts.inPostalCode] -\n   *          Limit results to a particular postal code. (US/Canada only)\n   * @param {string} [opts.inRegion] -\n   *          Limit results to a particular region. (US/Canada only)\n   * @param {string} [opts.inRateCenter] -\n   *          Limit results to a specific rate center, or given a phone number search within the same rate center as that number. (US/Canada only)\n   * @param {string} [opts.inLata] -\n   *          Limit results to a specific local access and transport area. (US/Canada only)\n   * @param {string} [opts.inLocality] - Limit results to a particular locality\n   * @param {boolean} [opts.faxEnabled] - Whether the phone numbers can receive faxes\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  TollFreeListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single page of TollFreeInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext.TollFreeList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.areaCode] - The area code of the phone numbers to read\n   * @param {string} [opts.contains] - The pattern on which to match phone numbers\n   * @param {boolean} [opts.smsEnabled] -\n   *          Whether the phone numbers can receive text messages\n   * @param {boolean} [opts.mmsEnabled] -\n   *          Whether the phone numbers can receive MMS messages\n   * @param {boolean} [opts.voiceEnabled] -\n   *          Whether the phone numbers can receive calls.\n   * @param {boolean} [opts.excludeAllAddressRequired] -\n   *          Whether to exclude phone numbers that require an Address\n   * @param {boolean} [opts.excludeLocalAddressRequired] -\n   *          Whether to exclude phone numbers that require a local address\n   * @param {boolean} [opts.excludeForeignAddressRequired] -\n   *          Whether to exclude phone numbers that require a foreign address\n   * @param {boolean} [opts.beta] -\n   *          Whether to read phone numbers new to the Twilio platform\n   * @param {string} [opts.nearNumber] -\n   *          Given a phone number, find a geographically close number within distance miles. (US/Canada only)\n   * @param {string} [opts.nearLatLong] -\n   *          Given a latitude/longitude pair lat,long find geographically close numbers within distance miles. (US/Canada only)\n   * @param {number} [opts.distance] -\n   *          The search radius, in miles, for a near_ query. (US/Canada only)\n   * @param {string} [opts.inPostalCode] -\n   *          Limit results to a particular postal code. (US/Canada only)\n   * @param {string} [opts.inRegion] -\n   *          Limit results to a particular region. (US/Canada only)\n   * @param {string} [opts.inRateCenter] -\n   *          Limit results to a specific rate center, or given a phone number search within the same rate center as that number. (US/Canada only)\n   * @param {string} [opts.inLata] -\n   *          Limit results to a specific local access and transport area. (US/Canada only)\n   * @param {string} [opts.inLocality] - Limit results to a particular locality\n   * @param {boolean} [opts.faxEnabled] - Whether the phone numbers can receive faxes\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  TollFreeListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'AreaCode': _.get(opts, 'areaCode'),\n      'Contains': _.get(opts, 'contains'),\n      'SmsEnabled': serialize.bool(_.get(opts, 'smsEnabled')),\n      'MmsEnabled': serialize.bool(_.get(opts, 'mmsEnabled')),\n      'VoiceEnabled': serialize.bool(_.get(opts, 'voiceEnabled')),\n      'ExcludeAllAddressRequired': serialize.bool(_.get(opts, 'excludeAllAddressRequired')),\n      'ExcludeLocalAddressRequired': serialize.bool(_.get(opts, 'excludeLocalAddressRequired')),\n      'ExcludeForeignAddressRequired': serialize.bool(_.get(opts, 'excludeForeignAddressRequired')),\n      'Beta': serialize.bool(_.get(opts, 'beta')),\n      'NearNumber': _.get(opts, 'nearNumber'),\n      'NearLatLong': _.get(opts, 'nearLatLong'),\n      'Distance': _.get(opts, 'distance'),\n      'InPostalCode': _.get(opts, 'inPostalCode'),\n      'InRegion': _.get(opts, 'inRegion'),\n      'InRateCenter': _.get(opts, 'inRateCenter'),\n      'InLata': _.get(opts, 'inLata'),\n      'InLocality': _.get(opts, 'inLocality'),\n      'FaxEnabled': serialize.bool(_.get(opts, 'faxEnabled')),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new TollFreePage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single target page of TollFreeInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext.TollFreeList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  TollFreeListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new TollFreePage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext.TollFreeList#\n   *\n   * @returns Object\n   */\n\n  /* jshint ignore:end */\n\n\n  TollFreeListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  TollFreeListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return TollFreeListInstance;\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the TollFreePage\n *\n * @constructor Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext.TollFreePage\n *\n * @param {V2010} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {TollFreeSolution} solution - Path solution\n *\n * @returns TollFreePage\n */\n\n/* jshint ignore:end */\n\n\nTollFreePage = function TollFreePage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(TollFreePage.prototype, Page.prototype);\n\nTollFreePage.prototype.constructor = TollFreePage;\n/* jshint ignore:start */\n\n/**\n * Build an instance of TollFreeInstance\n *\n * @function getInstance\n * @memberof Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext.TollFreePage#\n *\n * @param {TollFreePayload} payload - Payload response from the API\n *\n * @returns TollFreeInstance\n */\n\n/* jshint ignore:end */\n\nTollFreePage.prototype.getInstance = function getInstance(payload) {\n  return new TollFreeInstance(this._version, payload, this._solution.accountSid, this._solution.countryCode);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext.TollFreePage#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nTollFreePage.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nTollFreePage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the TollFreeContext\n *\n * @constructor Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext.TollFreeInstance\n *\n * @property {string} friendlyName - A formatted version of the phone number\n * @property {string} phoneNumber - The phone number in E.164 format\n * @property {string} lata - The LATA of this phone number\n * @property {string} locality -\n *          The locality or city of this phone number's location\n * @property {string} rateCenter - The rate center of this phone number\n * @property {number} latitude - The latitude of this phone number's location\n * @property {number} longitude - The longitude of this phone number's location\n * @property {string} region -\n *          The two-letter state or province abbreviation of this phone number's location\n * @property {string} postalCode -\n *          The postal or ZIP code of this phone number's location\n * @property {string} isoCountry - The ISO country code of this phone number\n * @property {string} addressRequirements -\n *          The type of Address resource the phone number requires\n * @property {boolean} beta -\n *          Whether the phone number is new to the Twilio platform\n * @property {PhoneNumberCapabilities} capabilities -\n *          Whether a phone number can receive calls or messages\n *\n * @param {V2010} version - Version of the resource\n * @param {TollFreePayload} payload - The instance payload\n * @param {account_sid} accountSid - The account_sid\n * @param {iso_country_code} countryCode -\n *          The ISO-3166-1 country code of the country.\n */\n\n/* jshint ignore:end */\n\n\nTollFreeInstance = function TollFreeInstance(version, payload, accountSid, countryCode) {\n  this._version = version; // Marshaled Properties\n\n  this.friendlyName = payload.friendly_name; // jshint ignore:line\n\n  this.phoneNumber = payload.phone_number; // jshint ignore:line\n\n  this.lata = payload.lata; // jshint ignore:line\n\n  this.locality = payload.locality; // jshint ignore:line\n\n  this.rateCenter = payload.rate_center; // jshint ignore:line\n\n  this.latitude = deserialize.decimal(payload.latitude); // jshint ignore:line\n\n  this.longitude = deserialize.decimal(payload.longitude); // jshint ignore:line\n\n  this.region = payload.region; // jshint ignore:line\n\n  this.postalCode = payload.postal_code; // jshint ignore:line\n\n  this.isoCountry = payload.iso_country; // jshint ignore:line\n\n  this.addressRequirements = payload.address_requirements; // jshint ignore:line\n\n  this.beta = payload.beta; // jshint ignore:line\n\n  this.capabilities = payload.capabilities; // jshint ignore:line\n  // Context\n\n  this._context = undefined;\n  this._solution = {\n    accountSid: accountSid,\n    countryCode: countryCode\n  };\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext.TollFreeInstance#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nTollFreeInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nTollFreeInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  TollFreeList: TollFreeList,\n  TollFreePage: TollFreePage,\n  TollFreeInstance: TollFreeInstance\n};","map":{"version":3,"sources":["/Users/tony_niu/Visual Studio/Twilio/twilio-video-starter-kit/src/token-service/node_modules/twilio/lib/rest/api/v2010/account/availablePhoneNumber/tollFree.js"],"names":["Q","require","_","util","Page","deserialize","serialize","values","TollFreeList","TollFreePage","TollFreeInstance","version","accountSid","countryCode","TollFreeListInstance","sid","get","_version","_solution","_uri","each","opts","callback","isFunction","isUndefined","Error","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","error","fetchNextPage","fn","promise","then","page","instances","instance","bind","nextPage","catch","merge","list","deferred","defer","allResources","resource","push","length","resolve","reject","nodeify","data","of","bool","pageToken","pageNumber","uri","method","params","payload","getPage","targetUrl","_domain","twilio","request","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","friendlyName","friendly_name","phoneNumber","phone_number","lata","locality","rateCenter","rate_center","latitude","decimal","longitude","region","postalCode","postal_code","isoCountry","iso_country","addressRequirements","address_requirements","beta","capabilities","_context","undefined","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar Page = require('../../../../../base/Page');  /* jshint ignore:line */\nvar deserialize = require(\n    '../../../../../base/deserialize');  /* jshint ignore:line */\nvar serialize = require(\n    '../../../../../base/serialize');  /* jshint ignore:line */\nvar values = require('../../../../../base/values');  /* jshint ignore:line */\n\nvar TollFreeList;\nvar TollFreePage;\nvar TollFreeInstance;\n\n/* jshint ignore:start */\n/**\n * Initialize the TollFreeList\n *\n * @constructor Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext.TollFreeList\n *\n * @param {Twilio.Api.V2010} version - Version of the resource\n * @param {string} accountSid - The account_sid\n * @param {string} countryCode - The ISO-3166-1 country code of the country.\n */\n/* jshint ignore:end */\nTollFreeList = function TollFreeList(version, accountSid, countryCode) {\n  /* jshint ignore:start */\n  /**\n   * @function tollFree\n   * @memberof Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext.TollFreeContext}\n   */\n  /* jshint ignore:end */\n  function TollFreeListInstance(sid) {\n    return TollFreeListInstance.get(sid);\n  }\n\n  TollFreeListInstance._version = version;\n  // Path Solution\n  TollFreeListInstance._solution = {accountSid: accountSid, countryCode: countryCode};\n  TollFreeListInstance._uri = `/Accounts/${accountSid}/AvailablePhoneNumbers/${countryCode}/TollFree.json`;\n  /* jshint ignore:start */\n  /**\n   * Streams TollFreeInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext.TollFreeList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.areaCode] - The area code of the phone numbers to read\n   * @param {string} [opts.contains] - The pattern on which to match phone numbers\n   * @param {boolean} [opts.smsEnabled] -\n   *          Whether the phone numbers can receive text messages\n   * @param {boolean} [opts.mmsEnabled] -\n   *          Whether the phone numbers can receive MMS messages\n   * @param {boolean} [opts.voiceEnabled] -\n   *          Whether the phone numbers can receive calls.\n   * @param {boolean} [opts.excludeAllAddressRequired] -\n   *          Whether to exclude phone numbers that require an Address\n   * @param {boolean} [opts.excludeLocalAddressRequired] -\n   *          Whether to exclude phone numbers that require a local address\n   * @param {boolean} [opts.excludeForeignAddressRequired] -\n   *          Whether to exclude phone numbers that require a foreign address\n   * @param {boolean} [opts.beta] -\n   *          Whether to read phone numbers new to the Twilio platform\n   * @param {string} [opts.nearNumber] -\n   *          Given a phone number, find a geographically close number within distance miles. (US/Canada only)\n   * @param {string} [opts.nearLatLong] -\n   *          Given a latitude/longitude pair lat,long find geographically close numbers within distance miles. (US/Canada only)\n   * @param {number} [opts.distance] -\n   *          The search radius, in miles, for a near_ query. (US/Canada only)\n   * @param {string} [opts.inPostalCode] -\n   *          Limit results to a particular postal code. (US/Canada only)\n   * @param {string} [opts.inRegion] -\n   *          Limit results to a particular region. (US/Canada only)\n   * @param {string} [opts.inRateCenter] -\n   *          Limit results to a specific rate center, or given a phone number search within the same rate center as that number. (US/Canada only)\n   * @param {string} [opts.inLata] -\n   *          Limit results to a specific local access and transport area. (US/Canada only)\n   * @param {string} [opts.inLocality] - Limit results to a particular locality\n   * @param {boolean} [opts.faxEnabled] - Whether the phone numbers can receive faxes\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  TollFreeListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists TollFreeInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext.TollFreeList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.areaCode] - The area code of the phone numbers to read\n   * @param {string} [opts.contains] - The pattern on which to match phone numbers\n   * @param {boolean} [opts.smsEnabled] -\n   *          Whether the phone numbers can receive text messages\n   * @param {boolean} [opts.mmsEnabled] -\n   *          Whether the phone numbers can receive MMS messages\n   * @param {boolean} [opts.voiceEnabled] -\n   *          Whether the phone numbers can receive calls.\n   * @param {boolean} [opts.excludeAllAddressRequired] -\n   *          Whether to exclude phone numbers that require an Address\n   * @param {boolean} [opts.excludeLocalAddressRequired] -\n   *          Whether to exclude phone numbers that require a local address\n   * @param {boolean} [opts.excludeForeignAddressRequired] -\n   *          Whether to exclude phone numbers that require a foreign address\n   * @param {boolean} [opts.beta] -\n   *          Whether to read phone numbers new to the Twilio platform\n   * @param {string} [opts.nearNumber] -\n   *          Given a phone number, find a geographically close number within distance miles. (US/Canada only)\n   * @param {string} [opts.nearLatLong] -\n   *          Given a latitude/longitude pair lat,long find geographically close numbers within distance miles. (US/Canada only)\n   * @param {number} [opts.distance] -\n   *          The search radius, in miles, for a near_ query. (US/Canada only)\n   * @param {string} [opts.inPostalCode] -\n   *          Limit results to a particular postal code. (US/Canada only)\n   * @param {string} [opts.inRegion] -\n   *          Limit results to a particular region. (US/Canada only)\n   * @param {string} [opts.inRateCenter] -\n   *          Limit results to a specific rate center, or given a phone number search within the same rate center as that number. (US/Canada only)\n   * @param {string} [opts.inLata] -\n   *          Limit results to a specific local access and transport area. (US/Canada only)\n   * @param {string} [opts.inLocality] - Limit results to a particular locality\n   * @param {boolean} [opts.faxEnabled] - Whether the phone numbers can receive faxes\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  TollFreeListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of TollFreeInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext.TollFreeList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.areaCode] - The area code of the phone numbers to read\n   * @param {string} [opts.contains] - The pattern on which to match phone numbers\n   * @param {boolean} [opts.smsEnabled] -\n   *          Whether the phone numbers can receive text messages\n   * @param {boolean} [opts.mmsEnabled] -\n   *          Whether the phone numbers can receive MMS messages\n   * @param {boolean} [opts.voiceEnabled] -\n   *          Whether the phone numbers can receive calls.\n   * @param {boolean} [opts.excludeAllAddressRequired] -\n   *          Whether to exclude phone numbers that require an Address\n   * @param {boolean} [opts.excludeLocalAddressRequired] -\n   *          Whether to exclude phone numbers that require a local address\n   * @param {boolean} [opts.excludeForeignAddressRequired] -\n   *          Whether to exclude phone numbers that require a foreign address\n   * @param {boolean} [opts.beta] -\n   *          Whether to read phone numbers new to the Twilio platform\n   * @param {string} [opts.nearNumber] -\n   *          Given a phone number, find a geographically close number within distance miles. (US/Canada only)\n   * @param {string} [opts.nearLatLong] -\n   *          Given a latitude/longitude pair lat,long find geographically close numbers within distance miles. (US/Canada only)\n   * @param {number} [opts.distance] -\n   *          The search radius, in miles, for a near_ query. (US/Canada only)\n   * @param {string} [opts.inPostalCode] -\n   *          Limit results to a particular postal code. (US/Canada only)\n   * @param {string} [opts.inRegion] -\n   *          Limit results to a particular region. (US/Canada only)\n   * @param {string} [opts.inRateCenter] -\n   *          Limit results to a specific rate center, or given a phone number search within the same rate center as that number. (US/Canada only)\n   * @param {string} [opts.inLata] -\n   *          Limit results to a specific local access and transport area. (US/Canada only)\n   * @param {string} [opts.inLocality] - Limit results to a particular locality\n   * @param {boolean} [opts.faxEnabled] - Whether the phone numbers can receive faxes\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  TollFreeListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'AreaCode': _.get(opts, 'areaCode'),\n      'Contains': _.get(opts, 'contains'),\n      'SmsEnabled': serialize.bool(_.get(opts, 'smsEnabled')),\n      'MmsEnabled': serialize.bool(_.get(opts, 'mmsEnabled')),\n      'VoiceEnabled': serialize.bool(_.get(opts, 'voiceEnabled')),\n      'ExcludeAllAddressRequired': serialize.bool(_.get(opts, 'excludeAllAddressRequired')),\n      'ExcludeLocalAddressRequired': serialize.bool(_.get(opts, 'excludeLocalAddressRequired')),\n      'ExcludeForeignAddressRequired': serialize.bool(_.get(opts, 'excludeForeignAddressRequired')),\n      'Beta': serialize.bool(_.get(opts, 'beta')),\n      'NearNumber': _.get(opts, 'nearNumber'),\n      'NearLatLong': _.get(opts, 'nearLatLong'),\n      'Distance': _.get(opts, 'distance'),\n      'InPostalCode': _.get(opts, 'inPostalCode'),\n      'InRegion': _.get(opts, 'inRegion'),\n      'InRateCenter': _.get(opts, 'inRateCenter'),\n      'InLata': _.get(opts, 'inLata'),\n      'InLocality': _.get(opts, 'inLocality'),\n      'FaxEnabled': serialize.bool(_.get(opts, 'faxEnabled')),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new TollFreePage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of TollFreeInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext.TollFreeList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  TollFreeListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new TollFreePage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext.TollFreeList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  TollFreeListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  TollFreeListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return TollFreeListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the TollFreePage\n *\n * @constructor Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext.TollFreePage\n *\n * @param {V2010} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {TollFreeSolution} solution - Path solution\n *\n * @returns TollFreePage\n */\n/* jshint ignore:end */\nTollFreePage = function TollFreePage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(TollFreePage.prototype, Page.prototype);\nTollFreePage.prototype.constructor = TollFreePage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of TollFreeInstance\n *\n * @function getInstance\n * @memberof Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext.TollFreePage#\n *\n * @param {TollFreePayload} payload - Payload response from the API\n *\n * @returns TollFreeInstance\n */\n/* jshint ignore:end */\nTollFreePage.prototype.getInstance = function getInstance(payload) {\n  return new TollFreeInstance(\n    this._version,\n    payload,\n    this._solution.accountSid,\n    this._solution.countryCode\n  );\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext.TollFreePage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nTollFreePage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nTollFreePage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the TollFreeContext\n *\n * @constructor Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext.TollFreeInstance\n *\n * @property {string} friendlyName - A formatted version of the phone number\n * @property {string} phoneNumber - The phone number in E.164 format\n * @property {string} lata - The LATA of this phone number\n * @property {string} locality -\n *          The locality or city of this phone number's location\n * @property {string} rateCenter - The rate center of this phone number\n * @property {number} latitude - The latitude of this phone number's location\n * @property {number} longitude - The longitude of this phone number's location\n * @property {string} region -\n *          The two-letter state or province abbreviation of this phone number's location\n * @property {string} postalCode -\n *          The postal or ZIP code of this phone number's location\n * @property {string} isoCountry - The ISO country code of this phone number\n * @property {string} addressRequirements -\n *          The type of Address resource the phone number requires\n * @property {boolean} beta -\n *          Whether the phone number is new to the Twilio platform\n * @property {PhoneNumberCapabilities} capabilities -\n *          Whether a phone number can receive calls or messages\n *\n * @param {V2010} version - Version of the resource\n * @param {TollFreePayload} payload - The instance payload\n * @param {account_sid} accountSid - The account_sid\n * @param {iso_country_code} countryCode -\n *          The ISO-3166-1 country code of the country.\n */\n/* jshint ignore:end */\nTollFreeInstance = function TollFreeInstance(version, payload, accountSid,\n                                              countryCode) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.friendlyName = payload.friendly_name; // jshint ignore:line\n  this.phoneNumber = payload.phone_number; // jshint ignore:line\n  this.lata = payload.lata; // jshint ignore:line\n  this.locality = payload.locality; // jshint ignore:line\n  this.rateCenter = payload.rate_center; // jshint ignore:line\n  this.latitude = deserialize.decimal(payload.latitude); // jshint ignore:line\n  this.longitude = deserialize.decimal(payload.longitude); // jshint ignore:line\n  this.region = payload.region; // jshint ignore:line\n  this.postalCode = payload.postal_code; // jshint ignore:line\n  this.isoCountry = payload.iso_country; // jshint ignore:line\n  this.addressRequirements = payload.address_requirements; // jshint ignore:line\n  this.beta = payload.beta; // jshint ignore:line\n  this.capabilities = payload.capabilities; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {accountSid: accountSid, countryCode: countryCode, };\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext.TollFreeInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nTollFreeInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nTollFreeInstance.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  TollFreeList: TollFreeList,\n  TollFreePage: TollFreePage,\n  TollFreeInstance: TollFreeInstance\n};\n"]},"metadata":{},"sourceType":"module"}