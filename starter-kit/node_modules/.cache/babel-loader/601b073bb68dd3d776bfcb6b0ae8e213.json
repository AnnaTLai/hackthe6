{"ast":null,"code":"'use strict';\n\nvar _ = require('lodash');\n\nvar RestException = require('./RestException');\n/**\n * @constructor\n *\n * @description Base page object to maintain request state.\n *\n * @param {Version} version - A twilio version instance\n * @param {Object} response - The http response\n * @param {Object} solution - path solution\n */\n\n\nfunction Page(version, response, solution) {\n  var payload = this.processResponse(response);\n  this._version = version;\n  this._payload = payload;\n  this._solution = solution;\n  this.nextPageUrl = this.getNextPageUrl();\n  this.previousPageUrl = this.getPreviousPageUrl();\n  this.instances = this.loadInstances(this.loadPage(payload));\n}\n/**\n * @constant META_KEYS\n * @description meta keys returned in a list request\n */\n\n\n_c = Page;\nPage.prototype.META_KEYS = ['end', 'first_page_uri', 'last_page_uri', 'next_page_uri', 'num_pages', 'page', 'page_size', 'previous_page_uri', 'start', 'total', 'uri'];\n/**\n * Get the url of the previous page of records\n *\n * @return {string|undefined} url of the previous page\n */\n\nPage.prototype.getPreviousPageUrl = function () {\n  if ('meta' in this._payload && 'previous_page_url' in this._payload.meta && this._payload.meta.previous_page_url) {\n    // jshint ignore:line\n    return this._payload.meta.previous_page_url; // jshint ignore:line\n  }\n\n  if ('previous_page_uri' in this._payload && this._payload.previous_page_uri) {\n    // jshint ignore:line\n    return this._version._domain.absoluteUrl(this._payload.previous_page_uri); // jshint ignore:line\n  }\n\n  return undefined;\n};\n/**\n * Get the url of the next page of records\n *\n * @return {string|undefined} url of the next page\n */\n\n\nPage.prototype.getNextPageUrl = function () {\n  if ('meta' in this._payload && 'next_page_url' in this._payload.meta && this._payload.meta.next_page_url) {\n    // jshint ignore:line\n    return this._payload.meta.next_page_url; // jshint ignore:line\n  }\n\n  if ('next_page_uri' in this._payload && this._payload.next_page_uri) {\n    // jshint ignore:line\n    return this._version._domain.absoluteUrl(this._payload.next_page_uri); // jshint ignore:line\n  }\n\n  return undefined;\n};\n/**\n * Build a new instance given a json payload\n * @abstract\n *\n * @param {object} payload - Payload response from the API\n * @return {object} instance of a resource\n */\n\n\nPage.prototype.getInstance = function (payload) {\n  throw new Error('Page.get_instance() must be implemented in the derived class');\n};\n/**\n * Load a list of records\n *\n * @param  {object} resources json payload of records\n * @return {Array} list of resources\n */\n\n\nPage.prototype.loadInstances = function (resources) {\n  return _.map(resources, function (resource) {\n    return this.getInstance(resource);\n  }.bind(this));\n};\n/**\n * Fetch the next page of records\n *\n * @return {promise} promise that resolves to next page of results\n */\n\n\nPage.prototype.nextPage = function () {\n  if (!this.nextPageUrl) {\n    return undefined;\n  }\n\n  var promise = this._version._domain.twilio.request({\n    method: 'GET',\n    uri: this.nextPageUrl\n  });\n\n  promise = promise.then(function (response) {\n    return new this.constructor(this._version, response, this._solution);\n  }.bind(this));\n  return promise;\n};\n/**\n * Fetch the previous page of records\n *\n * @return {promise} promise that resolves to previous page of results\n */\n\n\nPage.prototype.previousPage = function () {\n  if (!this.previousPageUrl) {\n    return undefined;\n  }\n\n  var promise = this._version._domain.twilio.request({\n    method: 'GET',\n    uri: this.previousPageUrl\n  });\n\n  promise = promise.then(function (response) {\n    return new this.constructor(this._version, response, this._solution);\n  }.bind(this));\n  return promise;\n};\n/**\n * Parse json response from API\n * @throws {Error} If non 200 status code is returned\n *\n * @param  {object} response API response\n * @return {object} json parsed response\n */\n\n\nPage.prototype.processResponse = function (response) {\n  if (response.statusCode !== 200) {\n    throw new RestException(response);\n  }\n\n  if (typeof response.body === 'string') {\n    return JSON.parse(response.body);\n  }\n\n  return response.body;\n};\n/**\n * Load a page of records\n * @throws {Error} If records cannot be deserialized\n *\n * @param  {object} payload json payload\n * @return {array} the page of records\n */\n\n\nPage.prototype.loadPage = function (payload) {\n  if ('meta' in payload && 'key' in payload.meta) {\n    return payload[payload.meta.key];\n  }\n\n  var keys = _.chain(payload).keys().difference(this.META_KEYS).value();\n\n  if (keys.length === 1) {\n    return payload[keys[0]];\n  }\n\n  throw new Error('Page Records cannot be deserialized');\n};\n\nmodule.exports = Page;\n\nvar _c;\n\n$RefreshReg$(_c, \"Page\");","map":{"version":3,"sources":["/Users/tony_niu/Visual Studio/Twilio/twilio-video-starter-kit/src/token-service/node_modules/twilio/lib/base/Page.js"],"names":["_","require","RestException","Page","version","response","solution","payload","processResponse","_version","_payload","_solution","nextPageUrl","getNextPageUrl","previousPageUrl","getPreviousPageUrl","instances","loadInstances","loadPage","prototype","META_KEYS","meta","previous_page_url","previous_page_uri","_domain","absoluteUrl","undefined","next_page_url","next_page_uri","getInstance","Error","resources","map","resource","bind","nextPage","promise","twilio","request","method","uri","then","constructor","previousPage","statusCode","body","JSON","parse","key","keys","chain","difference","value","length","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nvar _ = require('lodash');\nvar RestException = require('./RestException');\n\n/**\n * @constructor\n *\n * @description Base page object to maintain request state.\n *\n * @param {Version} version - A twilio version instance\n * @param {Object} response - The http response\n * @param {Object} solution - path solution\n */\nfunction Page(version, response, solution) {\n  var payload = this.processResponse(response);\n\n  this._version = version;\n  this._payload = payload;\n  this._solution = solution;\n\n  this.nextPageUrl = this.getNextPageUrl();\n  this.previousPageUrl = this.getPreviousPageUrl();\n\n  this.instances = this.loadInstances(this.loadPage(payload));\n}\n\n/**\n * @constant META_KEYS\n * @description meta keys returned in a list request\n */\nPage.prototype.META_KEYS = [\n  'end',\n  'first_page_uri',\n  'last_page_uri',\n  'next_page_uri',\n  'num_pages',\n  'page',\n  'page_size',\n  'previous_page_uri',\n  'start',\n  'total',\n  'uri',\n];\n\n/**\n * Get the url of the previous page of records\n *\n * @return {string|undefined} url of the previous page\n */\nPage.prototype.getPreviousPageUrl = function() {\n  if ('meta' in this._payload && 'previous_page_url' in this._payload.meta && this._payload.meta.previous_page_url) { // jshint ignore:line\n    return this._payload.meta.previous_page_url; // jshint ignore:line\n  }\n\n  if ('previous_page_uri' in this._payload && this._payload.previous_page_uri) { // jshint ignore:line\n    return this._version._domain.absoluteUrl(this._payload.previous_page_uri); // jshint ignore:line\n  }\n\n  return undefined;\n};\n\n/**\n * Get the url of the next page of records\n *\n * @return {string|undefined} url of the next page\n */\nPage.prototype.getNextPageUrl = function() {\n  if ('meta' in this._payload && 'next_page_url' in this._payload.meta && this._payload.meta.next_page_url) { // jshint ignore:line\n    return this._payload.meta.next_page_url; // jshint ignore:line\n  }\n\n  if ('next_page_uri' in this._payload && this._payload.next_page_uri) { // jshint ignore:line\n    return this._version._domain.absoluteUrl(this._payload.next_page_uri); // jshint ignore:line\n  }\n\n  return undefined;\n};\n\n/**\n * Build a new instance given a json payload\n * @abstract\n *\n * @param {object} payload - Payload response from the API\n * @return {object} instance of a resource\n */\nPage.prototype.getInstance = function(payload) {\n  throw new Error('Page.get_instance() must be implemented in the derived class');\n};\n\n/**\n * Load a list of records\n *\n * @param  {object} resources json payload of records\n * @return {Array} list of resources\n */\nPage.prototype.loadInstances = function(resources) {\n  return _.map(resources, function(resource) {\n    return this.getInstance(resource);\n  }.bind(this));\n};\n\n/**\n * Fetch the next page of records\n *\n * @return {promise} promise that resolves to next page of results\n */\nPage.prototype.nextPage = function() {\n  if (!this.nextPageUrl) {\n    return undefined;\n  }\n\n  var promise = this._version._domain.twilio.request({\n    method: 'GET',\n    uri: this.nextPageUrl,\n  });\n\n  promise = promise.then(function(response) {\n    return new this.constructor(this._version, response, this._solution);\n  }.bind(this));\n\n  return promise;\n};\n\n/**\n * Fetch the previous page of records\n *\n * @return {promise} promise that resolves to previous page of results\n */\nPage.prototype.previousPage = function() {\n  if (!this.previousPageUrl) {\n    return undefined;\n  }\n\n  var promise = this._version._domain.twilio.request({\n    method: 'GET',\n    uri: this.previousPageUrl,\n  });\n\n  promise = promise.then(function(response) {\n    return new this.constructor(this._version, response, this._solution);\n  }.bind(this));\n\n  return promise;\n};\n\n/**\n * Parse json response from API\n * @throws {Error} If non 200 status code is returned\n *\n * @param  {object} response API response\n * @return {object} json parsed response\n */\nPage.prototype.processResponse = function(response) {\n  if (response.statusCode !== 200) {\n    throw new RestException(response);\n  }\n\n  if (typeof response.body === 'string') {\n    return JSON.parse(response.body);\n  }\n  return response.body;\n};\n\n/**\n * Load a page of records\n * @throws {Error} If records cannot be deserialized\n *\n * @param  {object} payload json payload\n * @return {array} the page of records\n */\nPage.prototype.loadPage = function(payload) {\n  if ('meta' in payload && 'key' in payload.meta) {\n    return payload[payload.meta.key];\n  }\n\n  var keys = _.chain(payload)\n    .keys()\n    .difference(this.META_KEYS)\n    .value();\n\n  if (keys.length === 1) {\n    return payload[keys[0]];\n  }\n\n  throw new Error('Page Records cannot be deserialized');\n};\n\nmodule.exports = Page;\n"]},"metadata":{},"sourceType":"module"}