{"ast":null,"code":"'use strict';\n/* jshint ignore:start */\n\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n\n/* jshint ignore:end */\n\nvar Q = require('q');\n/* jshint ignore:line */\n\n\nvar _ = require('lodash');\n/* jshint ignore:line */\n\n\nvar util = require('util');\n/* jshint ignore:line */\n\n\nvar Page = require('../../../base/Page');\n/* jshint ignore:line */\n\n\nvar WebhookList = require('./configuration/webhook').WebhookList;\n\nvar values = require('../../../base/values');\n/* jshint ignore:line */\n\n\nvar ConfigurationList;\nvar ConfigurationPage;\nvar ConfigurationInstance;\nvar ConfigurationContext;\n/* jshint ignore:start */\n\n/**\n * Initialize the ConfigurationList\n *\n * @constructor Twilio.Conversations.V1.ConfigurationList\n *\n * @param {Twilio.Conversations.V1} version - Version of the resource\n */\n\n/* jshint ignore:end */\n\nConfigurationList = function ConfigurationList(version) {\n  /* jshint ignore:start */\n\n  /**\n   * @function configuration\n   * @memberof Twilio.Conversations.V1#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Conversations.V1.ConfigurationContext}\n   */\n\n  /* jshint ignore:end */\n  function ConfigurationListInstance(sid) {\n    return ConfigurationListInstance.get(sid);\n  }\n\n  ConfigurationListInstance._version = version; // Path Solution\n\n  ConfigurationListInstance._solution = {}; // Components\n\n  ConfigurationListInstance._webhooks = undefined;\n  /* jshint ignore:start */\n\n  /**\n   * Constructs a configuration\n   *\n   * @function get\n   * @memberof Twilio.Conversations.V1.ConfigurationList#\n   *\n   * @returns {Twilio.Conversations.V1.ConfigurationContext}\n   */\n\n  /* jshint ignore:end */\n\n  ConfigurationListInstance.get = function get() {\n    return new ConfigurationContext(this._version);\n  };\n\n  Object.defineProperty(ConfigurationListInstance, 'webhooks', {\n    get: function webhooks() {\n      if (!this._webhooks) {\n        this._webhooks = new WebhookList(this._version);\n      }\n\n      return this._webhooks;\n    }\n  });\n  /* jshint ignore:start */\n\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Conversations.V1.ConfigurationList#\n   *\n   * @returns Object\n   */\n\n  /* jshint ignore:end */\n\n  ConfigurationListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  ConfigurationListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return ConfigurationListInstance;\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the ConfigurationPage\n *\n * @constructor Twilio.Conversations.V1.ConfigurationPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {ConfigurationSolution} solution - Path solution\n *\n * @returns ConfigurationPage\n */\n\n/* jshint ignore:end */\n\n\nConfigurationPage = function ConfigurationPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(ConfigurationPage.prototype, Page.prototype);\n\nConfigurationPage.prototype.constructor = ConfigurationPage;\n/* jshint ignore:start */\n\n/**\n * Build an instance of ConfigurationInstance\n *\n * @function getInstance\n * @memberof Twilio.Conversations.V1.ConfigurationPage#\n *\n * @param {ConfigurationPayload} payload - Payload response from the API\n *\n * @returns ConfigurationInstance\n */\n\n/* jshint ignore:end */\n\nConfigurationPage.prototype.getInstance = function getInstance(payload) {\n  return new ConfigurationInstance(this._version, payload);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Conversations.V1.ConfigurationPage#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nConfigurationPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nConfigurationPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the ConfigurationContext\n *\n * @constructor Twilio.Conversations.V1.ConfigurationInstance\n *\n * @property {string} accountSid -\n *          The SID of the Account responsible for this configuration.\n * @property {string} defaultChatServiceSid -\n *          The SID of the default Conversation Service that every new conversation is associated with.\n * @property {string} defaultMessagingServiceSid -\n *          The SID of the default Messaging Service that every new conversation is associated with.\n * @property {string} defaultInactiveTimer -\n *          Default ISO8601 duration when conversation will be switched to `inactive` state.\n * @property {string} defaultClosedTimer -\n *          Default ISO8601 duration when conversation will be switched to `closed` state.\n * @property {string} url - An absolute URL for this global configuration.\n * @property {string} links -\n *          Absolute URLs to access the webhook and default service configurations.\n *\n * @param {V1} version - Version of the resource\n * @param {ConfigurationPayload} payload - The instance payload\n */\n\n/* jshint ignore:end */\n\n\nConfigurationInstance = function ConfigurationInstance(version, payload) {\n  this._version = version; // Marshaled Properties\n\n  this.accountSid = payload.account_sid; // jshint ignore:line\n\n  this.defaultChatServiceSid = payload.default_chat_service_sid; // jshint ignore:line\n\n  this.defaultMessagingServiceSid = payload.default_messaging_service_sid; // jshint ignore:line\n\n  this.defaultInactiveTimer = payload.default_inactive_timer; // jshint ignore:line\n\n  this.defaultClosedTimer = payload.default_closed_timer; // jshint ignore:line\n\n  this.url = payload.url; // jshint ignore:line\n\n  this.links = payload.links; // jshint ignore:line\n  // Context\n\n  this._context = undefined;\n  this._solution = {};\n};\n\nObject.defineProperty(ConfigurationInstance.prototype, '_proxy', {\n  get: function () {\n    if (!this._context) {\n      this._context = new ConfigurationContext(this._version);\n    }\n\n    return this._context;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * fetch a ConfigurationInstance\n *\n * @function fetch\n * @memberof Twilio.Conversations.V1.ConfigurationInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ConfigurationInstance\n */\n\n/* jshint ignore:end */\n\nConfigurationInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n/* jshint ignore:start */\n\n/**\n * update a ConfigurationInstance\n *\n * @function update\n * @memberof Twilio.Conversations.V1.ConfigurationInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.defaultChatServiceSid] -\n *          The SID of the default Conversation Service that every new conversation will be associated with.\n * @param {string} [opts.defaultMessagingServiceSid] -\n *          The SID of the default Messaging Service that every new conversation will be associated with.\n * @param {string} [opts.defaultInactiveTimer] -\n *          Default ISO8601 duration when conversation will be switched to `inactive` state.\n * @param {string} [opts.defaultClosedTimer] -\n *          Default ISO8601 duration when conversation will be switched to `closed` state.\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ConfigurationInstance\n */\n\n/* jshint ignore:end */\n\n\nConfigurationInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Conversations.V1.ConfigurationInstance#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nConfigurationInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nConfigurationInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the ConfigurationContext\n *\n * @constructor Twilio.Conversations.V1.ConfigurationContext\n *\n * @param {V1} version - Version of the resource\n */\n\n/* jshint ignore:end */\n\n\nConfigurationContext = function ConfigurationContext(version) {\n  this._version = version; // Path Solution\n\n  this._solution = {};\n  this._uri = `/Configuration`;\n};\n/* jshint ignore:start */\n\n/**\n * fetch a ConfigurationInstance\n *\n * @function fetch\n * @memberof Twilio.Conversations.V1.ConfigurationContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ConfigurationInstance\n */\n\n/* jshint ignore:end */\n\n\nConfigurationContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new ConfigurationInstance(this._version, payload));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * update a ConfigurationInstance\n *\n * @function update\n * @memberof Twilio.Conversations.V1.ConfigurationContext#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.defaultChatServiceSid] -\n *          The SID of the default Conversation Service that every new conversation will be associated with.\n * @param {string} [opts.defaultMessagingServiceSid] -\n *          The SID of the default Messaging Service that every new conversation will be associated with.\n * @param {string} [opts.defaultInactiveTimer] -\n *          Default ISO8601 duration when conversation will be switched to `inactive` state.\n * @param {string} [opts.defaultClosedTimer] -\n *          Default ISO8601 duration when conversation will be switched to `closed` state.\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ConfigurationInstance\n */\n\n/* jshint ignore:end */\n\n\nConfigurationContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n\n  opts = opts || {};\n  var deferred = Q.defer();\n  var data = values.of({\n    'DefaultChatServiceSid': _.get(opts, 'defaultChatServiceSid'),\n    'DefaultMessagingServiceSid': _.get(opts, 'defaultMessagingServiceSid'),\n    'DefaultInactiveTimer': _.get(opts, 'defaultInactiveTimer'),\n    'DefaultClosedTimer': _.get(opts, 'defaultClosedTimer')\n  });\n\n  var promise = this._version.update({\n    uri: this._uri,\n    method: 'POST',\n    data: data\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new ConfigurationInstance(this._version, payload));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Conversations.V1.ConfigurationContext#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nConfigurationContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nConfigurationContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  ConfigurationList: ConfigurationList,\n  ConfigurationPage: ConfigurationPage,\n  ConfigurationInstance: ConfigurationInstance,\n  ConfigurationContext: ConfigurationContext\n};","map":{"version":3,"sources":["/Users/tony_niu/Visual Studio/Twilio/twilio-video-starter-kit/node_modules/twilio/lib/rest/conversations/v1/configuration.js"],"names":["Q","require","_","util","Page","WebhookList","values","ConfigurationList","ConfigurationPage","ConfigurationInstance","ConfigurationContext","version","ConfigurationListInstance","sid","get","_version","_solution","_webhooks","undefined","Object","defineProperty","webhooks","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","payload","clone","forOwn","value","key","startsWith","isFunction","accountSid","account_sid","defaultChatServiceSid","default_chat_service_sid","defaultMessagingServiceSid","default_messaging_service_sid","defaultInactiveTimer","default_inactive_timer","defaultClosedTimer","default_closed_timer","url","links","_context","fetch","callback","_proxy","update","opts","_uri","deferred","defer","promise","uri","method","then","resolve","bind","catch","error","reject","nodeify","data","of","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar Page = require('../../../base/Page');  /* jshint ignore:line */\nvar WebhookList = require('./configuration/webhook').WebhookList;\nvar values = require('../../../base/values');  /* jshint ignore:line */\n\nvar ConfigurationList;\nvar ConfigurationPage;\nvar ConfigurationInstance;\nvar ConfigurationContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the ConfigurationList\n *\n * @constructor Twilio.Conversations.V1.ConfigurationList\n *\n * @param {Twilio.Conversations.V1} version - Version of the resource\n */\n/* jshint ignore:end */\nConfigurationList = function ConfigurationList(version) {\n  /* jshint ignore:start */\n  /**\n   * @function configuration\n   * @memberof Twilio.Conversations.V1#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Conversations.V1.ConfigurationContext}\n   */\n  /* jshint ignore:end */\n  function ConfigurationListInstance(sid) {\n    return ConfigurationListInstance.get(sid);\n  }\n\n  ConfigurationListInstance._version = version;\n  // Path Solution\n  ConfigurationListInstance._solution = {};\n\n  // Components\n  ConfigurationListInstance._webhooks = undefined;\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a configuration\n   *\n   * @function get\n   * @memberof Twilio.Conversations.V1.ConfigurationList#\n   *\n   * @returns {Twilio.Conversations.V1.ConfigurationContext}\n   */\n  /* jshint ignore:end */\n  ConfigurationListInstance.get = function get() {\n    return new ConfigurationContext(this._version);\n  };\n\n  Object.defineProperty(ConfigurationListInstance,\n    'webhooks', {\n      get: function webhooks() {\n        if (!this._webhooks) {\n          this._webhooks = new WebhookList(this._version);\n        }\n\n        return this._webhooks;\n      }\n  });\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Conversations.V1.ConfigurationList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  ConfigurationListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  ConfigurationListInstance[util.inspect.custom] = function inspect(depth,\n      options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return ConfigurationListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the ConfigurationPage\n *\n * @constructor Twilio.Conversations.V1.ConfigurationPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {ConfigurationSolution} solution - Path solution\n *\n * @returns ConfigurationPage\n */\n/* jshint ignore:end */\nConfigurationPage = function ConfigurationPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(ConfigurationPage.prototype, Page.prototype);\nConfigurationPage.prototype.constructor = ConfigurationPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of ConfigurationInstance\n *\n * @function getInstance\n * @memberof Twilio.Conversations.V1.ConfigurationPage#\n *\n * @param {ConfigurationPayload} payload - Payload response from the API\n *\n * @returns ConfigurationInstance\n */\n/* jshint ignore:end */\nConfigurationPage.prototype.getInstance = function getInstance(payload) {\n  return new ConfigurationInstance(this._version, payload);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Conversations.V1.ConfigurationPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nConfigurationPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nConfigurationPage.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the ConfigurationContext\n *\n * @constructor Twilio.Conversations.V1.ConfigurationInstance\n *\n * @property {string} accountSid -\n *          The SID of the Account responsible for this configuration.\n * @property {string} defaultChatServiceSid -\n *          The SID of the default Conversation Service that every new conversation is associated with.\n * @property {string} defaultMessagingServiceSid -\n *          The SID of the default Messaging Service that every new conversation is associated with.\n * @property {string} defaultInactiveTimer -\n *          Default ISO8601 duration when conversation will be switched to `inactive` state.\n * @property {string} defaultClosedTimer -\n *          Default ISO8601 duration when conversation will be switched to `closed` state.\n * @property {string} url - An absolute URL for this global configuration.\n * @property {string} links -\n *          Absolute URLs to access the webhook and default service configurations.\n *\n * @param {V1} version - Version of the resource\n * @param {ConfigurationPayload} payload - The instance payload\n */\n/* jshint ignore:end */\nConfigurationInstance = function ConfigurationInstance(version, payload) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.defaultChatServiceSid = payload.default_chat_service_sid; // jshint ignore:line\n  this.defaultMessagingServiceSid = payload.default_messaging_service_sid; // jshint ignore:line\n  this.defaultInactiveTimer = payload.default_inactive_timer; // jshint ignore:line\n  this.defaultClosedTimer = payload.default_closed_timer; // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n  this.links = payload.links; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {};\n};\n\nObject.defineProperty(ConfigurationInstance.prototype,\n  '_proxy', {\n    get: function() {\n      if (!this._context) {\n        this._context = new ConfigurationContext(this._version);\n      }\n\n      return this._context;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a ConfigurationInstance\n *\n * @function fetch\n * @memberof Twilio.Conversations.V1.ConfigurationInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ConfigurationInstance\n */\n/* jshint ignore:end */\nConfigurationInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * update a ConfigurationInstance\n *\n * @function update\n * @memberof Twilio.Conversations.V1.ConfigurationInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.defaultChatServiceSid] -\n *          The SID of the default Conversation Service that every new conversation will be associated with.\n * @param {string} [opts.defaultMessagingServiceSid] -\n *          The SID of the default Messaging Service that every new conversation will be associated with.\n * @param {string} [opts.defaultInactiveTimer] -\n *          Default ISO8601 duration when conversation will be switched to `inactive` state.\n * @param {string} [opts.defaultClosedTimer] -\n *          Default ISO8601 duration when conversation will be switched to `closed` state.\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ConfigurationInstance\n */\n/* jshint ignore:end */\nConfigurationInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Conversations.V1.ConfigurationInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nConfigurationInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nConfigurationInstance.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the ConfigurationContext\n *\n * @constructor Twilio.Conversations.V1.ConfigurationContext\n *\n * @param {V1} version - Version of the resource\n */\n/* jshint ignore:end */\nConfigurationContext = function ConfigurationContext(version) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {};\n  this._uri = `/Configuration`;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a ConfigurationInstance\n *\n * @function fetch\n * @memberof Twilio.Conversations.V1.ConfigurationContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ConfigurationInstance\n */\n/* jshint ignore:end */\nConfigurationContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({uri: this._uri, method: 'GET'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new ConfigurationInstance(this._version, payload));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * update a ConfigurationInstance\n *\n * @function update\n * @memberof Twilio.Conversations.V1.ConfigurationContext#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.defaultChatServiceSid] -\n *          The SID of the default Conversation Service that every new conversation will be associated with.\n * @param {string} [opts.defaultMessagingServiceSid] -\n *          The SID of the default Messaging Service that every new conversation will be associated with.\n * @param {string} [opts.defaultInactiveTimer] -\n *          Default ISO8601 duration when conversation will be switched to `inactive` state.\n * @param {string} [opts.defaultClosedTimer] -\n *          Default ISO8601 duration when conversation will be switched to `closed` state.\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ConfigurationInstance\n */\n/* jshint ignore:end */\nConfigurationContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n  opts = opts || {};\n\n  var deferred = Q.defer();\n  var data = values.of({\n    'DefaultChatServiceSid': _.get(opts, 'defaultChatServiceSid'),\n    'DefaultMessagingServiceSid': _.get(opts, 'defaultMessagingServiceSid'),\n    'DefaultInactiveTimer': _.get(opts, 'defaultInactiveTimer'),\n    'DefaultClosedTimer': _.get(opts, 'defaultClosedTimer')\n  });\n\n  var promise = this._version.update({uri: this._uri, method: 'POST', data: data});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new ConfigurationInstance(this._version, payload));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Conversations.V1.ConfigurationContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nConfigurationContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nConfigurationContext.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  ConfigurationList: ConfigurationList,\n  ConfigurationPage: ConfigurationPage,\n  ConfigurationInstance: ConfigurationInstance,\n  ConfigurationContext: ConfigurationContext\n};\n"]},"metadata":{},"sourceType":"script"}