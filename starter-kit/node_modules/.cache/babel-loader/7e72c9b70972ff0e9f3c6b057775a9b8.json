{"ast":null,"code":"'use strict';\n/* jshint ignore:start */\n\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n\n/* jshint ignore:end */\n\nvar Q = require('q');\n/* jshint ignore:line */\n\n\nvar _ = require('lodash');\n/* jshint ignore:line */\n\n\nvar util = require('util');\n/* jshint ignore:line */\n\n\nvar Page = require('../../../../base/Page');\n/* jshint ignore:line */\n\n\nvar deserialize = require('../../../../base/deserialize');\n/* jshint ignore:line */\n\n\nvar serialize = require('../../../../base/serialize');\n/* jshint ignore:line */\n\n\nvar values = require('../../../../base/values');\n/* jshint ignore:line */\n\n\nvar DeviceList;\nvar DevicePage;\nvar DeviceInstance;\nvar DeviceContext;\n/* jshint ignore:start */\n\n/**\n * Initialize the DeviceList\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Preview.DeployedDevices.FleetContext.DeviceList\n *\n * @param {Twilio.Preview.DeployedDevices} version - Version of the resource\n * @param {string} fleetSid - The unique identifier of the Fleet.\n */\n\n/* jshint ignore:end */\n\nDeviceList = function DeviceList(version, fleetSid) {\n  /* jshint ignore:start */\n\n  /**\n   * @function devices\n   * @memberof Twilio.Preview.DeployedDevices.FleetContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Preview.DeployedDevices.FleetContext.DeviceContext}\n   */\n\n  /* jshint ignore:end */\n  function DeviceListInstance(sid) {\n    return DeviceListInstance.get(sid);\n  }\n\n  DeviceListInstance._version = version; // Path Solution\n\n  DeviceListInstance._solution = {\n    fleetSid: fleetSid\n  };\n  DeviceListInstance._uri = `/Fleets/${fleetSid}/Devices`;\n  /* jshint ignore:start */\n\n  /**\n   * create a DeviceInstance\n   *\n   * @function create\n   * @memberof Twilio.Preview.DeployedDevices.FleetContext.DeviceList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.uniqueName] - A unique, addressable name of this Device.\n   * @param {string} [opts.friendlyName] -\n   *          A human readable description for this Device.\n   * @param {string} [opts.identity] - An identifier of the Device user.\n   * @param {string} [opts.deploymentSid] - The unique SID of the Deployment group.\n   * @param {boolean} [opts.enabled] - The enabled\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed DeviceInstance\n   */\n\n  /* jshint ignore:end */\n\n  DeviceListInstance.create = function create(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'UniqueName': _.get(opts, 'uniqueName'),\n      'FriendlyName': _.get(opts, 'friendlyName'),\n      'Identity': _.get(opts, 'identity'),\n      'DeploymentSid': _.get(opts, 'deploymentSid'),\n      'Enabled': serialize.bool(_.get(opts, 'enabled'))\n    });\n\n    var promise = this._version.create({\n      uri: this._uri,\n      method: 'POST',\n      data: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new DeviceInstance(this._version, payload, this._solution.fleetSid, this._solution.sid));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Streams DeviceInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Preview.DeployedDevices.FleetContext.DeviceList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.deploymentSid] -\n   *          Find all Devices grouped under the specified Deployment.\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n\n  /* jshint ignore:end */\n\n\n  DeviceListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Lists DeviceInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Preview.DeployedDevices.FleetContext.DeviceList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.deploymentSid] -\n   *          Find all Devices grouped under the specified Deployment.\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  DeviceListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single page of DeviceInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Preview.DeployedDevices.FleetContext.DeviceList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.deploymentSid] -\n   *          Find all Devices grouped under the specified Deployment.\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  DeviceListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'DeploymentSid': _.get(opts, 'deploymentSid'),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new DevicePage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single target page of DeviceInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Preview.DeployedDevices.FleetContext.DeviceList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  DeviceListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new DevicePage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Constructs a device\n   *\n   * @function get\n   * @memberof Twilio.Preview.DeployedDevices.FleetContext.DeviceList#\n   *\n   * @param {string} sid - A string that uniquely identifies the Device.\n   *\n   * @returns {Twilio.Preview.DeployedDevices.FleetContext.DeviceContext}\n   */\n\n  /* jshint ignore:end */\n\n\n  DeviceListInstance.get = function get(sid) {\n    return new DeviceContext(this._version, this._solution.fleetSid, sid);\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Preview.DeployedDevices.FleetContext.DeviceList#\n   *\n   * @returns Object\n   */\n\n  /* jshint ignore:end */\n\n\n  DeviceListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  DeviceListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return DeviceListInstance;\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the DevicePage\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Preview.DeployedDevices.FleetContext.DevicePage\n *\n * @param {DeployedDevices} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {DeviceSolution} solution - Path solution\n *\n * @returns DevicePage\n */\n\n/* jshint ignore:end */\n\n\nDevicePage = function DevicePage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(DevicePage.prototype, Page.prototype);\n\nDevicePage.prototype.constructor = DevicePage;\n/* jshint ignore:start */\n\n/**\n * Build an instance of DeviceInstance\n *\n * @function getInstance\n * @memberof Twilio.Preview.DeployedDevices.FleetContext.DevicePage#\n *\n * @param {DevicePayload} payload - Payload response from the API\n *\n * @returns DeviceInstance\n */\n\n/* jshint ignore:end */\n\nDevicePage.prototype.getInstance = function getInstance(payload) {\n  return new DeviceInstance(this._version, payload, this._solution.fleetSid);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Preview.DeployedDevices.FleetContext.DevicePage#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nDevicePage.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nDevicePage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the DeviceContext\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Preview.DeployedDevices.FleetContext.DeviceInstance\n *\n * @property {string} sid - A string that uniquely identifies this Device.\n * @property {string} url - URL of this Device.\n * @property {string} uniqueName - A unique, addressable name of this Device.\n * @property {string} friendlyName - A human readable description for this Device\n * @property {string} fleetSid - The unique identifier of the Fleet.\n * @property {boolean} enabled - Device enabled flag.\n * @property {string} accountSid - The unique SID that identifies this Account.\n * @property {string} identity - An identifier of the Device user.\n * @property {string} deploymentSid - The unique SID of the Deployment group.\n * @property {Date} dateCreated - The date this Device was created.\n * @property {Date} dateUpdated - The date this Device was updated.\n * @property {Date} dateAuthenticated - The date this Device was authenticated.\n *\n * @param {DeployedDevices} version - Version of the resource\n * @param {DevicePayload} payload - The instance payload\n * @param {sid_like} fleetSid - The unique identifier of the Fleet.\n * @param {sid_like} sid - A string that uniquely identifies the Device.\n */\n\n/* jshint ignore:end */\n\n\nDeviceInstance = function DeviceInstance(version, payload, fleetSid, sid) {\n  this._version = version; // Marshaled Properties\n\n  this.sid = payload.sid; // jshint ignore:line\n\n  this.url = payload.url; // jshint ignore:line\n\n  this.uniqueName = payload.unique_name; // jshint ignore:line\n\n  this.friendlyName = payload.friendly_name; // jshint ignore:line\n\n  this.fleetSid = payload.fleet_sid; // jshint ignore:line\n\n  this.enabled = payload.enabled; // jshint ignore:line\n\n  this.accountSid = payload.account_sid; // jshint ignore:line\n\n  this.identity = payload.identity; // jshint ignore:line\n\n  this.deploymentSid = payload.deployment_sid; // jshint ignore:line\n\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n\n  this.dateAuthenticated = deserialize.iso8601DateTime(payload.date_authenticated); // jshint ignore:line\n  // Context\n\n  this._context = undefined;\n  this._solution = {\n    fleetSid: fleetSid,\n    sid: sid || this.sid\n  };\n};\n\nObject.defineProperty(DeviceInstance.prototype, '_proxy', {\n  get: function () {\n    if (!this._context) {\n      this._context = new DeviceContext(this._version, this._solution.fleetSid, this._solution.sid);\n    }\n\n    return this._context;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * fetch a DeviceInstance\n *\n * @function fetch\n * @memberof Twilio.Preview.DeployedDevices.FleetContext.DeviceInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed DeviceInstance\n */\n\n/* jshint ignore:end */\n\nDeviceInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n/* jshint ignore:start */\n\n/**\n * remove a DeviceInstance\n *\n * @function remove\n * @memberof Twilio.Preview.DeployedDevices.FleetContext.DeviceInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed DeviceInstance\n */\n\n/* jshint ignore:end */\n\n\nDeviceInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n/* jshint ignore:start */\n\n/**\n * update a DeviceInstance\n *\n * @function update\n * @memberof Twilio.Preview.DeployedDevices.FleetContext.DeviceInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] -\n *          A human readable description for this Device.\n * @param {string} [opts.identity] - An identifier of the Device user.\n * @param {string} [opts.deploymentSid] - The unique SID of the Deployment group.\n * @param {boolean} [opts.enabled] - The enabled\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed DeviceInstance\n */\n\n/* jshint ignore:end */\n\n\nDeviceInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Preview.DeployedDevices.FleetContext.DeviceInstance#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nDeviceInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nDeviceInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the DeviceContext\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Preview.DeployedDevices.FleetContext.DeviceContext\n *\n * @param {DeployedDevices} version - Version of the resource\n * @param {sid_like} fleetSid - The fleet_sid\n * @param {sid_like} sid - A string that uniquely identifies the Device.\n */\n\n/* jshint ignore:end */\n\n\nDeviceContext = function DeviceContext(version, fleetSid, sid) {\n  this._version = version; // Path Solution\n\n  this._solution = {\n    fleetSid: fleetSid,\n    sid: sid\n  };\n  this._uri = `/Fleets/${fleetSid}/Devices/${sid}`;\n};\n/* jshint ignore:start */\n\n/**\n * fetch a DeviceInstance\n *\n * @function fetch\n * @memberof Twilio.Preview.DeployedDevices.FleetContext.DeviceContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed DeviceInstance\n */\n\n/* jshint ignore:end */\n\n\nDeviceContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new DeviceInstance(this._version, payload, this._solution.fleetSid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * remove a DeviceInstance\n *\n * @function remove\n * @memberof Twilio.Preview.DeployedDevices.FleetContext.DeviceContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed DeviceInstance\n */\n\n/* jshint ignore:end */\n\n\nDeviceContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.remove({\n    uri: this._uri,\n    method: 'DELETE'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * update a DeviceInstance\n *\n * @function update\n * @memberof Twilio.Preview.DeployedDevices.FleetContext.DeviceContext#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] -\n *          A human readable description for this Device.\n * @param {string} [opts.identity] - An identifier of the Device user.\n * @param {string} [opts.deploymentSid] - The unique SID of the Deployment group.\n * @param {boolean} [opts.enabled] - The enabled\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed DeviceInstance\n */\n\n/* jshint ignore:end */\n\n\nDeviceContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n\n  opts = opts || {};\n  var deferred = Q.defer();\n  var data = values.of({\n    'FriendlyName': _.get(opts, 'friendlyName'),\n    'Identity': _.get(opts, 'identity'),\n    'DeploymentSid': _.get(opts, 'deploymentSid'),\n    'Enabled': serialize.bool(_.get(opts, 'enabled'))\n  });\n\n  var promise = this._version.update({\n    uri: this._uri,\n    method: 'POST',\n    data: data\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new DeviceInstance(this._version, payload, this._solution.fleetSid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Preview.DeployedDevices.FleetContext.DeviceContext#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nDeviceContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nDeviceContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  DeviceList: DeviceList,\n  DevicePage: DevicePage,\n  DeviceInstance: DeviceInstance,\n  DeviceContext: DeviceContext\n};","map":{"version":3,"sources":["/Users/tony_niu/Visual Studio/Twilio/twilio-video-starter-kit/node_modules/twilio/lib/rest/preview/deployed_devices/fleet/device.js"],"names":["Q","require","_","util","Page","deserialize","serialize","values","DeviceList","DevicePage","DeviceInstance","DeviceContext","version","fleetSid","DeviceListInstance","sid","get","_version","_solution","_uri","create","opts","callback","isFunction","deferred","defer","data","of","bool","promise","uri","method","then","payload","resolve","bind","catch","error","reject","nodeify","each","isUndefined","Error","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","fetchNextPage","fn","page","instances","instance","nextPage","merge","list","allResources","resource","push","length","pageToken","pageNumber","params","getPage","targetUrl","_domain","twilio","request","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","url","uniqueName","unique_name","friendlyName","friendly_name","fleet_sid","enabled","accountSid","account_sid","identity","deploymentSid","deployment_sid","dateCreated","iso8601DateTime","date_created","dateUpdated","date_updated","dateAuthenticated","date_authenticated","_context","undefined","Object","defineProperty","fetch","_proxy","remove","update","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar Page = require('../../../../base/Page');  /* jshint ignore:line */\nvar deserialize = require(\n    '../../../../base/deserialize');  /* jshint ignore:line */\nvar serialize = require('../../../../base/serialize');  /* jshint ignore:line */\nvar values = require('../../../../base/values');  /* jshint ignore:line */\n\nvar DeviceList;\nvar DevicePage;\nvar DeviceInstance;\nvar DeviceContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the DeviceList\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Preview.DeployedDevices.FleetContext.DeviceList\n *\n * @param {Twilio.Preview.DeployedDevices} version - Version of the resource\n * @param {string} fleetSid - The unique identifier of the Fleet.\n */\n/* jshint ignore:end */\nDeviceList = function DeviceList(version, fleetSid) {\n  /* jshint ignore:start */\n  /**\n   * @function devices\n   * @memberof Twilio.Preview.DeployedDevices.FleetContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Preview.DeployedDevices.FleetContext.DeviceContext}\n   */\n  /* jshint ignore:end */\n  function DeviceListInstance(sid) {\n    return DeviceListInstance.get(sid);\n  }\n\n  DeviceListInstance._version = version;\n  // Path Solution\n  DeviceListInstance._solution = {fleetSid: fleetSid};\n  DeviceListInstance._uri = `/Fleets/${fleetSid}/Devices`;\n  /* jshint ignore:start */\n  /**\n   * create a DeviceInstance\n   *\n   * @function create\n   * @memberof Twilio.Preview.DeployedDevices.FleetContext.DeviceList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.uniqueName] - A unique, addressable name of this Device.\n   * @param {string} [opts.friendlyName] -\n   *          A human readable description for this Device.\n   * @param {string} [opts.identity] - An identifier of the Device user.\n   * @param {string} [opts.deploymentSid] - The unique SID of the Deployment group.\n   * @param {boolean} [opts.enabled] - The enabled\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed DeviceInstance\n   */\n  /* jshint ignore:end */\n  DeviceListInstance.create = function create(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'UniqueName': _.get(opts, 'uniqueName'),\n      'FriendlyName': _.get(opts, 'friendlyName'),\n      'Identity': _.get(opts, 'identity'),\n      'DeploymentSid': _.get(opts, 'deploymentSid'),\n      'Enabled': serialize.bool(_.get(opts, 'enabled'))\n    });\n\n    var promise = this._version.create({uri: this._uri, method: 'POST', data: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new DeviceInstance(\n        this._version,\n        payload,\n        this._solution.fleetSid,\n        this._solution.sid\n      ));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Streams DeviceInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Preview.DeployedDevices.FleetContext.DeviceList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.deploymentSid] -\n   *          Find all Devices grouped under the specified Deployment.\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  DeviceListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists DeviceInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Preview.DeployedDevices.FleetContext.DeviceList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.deploymentSid] -\n   *          Find all Devices grouped under the specified Deployment.\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  DeviceListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of DeviceInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Preview.DeployedDevices.FleetContext.DeviceList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.deploymentSid] -\n   *          Find all Devices grouped under the specified Deployment.\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  DeviceListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'DeploymentSid': _.get(opts, 'deploymentSid'),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new DevicePage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of DeviceInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Preview.DeployedDevices.FleetContext.DeviceList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  DeviceListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new DevicePage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a device\n   *\n   * @function get\n   * @memberof Twilio.Preview.DeployedDevices.FleetContext.DeviceList#\n   *\n   * @param {string} sid - A string that uniquely identifies the Device.\n   *\n   * @returns {Twilio.Preview.DeployedDevices.FleetContext.DeviceContext}\n   */\n  /* jshint ignore:end */\n  DeviceListInstance.get = function get(sid) {\n    return new DeviceContext(this._version, this._solution.fleetSid, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Preview.DeployedDevices.FleetContext.DeviceList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  DeviceListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  DeviceListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return DeviceListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the DevicePage\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Preview.DeployedDevices.FleetContext.DevicePage\n *\n * @param {DeployedDevices} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {DeviceSolution} solution - Path solution\n *\n * @returns DevicePage\n */\n/* jshint ignore:end */\nDevicePage = function DevicePage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(DevicePage.prototype, Page.prototype);\nDevicePage.prototype.constructor = DevicePage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of DeviceInstance\n *\n * @function getInstance\n * @memberof Twilio.Preview.DeployedDevices.FleetContext.DevicePage#\n *\n * @param {DevicePayload} payload - Payload response from the API\n *\n * @returns DeviceInstance\n */\n/* jshint ignore:end */\nDevicePage.prototype.getInstance = function getInstance(payload) {\n  return new DeviceInstance(this._version, payload, this._solution.fleetSid);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Preview.DeployedDevices.FleetContext.DevicePage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nDevicePage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nDevicePage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the DeviceContext\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Preview.DeployedDevices.FleetContext.DeviceInstance\n *\n * @property {string} sid - A string that uniquely identifies this Device.\n * @property {string} url - URL of this Device.\n * @property {string} uniqueName - A unique, addressable name of this Device.\n * @property {string} friendlyName - A human readable description for this Device\n * @property {string} fleetSid - The unique identifier of the Fleet.\n * @property {boolean} enabled - Device enabled flag.\n * @property {string} accountSid - The unique SID that identifies this Account.\n * @property {string} identity - An identifier of the Device user.\n * @property {string} deploymentSid - The unique SID of the Deployment group.\n * @property {Date} dateCreated - The date this Device was created.\n * @property {Date} dateUpdated - The date this Device was updated.\n * @property {Date} dateAuthenticated - The date this Device was authenticated.\n *\n * @param {DeployedDevices} version - Version of the resource\n * @param {DevicePayload} payload - The instance payload\n * @param {sid_like} fleetSid - The unique identifier of the Fleet.\n * @param {sid_like} sid - A string that uniquely identifies the Device.\n */\n/* jshint ignore:end */\nDeviceInstance = function DeviceInstance(version, payload, fleetSid, sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.sid = payload.sid; // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n  this.uniqueName = payload.unique_name; // jshint ignore:line\n  this.friendlyName = payload.friendly_name; // jshint ignore:line\n  this.fleetSid = payload.fleet_sid; // jshint ignore:line\n  this.enabled = payload.enabled; // jshint ignore:line\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.identity = payload.identity; // jshint ignore:line\n  this.deploymentSid = payload.deployment_sid; // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n  this.dateAuthenticated = deserialize.iso8601DateTime(payload.date_authenticated); // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {fleetSid: fleetSid, sid: sid || this.sid, };\n};\n\nObject.defineProperty(DeviceInstance.prototype,\n  '_proxy', {\n    get: function() {\n      if (!this._context) {\n        this._context = new DeviceContext(this._version, this._solution.fleetSid, this._solution.sid);\n      }\n\n      return this._context;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a DeviceInstance\n *\n * @function fetch\n * @memberof Twilio.Preview.DeployedDevices.FleetContext.DeviceInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed DeviceInstance\n */\n/* jshint ignore:end */\nDeviceInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * remove a DeviceInstance\n *\n * @function remove\n * @memberof Twilio.Preview.DeployedDevices.FleetContext.DeviceInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed DeviceInstance\n */\n/* jshint ignore:end */\nDeviceInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n\n/* jshint ignore:start */\n/**\n * update a DeviceInstance\n *\n * @function update\n * @memberof Twilio.Preview.DeployedDevices.FleetContext.DeviceInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] -\n *          A human readable description for this Device.\n * @param {string} [opts.identity] - An identifier of the Device user.\n * @param {string} [opts.deploymentSid] - The unique SID of the Deployment group.\n * @param {boolean} [opts.enabled] - The enabled\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed DeviceInstance\n */\n/* jshint ignore:end */\nDeviceInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Preview.DeployedDevices.FleetContext.DeviceInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nDeviceInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nDeviceInstance.prototype[util.inspect.custom] = function inspect(depth, options)\n    {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the DeviceContext\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Preview.DeployedDevices.FleetContext.DeviceContext\n *\n * @param {DeployedDevices} version - Version of the resource\n * @param {sid_like} fleetSid - The fleet_sid\n * @param {sid_like} sid - A string that uniquely identifies the Device.\n */\n/* jshint ignore:end */\nDeviceContext = function DeviceContext(version, fleetSid, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {fleetSid: fleetSid, sid: sid, };\n  this._uri = `/Fleets/${fleetSid}/Devices/${sid}`;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a DeviceInstance\n *\n * @function fetch\n * @memberof Twilio.Preview.DeployedDevices.FleetContext.DeviceContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed DeviceInstance\n */\n/* jshint ignore:end */\nDeviceContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({uri: this._uri, method: 'GET'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new DeviceInstance(\n      this._version,\n      payload,\n      this._solution.fleetSid,\n      this._solution.sid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * remove a DeviceInstance\n *\n * @function remove\n * @memberof Twilio.Preview.DeployedDevices.FleetContext.DeviceContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed DeviceInstance\n */\n/* jshint ignore:end */\nDeviceContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.remove({uri: this._uri, method: 'DELETE'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * update a DeviceInstance\n *\n * @function update\n * @memberof Twilio.Preview.DeployedDevices.FleetContext.DeviceContext#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] -\n *          A human readable description for this Device.\n * @param {string} [opts.identity] - An identifier of the Device user.\n * @param {string} [opts.deploymentSid] - The unique SID of the Deployment group.\n * @param {boolean} [opts.enabled] - The enabled\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed DeviceInstance\n */\n/* jshint ignore:end */\nDeviceContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n  opts = opts || {};\n\n  var deferred = Q.defer();\n  var data = values.of({\n    'FriendlyName': _.get(opts, 'friendlyName'),\n    'Identity': _.get(opts, 'identity'),\n    'DeploymentSid': _.get(opts, 'deploymentSid'),\n    'Enabled': serialize.bool(_.get(opts, 'enabled'))\n  });\n\n  var promise = this._version.update({uri: this._uri, method: 'POST', data: data});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new DeviceInstance(\n      this._version,\n      payload,\n      this._solution.fleetSid,\n      this._solution.sid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Preview.DeployedDevices.FleetContext.DeviceContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nDeviceContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nDeviceContext.prototype[util.inspect.custom] = function inspect(depth, options)\n    {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  DeviceList: DeviceList,\n  DevicePage: DevicePage,\n  DeviceInstance: DeviceInstance,\n  DeviceContext: DeviceContext\n};\n"]},"metadata":{},"sourceType":"script"}