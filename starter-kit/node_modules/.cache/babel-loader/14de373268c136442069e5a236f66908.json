{"ast":null,"code":"'use strict';\n/* jshint ignore:start */\n\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n\n/* jshint ignore:end */\n\nvar Q = require('q');\n/* jshint ignore:line */\n\n\nvar _ = require('lodash');\n/* jshint ignore:line */\n\n\nvar util = require('util');\n/* jshint ignore:line */\n\n\nvar Page = require('../../../../base/Page');\n/* jshint ignore:line */\n\n\nvar TaskQueueCumulativeStatisticsList = require('./taskQueue/taskQueueCumulativeStatistics').TaskQueueCumulativeStatisticsList;\n\nvar TaskQueueRealTimeStatisticsList = require('./taskQueue/taskQueueRealTimeStatistics').TaskQueueRealTimeStatisticsList;\n\nvar TaskQueueStatisticsList = require('./taskQueue/taskQueueStatistics').TaskQueueStatisticsList;\n\nvar TaskQueuesStatisticsList = require('./taskQueue/taskQueuesStatistics').TaskQueuesStatisticsList;\n\nvar deserialize = require('../../../../base/deserialize');\n/* jshint ignore:line */\n\n\nvar values = require('../../../../base/values');\n/* jshint ignore:line */\n\n\nvar TaskQueueList;\nvar TaskQueuePage;\nvar TaskQueueInstance;\nvar TaskQueueContext;\n/* jshint ignore:start */\n\n/**\n * Initialize the TaskQueueList\n *\n * @constructor Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueList\n *\n * @param {Twilio.Taskrouter.V1} version - Version of the resource\n * @param {string} workspaceSid -\n *          The SID of the Workspace that contains the TaskQueue\n */\n\n/* jshint ignore:end */\n\nTaskQueueList = function TaskQueueList(version, workspaceSid) {\n  /* jshint ignore:start */\n\n  /**\n   * @function taskQueues\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueContext}\n   */\n\n  /* jshint ignore:end */\n  function TaskQueueListInstance(sid) {\n    return TaskQueueListInstance.get(sid);\n  }\n\n  TaskQueueListInstance._version = version; // Path Solution\n\n  TaskQueueListInstance._solution = {\n    workspaceSid: workspaceSid\n  };\n  TaskQueueListInstance._uri = `/Workspaces/${workspaceSid}/TaskQueues`; // Components\n\n  TaskQueueListInstance._statistics = undefined;\n  /* jshint ignore:start */\n\n  /**\n   * Streams TaskQueueInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.friendlyName] -\n   *          The friendly_name of the TaskQueue resources to read\n   * @param {string} [opts.evaluateWorkerAttributes] -\n   *          The attributes of the Workers to read\n   * @param {string} [opts.workerSid] -\n   *          The SID of the Worker with the TaskQueue resources to read\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n\n  /* jshint ignore:end */\n\n  TaskQueueListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Lists TaskQueueInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.friendlyName] -\n   *          The friendly_name of the TaskQueue resources to read\n   * @param {string} [opts.evaluateWorkerAttributes] -\n   *          The attributes of the Workers to read\n   * @param {string} [opts.workerSid] -\n   *          The SID of the Worker with the TaskQueue resources to read\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  TaskQueueListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single page of TaskQueueInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.friendlyName] -\n   *          The friendly_name of the TaskQueue resources to read\n   * @param {string} [opts.evaluateWorkerAttributes] -\n   *          The attributes of the Workers to read\n   * @param {string} [opts.workerSid] -\n   *          The SID of the Worker with the TaskQueue resources to read\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  TaskQueueListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'FriendlyName': _.get(opts, 'friendlyName'),\n      'EvaluateWorkerAttributes': _.get(opts, 'evaluateWorkerAttributes'),\n      'WorkerSid': _.get(opts, 'workerSid'),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new TaskQueuePage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single target page of TaskQueueInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  TaskQueueListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new TaskQueuePage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * create a TaskQueueInstance\n   *\n   * @function create\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.friendlyName - A string to describe the resource\n   * @param {string} [opts.targetWorkers] -\n   *          A string describing the Worker selection criteria for any Tasks that enter the TaskQueue\n   * @param {number} [opts.maxReservedWorkers] -\n   *          The maximum number of Workers to reserve\n   * @param {task_queue.task_order} [opts.taskOrder] -\n   *          How Tasks will be assigned to Workers\n   * @param {string} [opts.reservationActivitySid] -\n   *          The SID of the Activity to assign Workers when a task is reserved for them\n   * @param {string} [opts.assignmentActivitySid] -\n   *          The SID of the Activity to assign Workers once a task is assigned to them\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed TaskQueueInstance\n   */\n\n  /* jshint ignore:end */\n\n\n  TaskQueueListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n\n    if (_.isUndefined(opts.friendlyName)) {\n      throw new Error('Required parameter \"opts.friendlyName\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'FriendlyName': _.get(opts, 'friendlyName'),\n      'TargetWorkers': _.get(opts, 'targetWorkers'),\n      'MaxReservedWorkers': _.get(opts, 'maxReservedWorkers'),\n      'TaskOrder': _.get(opts, 'taskOrder'),\n      'ReservationActivitySid': _.get(opts, 'reservationActivitySid'),\n      'AssignmentActivitySid': _.get(opts, 'assignmentActivitySid')\n    });\n\n    var promise = this._version.create({\n      uri: this._uri,\n      method: 'POST',\n      data: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new TaskQueueInstance(this._version, payload, this._solution.workspaceSid, this._solution.sid));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Constructs a task_queue\n   *\n   * @function get\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueList#\n   *\n   * @param {string} sid - The SID of the resource to\n   *\n   * @returns {Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueContext}\n   */\n\n  /* jshint ignore:end */\n\n\n  TaskQueueListInstance.get = function get(sid) {\n    return new TaskQueueContext(this._version, this._solution.workspaceSid, sid);\n  };\n\n  Object.defineProperty(TaskQueueListInstance, 'statistics', {\n    get: function statistics() {\n      if (!this._statistics) {\n        this._statistics = new TaskQueuesStatisticsList(this._version, this._solution.workspaceSid);\n      }\n\n      return this._statistics;\n    }\n  });\n  /* jshint ignore:start */\n\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueList#\n   *\n   * @returns Object\n   */\n\n  /* jshint ignore:end */\n\n  TaskQueueListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  TaskQueueListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return TaskQueueListInstance;\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the TaskQueuePage\n *\n * @constructor Twilio.Taskrouter.V1.WorkspaceContext.TaskQueuePage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {TaskQueueSolution} solution - Path solution\n *\n * @returns TaskQueuePage\n */\n\n/* jshint ignore:end */\n\n\nTaskQueuePage = function TaskQueuePage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(TaskQueuePage.prototype, Page.prototype);\n\nTaskQueuePage.prototype.constructor = TaskQueuePage;\n/* jshint ignore:start */\n\n/**\n * Build an instance of TaskQueueInstance\n *\n * @function getInstance\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskQueuePage#\n *\n * @param {TaskQueuePayload} payload - Payload response from the API\n *\n * @returns TaskQueueInstance\n */\n\n/* jshint ignore:end */\n\nTaskQueuePage.prototype.getInstance = function getInstance(payload) {\n  return new TaskQueueInstance(this._version, payload, this._solution.workspaceSid);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskQueuePage#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nTaskQueuePage.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nTaskQueuePage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the TaskQueueContext\n *\n * @constructor Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueInstance\n *\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {string} assignmentActivitySid -\n *          The SID of the Activity to assign Workers when a task is assigned for them\n * @property {string} assignmentActivityName -\n *          The name of the Activity to assign Workers when a task is assigned for them\n * @property {Date} dateCreated -\n *          The RFC 2822 date and time in GMT when the resource was created\n * @property {Date} dateUpdated -\n *          The RFC 2822 date and time in GMT when the resource was last updated\n * @property {string} friendlyName -\n *          The string that you assigned to describe the resource\n * @property {number} maxReservedWorkers - The maximum number of Workers to reserve\n * @property {string} reservationActivitySid -\n *          The SID of the Activity to assign Workers once a task is reserved for them\n * @property {string} reservationActivityName -\n *          The name of the Activity to assign Workers once a task is reserved for them\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} targetWorkers -\n *          A string describing the Worker selection criteria for any Tasks that enter the TaskQueue\n * @property {task_queue.task_order} taskOrder -\n *          How Tasks will be assigned to Workers\n * @property {string} url - The absolute URL of the TaskQueue resource\n * @property {string} workspaceSid -\n *          The SID of the Workspace that contains the TaskQueue\n * @property {string} links - The URLs of related resources\n *\n * @param {V1} version - Version of the resource\n * @param {TaskQueuePayload} payload - The instance payload\n * @param {sid} workspaceSid - The SID of the Workspace that contains the TaskQueue\n * @param {sid} sid - The SID of the resource to\n */\n\n/* jshint ignore:end */\n\n\nTaskQueueInstance = function TaskQueueInstance(version, payload, workspaceSid, sid) {\n  this._version = version; // Marshaled Properties\n\n  this.accountSid = payload.account_sid; // jshint ignore:line\n\n  this.assignmentActivitySid = payload.assignment_activity_sid; // jshint ignore:line\n\n  this.assignmentActivityName = payload.assignment_activity_name; // jshint ignore:line\n\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n\n  this.friendlyName = payload.friendly_name; // jshint ignore:line\n\n  this.maxReservedWorkers = deserialize.integer(payload.max_reserved_workers); // jshint ignore:line\n\n  this.reservationActivitySid = payload.reservation_activity_sid; // jshint ignore:line\n\n  this.reservationActivityName = payload.reservation_activity_name; // jshint ignore:line\n\n  this.sid = payload.sid; // jshint ignore:line\n\n  this.targetWorkers = payload.target_workers; // jshint ignore:line\n\n  this.taskOrder = payload.task_order; // jshint ignore:line\n\n  this.url = payload.url; // jshint ignore:line\n\n  this.workspaceSid = payload.workspace_sid; // jshint ignore:line\n\n  this.links = payload.links; // jshint ignore:line\n  // Context\n\n  this._context = undefined;\n  this._solution = {\n    workspaceSid: workspaceSid,\n    sid: sid || this.sid\n  };\n};\n\nObject.defineProperty(TaskQueueInstance.prototype, '_proxy', {\n  get: function () {\n    if (!this._context) {\n      this._context = new TaskQueueContext(this._version, this._solution.workspaceSid, this._solution.sid);\n    }\n\n    return this._context;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * fetch a TaskQueueInstance\n *\n * @function fetch\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TaskQueueInstance\n */\n\n/* jshint ignore:end */\n\nTaskQueueInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n/* jshint ignore:start */\n\n/**\n * update a TaskQueueInstance\n *\n * @function update\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] - A string to describe the resource\n * @param {string} [opts.targetWorkers] -\n *          A string describing the Worker selection criteria for any Tasks that enter the TaskQueue\n * @param {string} [opts.reservationActivitySid] -\n *          The SID of the Activity to assign Workers when a task is reserved for them\n * @param {string} [opts.assignmentActivitySid] -\n *          The SID of the Activity to assign Workers when a task is assigned for them\n * @param {number} [opts.maxReservedWorkers] -\n *          The maximum number of Workers to create reservations for the assignment of a task while in the queue\n * @param {task_queue.task_order} [opts.taskOrder] -\n *          How Tasks will be assigned to Workers\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TaskQueueInstance\n */\n\n/* jshint ignore:end */\n\n\nTaskQueueInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n/* jshint ignore:start */\n\n/**\n * remove a TaskQueueInstance\n *\n * @function remove\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TaskQueueInstance\n */\n\n/* jshint ignore:end */\n\n\nTaskQueueInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n/* jshint ignore:start */\n\n/**\n * Access the statistics\n *\n * @function statistics\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueInstance#\n *\n * @returns {Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueContext.TaskQueueStatisticsList}\n */\n\n/* jshint ignore:end */\n\n\nTaskQueueInstance.prototype.statistics = function statistics() {\n  return this._proxy.statistics;\n};\n/* jshint ignore:start */\n\n/**\n * Access the realTimeStatistics\n *\n * @function realTimeStatistics\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueInstance#\n *\n * @returns {Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueContext.TaskQueueRealTimeStatisticsList}\n */\n\n/* jshint ignore:end */\n\n\nTaskQueueInstance.prototype.realTimeStatistics = function realTimeStatistics() {\n  return this._proxy.realTimeStatistics;\n};\n/* jshint ignore:start */\n\n/**\n * Access the cumulativeStatistics\n *\n * @function cumulativeStatistics\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueInstance#\n *\n * @returns {Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueContext.TaskQueueCumulativeStatisticsList}\n */\n\n/* jshint ignore:end */\n\n\nTaskQueueInstance.prototype.cumulativeStatistics = function cumulativeStatistics() {\n  return this._proxy.cumulativeStatistics;\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueInstance#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nTaskQueueInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nTaskQueueInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the TaskQueueContext\n *\n * @constructor Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueContext\n *\n * @property {Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueContext.TaskQueueStatisticsList} statistics -\n *          statistics resource\n * @property {Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueContext.TaskQueueRealTimeStatisticsList} realTimeStatistics -\n *          realTimeStatistics resource\n * @property {Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueContext.TaskQueueCumulativeStatisticsList} cumulativeStatistics -\n *          cumulativeStatistics resource\n *\n * @param {V1} version - Version of the resource\n * @param {sid} workspaceSid - The SID of the Workspace with the TaskQueue to fetch\n * @param {sid} sid - The SID of the resource to\n */\n\n/* jshint ignore:end */\n\n\nTaskQueueContext = function TaskQueueContext(version, workspaceSid, sid) {\n  this._version = version; // Path Solution\n\n  this._solution = {\n    workspaceSid: workspaceSid,\n    sid: sid\n  };\n  this._uri = `/Workspaces/${workspaceSid}/TaskQueues/${sid}`; // Dependents\n\n  this._statistics = undefined;\n  this._realTimeStatistics = undefined;\n  this._cumulativeStatistics = undefined;\n};\n/* jshint ignore:start */\n\n/**\n * fetch a TaskQueueInstance\n *\n * @function fetch\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TaskQueueInstance\n */\n\n/* jshint ignore:end */\n\n\nTaskQueueContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new TaskQueueInstance(this._version, payload, this._solution.workspaceSid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * update a TaskQueueInstance\n *\n * @function update\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueContext#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] - A string to describe the resource\n * @param {string} [opts.targetWorkers] -\n *          A string describing the Worker selection criteria for any Tasks that enter the TaskQueue\n * @param {string} [opts.reservationActivitySid] -\n *          The SID of the Activity to assign Workers when a task is reserved for them\n * @param {string} [opts.assignmentActivitySid] -\n *          The SID of the Activity to assign Workers when a task is assigned for them\n * @param {number} [opts.maxReservedWorkers] -\n *          The maximum number of Workers to create reservations for the assignment of a task while in the queue\n * @param {task_queue.task_order} [opts.taskOrder] -\n *          How Tasks will be assigned to Workers\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TaskQueueInstance\n */\n\n/* jshint ignore:end */\n\n\nTaskQueueContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n\n  opts = opts || {};\n  var deferred = Q.defer();\n  var data = values.of({\n    'FriendlyName': _.get(opts, 'friendlyName'),\n    'TargetWorkers': _.get(opts, 'targetWorkers'),\n    'ReservationActivitySid': _.get(opts, 'reservationActivitySid'),\n    'AssignmentActivitySid': _.get(opts, 'assignmentActivitySid'),\n    'MaxReservedWorkers': _.get(opts, 'maxReservedWorkers'),\n    'TaskOrder': _.get(opts, 'taskOrder')\n  });\n\n  var promise = this._version.update({\n    uri: this._uri,\n    method: 'POST',\n    data: data\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new TaskQueueInstance(this._version, payload, this._solution.workspaceSid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * remove a TaskQueueInstance\n *\n * @function remove\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TaskQueueInstance\n */\n\n/* jshint ignore:end */\n\n\nTaskQueueContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.remove({\n    uri: this._uri,\n    method: 'DELETE'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\nObject.defineProperty(TaskQueueContext.prototype, 'statistics', {\n  get: function () {\n    if (!this._statistics) {\n      this._statistics = new TaskQueueStatisticsList(this._version, this._solution.workspaceSid, this._solution.sid);\n    }\n\n    return this._statistics;\n  }\n});\nObject.defineProperty(TaskQueueContext.prototype, 'realTimeStatistics', {\n  get: function () {\n    if (!this._realTimeStatistics) {\n      this._realTimeStatistics = new TaskQueueRealTimeStatisticsList(this._version, this._solution.workspaceSid, this._solution.sid);\n    }\n\n    return this._realTimeStatistics;\n  }\n});\nObject.defineProperty(TaskQueueContext.prototype, 'cumulativeStatistics', {\n  get: function () {\n    if (!this._cumulativeStatistics) {\n      this._cumulativeStatistics = new TaskQueueCumulativeStatisticsList(this._version, this._solution.workspaceSid, this._solution.sid);\n    }\n\n    return this._cumulativeStatistics;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueContext#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\nTaskQueueContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nTaskQueueContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  TaskQueueList: TaskQueueList,\n  TaskQueuePage: TaskQueuePage,\n  TaskQueueInstance: TaskQueueInstance,\n  TaskQueueContext: TaskQueueContext\n};","map":{"version":3,"sources":["/Users/tony_niu/Visual Studio/Twilio/twilio-video-starter-kit/src/token-service/node_modules/twilio/lib/rest/taskrouter/v1/workspace/taskQueue.js"],"names":["Q","require","_","util","Page","TaskQueueCumulativeStatisticsList","TaskQueueRealTimeStatisticsList","TaskQueueStatisticsList","TaskQueuesStatisticsList","deserialize","values","TaskQueueList","TaskQueuePage","TaskQueueInstance","TaskQueueContext","version","workspaceSid","TaskQueueListInstance","sid","get","_version","_solution","_uri","_statistics","undefined","each","opts","callback","isFunction","isUndefined","Error","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","error","fetchNextPage","fn","promise","then","page","instances","instance","bind","nextPage","catch","merge","list","deferred","defer","allResources","resource","push","length","resolve","reject","nodeify","data","of","pageToken","pageNumber","uri","method","params","payload","getPage","targetUrl","_domain","twilio","request","create","friendlyName","Object","defineProperty","statistics","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","accountSid","account_sid","assignmentActivitySid","assignment_activity_sid","assignmentActivityName","assignment_activity_name","dateCreated","iso8601DateTime","date_created","dateUpdated","date_updated","friendly_name","maxReservedWorkers","integer","max_reserved_workers","reservationActivitySid","reservation_activity_sid","reservationActivityName","reservation_activity_name","targetWorkers","target_workers","taskOrder","task_order","url","workspace_sid","links","_context","fetch","_proxy","update","remove","realTimeStatistics","cumulativeStatistics","_realTimeStatistics","_cumulativeStatistics","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar Page = require('../../../../base/Page');  /* jshint ignore:line */\nvar TaskQueueCumulativeStatisticsList = require(\n    './taskQueue/taskQueueCumulativeStatistics').TaskQueueCumulativeStatisticsList;\nvar TaskQueueRealTimeStatisticsList = require(\n    './taskQueue/taskQueueRealTimeStatistics').TaskQueueRealTimeStatisticsList;\nvar TaskQueueStatisticsList = require(\n    './taskQueue/taskQueueStatistics').TaskQueueStatisticsList;\nvar TaskQueuesStatisticsList = require(\n    './taskQueue/taskQueuesStatistics').TaskQueuesStatisticsList;\nvar deserialize = require(\n    '../../../../base/deserialize');  /* jshint ignore:line */\nvar values = require('../../../../base/values');  /* jshint ignore:line */\n\nvar TaskQueueList;\nvar TaskQueuePage;\nvar TaskQueueInstance;\nvar TaskQueueContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the TaskQueueList\n *\n * @constructor Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueList\n *\n * @param {Twilio.Taskrouter.V1} version - Version of the resource\n * @param {string} workspaceSid -\n *          The SID of the Workspace that contains the TaskQueue\n */\n/* jshint ignore:end */\nTaskQueueList = function TaskQueueList(version, workspaceSid) {\n  /* jshint ignore:start */\n  /**\n   * @function taskQueues\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueContext}\n   */\n  /* jshint ignore:end */\n  function TaskQueueListInstance(sid) {\n    return TaskQueueListInstance.get(sid);\n  }\n\n  TaskQueueListInstance._version = version;\n  // Path Solution\n  TaskQueueListInstance._solution = {workspaceSid: workspaceSid};\n  TaskQueueListInstance._uri = `/Workspaces/${workspaceSid}/TaskQueues`;\n\n  // Components\n  TaskQueueListInstance._statistics = undefined;\n\n  /* jshint ignore:start */\n  /**\n   * Streams TaskQueueInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.friendlyName] -\n   *          The friendly_name of the TaskQueue resources to read\n   * @param {string} [opts.evaluateWorkerAttributes] -\n   *          The attributes of the Workers to read\n   * @param {string} [opts.workerSid] -\n   *          The SID of the Worker with the TaskQueue resources to read\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  TaskQueueListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists TaskQueueInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.friendlyName] -\n   *          The friendly_name of the TaskQueue resources to read\n   * @param {string} [opts.evaluateWorkerAttributes] -\n   *          The attributes of the Workers to read\n   * @param {string} [opts.workerSid] -\n   *          The SID of the Worker with the TaskQueue resources to read\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  TaskQueueListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of TaskQueueInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.friendlyName] -\n   *          The friendly_name of the TaskQueue resources to read\n   * @param {string} [opts.evaluateWorkerAttributes] -\n   *          The attributes of the Workers to read\n   * @param {string} [opts.workerSid] -\n   *          The SID of the Worker with the TaskQueue resources to read\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  TaskQueueListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'FriendlyName': _.get(opts, 'friendlyName'),\n      'EvaluateWorkerAttributes': _.get(opts, 'evaluateWorkerAttributes'),\n      'WorkerSid': _.get(opts, 'workerSid'),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new TaskQueuePage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of TaskQueueInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  TaskQueueListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new TaskQueuePage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * create a TaskQueueInstance\n   *\n   * @function create\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.friendlyName - A string to describe the resource\n   * @param {string} [opts.targetWorkers] -\n   *          A string describing the Worker selection criteria for any Tasks that enter the TaskQueue\n   * @param {number} [opts.maxReservedWorkers] -\n   *          The maximum number of Workers to reserve\n   * @param {task_queue.task_order} [opts.taskOrder] -\n   *          How Tasks will be assigned to Workers\n   * @param {string} [opts.reservationActivitySid] -\n   *          The SID of the Activity to assign Workers when a task is reserved for them\n   * @param {string} [opts.assignmentActivitySid] -\n   *          The SID of the Activity to assign Workers once a task is assigned to them\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed TaskQueueInstance\n   */\n  /* jshint ignore:end */\n  TaskQueueListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n    if (_.isUndefined(opts.friendlyName)) {\n      throw new Error('Required parameter \"opts.friendlyName\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'FriendlyName': _.get(opts, 'friendlyName'),\n      'TargetWorkers': _.get(opts, 'targetWorkers'),\n      'MaxReservedWorkers': _.get(opts, 'maxReservedWorkers'),\n      'TaskOrder': _.get(opts, 'taskOrder'),\n      'ReservationActivitySid': _.get(opts, 'reservationActivitySid'),\n      'AssignmentActivitySid': _.get(opts, 'assignmentActivitySid')\n    });\n\n    var promise = this._version.create({uri: this._uri, method: 'POST', data: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new TaskQueueInstance(\n        this._version,\n        payload,\n        this._solution.workspaceSid,\n        this._solution.sid\n      ));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a task_queue\n   *\n   * @function get\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueList#\n   *\n   * @param {string} sid - The SID of the resource to\n   *\n   * @returns {Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueContext}\n   */\n  /* jshint ignore:end */\n  TaskQueueListInstance.get = function get(sid) {\n    return new TaskQueueContext(this._version, this._solution.workspaceSid, sid);\n  };\n\n  Object.defineProperty(TaskQueueListInstance,\n    'statistics', {\n      get: function statistics() {\n        if (!this._statistics) {\n          this._statistics = new TaskQueuesStatisticsList(this._version, this._solution.workspaceSid);\n        }\n\n        return this._statistics;\n      }\n  });\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  TaskQueueListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  TaskQueueListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return TaskQueueListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the TaskQueuePage\n *\n * @constructor Twilio.Taskrouter.V1.WorkspaceContext.TaskQueuePage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {TaskQueueSolution} solution - Path solution\n *\n * @returns TaskQueuePage\n */\n/* jshint ignore:end */\nTaskQueuePage = function TaskQueuePage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(TaskQueuePage.prototype, Page.prototype);\nTaskQueuePage.prototype.constructor = TaskQueuePage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of TaskQueueInstance\n *\n * @function getInstance\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskQueuePage#\n *\n * @param {TaskQueuePayload} payload - Payload response from the API\n *\n * @returns TaskQueueInstance\n */\n/* jshint ignore:end */\nTaskQueuePage.prototype.getInstance = function getInstance(payload) {\n  return new TaskQueueInstance(this._version, payload, this._solution.workspaceSid);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskQueuePage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nTaskQueuePage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nTaskQueuePage.prototype[util.inspect.custom] = function inspect(depth, options)\n    {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the TaskQueueContext\n *\n * @constructor Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueInstance\n *\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {string} assignmentActivitySid -\n *          The SID of the Activity to assign Workers when a task is assigned for them\n * @property {string} assignmentActivityName -\n *          The name of the Activity to assign Workers when a task is assigned for them\n * @property {Date} dateCreated -\n *          The RFC 2822 date and time in GMT when the resource was created\n * @property {Date} dateUpdated -\n *          The RFC 2822 date and time in GMT when the resource was last updated\n * @property {string} friendlyName -\n *          The string that you assigned to describe the resource\n * @property {number} maxReservedWorkers - The maximum number of Workers to reserve\n * @property {string} reservationActivitySid -\n *          The SID of the Activity to assign Workers once a task is reserved for them\n * @property {string} reservationActivityName -\n *          The name of the Activity to assign Workers once a task is reserved for them\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} targetWorkers -\n *          A string describing the Worker selection criteria for any Tasks that enter the TaskQueue\n * @property {task_queue.task_order} taskOrder -\n *          How Tasks will be assigned to Workers\n * @property {string} url - The absolute URL of the TaskQueue resource\n * @property {string} workspaceSid -\n *          The SID of the Workspace that contains the TaskQueue\n * @property {string} links - The URLs of related resources\n *\n * @param {V1} version - Version of the resource\n * @param {TaskQueuePayload} payload - The instance payload\n * @param {sid} workspaceSid - The SID of the Workspace that contains the TaskQueue\n * @param {sid} sid - The SID of the resource to\n */\n/* jshint ignore:end */\nTaskQueueInstance = function TaskQueueInstance(version, payload, workspaceSid,\n                                                sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.assignmentActivitySid = payload.assignment_activity_sid; // jshint ignore:line\n  this.assignmentActivityName = payload.assignment_activity_name; // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n  this.friendlyName = payload.friendly_name; // jshint ignore:line\n  this.maxReservedWorkers = deserialize.integer(payload.max_reserved_workers); // jshint ignore:line\n  this.reservationActivitySid = payload.reservation_activity_sid; // jshint ignore:line\n  this.reservationActivityName = payload.reservation_activity_name; // jshint ignore:line\n  this.sid = payload.sid; // jshint ignore:line\n  this.targetWorkers = payload.target_workers; // jshint ignore:line\n  this.taskOrder = payload.task_order; // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n  this.workspaceSid = payload.workspace_sid; // jshint ignore:line\n  this.links = payload.links; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {workspaceSid: workspaceSid, sid: sid || this.sid, };\n};\n\nObject.defineProperty(TaskQueueInstance.prototype,\n  '_proxy', {\n    get: function() {\n      if (!this._context) {\n        this._context = new TaskQueueContext(\n          this._version,\n          this._solution.workspaceSid,\n          this._solution.sid\n        );\n      }\n\n      return this._context;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a TaskQueueInstance\n *\n * @function fetch\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TaskQueueInstance\n */\n/* jshint ignore:end */\nTaskQueueInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * update a TaskQueueInstance\n *\n * @function update\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] - A string to describe the resource\n * @param {string} [opts.targetWorkers] -\n *          A string describing the Worker selection criteria for any Tasks that enter the TaskQueue\n * @param {string} [opts.reservationActivitySid] -\n *          The SID of the Activity to assign Workers when a task is reserved for them\n * @param {string} [opts.assignmentActivitySid] -\n *          The SID of the Activity to assign Workers when a task is assigned for them\n * @param {number} [opts.maxReservedWorkers] -\n *          The maximum number of Workers to create reservations for the assignment of a task while in the queue\n * @param {task_queue.task_order} [opts.taskOrder] -\n *          How Tasks will be assigned to Workers\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TaskQueueInstance\n */\n/* jshint ignore:end */\nTaskQueueInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * remove a TaskQueueInstance\n *\n * @function remove\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TaskQueueInstance\n */\n/* jshint ignore:end */\nTaskQueueInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n\n/* jshint ignore:start */\n/**\n * Access the statistics\n *\n * @function statistics\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueInstance#\n *\n * @returns {Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueContext.TaskQueueStatisticsList}\n */\n/* jshint ignore:end */\nTaskQueueInstance.prototype.statistics = function statistics() {\n  return this._proxy.statistics;\n};\n\n/* jshint ignore:start */\n/**\n * Access the realTimeStatistics\n *\n * @function realTimeStatistics\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueInstance#\n *\n * @returns {Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueContext.TaskQueueRealTimeStatisticsList}\n */\n/* jshint ignore:end */\nTaskQueueInstance.prototype.realTimeStatistics = function realTimeStatistics() {\n  return this._proxy.realTimeStatistics;\n};\n\n/* jshint ignore:start */\n/**\n * Access the cumulativeStatistics\n *\n * @function cumulativeStatistics\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueInstance#\n *\n * @returns {Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueContext.TaskQueueCumulativeStatisticsList}\n */\n/* jshint ignore:end */\nTaskQueueInstance.prototype.cumulativeStatistics = function\n    cumulativeStatistics() {\n  return this._proxy.cumulativeStatistics;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nTaskQueueInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nTaskQueueInstance.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the TaskQueueContext\n *\n * @constructor Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueContext\n *\n * @property {Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueContext.TaskQueueStatisticsList} statistics -\n *          statistics resource\n * @property {Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueContext.TaskQueueRealTimeStatisticsList} realTimeStatistics -\n *          realTimeStatistics resource\n * @property {Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueContext.TaskQueueCumulativeStatisticsList} cumulativeStatistics -\n *          cumulativeStatistics resource\n *\n * @param {V1} version - Version of the resource\n * @param {sid} workspaceSid - The SID of the Workspace with the TaskQueue to fetch\n * @param {sid} sid - The SID of the resource to\n */\n/* jshint ignore:end */\nTaskQueueContext = function TaskQueueContext(version, workspaceSid, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {workspaceSid: workspaceSid, sid: sid, };\n  this._uri = `/Workspaces/${workspaceSid}/TaskQueues/${sid}`;\n\n  // Dependents\n  this._statistics = undefined;\n  this._realTimeStatistics = undefined;\n  this._cumulativeStatistics = undefined;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a TaskQueueInstance\n *\n * @function fetch\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TaskQueueInstance\n */\n/* jshint ignore:end */\nTaskQueueContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({uri: this._uri, method: 'GET'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new TaskQueueInstance(\n      this._version,\n      payload,\n      this._solution.workspaceSid,\n      this._solution.sid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * update a TaskQueueInstance\n *\n * @function update\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueContext#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] - A string to describe the resource\n * @param {string} [opts.targetWorkers] -\n *          A string describing the Worker selection criteria for any Tasks that enter the TaskQueue\n * @param {string} [opts.reservationActivitySid] -\n *          The SID of the Activity to assign Workers when a task is reserved for them\n * @param {string} [opts.assignmentActivitySid] -\n *          The SID of the Activity to assign Workers when a task is assigned for them\n * @param {number} [opts.maxReservedWorkers] -\n *          The maximum number of Workers to create reservations for the assignment of a task while in the queue\n * @param {task_queue.task_order} [opts.taskOrder] -\n *          How Tasks will be assigned to Workers\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TaskQueueInstance\n */\n/* jshint ignore:end */\nTaskQueueContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n  opts = opts || {};\n\n  var deferred = Q.defer();\n  var data = values.of({\n    'FriendlyName': _.get(opts, 'friendlyName'),\n    'TargetWorkers': _.get(opts, 'targetWorkers'),\n    'ReservationActivitySid': _.get(opts, 'reservationActivitySid'),\n    'AssignmentActivitySid': _.get(opts, 'assignmentActivitySid'),\n    'MaxReservedWorkers': _.get(opts, 'maxReservedWorkers'),\n    'TaskOrder': _.get(opts, 'taskOrder')\n  });\n\n  var promise = this._version.update({uri: this._uri, method: 'POST', data: data});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new TaskQueueInstance(\n      this._version,\n      payload,\n      this._solution.workspaceSid,\n      this._solution.sid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * remove a TaskQueueInstance\n *\n * @function remove\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed TaskQueueInstance\n */\n/* jshint ignore:end */\nTaskQueueContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.remove({uri: this._uri, method: 'DELETE'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\nObject.defineProperty(TaskQueueContext.prototype,\n  'statistics', {\n    get: function() {\n      if (!this._statistics) {\n        this._statistics = new TaskQueueStatisticsList(\n          this._version,\n          this._solution.workspaceSid,\n          this._solution.sid\n        );\n      }\n      return this._statistics;\n    }\n});\n\nObject.defineProperty(TaskQueueContext.prototype,\n  'realTimeStatistics', {\n    get: function() {\n      if (!this._realTimeStatistics) {\n        this._realTimeStatistics = new TaskQueueRealTimeStatisticsList(\n          this._version,\n          this._solution.workspaceSid,\n          this._solution.sid\n        );\n      }\n      return this._realTimeStatistics;\n    }\n});\n\nObject.defineProperty(TaskQueueContext.prototype,\n  'cumulativeStatistics', {\n    get: function() {\n      if (!this._cumulativeStatistics) {\n        this._cumulativeStatistics = new TaskQueueCumulativeStatisticsList(\n          this._version,\n          this._solution.workspaceSid,\n          this._solution.sid\n        );\n      }\n      return this._cumulativeStatistics;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.TaskQueueContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nTaskQueueContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nTaskQueueContext.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  TaskQueueList: TaskQueueList,\n  TaskQueuePage: TaskQueuePage,\n  TaskQueueInstance: TaskQueueInstance,\n  TaskQueueContext: TaskQueueContext\n};\n"]},"metadata":{},"sourceType":"module"}