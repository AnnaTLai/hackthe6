{"ast":null,"code":"'use strict';\n/* jshint ignore:start */\n\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n\n/* jshint ignore:end */\n\nvar Q = require('q');\n/* jshint ignore:line */\n\n\nvar _ = require('lodash');\n/* jshint ignore:line */\n\n\nvar util = require('util');\n/* jshint ignore:line */\n\n\nvar HighriskSpecialPrefixList = require('./country/highriskSpecialPrefix').HighriskSpecialPrefixList;\n\nvar Page = require('../../../../base/Page');\n/* jshint ignore:line */\n\n\nvar serialize = require('../../../../base/serialize');\n/* jshint ignore:line */\n\n\nvar values = require('../../../../base/values');\n/* jshint ignore:line */\n\n\nvar CountryList;\nvar CountryPage;\nvar CountryInstance;\nvar CountryContext;\n/* jshint ignore:start */\n\n/**\n * Initialize the CountryList\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Voice.V1.DialingPermissionsContext.CountryList\n *\n * @param {Twilio.Voice.V1} version - Version of the resource\n */\n\n/* jshint ignore:end */\n\nCountryList = function CountryList(version) {\n  /* jshint ignore:start */\n\n  /**\n   * @function countries\n   * @memberof Twilio.Voice.V1.DialingPermissionsContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Voice.V1.DialingPermissionsContext.CountryContext}\n   */\n\n  /* jshint ignore:end */\n  function CountryListInstance(sid) {\n    return CountryListInstance.get(sid);\n  }\n\n  CountryListInstance._version = version; // Path Solution\n\n  CountryListInstance._solution = {};\n  CountryListInstance._uri = `/DialingPermissions/Countries`;\n  /* jshint ignore:start */\n\n  /**\n   * Streams CountryInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Voice.V1.DialingPermissionsContext.CountryList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.isoCode] -\n   *          Filter to retrieve the country permissions by specifying the ISO country code\n   * @param {string} [opts.continent] -\n   *          Filter to retrieve the country permissions by specifying the continent\n   * @param {string} [opts.countryCode] - Country code filter\n   * @param {boolean} [opts.lowRiskNumbersEnabled] -\n   *          Filter to retrieve the country permissions with dialing to low-risk numbers enabled\n   * @param {boolean} [opts.highRiskSpecialNumbersEnabled] -\n   *          Filter to retrieve the country permissions with dialing to high-risk special service numbers enabled\n   * @param {boolean} [opts.highRiskTollfraudNumbersEnabled] -\n   *          Filter to retrieve the country permissions with dialing to high-risk toll fraud numbers enabled\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n\n  /* jshint ignore:end */\n\n  CountryListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Lists CountryInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Voice.V1.DialingPermissionsContext.CountryList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.isoCode] -\n   *          Filter to retrieve the country permissions by specifying the ISO country code\n   * @param {string} [opts.continent] -\n   *          Filter to retrieve the country permissions by specifying the continent\n   * @param {string} [opts.countryCode] - Country code filter\n   * @param {boolean} [opts.lowRiskNumbersEnabled] -\n   *          Filter to retrieve the country permissions with dialing to low-risk numbers enabled\n   * @param {boolean} [opts.highRiskSpecialNumbersEnabled] -\n   *          Filter to retrieve the country permissions with dialing to high-risk special service numbers enabled\n   * @param {boolean} [opts.highRiskTollfraudNumbersEnabled] -\n   *          Filter to retrieve the country permissions with dialing to high-risk toll fraud numbers enabled\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  CountryListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single page of CountryInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Voice.V1.DialingPermissionsContext.CountryList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.isoCode] -\n   *          Filter to retrieve the country permissions by specifying the ISO country code\n   * @param {string} [opts.continent] -\n   *          Filter to retrieve the country permissions by specifying the continent\n   * @param {string} [opts.countryCode] - Country code filter\n   * @param {boolean} [opts.lowRiskNumbersEnabled] -\n   *          Filter to retrieve the country permissions with dialing to low-risk numbers enabled\n   * @param {boolean} [opts.highRiskSpecialNumbersEnabled] -\n   *          Filter to retrieve the country permissions with dialing to high-risk special service numbers enabled\n   * @param {boolean} [opts.highRiskTollfraudNumbersEnabled] -\n   *          Filter to retrieve the country permissions with dialing to high-risk toll fraud numbers enabled\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  CountryListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'IsoCode': _.get(opts, 'isoCode'),\n      'Continent': _.get(opts, 'continent'),\n      'CountryCode': _.get(opts, 'countryCode'),\n      'LowRiskNumbersEnabled': serialize.bool(_.get(opts, 'lowRiskNumbersEnabled')),\n      'HighRiskSpecialNumbersEnabled': serialize.bool(_.get(opts, 'highRiskSpecialNumbersEnabled')),\n      'HighRiskTollfraudNumbersEnabled': serialize.bool(_.get(opts, 'highRiskTollfraudNumbersEnabled')),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new CountryPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single target page of CountryInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Voice.V1.DialingPermissionsContext.CountryList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  CountryListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new CountryPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Constructs a country\n   *\n   * @function get\n   * @memberof Twilio.Voice.V1.DialingPermissionsContext.CountryList#\n   *\n   * @param {string} isoCode - The ISO country code\n   *\n   * @returns {Twilio.Voice.V1.DialingPermissionsContext.CountryContext}\n   */\n\n  /* jshint ignore:end */\n\n\n  CountryListInstance.get = function get(isoCode) {\n    return new CountryContext(this._version, isoCode);\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Voice.V1.DialingPermissionsContext.CountryList#\n   *\n   * @returns Object\n   */\n\n  /* jshint ignore:end */\n\n\n  CountryListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  CountryListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return CountryListInstance;\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the CountryPage\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Voice.V1.DialingPermissionsContext.CountryPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {CountrySolution} solution - Path solution\n *\n * @returns CountryPage\n */\n\n/* jshint ignore:end */\n\n\nCountryPage = function CountryPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(CountryPage.prototype, Page.prototype);\n\nCountryPage.prototype.constructor = CountryPage;\n/* jshint ignore:start */\n\n/**\n * Build an instance of CountryInstance\n *\n * @function getInstance\n * @memberof Twilio.Voice.V1.DialingPermissionsContext.CountryPage#\n *\n * @param {CountryPayload} payload - Payload response from the API\n *\n * @returns CountryInstance\n */\n\n/* jshint ignore:end */\n\nCountryPage.prototype.getInstance = function getInstance(payload) {\n  return new CountryInstance(this._version, payload);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Voice.V1.DialingPermissionsContext.CountryPage#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nCountryPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nCountryPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the CountryContext\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Voice.V1.DialingPermissionsContext.CountryInstance\n *\n * @property {string} isoCode - The ISO country code\n * @property {string} name - The name of the country\n * @property {string} continent -\n *          The name of the continent in which the country is located\n * @property {string} countryCodes - The E.164 assigned country codes(s)\n * @property {boolean} lowRiskNumbersEnabled -\n *          Whether dialing to low-risk numbers is enabled\n * @property {boolean} highRiskSpecialNumbersEnabled -\n *          Whether dialing to high-risk special services numbers is enabled\n * @property {boolean} highRiskTollfraudNumbersEnabled -\n *          Whether dialing to high-risk toll fraud numbers is enabled, else `false`\n * @property {string} url - The absolute URL of this resource\n * @property {string} links - A list of URLs related to this resource\n *\n * @param {V1} version - Version of the resource\n * @param {CountryPayload} payload - The instance payload\n * @param {iso_country_code} isoCode - The ISO country code\n */\n\n/* jshint ignore:end */\n\n\nCountryInstance = function CountryInstance(version, payload, isoCode) {\n  this._version = version; // Marshaled Properties\n\n  this.isoCode = payload.iso_code; // jshint ignore:line\n\n  this.name = payload.name; // jshint ignore:line\n\n  this.continent = payload.continent; // jshint ignore:line\n\n  this.countryCodes = payload.country_codes; // jshint ignore:line\n\n  this.lowRiskNumbersEnabled = payload.low_risk_numbers_enabled; // jshint ignore:line\n\n  this.highRiskSpecialNumbersEnabled = payload.high_risk_special_numbers_enabled; // jshint ignore:line\n\n  this.highRiskTollfraudNumbersEnabled = payload.high_risk_tollfraud_numbers_enabled; // jshint ignore:line\n\n  this.url = payload.url; // jshint ignore:line\n\n  this.links = payload.links; // jshint ignore:line\n  // Context\n\n  this._context = undefined;\n  this._solution = {\n    isoCode: isoCode || this.isoCode\n  };\n};\n\nObject.defineProperty(CountryInstance.prototype, '_proxy', {\n  get: function () {\n    if (!this._context) {\n      this._context = new CountryContext(this._version, this._solution.isoCode);\n    }\n\n    return this._context;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * fetch a CountryInstance\n *\n * @function fetch\n * @memberof Twilio.Voice.V1.DialingPermissionsContext.CountryInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed CountryInstance\n */\n\n/* jshint ignore:end */\n\nCountryInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n/* jshint ignore:start */\n\n/**\n * Access the highriskSpecialPrefixes\n *\n * @function highriskSpecialPrefixes\n * @memberof Twilio.Voice.V1.DialingPermissionsContext.CountryInstance#\n *\n * @returns {Twilio.Voice.V1.DialingPermissionsContext.CountryContext.HighriskSpecialPrefixList}\n */\n\n/* jshint ignore:end */\n\n\nCountryInstance.prototype.highriskSpecialPrefixes = function highriskSpecialPrefixes() {\n  return this._proxy.highriskSpecialPrefixes;\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Voice.V1.DialingPermissionsContext.CountryInstance#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nCountryInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nCountryInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the CountryContext\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Voice.V1.DialingPermissionsContext.CountryContext\n *\n * @property {Twilio.Voice.V1.DialingPermissionsContext.CountryContext.HighriskSpecialPrefixList} highriskSpecialPrefixes -\n *          highriskSpecialPrefixes resource\n *\n * @param {V1} version - Version of the resource\n * @param {iso_country_code} isoCode - The ISO country code\n */\n\n/* jshint ignore:end */\n\n\nCountryContext = function CountryContext(version, isoCode) {\n  this._version = version; // Path Solution\n\n  this._solution = {\n    isoCode: isoCode\n  };\n  this._uri = `/DialingPermissions/Countries/${isoCode}`; // Dependents\n\n  this._highriskSpecialPrefixes = undefined;\n};\n/* jshint ignore:start */\n\n/**\n * fetch a CountryInstance\n *\n * @function fetch\n * @memberof Twilio.Voice.V1.DialingPermissionsContext.CountryContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed CountryInstance\n */\n\n/* jshint ignore:end */\n\n\nCountryContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new CountryInstance(this._version, payload, this._solution.isoCode));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\nObject.defineProperty(CountryContext.prototype, 'highriskSpecialPrefixes', {\n  get: function () {\n    if (!this._highriskSpecialPrefixes) {\n      this._highriskSpecialPrefixes = new HighriskSpecialPrefixList(this._version, this._solution.isoCode);\n    }\n\n    return this._highriskSpecialPrefixes;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Voice.V1.DialingPermissionsContext.CountryContext#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\nCountryContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nCountryContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  CountryList: CountryList,\n  CountryPage: CountryPage,\n  CountryInstance: CountryInstance,\n  CountryContext: CountryContext\n};","map":{"version":3,"sources":["/Users/tony_niu/Visual Studio/Twilio/twilio-video-starter-kit/node_modules/twilio/lib/rest/voice/v1/dialingPermissions/country.js"],"names":["Q","require","_","util","HighriskSpecialPrefixList","Page","serialize","values","CountryList","CountryPage","CountryInstance","CountryContext","version","CountryListInstance","sid","get","_version","_solution","_uri","each","opts","callback","isFunction","isUndefined","Error","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","error","fetchNextPage","fn","promise","then","page","instances","instance","bind","nextPage","catch","merge","list","deferred","defer","allResources","resource","push","length","resolve","reject","nodeify","data","of","bool","pageToken","pageNumber","uri","method","params","payload","getPage","targetUrl","_domain","twilio","request","isoCode","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","iso_code","name","continent","countryCodes","country_codes","lowRiskNumbersEnabled","low_risk_numbers_enabled","highRiskSpecialNumbersEnabled","high_risk_special_numbers_enabled","highRiskTollfraudNumbersEnabled","high_risk_tollfraud_numbers_enabled","url","links","_context","undefined","Object","defineProperty","fetch","_proxy","highriskSpecialPrefixes","_highriskSpecialPrefixes","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar HighriskSpecialPrefixList = require(\n    './country/highriskSpecialPrefix').HighriskSpecialPrefixList;\nvar Page = require('../../../../base/Page');  /* jshint ignore:line */\nvar serialize = require('../../../../base/serialize');  /* jshint ignore:line */\nvar values = require('../../../../base/values');  /* jshint ignore:line */\n\nvar CountryList;\nvar CountryPage;\nvar CountryInstance;\nvar CountryContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the CountryList\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Voice.V1.DialingPermissionsContext.CountryList\n *\n * @param {Twilio.Voice.V1} version - Version of the resource\n */\n/* jshint ignore:end */\nCountryList = function CountryList(version) {\n  /* jshint ignore:start */\n  /**\n   * @function countries\n   * @memberof Twilio.Voice.V1.DialingPermissionsContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Voice.V1.DialingPermissionsContext.CountryContext}\n   */\n  /* jshint ignore:end */\n  function CountryListInstance(sid) {\n    return CountryListInstance.get(sid);\n  }\n\n  CountryListInstance._version = version;\n  // Path Solution\n  CountryListInstance._solution = {};\n  CountryListInstance._uri = `/DialingPermissions/Countries`;\n  /* jshint ignore:start */\n  /**\n   * Streams CountryInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Voice.V1.DialingPermissionsContext.CountryList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.isoCode] -\n   *          Filter to retrieve the country permissions by specifying the ISO country code\n   * @param {string} [opts.continent] -\n   *          Filter to retrieve the country permissions by specifying the continent\n   * @param {string} [opts.countryCode] - Country code filter\n   * @param {boolean} [opts.lowRiskNumbersEnabled] -\n   *          Filter to retrieve the country permissions with dialing to low-risk numbers enabled\n   * @param {boolean} [opts.highRiskSpecialNumbersEnabled] -\n   *          Filter to retrieve the country permissions with dialing to high-risk special service numbers enabled\n   * @param {boolean} [opts.highRiskTollfraudNumbersEnabled] -\n   *          Filter to retrieve the country permissions with dialing to high-risk toll fraud numbers enabled\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  CountryListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists CountryInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Voice.V1.DialingPermissionsContext.CountryList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.isoCode] -\n   *          Filter to retrieve the country permissions by specifying the ISO country code\n   * @param {string} [opts.continent] -\n   *          Filter to retrieve the country permissions by specifying the continent\n   * @param {string} [opts.countryCode] - Country code filter\n   * @param {boolean} [opts.lowRiskNumbersEnabled] -\n   *          Filter to retrieve the country permissions with dialing to low-risk numbers enabled\n   * @param {boolean} [opts.highRiskSpecialNumbersEnabled] -\n   *          Filter to retrieve the country permissions with dialing to high-risk special service numbers enabled\n   * @param {boolean} [opts.highRiskTollfraudNumbersEnabled] -\n   *          Filter to retrieve the country permissions with dialing to high-risk toll fraud numbers enabled\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  CountryListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of CountryInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Voice.V1.DialingPermissionsContext.CountryList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.isoCode] -\n   *          Filter to retrieve the country permissions by specifying the ISO country code\n   * @param {string} [opts.continent] -\n   *          Filter to retrieve the country permissions by specifying the continent\n   * @param {string} [opts.countryCode] - Country code filter\n   * @param {boolean} [opts.lowRiskNumbersEnabled] -\n   *          Filter to retrieve the country permissions with dialing to low-risk numbers enabled\n   * @param {boolean} [opts.highRiskSpecialNumbersEnabled] -\n   *          Filter to retrieve the country permissions with dialing to high-risk special service numbers enabled\n   * @param {boolean} [opts.highRiskTollfraudNumbersEnabled] -\n   *          Filter to retrieve the country permissions with dialing to high-risk toll fraud numbers enabled\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  CountryListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'IsoCode': _.get(opts, 'isoCode'),\n      'Continent': _.get(opts, 'continent'),\n      'CountryCode': _.get(opts, 'countryCode'),\n      'LowRiskNumbersEnabled': serialize.bool(_.get(opts, 'lowRiskNumbersEnabled')),\n      'HighRiskSpecialNumbersEnabled': serialize.bool(_.get(opts, 'highRiskSpecialNumbersEnabled')),\n      'HighRiskTollfraudNumbersEnabled': serialize.bool(_.get(opts, 'highRiskTollfraudNumbersEnabled')),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new CountryPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of CountryInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Voice.V1.DialingPermissionsContext.CountryList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  CountryListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new CountryPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a country\n   *\n   * @function get\n   * @memberof Twilio.Voice.V1.DialingPermissionsContext.CountryList#\n   *\n   * @param {string} isoCode - The ISO country code\n   *\n   * @returns {Twilio.Voice.V1.DialingPermissionsContext.CountryContext}\n   */\n  /* jshint ignore:end */\n  CountryListInstance.get = function get(isoCode) {\n    return new CountryContext(this._version, isoCode);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Voice.V1.DialingPermissionsContext.CountryList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  CountryListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  CountryListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return CountryListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the CountryPage\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Voice.V1.DialingPermissionsContext.CountryPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {CountrySolution} solution - Path solution\n *\n * @returns CountryPage\n */\n/* jshint ignore:end */\nCountryPage = function CountryPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(CountryPage.prototype, Page.prototype);\nCountryPage.prototype.constructor = CountryPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of CountryInstance\n *\n * @function getInstance\n * @memberof Twilio.Voice.V1.DialingPermissionsContext.CountryPage#\n *\n * @param {CountryPayload} payload - Payload response from the API\n *\n * @returns CountryInstance\n */\n/* jshint ignore:end */\nCountryPage.prototype.getInstance = function getInstance(payload) {\n  return new CountryInstance(this._version, payload);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Voice.V1.DialingPermissionsContext.CountryPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nCountryPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nCountryPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the CountryContext\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Voice.V1.DialingPermissionsContext.CountryInstance\n *\n * @property {string} isoCode - The ISO country code\n * @property {string} name - The name of the country\n * @property {string} continent -\n *          The name of the continent in which the country is located\n * @property {string} countryCodes - The E.164 assigned country codes(s)\n * @property {boolean} lowRiskNumbersEnabled -\n *          Whether dialing to low-risk numbers is enabled\n * @property {boolean} highRiskSpecialNumbersEnabled -\n *          Whether dialing to high-risk special services numbers is enabled\n * @property {boolean} highRiskTollfraudNumbersEnabled -\n *          Whether dialing to high-risk toll fraud numbers is enabled, else `false`\n * @property {string} url - The absolute URL of this resource\n * @property {string} links - A list of URLs related to this resource\n *\n * @param {V1} version - Version of the resource\n * @param {CountryPayload} payload - The instance payload\n * @param {iso_country_code} isoCode - The ISO country code\n */\n/* jshint ignore:end */\nCountryInstance = function CountryInstance(version, payload, isoCode) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.isoCode = payload.iso_code; // jshint ignore:line\n  this.name = payload.name; // jshint ignore:line\n  this.continent = payload.continent; // jshint ignore:line\n  this.countryCodes = payload.country_codes; // jshint ignore:line\n  this.lowRiskNumbersEnabled = payload.low_risk_numbers_enabled; // jshint ignore:line\n  this.highRiskSpecialNumbersEnabled = payload.high_risk_special_numbers_enabled; // jshint ignore:line\n  this.highRiskTollfraudNumbersEnabled = payload.high_risk_tollfraud_numbers_enabled; // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n  this.links = payload.links; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {isoCode: isoCode || this.isoCode, };\n};\n\nObject.defineProperty(CountryInstance.prototype,\n  '_proxy', {\n    get: function() {\n      if (!this._context) {\n        this._context = new CountryContext(this._version, this._solution.isoCode);\n      }\n\n      return this._context;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a CountryInstance\n *\n * @function fetch\n * @memberof Twilio.Voice.V1.DialingPermissionsContext.CountryInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed CountryInstance\n */\n/* jshint ignore:end */\nCountryInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * Access the highriskSpecialPrefixes\n *\n * @function highriskSpecialPrefixes\n * @memberof Twilio.Voice.V1.DialingPermissionsContext.CountryInstance#\n *\n * @returns {Twilio.Voice.V1.DialingPermissionsContext.CountryContext.HighriskSpecialPrefixList}\n */\n/* jshint ignore:end */\nCountryInstance.prototype.highriskSpecialPrefixes = function\n    highriskSpecialPrefixes() {\n  return this._proxy.highriskSpecialPrefixes;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Voice.V1.DialingPermissionsContext.CountryInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nCountryInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nCountryInstance.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the CountryContext\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Voice.V1.DialingPermissionsContext.CountryContext\n *\n * @property {Twilio.Voice.V1.DialingPermissionsContext.CountryContext.HighriskSpecialPrefixList} highriskSpecialPrefixes -\n *          highriskSpecialPrefixes resource\n *\n * @param {V1} version - Version of the resource\n * @param {iso_country_code} isoCode - The ISO country code\n */\n/* jshint ignore:end */\nCountryContext = function CountryContext(version, isoCode) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {isoCode: isoCode, };\n  this._uri = `/DialingPermissions/Countries/${isoCode}`;\n\n  // Dependents\n  this._highriskSpecialPrefixes = undefined;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a CountryInstance\n *\n * @function fetch\n * @memberof Twilio.Voice.V1.DialingPermissionsContext.CountryContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed CountryInstance\n */\n/* jshint ignore:end */\nCountryContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({uri: this._uri, method: 'GET'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new CountryInstance(this._version, payload, this._solution.isoCode));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\nObject.defineProperty(CountryContext.prototype,\n  'highriskSpecialPrefixes', {\n    get: function() {\n      if (!this._highriskSpecialPrefixes) {\n        this._highriskSpecialPrefixes = new HighriskSpecialPrefixList(\n          this._version,\n          this._solution.isoCode\n        );\n      }\n      return this._highriskSpecialPrefixes;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Voice.V1.DialingPermissionsContext.CountryContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nCountryContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nCountryContext.prototype[util.inspect.custom] = function inspect(depth, options)\n    {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  CountryList: CountryList,\n  CountryPage: CountryPage,\n  CountryInstance: CountryInstance,\n  CountryContext: CountryContext\n};\n"]},"metadata":{},"sourceType":"script"}