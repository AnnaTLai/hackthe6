{"ast":null,"code":"'use strict';\n/* jshint ignore:start */\n\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n\n/* jshint ignore:end */\n\nvar Q = require('q');\n/* jshint ignore:line */\n\n\nvar _ = require('lodash');\n/* jshint ignore:line */\n\n\nvar util = require('util');\n/* jshint ignore:line */\n\n\nvar Page = require('../../../../base/Page');\n/* jshint ignore:line */\n\n\nvar values = require('../../../../base/values');\n/* jshint ignore:line */\n\n\nvar SinkTestList;\nvar SinkTestPage;\nvar SinkTestInstance;\n/* jshint ignore:start */\n\n/**\n * Initialize the SinkTestList\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Events.V1.SinkContext.SinkTestList\n *\n * @param {Twilio.Events.V1} version - Version of the resource\n * @param {string} sid - A string that uniquely identifies this Sink.\n */\n\n/* jshint ignore:end */\n\nSinkTestList = function SinkTestList(version, sid) {\n  /* jshint ignore:start */\n\n  /**\n   * @function sinkTest\n   * @memberof Twilio.Events.V1.SinkContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Events.V1.SinkContext.SinkTestContext}\n   */\n\n  /* jshint ignore:end */\n  function SinkTestListInstance(sid) {\n    return SinkTestListInstance.get(sid);\n  }\n\n  SinkTestListInstance._version = version; // Path Solution\n\n  SinkTestListInstance._solution = {\n    sid: sid\n  };\n  SinkTestListInstance._uri = `/Sinks/${sid}/Test`;\n  /* jshint ignore:start */\n\n  /**\n   * create a SinkTestInstance\n   *\n   * @function create\n   * @memberof Twilio.Events.V1.SinkContext.SinkTestList#\n   *\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed SinkTestInstance\n   */\n\n  /* jshint ignore:end */\n\n  SinkTestListInstance.create = function create(callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version.create({\n      uri: this._uri,\n      method: 'POST'\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new SinkTestInstance(this._version, payload));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Events.V1.SinkContext.SinkTestList#\n   *\n   * @returns Object\n   */\n\n  /* jshint ignore:end */\n\n\n  SinkTestListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  SinkTestListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return SinkTestListInstance;\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the SinkTestPage\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Events.V1.SinkContext.SinkTestPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {SinkTestSolution} solution - Path solution\n *\n * @returns SinkTestPage\n */\n\n/* jshint ignore:end */\n\n\nSinkTestPage = function SinkTestPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(SinkTestPage.prototype, Page.prototype);\n\nSinkTestPage.prototype.constructor = SinkTestPage;\n/* jshint ignore:start */\n\n/**\n * Build an instance of SinkTestInstance\n *\n * @function getInstance\n * @memberof Twilio.Events.V1.SinkContext.SinkTestPage#\n *\n * @param {SinkTestPayload} payload - Payload response from the API\n *\n * @returns SinkTestInstance\n */\n\n/* jshint ignore:end */\n\nSinkTestPage.prototype.getInstance = function getInstance(payload) {\n  return new SinkTestInstance(this._version, payload, this._solution.sid);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Events.V1.SinkContext.SinkTestPage#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nSinkTestPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nSinkTestPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the SinkTestContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Events.V1.SinkContext.SinkTestInstance\n *\n * @property {string} result -\n *          Feedback indicating whether the test event was generated.\n *\n * @param {V1} version - Version of the resource\n * @param {SinkTestPayload} payload - The instance payload\n * @param {sid} sid - A string that uniquely identifies this Sink.\n */\n\n/* jshint ignore:end */\n\n\nSinkTestInstance = function SinkTestInstance(version, payload, sid) {\n  this._version = version; // Marshaled Properties\n\n  this.result = payload.result; // jshint ignore:line\n  // Context\n\n  this._context = undefined;\n  this._solution = {\n    sid: sid\n  };\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Events.V1.SinkContext.SinkTestInstance#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nSinkTestInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nSinkTestInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  SinkTestList: SinkTestList,\n  SinkTestPage: SinkTestPage,\n  SinkTestInstance: SinkTestInstance\n};","map":{"version":3,"sources":["/Users/tony_niu/Visual Studio/Twilio/twilio-video-starter-kit/node_modules/twilio/lib/rest/events/v1/sink/sinkTest.js"],"names":["Q","require","_","util","Page","values","SinkTestList","SinkTestPage","SinkTestInstance","version","sid","SinkTestListInstance","get","_version","_solution","_uri","create","callback","deferred","defer","promise","uri","method","then","payload","resolve","bind","catch","error","reject","isFunction","nodeify","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","result","_context","undefined","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar Page = require('../../../../base/Page');  /* jshint ignore:line */\nvar values = require('../../../../base/values');  /* jshint ignore:line */\n\nvar SinkTestList;\nvar SinkTestPage;\nvar SinkTestInstance;\n\n/* jshint ignore:start */\n/**\n * Initialize the SinkTestList\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Events.V1.SinkContext.SinkTestList\n *\n * @param {Twilio.Events.V1} version - Version of the resource\n * @param {string} sid - A string that uniquely identifies this Sink.\n */\n/* jshint ignore:end */\nSinkTestList = function SinkTestList(version, sid) {\n  /* jshint ignore:start */\n  /**\n   * @function sinkTest\n   * @memberof Twilio.Events.V1.SinkContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Events.V1.SinkContext.SinkTestContext}\n   */\n  /* jshint ignore:end */\n  function SinkTestListInstance(sid) {\n    return SinkTestListInstance.get(sid);\n  }\n\n  SinkTestListInstance._version = version;\n  // Path Solution\n  SinkTestListInstance._solution = {sid: sid};\n  SinkTestListInstance._uri = `/Sinks/${sid}/Test`;\n  /* jshint ignore:start */\n  /**\n   * create a SinkTestInstance\n   *\n   * @function create\n   * @memberof Twilio.Events.V1.SinkContext.SinkTestList#\n   *\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed SinkTestInstance\n   */\n  /* jshint ignore:end */\n  SinkTestListInstance.create = function create(callback) {\n    var deferred = Q.defer();\n    var promise = this._version.create({uri: this._uri, method: 'POST'});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new SinkTestInstance(this._version, payload));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Events.V1.SinkContext.SinkTestList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  SinkTestListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  SinkTestListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return SinkTestListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the SinkTestPage\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Events.V1.SinkContext.SinkTestPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {SinkTestSolution} solution - Path solution\n *\n * @returns SinkTestPage\n */\n/* jshint ignore:end */\nSinkTestPage = function SinkTestPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(SinkTestPage.prototype, Page.prototype);\nSinkTestPage.prototype.constructor = SinkTestPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of SinkTestInstance\n *\n * @function getInstance\n * @memberof Twilio.Events.V1.SinkContext.SinkTestPage#\n *\n * @param {SinkTestPayload} payload - Payload response from the API\n *\n * @returns SinkTestInstance\n */\n/* jshint ignore:end */\nSinkTestPage.prototype.getInstance = function getInstance(payload) {\n  return new SinkTestInstance(this._version, payload, this._solution.sid);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Events.V1.SinkContext.SinkTestPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nSinkTestPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nSinkTestPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the SinkTestContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Events.V1.SinkContext.SinkTestInstance\n *\n * @property {string} result -\n *          Feedback indicating whether the test event was generated.\n *\n * @param {V1} version - Version of the resource\n * @param {SinkTestPayload} payload - The instance payload\n * @param {sid} sid - A string that uniquely identifies this Sink.\n */\n/* jshint ignore:end */\nSinkTestInstance = function SinkTestInstance(version, payload, sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.result = payload.result; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {sid: sid, };\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Events.V1.SinkContext.SinkTestInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nSinkTestInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nSinkTestInstance.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  SinkTestList: SinkTestList,\n  SinkTestPage: SinkTestPage,\n  SinkTestInstance: SinkTestInstance\n};\n"]},"metadata":{},"sourceType":"script"}