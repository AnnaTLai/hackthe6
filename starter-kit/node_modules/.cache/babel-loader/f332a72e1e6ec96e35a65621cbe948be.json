{"ast":null,"code":"'use strict';\n/* jshint ignore:start */\n\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n\n/* jshint ignore:end */\n\nvar Q = require('q');\n/* jshint ignore:line */\n\n\nvar _ = require('lodash');\n/* jshint ignore:line */\n\n\nvar util = require('util');\n/* jshint ignore:line */\n\n\nvar Page = require('../../../../base/Page');\n/* jshint ignore:line */\n\n\nvar WorkflowCumulativeStatisticsList = require('./workflow/workflowCumulativeStatistics').WorkflowCumulativeStatisticsList;\n\nvar WorkflowRealTimeStatisticsList = require('./workflow/workflowRealTimeStatistics').WorkflowRealTimeStatisticsList;\n\nvar WorkflowStatisticsList = require('./workflow/workflowStatistics').WorkflowStatisticsList;\n\nvar deserialize = require('../../../../base/deserialize');\n/* jshint ignore:line */\n\n\nvar values = require('../../../../base/values');\n/* jshint ignore:line */\n\n\nvar WorkflowList;\nvar WorkflowPage;\nvar WorkflowInstance;\nvar WorkflowContext;\n/* jshint ignore:start */\n\n/**\n * Initialize the WorkflowList\n *\n * @constructor Twilio.Taskrouter.V1.WorkspaceContext.WorkflowList\n *\n * @param {Twilio.Taskrouter.V1} version - Version of the resource\n * @param {string} workspaceSid -\n *          The SID of the Workspace that contains the Workflow\n */\n\n/* jshint ignore:end */\n\nWorkflowList = function WorkflowList(version, workspaceSid) {\n  /* jshint ignore:start */\n\n  /**\n   * @function workflows\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Taskrouter.V1.WorkspaceContext.WorkflowContext}\n   */\n\n  /* jshint ignore:end */\n  function WorkflowListInstance(sid) {\n    return WorkflowListInstance.get(sid);\n  }\n\n  WorkflowListInstance._version = version; // Path Solution\n\n  WorkflowListInstance._solution = {\n    workspaceSid: workspaceSid\n  };\n  WorkflowListInstance._uri = `/Workspaces/${workspaceSid}/Workflows`;\n  /* jshint ignore:start */\n\n  /**\n   * Streams WorkflowInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkflowList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.friendlyName] -\n   *          The friendly_name of the Workflow resources to read\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n\n  /* jshint ignore:end */\n\n  WorkflowListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Lists WorkflowInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkflowList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.friendlyName] -\n   *          The friendly_name of the Workflow resources to read\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  WorkflowListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single page of WorkflowInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkflowList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.friendlyName] -\n   *          The friendly_name of the Workflow resources to read\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  WorkflowListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'FriendlyName': _.get(opts, 'friendlyName'),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new WorkflowPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single target page of WorkflowInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkflowList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  WorkflowListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new WorkflowPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * create a WorkflowInstance\n   *\n   * @function create\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkflowList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.friendlyName -\n   *         descriptive string that you create to describe the Workflow resource\n   * @param {string} opts.configuration -\n   *          A JSON string that contains the rules to apply to the Workflow\n   * @param {string} [opts.assignmentCallbackUrl] -\n   *          The URL from your application that will process task assignment events\n   * @param {string} [opts.fallbackAssignmentCallbackUrl] -\n   *          The URL that we should call when a call to the `assignment_callback_url` fails\n   * @param {number} [opts.taskReservationTimeout] -\n   *          How long TaskRouter will wait for a confirmation response from your application after it assigns a Task to a Worker\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed WorkflowInstance\n   */\n\n  /* jshint ignore:end */\n\n\n  WorkflowListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n\n    if (_.isUndefined(opts.friendlyName)) {\n      throw new Error('Required parameter \"opts.friendlyName\" missing.');\n    }\n\n    if (_.isUndefined(opts.configuration)) {\n      throw new Error('Required parameter \"opts.configuration\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'FriendlyName': _.get(opts, 'friendlyName'),\n      'Configuration': _.get(opts, 'configuration'),\n      'AssignmentCallbackUrl': _.get(opts, 'assignmentCallbackUrl'),\n      'FallbackAssignmentCallbackUrl': _.get(opts, 'fallbackAssignmentCallbackUrl'),\n      'TaskReservationTimeout': _.get(opts, 'taskReservationTimeout')\n    });\n\n    var promise = this._version.create({\n      uri: this._uri,\n      method: 'POST',\n      data: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new WorkflowInstance(this._version, payload, this._solution.workspaceSid, this._solution.sid));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Constructs a workflow\n   *\n   * @function get\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkflowList#\n   *\n   * @param {string} sid - The SID of the resource\n   *\n   * @returns {Twilio.Taskrouter.V1.WorkspaceContext.WorkflowContext}\n   */\n\n  /* jshint ignore:end */\n\n\n  WorkflowListInstance.get = function get(sid) {\n    return new WorkflowContext(this._version, this._solution.workspaceSid, sid);\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkflowList#\n   *\n   * @returns Object\n   */\n\n  /* jshint ignore:end */\n\n\n  WorkflowListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  WorkflowListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return WorkflowListInstance;\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the WorkflowPage\n *\n * @constructor Twilio.Taskrouter.V1.WorkspaceContext.WorkflowPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {WorkflowSolution} solution - Path solution\n *\n * @returns WorkflowPage\n */\n\n/* jshint ignore:end */\n\n\nWorkflowPage = function WorkflowPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(WorkflowPage.prototype, Page.prototype);\n\nWorkflowPage.prototype.constructor = WorkflowPage;\n/* jshint ignore:start */\n\n/**\n * Build an instance of WorkflowInstance\n *\n * @function getInstance\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkflowPage#\n *\n * @param {WorkflowPayload} payload - Payload response from the API\n *\n * @returns WorkflowInstance\n */\n\n/* jshint ignore:end */\n\nWorkflowPage.prototype.getInstance = function getInstance(payload) {\n  return new WorkflowInstance(this._version, payload, this._solution.workspaceSid);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkflowPage#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nWorkflowPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nWorkflowPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the WorkflowContext\n *\n * @constructor Twilio.Taskrouter.V1.WorkspaceContext.WorkflowInstance\n *\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {string} assignmentCallbackUrl -\n *          The URL that we call when a task managed by the Workflow is assigned to a Worker\n * @property {string} configuration -\n *          A JSON string that contains the Workflow's configuration\n * @property {Date} dateCreated -\n *          The RFC 2822 date and time in GMT when the resource was created\n * @property {Date} dateUpdated -\n *          The RFC 2822 date and time in GMT when the resource was last updated\n * @property {string} documentContentType - The MIME type of the document\n * @property {string} fallbackAssignmentCallbackUrl -\n *          The URL that we call when a call to the `assignment_callback_url` fails\n * @property {string} friendlyName -\n *          The string that you assigned to describe the Workflow resource\n * @property {string} sid - The unique string that identifies the resource\n * @property {number} taskReservationTimeout -\n *          How long TaskRouter will wait for a confirmation response from your application after it assigns a Task to a Worker\n * @property {string} workspaceSid -\n *          The SID of the Workspace that contains the Workflow\n * @property {string} url - The absolute URL of the Workflow resource\n * @property {string} links - The URLs of related resources\n *\n * @param {V1} version - Version of the resource\n * @param {WorkflowPayload} payload - The instance payload\n * @param {sid} workspaceSid - The SID of the Workspace that contains the Workflow\n * @param {sid} sid - The SID of the resource\n */\n\n/* jshint ignore:end */\n\n\nWorkflowInstance = function WorkflowInstance(version, payload, workspaceSid, sid) {\n  this._version = version; // Marshaled Properties\n\n  this.accountSid = payload.account_sid; // jshint ignore:line\n\n  this.assignmentCallbackUrl = payload.assignment_callback_url; // jshint ignore:line\n\n  this.configuration = payload.configuration; // jshint ignore:line\n\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n\n  this.documentContentType = payload.document_content_type; // jshint ignore:line\n\n  this.fallbackAssignmentCallbackUrl = payload.fallback_assignment_callback_url; // jshint ignore:line\n\n  this.friendlyName = payload.friendly_name; // jshint ignore:line\n\n  this.sid = payload.sid; // jshint ignore:line\n\n  this.taskReservationTimeout = deserialize.integer(payload.task_reservation_timeout); // jshint ignore:line\n\n  this.workspaceSid = payload.workspace_sid; // jshint ignore:line\n\n  this.url = payload.url; // jshint ignore:line\n\n  this.links = payload.links; // jshint ignore:line\n  // Context\n\n  this._context = undefined;\n  this._solution = {\n    workspaceSid: workspaceSid,\n    sid: sid || this.sid\n  };\n};\n\nObject.defineProperty(WorkflowInstance.prototype, '_proxy', {\n  get: function () {\n    if (!this._context) {\n      this._context = new WorkflowContext(this._version, this._solution.workspaceSid, this._solution.sid);\n    }\n\n    return this._context;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * fetch a WorkflowInstance\n *\n * @function fetch\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkflowInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed WorkflowInstance\n */\n\n/* jshint ignore:end */\n\nWorkflowInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n/* jshint ignore:start */\n\n/**\n * update a WorkflowInstance\n *\n * @function update\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkflowInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] -\n *         descriptive string that you create to describe the Workflow resource\n * @param {string} [opts.assignmentCallbackUrl] -\n *          The URL from your application that will process task assignment events\n * @param {string} [opts.fallbackAssignmentCallbackUrl] -\n *          The URL that we should call when a call to the `assignment_callback_url` fails\n * @param {string} [opts.configuration] -\n *          A JSON string that contains the rules to apply to the Workflow\n * @param {number} [opts.taskReservationTimeout] -\n *          How long TaskRouter will wait for a confirmation response from your application after it assigns a Task to a Worker\n * @param {string} [opts.reEvaluateTasks] - Whether or not to re-evaluate Tasks\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed WorkflowInstance\n */\n\n/* jshint ignore:end */\n\n\nWorkflowInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n/* jshint ignore:start */\n\n/**\n * remove a WorkflowInstance\n *\n * @function remove\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkflowInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed WorkflowInstance\n */\n\n/* jshint ignore:end */\n\n\nWorkflowInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n/* jshint ignore:start */\n\n/**\n * Access the statistics\n *\n * @function statistics\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkflowInstance#\n *\n * @returns {Twilio.Taskrouter.V1.WorkspaceContext.WorkflowContext.WorkflowStatisticsList}\n */\n\n/* jshint ignore:end */\n\n\nWorkflowInstance.prototype.statistics = function statistics() {\n  return this._proxy.statistics;\n};\n/* jshint ignore:start */\n\n/**\n * Access the realTimeStatistics\n *\n * @function realTimeStatistics\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkflowInstance#\n *\n * @returns {Twilio.Taskrouter.V1.WorkspaceContext.WorkflowContext.WorkflowRealTimeStatisticsList}\n */\n\n/* jshint ignore:end */\n\n\nWorkflowInstance.prototype.realTimeStatistics = function realTimeStatistics() {\n  return this._proxy.realTimeStatistics;\n};\n/* jshint ignore:start */\n\n/**\n * Access the cumulativeStatistics\n *\n * @function cumulativeStatistics\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkflowInstance#\n *\n * @returns {Twilio.Taskrouter.V1.WorkspaceContext.WorkflowContext.WorkflowCumulativeStatisticsList}\n */\n\n/* jshint ignore:end */\n\n\nWorkflowInstance.prototype.cumulativeStatistics = function cumulativeStatistics() {\n  return this._proxy.cumulativeStatistics;\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkflowInstance#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nWorkflowInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nWorkflowInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the WorkflowContext\n *\n * @constructor Twilio.Taskrouter.V1.WorkspaceContext.WorkflowContext\n *\n * @property {Twilio.Taskrouter.V1.WorkspaceContext.WorkflowContext.WorkflowStatisticsList} statistics -\n *          statistics resource\n * @property {Twilio.Taskrouter.V1.WorkspaceContext.WorkflowContext.WorkflowRealTimeStatisticsList} realTimeStatistics -\n *          realTimeStatistics resource\n * @property {Twilio.Taskrouter.V1.WorkspaceContext.WorkflowContext.WorkflowCumulativeStatisticsList} cumulativeStatistics -\n *          cumulativeStatistics resource\n *\n * @param {V1} version - Version of the resource\n * @param {sid} workspaceSid - The SID of the Workspace with the Workflow to fetch\n * @param {sid} sid - The SID of the resource\n */\n\n/* jshint ignore:end */\n\n\nWorkflowContext = function WorkflowContext(version, workspaceSid, sid) {\n  this._version = version; // Path Solution\n\n  this._solution = {\n    workspaceSid: workspaceSid,\n    sid: sid\n  };\n  this._uri = `/Workspaces/${workspaceSid}/Workflows/${sid}`; // Dependents\n\n  this._statistics = undefined;\n  this._realTimeStatistics = undefined;\n  this._cumulativeStatistics = undefined;\n};\n/* jshint ignore:start */\n\n/**\n * fetch a WorkflowInstance\n *\n * @function fetch\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkflowContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed WorkflowInstance\n */\n\n/* jshint ignore:end */\n\n\nWorkflowContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new WorkflowInstance(this._version, payload, this._solution.workspaceSid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * update a WorkflowInstance\n *\n * @function update\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkflowContext#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] -\n *         descriptive string that you create to describe the Workflow resource\n * @param {string} [opts.assignmentCallbackUrl] -\n *          The URL from your application that will process task assignment events\n * @param {string} [opts.fallbackAssignmentCallbackUrl] -\n *          The URL that we should call when a call to the `assignment_callback_url` fails\n * @param {string} [opts.configuration] -\n *          A JSON string that contains the rules to apply to the Workflow\n * @param {number} [opts.taskReservationTimeout] -\n *          How long TaskRouter will wait for a confirmation response from your application after it assigns a Task to a Worker\n * @param {string} [opts.reEvaluateTasks] - Whether or not to re-evaluate Tasks\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed WorkflowInstance\n */\n\n/* jshint ignore:end */\n\n\nWorkflowContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n\n  opts = opts || {};\n  var deferred = Q.defer();\n  var data = values.of({\n    'FriendlyName': _.get(opts, 'friendlyName'),\n    'AssignmentCallbackUrl': _.get(opts, 'assignmentCallbackUrl'),\n    'FallbackAssignmentCallbackUrl': _.get(opts, 'fallbackAssignmentCallbackUrl'),\n    'Configuration': _.get(opts, 'configuration'),\n    'TaskReservationTimeout': _.get(opts, 'taskReservationTimeout'),\n    'ReEvaluateTasks': _.get(opts, 'reEvaluateTasks')\n  });\n\n  var promise = this._version.update({\n    uri: this._uri,\n    method: 'POST',\n    data: data\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new WorkflowInstance(this._version, payload, this._solution.workspaceSid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * remove a WorkflowInstance\n *\n * @function remove\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkflowContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed WorkflowInstance\n */\n\n/* jshint ignore:end */\n\n\nWorkflowContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.remove({\n    uri: this._uri,\n    method: 'DELETE'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\nObject.defineProperty(WorkflowContext.prototype, 'statistics', {\n  get: function () {\n    if (!this._statistics) {\n      this._statistics = new WorkflowStatisticsList(this._version, this._solution.workspaceSid, this._solution.sid);\n    }\n\n    return this._statistics;\n  }\n});\nObject.defineProperty(WorkflowContext.prototype, 'realTimeStatistics', {\n  get: function () {\n    if (!this._realTimeStatistics) {\n      this._realTimeStatistics = new WorkflowRealTimeStatisticsList(this._version, this._solution.workspaceSid, this._solution.sid);\n    }\n\n    return this._realTimeStatistics;\n  }\n});\nObject.defineProperty(WorkflowContext.prototype, 'cumulativeStatistics', {\n  get: function () {\n    if (!this._cumulativeStatistics) {\n      this._cumulativeStatistics = new WorkflowCumulativeStatisticsList(this._version, this._solution.workspaceSid, this._solution.sid);\n    }\n\n    return this._cumulativeStatistics;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkflowContext#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\nWorkflowContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nWorkflowContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  WorkflowList: WorkflowList,\n  WorkflowPage: WorkflowPage,\n  WorkflowInstance: WorkflowInstance,\n  WorkflowContext: WorkflowContext\n};","map":{"version":3,"sources":["/Users/tony_niu/Visual Studio/Twilio/twilio-video-starter-kit/src/token-service/node_modules/twilio/lib/rest/taskrouter/v1/workspace/workflow.js"],"names":["Q","require","_","util","Page","WorkflowCumulativeStatisticsList","WorkflowRealTimeStatisticsList","WorkflowStatisticsList","deserialize","values","WorkflowList","WorkflowPage","WorkflowInstance","WorkflowContext","version","workspaceSid","WorkflowListInstance","sid","get","_version","_solution","_uri","each","opts","callback","isFunction","isUndefined","Error","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","error","fetchNextPage","fn","promise","then","page","instances","instance","bind","nextPage","catch","merge","list","deferred","defer","allResources","resource","push","length","resolve","reject","nodeify","data","of","pageToken","pageNumber","uri","method","params","payload","getPage","targetUrl","_domain","twilio","request","create","friendlyName","configuration","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","accountSid","account_sid","assignmentCallbackUrl","assignment_callback_url","dateCreated","iso8601DateTime","date_created","dateUpdated","date_updated","documentContentType","document_content_type","fallbackAssignmentCallbackUrl","fallback_assignment_callback_url","friendly_name","taskReservationTimeout","integer","task_reservation_timeout","workspace_sid","url","links","_context","undefined","Object","defineProperty","fetch","_proxy","update","remove","statistics","realTimeStatistics","cumulativeStatistics","_statistics","_realTimeStatistics","_cumulativeStatistics","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar Page = require('../../../../base/Page');  /* jshint ignore:line */\nvar WorkflowCumulativeStatisticsList = require(\n    './workflow/workflowCumulativeStatistics').WorkflowCumulativeStatisticsList;\nvar WorkflowRealTimeStatisticsList = require(\n    './workflow/workflowRealTimeStatistics').WorkflowRealTimeStatisticsList;\nvar WorkflowStatisticsList = require(\n    './workflow/workflowStatistics').WorkflowStatisticsList;\nvar deserialize = require(\n    '../../../../base/deserialize');  /* jshint ignore:line */\nvar values = require('../../../../base/values');  /* jshint ignore:line */\n\nvar WorkflowList;\nvar WorkflowPage;\nvar WorkflowInstance;\nvar WorkflowContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the WorkflowList\n *\n * @constructor Twilio.Taskrouter.V1.WorkspaceContext.WorkflowList\n *\n * @param {Twilio.Taskrouter.V1} version - Version of the resource\n * @param {string} workspaceSid -\n *          The SID of the Workspace that contains the Workflow\n */\n/* jshint ignore:end */\nWorkflowList = function WorkflowList(version, workspaceSid) {\n  /* jshint ignore:start */\n  /**\n   * @function workflows\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Taskrouter.V1.WorkspaceContext.WorkflowContext}\n   */\n  /* jshint ignore:end */\n  function WorkflowListInstance(sid) {\n    return WorkflowListInstance.get(sid);\n  }\n\n  WorkflowListInstance._version = version;\n  // Path Solution\n  WorkflowListInstance._solution = {workspaceSid: workspaceSid};\n  WorkflowListInstance._uri = `/Workspaces/${workspaceSid}/Workflows`;\n  /* jshint ignore:start */\n  /**\n   * Streams WorkflowInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkflowList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.friendlyName] -\n   *          The friendly_name of the Workflow resources to read\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  WorkflowListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists WorkflowInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkflowList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.friendlyName] -\n   *          The friendly_name of the Workflow resources to read\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  WorkflowListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of WorkflowInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkflowList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.friendlyName] -\n   *          The friendly_name of the Workflow resources to read\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  WorkflowListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'FriendlyName': _.get(opts, 'friendlyName'),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new WorkflowPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of WorkflowInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkflowList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  WorkflowListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new WorkflowPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * create a WorkflowInstance\n   *\n   * @function create\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkflowList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.friendlyName -\n   *         descriptive string that you create to describe the Workflow resource\n   * @param {string} opts.configuration -\n   *          A JSON string that contains the rules to apply to the Workflow\n   * @param {string} [opts.assignmentCallbackUrl] -\n   *          The URL from your application that will process task assignment events\n   * @param {string} [opts.fallbackAssignmentCallbackUrl] -\n   *          The URL that we should call when a call to the `assignment_callback_url` fails\n   * @param {number} [opts.taskReservationTimeout] -\n   *          How long TaskRouter will wait for a confirmation response from your application after it assigns a Task to a Worker\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed WorkflowInstance\n   */\n  /* jshint ignore:end */\n  WorkflowListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n    if (_.isUndefined(opts.friendlyName)) {\n      throw new Error('Required parameter \"opts.friendlyName\" missing.');\n    }\n    if (_.isUndefined(opts.configuration)) {\n      throw new Error('Required parameter \"opts.configuration\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'FriendlyName': _.get(opts, 'friendlyName'),\n      'Configuration': _.get(opts, 'configuration'),\n      'AssignmentCallbackUrl': _.get(opts, 'assignmentCallbackUrl'),\n      'FallbackAssignmentCallbackUrl': _.get(opts, 'fallbackAssignmentCallbackUrl'),\n      'TaskReservationTimeout': _.get(opts, 'taskReservationTimeout')\n    });\n\n    var promise = this._version.create({uri: this._uri, method: 'POST', data: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new WorkflowInstance(\n        this._version,\n        payload,\n        this._solution.workspaceSid,\n        this._solution.sid\n      ));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a workflow\n   *\n   * @function get\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkflowList#\n   *\n   * @param {string} sid - The SID of the resource\n   *\n   * @returns {Twilio.Taskrouter.V1.WorkspaceContext.WorkflowContext}\n   */\n  /* jshint ignore:end */\n  WorkflowListInstance.get = function get(sid) {\n    return new WorkflowContext(this._version, this._solution.workspaceSid, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkflowList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  WorkflowListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  WorkflowListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return WorkflowListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the WorkflowPage\n *\n * @constructor Twilio.Taskrouter.V1.WorkspaceContext.WorkflowPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {WorkflowSolution} solution - Path solution\n *\n * @returns WorkflowPage\n */\n/* jshint ignore:end */\nWorkflowPage = function WorkflowPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(WorkflowPage.prototype, Page.prototype);\nWorkflowPage.prototype.constructor = WorkflowPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of WorkflowInstance\n *\n * @function getInstance\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkflowPage#\n *\n * @param {WorkflowPayload} payload - Payload response from the API\n *\n * @returns WorkflowInstance\n */\n/* jshint ignore:end */\nWorkflowPage.prototype.getInstance = function getInstance(payload) {\n  return new WorkflowInstance(this._version, payload, this._solution.workspaceSid);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkflowPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nWorkflowPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nWorkflowPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the WorkflowContext\n *\n * @constructor Twilio.Taskrouter.V1.WorkspaceContext.WorkflowInstance\n *\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {string} assignmentCallbackUrl -\n *          The URL that we call when a task managed by the Workflow is assigned to a Worker\n * @property {string} configuration -\n *          A JSON string that contains the Workflow's configuration\n * @property {Date} dateCreated -\n *          The RFC 2822 date and time in GMT when the resource was created\n * @property {Date} dateUpdated -\n *          The RFC 2822 date and time in GMT when the resource was last updated\n * @property {string} documentContentType - The MIME type of the document\n * @property {string} fallbackAssignmentCallbackUrl -\n *          The URL that we call when a call to the `assignment_callback_url` fails\n * @property {string} friendlyName -\n *          The string that you assigned to describe the Workflow resource\n * @property {string} sid - The unique string that identifies the resource\n * @property {number} taskReservationTimeout -\n *          How long TaskRouter will wait for a confirmation response from your application after it assigns a Task to a Worker\n * @property {string} workspaceSid -\n *          The SID of the Workspace that contains the Workflow\n * @property {string} url - The absolute URL of the Workflow resource\n * @property {string} links - The URLs of related resources\n *\n * @param {V1} version - Version of the resource\n * @param {WorkflowPayload} payload - The instance payload\n * @param {sid} workspaceSid - The SID of the Workspace that contains the Workflow\n * @param {sid} sid - The SID of the resource\n */\n/* jshint ignore:end */\nWorkflowInstance = function WorkflowInstance(version, payload, workspaceSid,\n                                              sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.assignmentCallbackUrl = payload.assignment_callback_url; // jshint ignore:line\n  this.configuration = payload.configuration; // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n  this.documentContentType = payload.document_content_type; // jshint ignore:line\n  this.fallbackAssignmentCallbackUrl = payload.fallback_assignment_callback_url; // jshint ignore:line\n  this.friendlyName = payload.friendly_name; // jshint ignore:line\n  this.sid = payload.sid; // jshint ignore:line\n  this.taskReservationTimeout = deserialize.integer(payload.task_reservation_timeout); // jshint ignore:line\n  this.workspaceSid = payload.workspace_sid; // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n  this.links = payload.links; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {workspaceSid: workspaceSid, sid: sid || this.sid, };\n};\n\nObject.defineProperty(WorkflowInstance.prototype,\n  '_proxy', {\n    get: function() {\n      if (!this._context) {\n        this._context = new WorkflowContext(this._version, this._solution.workspaceSid, this._solution.sid);\n      }\n\n      return this._context;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a WorkflowInstance\n *\n * @function fetch\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkflowInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed WorkflowInstance\n */\n/* jshint ignore:end */\nWorkflowInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * update a WorkflowInstance\n *\n * @function update\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkflowInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] -\n *         descriptive string that you create to describe the Workflow resource\n * @param {string} [opts.assignmentCallbackUrl] -\n *          The URL from your application that will process task assignment events\n * @param {string} [opts.fallbackAssignmentCallbackUrl] -\n *          The URL that we should call when a call to the `assignment_callback_url` fails\n * @param {string} [opts.configuration] -\n *          A JSON string that contains the rules to apply to the Workflow\n * @param {number} [opts.taskReservationTimeout] -\n *          How long TaskRouter will wait for a confirmation response from your application after it assigns a Task to a Worker\n * @param {string} [opts.reEvaluateTasks] - Whether or not to re-evaluate Tasks\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed WorkflowInstance\n */\n/* jshint ignore:end */\nWorkflowInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * remove a WorkflowInstance\n *\n * @function remove\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkflowInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed WorkflowInstance\n */\n/* jshint ignore:end */\nWorkflowInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n\n/* jshint ignore:start */\n/**\n * Access the statistics\n *\n * @function statistics\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkflowInstance#\n *\n * @returns {Twilio.Taskrouter.V1.WorkspaceContext.WorkflowContext.WorkflowStatisticsList}\n */\n/* jshint ignore:end */\nWorkflowInstance.prototype.statistics = function statistics() {\n  return this._proxy.statistics;\n};\n\n/* jshint ignore:start */\n/**\n * Access the realTimeStatistics\n *\n * @function realTimeStatistics\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkflowInstance#\n *\n * @returns {Twilio.Taskrouter.V1.WorkspaceContext.WorkflowContext.WorkflowRealTimeStatisticsList}\n */\n/* jshint ignore:end */\nWorkflowInstance.prototype.realTimeStatistics = function realTimeStatistics() {\n  return this._proxy.realTimeStatistics;\n};\n\n/* jshint ignore:start */\n/**\n * Access the cumulativeStatistics\n *\n * @function cumulativeStatistics\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkflowInstance#\n *\n * @returns {Twilio.Taskrouter.V1.WorkspaceContext.WorkflowContext.WorkflowCumulativeStatisticsList}\n */\n/* jshint ignore:end */\nWorkflowInstance.prototype.cumulativeStatistics = function\n    cumulativeStatistics() {\n  return this._proxy.cumulativeStatistics;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkflowInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nWorkflowInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nWorkflowInstance.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the WorkflowContext\n *\n * @constructor Twilio.Taskrouter.V1.WorkspaceContext.WorkflowContext\n *\n * @property {Twilio.Taskrouter.V1.WorkspaceContext.WorkflowContext.WorkflowStatisticsList} statistics -\n *          statistics resource\n * @property {Twilio.Taskrouter.V1.WorkspaceContext.WorkflowContext.WorkflowRealTimeStatisticsList} realTimeStatistics -\n *          realTimeStatistics resource\n * @property {Twilio.Taskrouter.V1.WorkspaceContext.WorkflowContext.WorkflowCumulativeStatisticsList} cumulativeStatistics -\n *          cumulativeStatistics resource\n *\n * @param {V1} version - Version of the resource\n * @param {sid} workspaceSid - The SID of the Workspace with the Workflow to fetch\n * @param {sid} sid - The SID of the resource\n */\n/* jshint ignore:end */\nWorkflowContext = function WorkflowContext(version, workspaceSid, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {workspaceSid: workspaceSid, sid: sid, };\n  this._uri = `/Workspaces/${workspaceSid}/Workflows/${sid}`;\n\n  // Dependents\n  this._statistics = undefined;\n  this._realTimeStatistics = undefined;\n  this._cumulativeStatistics = undefined;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a WorkflowInstance\n *\n * @function fetch\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkflowContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed WorkflowInstance\n */\n/* jshint ignore:end */\nWorkflowContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({uri: this._uri, method: 'GET'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new WorkflowInstance(\n      this._version,\n      payload,\n      this._solution.workspaceSid,\n      this._solution.sid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * update a WorkflowInstance\n *\n * @function update\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkflowContext#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] -\n *         descriptive string that you create to describe the Workflow resource\n * @param {string} [opts.assignmentCallbackUrl] -\n *          The URL from your application that will process task assignment events\n * @param {string} [opts.fallbackAssignmentCallbackUrl] -\n *          The URL that we should call when a call to the `assignment_callback_url` fails\n * @param {string} [opts.configuration] -\n *          A JSON string that contains the rules to apply to the Workflow\n * @param {number} [opts.taskReservationTimeout] -\n *          How long TaskRouter will wait for a confirmation response from your application after it assigns a Task to a Worker\n * @param {string} [opts.reEvaluateTasks] - Whether or not to re-evaluate Tasks\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed WorkflowInstance\n */\n/* jshint ignore:end */\nWorkflowContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n  opts = opts || {};\n\n  var deferred = Q.defer();\n  var data = values.of({\n    'FriendlyName': _.get(opts, 'friendlyName'),\n    'AssignmentCallbackUrl': _.get(opts, 'assignmentCallbackUrl'),\n    'FallbackAssignmentCallbackUrl': _.get(opts, 'fallbackAssignmentCallbackUrl'),\n    'Configuration': _.get(opts, 'configuration'),\n    'TaskReservationTimeout': _.get(opts, 'taskReservationTimeout'),\n    'ReEvaluateTasks': _.get(opts, 'reEvaluateTasks')\n  });\n\n  var promise = this._version.update({uri: this._uri, method: 'POST', data: data});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new WorkflowInstance(\n      this._version,\n      payload,\n      this._solution.workspaceSid,\n      this._solution.sid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * remove a WorkflowInstance\n *\n * @function remove\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkflowContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed WorkflowInstance\n */\n/* jshint ignore:end */\nWorkflowContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.remove({uri: this._uri, method: 'DELETE'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\nObject.defineProperty(WorkflowContext.prototype,\n  'statistics', {\n    get: function() {\n      if (!this._statistics) {\n        this._statistics = new WorkflowStatisticsList(\n          this._version,\n          this._solution.workspaceSid,\n          this._solution.sid\n        );\n      }\n      return this._statistics;\n    }\n});\n\nObject.defineProperty(WorkflowContext.prototype,\n  'realTimeStatistics', {\n    get: function() {\n      if (!this._realTimeStatistics) {\n        this._realTimeStatistics = new WorkflowRealTimeStatisticsList(\n          this._version,\n          this._solution.workspaceSid,\n          this._solution.sid\n        );\n      }\n      return this._realTimeStatistics;\n    }\n});\n\nObject.defineProperty(WorkflowContext.prototype,\n  'cumulativeStatistics', {\n    get: function() {\n      if (!this._cumulativeStatistics) {\n        this._cumulativeStatistics = new WorkflowCumulativeStatisticsList(\n          this._version,\n          this._solution.workspaceSid,\n          this._solution.sid\n        );\n      }\n      return this._cumulativeStatistics;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkflowContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nWorkflowContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nWorkflowContext.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  WorkflowList: WorkflowList,\n  WorkflowPage: WorkflowPage,\n  WorkflowInstance: WorkflowInstance,\n  WorkflowContext: WorkflowContext\n};\n"]},"metadata":{},"sourceType":"module"}