{"ast":null,"code":"'use strict';\n/* jshint ignore:start */\n\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n\n/* jshint ignore:end */\n\nvar Q = require('q');\n/* jshint ignore:line */\n\n\nvar _ = require('lodash');\n/* jshint ignore:line */\n\n\nvar util = require('util');\n/* jshint ignore:line */\n\n\nvar Page = require('../../../base/Page');\n/* jshint ignore:line */\n\n\nvar deserialize = require('../../../base/deserialize');\n/* jshint ignore:line */\n\n\nvar serialize = require('../../../base/serialize');\n/* jshint ignore:line */\n\n\nvar values = require('../../../base/values');\n/* jshint ignore:line */\n\n\nvar FleetList;\nvar FleetPage;\nvar FleetInstance;\nvar FleetContext;\n/* jshint ignore:start */\n\n/**\n * Initialize the FleetList\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Supersim.V1.FleetList\n *\n * @param {Twilio.Supersim.V1} version - Version of the resource\n */\n\n/* jshint ignore:end */\n\nFleetList = function FleetList(version) {\n  /* jshint ignore:start */\n\n  /**\n   * @function fleets\n   * @memberof Twilio.Supersim.V1#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Supersim.V1.FleetContext}\n   */\n\n  /* jshint ignore:end */\n  function FleetListInstance(sid) {\n    return FleetListInstance.get(sid);\n  }\n\n  FleetListInstance._version = version; // Path Solution\n\n  FleetListInstance._solution = {};\n  FleetListInstance._uri = `/Fleets`;\n  /* jshint ignore:start */\n\n  /**\n   * create a FleetInstance\n   *\n   * @function create\n   * @memberof Twilio.Supersim.V1.FleetList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.networkAccessProfile -\n   *          The SID or unique name of the Network Access Profile of the Fleet\n   * @param {string} [opts.uniqueName] -\n   *          An application-defined string that uniquely identifies the resource\n   * @param {boolean} [opts.dataEnabled] -\n   *          Defines whether SIMs in the Fleet are capable of using data connectivity\n   * @param {number} [opts.dataLimit] -\n   *          The total data usage (download and upload combined) in Megabytes that each Sim resource assigned to the Fleet resource can consume\n   * @param {boolean} [opts.commandsEnabled] -\n   *          Defines whether SIMs in the Fleet are capable of sending and receiving machine-to-machine SMS via Commands\n   * @param {string} [opts.commandsUrl] -\n   *          The URL that will receive a webhook when a Super SIM in the Fleet is used to send an SMS from your device to the Commands number\n   * @param {string} [opts.commandsMethod] -\n   *          A string representing the HTTP method to use when making a request to `commands_url`\n   * @param {boolean} [opts.smsCommandsEnabled] -\n   *          Defines whether SIMs in the Fleet are capable of sending and receiving machine-to-machine SMS via Commands\n   * @param {string} [opts.smsCommandsUrl] -\n   *          The URL that will receive a webhook when a Super SIM in the Fleet is used to send an SMS from your device to the SMS Commands number\n   * @param {string} [opts.smsCommandsMethod] -\n   *          A string representing the HTTP method to use when making a request to `sms_commands_url`\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed FleetInstance\n   */\n\n  /* jshint ignore:end */\n\n  FleetListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n\n    if (_.isUndefined(opts.networkAccessProfile)) {\n      throw new Error('Required parameter \"opts.networkAccessProfile\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'NetworkAccessProfile': _.get(opts, 'networkAccessProfile'),\n      'UniqueName': _.get(opts, 'uniqueName'),\n      'DataEnabled': serialize.bool(_.get(opts, 'dataEnabled')),\n      'DataLimit': _.get(opts, 'dataLimit'),\n      'CommandsEnabled': serialize.bool(_.get(opts, 'commandsEnabled')),\n      'CommandsUrl': _.get(opts, 'commandsUrl'),\n      'CommandsMethod': _.get(opts, 'commandsMethod'),\n      'SmsCommandsEnabled': serialize.bool(_.get(opts, 'smsCommandsEnabled')),\n      'SmsCommandsUrl': _.get(opts, 'smsCommandsUrl'),\n      'SmsCommandsMethod': _.get(opts, 'smsCommandsMethod')\n    });\n\n    var promise = this._version.create({\n      uri: this._uri,\n      method: 'POST',\n      data: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new FleetInstance(this._version, payload, this._solution.sid));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Streams FleetInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Supersim.V1.FleetList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.networkAccessProfile] -\n   *          The SID or unique name of the Network Access Profile of the Fleet\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n\n  /* jshint ignore:end */\n\n\n  FleetListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Lists FleetInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Supersim.V1.FleetList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.networkAccessProfile] -\n   *          The SID or unique name of the Network Access Profile of the Fleet\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  FleetListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single page of FleetInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Supersim.V1.FleetList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.networkAccessProfile] -\n   *          The SID or unique name of the Network Access Profile of the Fleet\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  FleetListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'NetworkAccessProfile': _.get(opts, 'networkAccessProfile'),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new FleetPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single target page of FleetInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Supersim.V1.FleetList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  FleetListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new FleetPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Constructs a fleet\n   *\n   * @function get\n   * @memberof Twilio.Supersim.V1.FleetList#\n   *\n   * @param {string} sid - The SID that identifies the resource to fetch\n   *\n   * @returns {Twilio.Supersim.V1.FleetContext}\n   */\n\n  /* jshint ignore:end */\n\n\n  FleetListInstance.get = function get(sid) {\n    return new FleetContext(this._version, sid);\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Supersim.V1.FleetList#\n   *\n   * @returns Object\n   */\n\n  /* jshint ignore:end */\n\n\n  FleetListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  FleetListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return FleetListInstance;\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the FleetPage\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Supersim.V1.FleetPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {FleetSolution} solution - Path solution\n *\n * @returns FleetPage\n */\n\n/* jshint ignore:end */\n\n\nFleetPage = function FleetPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(FleetPage.prototype, Page.prototype);\n\nFleetPage.prototype.constructor = FleetPage;\n/* jshint ignore:start */\n\n/**\n * Build an instance of FleetInstance\n *\n * @function getInstance\n * @memberof Twilio.Supersim.V1.FleetPage#\n *\n * @param {FleetPayload} payload - Payload response from the API\n *\n * @returns FleetInstance\n */\n\n/* jshint ignore:end */\n\nFleetPage.prototype.getInstance = function getInstance(payload) {\n  return new FleetInstance(this._version, payload);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Supersim.V1.FleetPage#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nFleetPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nFleetPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the FleetContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Supersim.V1.FleetInstance\n *\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} uniqueName -\n *          An application-defined string that uniquely identifies the resource\n * @property {Date} dateCreated -\n *          The ISO 8601 date and time in GMT when the resource was created\n * @property {Date} dateUpdated -\n *          The ISO 8601 date and time in GMT when the resource was last updated\n * @property {string} url - The absolute URL of the Fleet resource\n * @property {boolean} dataEnabled -\n *          Defines whether SIMs in the Fleet are capable of using data connectivity\n * @property {number} dataLimit -\n *          The total data usage (download and upload combined) in Megabytes that each Sim resource assigned to the Fleet resource can consume\n * @property {fleet.data_metering} dataMetering -\n *          The model by which a SIM is metered and billed\n * @property {boolean} commandsEnabled -\n *          Defines whether SIMs in the Fleet are capable of sending and receiving machine-to-machine SMS via Commands\n * @property {string} commandsUrl -\n *          The URL that will receive a webhook when a Super SIM in the Fleet is used to send an SMS from your device to the Commands number\n * @property {string} commandsMethod -\n *          A string representing the HTTP method to use when making a request to `commands_url`\n * @property {boolean} smsCommandsEnabled -\n *          Defines whether SIMs in the Fleet are capable of sending and receiving machine-to-machine SMS via Commands\n * @property {string} smsCommandsUrl -\n *          The URL that will receive a webhook when a Super SIM in the Fleet is used to send an SMS from your device to the SMS Commands number\n * @property {string} smsCommandsMethod -\n *          A string representing the HTTP method to use when making a request to `sms_commands_url`\n * @property {string} networkAccessProfileSid -\n *          The SID of the Network Access Profile of the Fleet\n *\n * @param {V1} version - Version of the resource\n * @param {FleetPayload} payload - The instance payload\n * @param {sid_like} sid - The SID that identifies the resource to fetch\n */\n\n/* jshint ignore:end */\n\n\nFleetInstance = function FleetInstance(version, payload, sid) {\n  this._version = version; // Marshaled Properties\n\n  this.accountSid = payload.account_sid; // jshint ignore:line\n\n  this.sid = payload.sid; // jshint ignore:line\n\n  this.uniqueName = payload.unique_name; // jshint ignore:line\n\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n\n  this.url = payload.url; // jshint ignore:line\n\n  this.dataEnabled = payload.data_enabled; // jshint ignore:line\n\n  this.dataLimit = deserialize.integer(payload.data_limit); // jshint ignore:line\n\n  this.dataMetering = payload.data_metering; // jshint ignore:line\n\n  this.commandsEnabled = payload.commands_enabled; // jshint ignore:line\n\n  this.commandsUrl = payload.commands_url; // jshint ignore:line\n\n  this.commandsMethod = payload.commands_method; // jshint ignore:line\n\n  this.smsCommandsEnabled = payload.sms_commands_enabled; // jshint ignore:line\n\n  this.smsCommandsUrl = payload.sms_commands_url; // jshint ignore:line\n\n  this.smsCommandsMethod = payload.sms_commands_method; // jshint ignore:line\n\n  this.networkAccessProfileSid = payload.network_access_profile_sid; // jshint ignore:line\n  // Context\n\n  this._context = undefined;\n  this._solution = {\n    sid: sid || this.sid\n  };\n};\n\nObject.defineProperty(FleetInstance.prototype, '_proxy', {\n  get: function () {\n    if (!this._context) {\n      this._context = new FleetContext(this._version, this._solution.sid);\n    }\n\n    return this._context;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * fetch a FleetInstance\n *\n * @function fetch\n * @memberof Twilio.Supersim.V1.FleetInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed FleetInstance\n */\n\n/* jshint ignore:end */\n\nFleetInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n/* jshint ignore:start */\n\n/**\n * update a FleetInstance\n *\n * @function update\n * @memberof Twilio.Supersim.V1.FleetInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.uniqueName] -\n *          An application-defined string that uniquely identifies the resource\n * @param {string} [opts.networkAccessProfile] -\n *          The SID or unique name of the Network Access Profile of the Fleet\n * @param {string} [opts.commandsUrl] -\n *          The URL that will receive a webhook when a Super SIM in the Fleet is used to send an SMS from your device to the Commands number\n * @param {string} [opts.commandsMethod] -\n *          A string representing the HTTP method to use when making a request to `commands_url`\n * @param {string} [opts.smsCommandsUrl] -\n *          The URL that will receive a webhook when a Super SIM in the Fleet is used to send an SMS from your device to the SMS Commands number\n * @param {string} [opts.smsCommandsMethod] -\n *          A string representing the HTTP method to use when making a request to `sms_commands_url`\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed FleetInstance\n */\n\n/* jshint ignore:end */\n\n\nFleetInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Supersim.V1.FleetInstance#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nFleetInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nFleetInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the FleetContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Supersim.V1.FleetContext\n *\n * @param {V1} version - Version of the resource\n * @param {sid_like} sid - The SID that identifies the resource to fetch\n */\n\n/* jshint ignore:end */\n\n\nFleetContext = function FleetContext(version, sid) {\n  this._version = version; // Path Solution\n\n  this._solution = {\n    sid: sid\n  };\n  this._uri = `/Fleets/${sid}`;\n};\n/* jshint ignore:start */\n\n/**\n * fetch a FleetInstance\n *\n * @function fetch\n * @memberof Twilio.Supersim.V1.FleetContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed FleetInstance\n */\n\n/* jshint ignore:end */\n\n\nFleetContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new FleetInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * update a FleetInstance\n *\n * @function update\n * @memberof Twilio.Supersim.V1.FleetContext#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.uniqueName] -\n *          An application-defined string that uniquely identifies the resource\n * @param {string} [opts.networkAccessProfile] -\n *          The SID or unique name of the Network Access Profile of the Fleet\n * @param {string} [opts.commandsUrl] -\n *          The URL that will receive a webhook when a Super SIM in the Fleet is used to send an SMS from your device to the Commands number\n * @param {string} [opts.commandsMethod] -\n *          A string representing the HTTP method to use when making a request to `commands_url`\n * @param {string} [opts.smsCommandsUrl] -\n *          The URL that will receive a webhook when a Super SIM in the Fleet is used to send an SMS from your device to the SMS Commands number\n * @param {string} [opts.smsCommandsMethod] -\n *          A string representing the HTTP method to use when making a request to `sms_commands_url`\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed FleetInstance\n */\n\n/* jshint ignore:end */\n\n\nFleetContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n\n  opts = opts || {};\n  var deferred = Q.defer();\n  var data = values.of({\n    'UniqueName': _.get(opts, 'uniqueName'),\n    'NetworkAccessProfile': _.get(opts, 'networkAccessProfile'),\n    'CommandsUrl': _.get(opts, 'commandsUrl'),\n    'CommandsMethod': _.get(opts, 'commandsMethod'),\n    'SmsCommandsUrl': _.get(opts, 'smsCommandsUrl'),\n    'SmsCommandsMethod': _.get(opts, 'smsCommandsMethod')\n  });\n\n  var promise = this._version.update({\n    uri: this._uri,\n    method: 'POST',\n    data: data\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new FleetInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Supersim.V1.FleetContext#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nFleetContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nFleetContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  FleetList: FleetList,\n  FleetPage: FleetPage,\n  FleetInstance: FleetInstance,\n  FleetContext: FleetContext\n};","map":{"version":3,"sources":["/Users/tony_niu/Visual Studio/Twilio/twilio-video-starter-kit/node_modules/twilio/lib/rest/supersim/v1/fleet.js"],"names":["Q","require","_","util","Page","deserialize","serialize","values","FleetList","FleetPage","FleetInstance","FleetContext","version","FleetListInstance","sid","get","_version","_solution","_uri","create","opts","callback","isUndefined","Error","networkAccessProfile","deferred","defer","data","of","bool","promise","uri","method","then","payload","resolve","bind","catch","error","reject","isFunction","nodeify","each","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","fetchNextPage","fn","page","instances","instance","nextPage","merge","list","allResources","resource","push","length","pageToken","pageNumber","params","getPage","targetUrl","_domain","twilio","request","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","accountSid","account_sid","uniqueName","unique_name","dateCreated","iso8601DateTime","date_created","dateUpdated","date_updated","url","dataEnabled","data_enabled","dataLimit","integer","data_limit","dataMetering","data_metering","commandsEnabled","commands_enabled","commandsUrl","commands_url","commandsMethod","commands_method","smsCommandsEnabled","sms_commands_enabled","smsCommandsUrl","sms_commands_url","smsCommandsMethod","sms_commands_method","networkAccessProfileSid","network_access_profile_sid","_context","undefined","Object","defineProperty","fetch","_proxy","update","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar Page = require('../../../base/Page');  /* jshint ignore:line */\nvar deserialize = require(\n    '../../../base/deserialize');  /* jshint ignore:line */\nvar serialize = require('../../../base/serialize');  /* jshint ignore:line */\nvar values = require('../../../base/values');  /* jshint ignore:line */\n\nvar FleetList;\nvar FleetPage;\nvar FleetInstance;\nvar FleetContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the FleetList\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Supersim.V1.FleetList\n *\n * @param {Twilio.Supersim.V1} version - Version of the resource\n */\n/* jshint ignore:end */\nFleetList = function FleetList(version) {\n  /* jshint ignore:start */\n  /**\n   * @function fleets\n   * @memberof Twilio.Supersim.V1#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Supersim.V1.FleetContext}\n   */\n  /* jshint ignore:end */\n  function FleetListInstance(sid) {\n    return FleetListInstance.get(sid);\n  }\n\n  FleetListInstance._version = version;\n  // Path Solution\n  FleetListInstance._solution = {};\n  FleetListInstance._uri = `/Fleets`;\n  /* jshint ignore:start */\n  /**\n   * create a FleetInstance\n   *\n   * @function create\n   * @memberof Twilio.Supersim.V1.FleetList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.networkAccessProfile -\n   *          The SID or unique name of the Network Access Profile of the Fleet\n   * @param {string} [opts.uniqueName] -\n   *          An application-defined string that uniquely identifies the resource\n   * @param {boolean} [opts.dataEnabled] -\n   *          Defines whether SIMs in the Fleet are capable of using data connectivity\n   * @param {number} [opts.dataLimit] -\n   *          The total data usage (download and upload combined) in Megabytes that each Sim resource assigned to the Fleet resource can consume\n   * @param {boolean} [opts.commandsEnabled] -\n   *          Defines whether SIMs in the Fleet are capable of sending and receiving machine-to-machine SMS via Commands\n   * @param {string} [opts.commandsUrl] -\n   *          The URL that will receive a webhook when a Super SIM in the Fleet is used to send an SMS from your device to the Commands number\n   * @param {string} [opts.commandsMethod] -\n   *          A string representing the HTTP method to use when making a request to `commands_url`\n   * @param {boolean} [opts.smsCommandsEnabled] -\n   *          Defines whether SIMs in the Fleet are capable of sending and receiving machine-to-machine SMS via Commands\n   * @param {string} [opts.smsCommandsUrl] -\n   *          The URL that will receive a webhook when a Super SIM in the Fleet is used to send an SMS from your device to the SMS Commands number\n   * @param {string} [opts.smsCommandsMethod] -\n   *          A string representing the HTTP method to use when making a request to `sms_commands_url`\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed FleetInstance\n   */\n  /* jshint ignore:end */\n  FleetListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n    if (_.isUndefined(opts.networkAccessProfile)) {\n      throw new Error('Required parameter \"opts.networkAccessProfile\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'NetworkAccessProfile': _.get(opts, 'networkAccessProfile'),\n      'UniqueName': _.get(opts, 'uniqueName'),\n      'DataEnabled': serialize.bool(_.get(opts, 'dataEnabled')),\n      'DataLimit': _.get(opts, 'dataLimit'),\n      'CommandsEnabled': serialize.bool(_.get(opts, 'commandsEnabled')),\n      'CommandsUrl': _.get(opts, 'commandsUrl'),\n      'CommandsMethod': _.get(opts, 'commandsMethod'),\n      'SmsCommandsEnabled': serialize.bool(_.get(opts, 'smsCommandsEnabled')),\n      'SmsCommandsUrl': _.get(opts, 'smsCommandsUrl'),\n      'SmsCommandsMethod': _.get(opts, 'smsCommandsMethod')\n    });\n\n    var promise = this._version.create({uri: this._uri, method: 'POST', data: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new FleetInstance(this._version, payload, this._solution.sid));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Streams FleetInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Supersim.V1.FleetList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.networkAccessProfile] -\n   *          The SID or unique name of the Network Access Profile of the Fleet\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  FleetListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists FleetInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Supersim.V1.FleetList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.networkAccessProfile] -\n   *          The SID or unique name of the Network Access Profile of the Fleet\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  FleetListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of FleetInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Supersim.V1.FleetList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.networkAccessProfile] -\n   *          The SID or unique name of the Network Access Profile of the Fleet\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  FleetListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'NetworkAccessProfile': _.get(opts, 'networkAccessProfile'),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new FleetPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of FleetInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Supersim.V1.FleetList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  FleetListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new FleetPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a fleet\n   *\n   * @function get\n   * @memberof Twilio.Supersim.V1.FleetList#\n   *\n   * @param {string} sid - The SID that identifies the resource to fetch\n   *\n   * @returns {Twilio.Supersim.V1.FleetContext}\n   */\n  /* jshint ignore:end */\n  FleetListInstance.get = function get(sid) {\n    return new FleetContext(this._version, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Supersim.V1.FleetList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  FleetListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  FleetListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return FleetListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the FleetPage\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Supersim.V1.FleetPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {FleetSolution} solution - Path solution\n *\n * @returns FleetPage\n */\n/* jshint ignore:end */\nFleetPage = function FleetPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(FleetPage.prototype, Page.prototype);\nFleetPage.prototype.constructor = FleetPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of FleetInstance\n *\n * @function getInstance\n * @memberof Twilio.Supersim.V1.FleetPage#\n *\n * @param {FleetPayload} payload - Payload response from the API\n *\n * @returns FleetInstance\n */\n/* jshint ignore:end */\nFleetPage.prototype.getInstance = function getInstance(payload) {\n  return new FleetInstance(this._version, payload);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Supersim.V1.FleetPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nFleetPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nFleetPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the FleetContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Supersim.V1.FleetInstance\n *\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} uniqueName -\n *          An application-defined string that uniquely identifies the resource\n * @property {Date} dateCreated -\n *          The ISO 8601 date and time in GMT when the resource was created\n * @property {Date} dateUpdated -\n *          The ISO 8601 date and time in GMT when the resource was last updated\n * @property {string} url - The absolute URL of the Fleet resource\n * @property {boolean} dataEnabled -\n *          Defines whether SIMs in the Fleet are capable of using data connectivity\n * @property {number} dataLimit -\n *          The total data usage (download and upload combined) in Megabytes that each Sim resource assigned to the Fleet resource can consume\n * @property {fleet.data_metering} dataMetering -\n *          The model by which a SIM is metered and billed\n * @property {boolean} commandsEnabled -\n *          Defines whether SIMs in the Fleet are capable of sending and receiving machine-to-machine SMS via Commands\n * @property {string} commandsUrl -\n *          The URL that will receive a webhook when a Super SIM in the Fleet is used to send an SMS from your device to the Commands number\n * @property {string} commandsMethod -\n *          A string representing the HTTP method to use when making a request to `commands_url`\n * @property {boolean} smsCommandsEnabled -\n *          Defines whether SIMs in the Fleet are capable of sending and receiving machine-to-machine SMS via Commands\n * @property {string} smsCommandsUrl -\n *          The URL that will receive a webhook when a Super SIM in the Fleet is used to send an SMS from your device to the SMS Commands number\n * @property {string} smsCommandsMethod -\n *          A string representing the HTTP method to use when making a request to `sms_commands_url`\n * @property {string} networkAccessProfileSid -\n *          The SID of the Network Access Profile of the Fleet\n *\n * @param {V1} version - Version of the resource\n * @param {FleetPayload} payload - The instance payload\n * @param {sid_like} sid - The SID that identifies the resource to fetch\n */\n/* jshint ignore:end */\nFleetInstance = function FleetInstance(version, payload, sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.sid = payload.sid; // jshint ignore:line\n  this.uniqueName = payload.unique_name; // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n  this.dataEnabled = payload.data_enabled; // jshint ignore:line\n  this.dataLimit = deserialize.integer(payload.data_limit); // jshint ignore:line\n  this.dataMetering = payload.data_metering; // jshint ignore:line\n  this.commandsEnabled = payload.commands_enabled; // jshint ignore:line\n  this.commandsUrl = payload.commands_url; // jshint ignore:line\n  this.commandsMethod = payload.commands_method; // jshint ignore:line\n  this.smsCommandsEnabled = payload.sms_commands_enabled; // jshint ignore:line\n  this.smsCommandsUrl = payload.sms_commands_url; // jshint ignore:line\n  this.smsCommandsMethod = payload.sms_commands_method; // jshint ignore:line\n  this.networkAccessProfileSid = payload.network_access_profile_sid; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {sid: sid || this.sid, };\n};\n\nObject.defineProperty(FleetInstance.prototype,\n  '_proxy', {\n    get: function() {\n      if (!this._context) {\n        this._context = new FleetContext(this._version, this._solution.sid);\n      }\n\n      return this._context;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a FleetInstance\n *\n * @function fetch\n * @memberof Twilio.Supersim.V1.FleetInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed FleetInstance\n */\n/* jshint ignore:end */\nFleetInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * update a FleetInstance\n *\n * @function update\n * @memberof Twilio.Supersim.V1.FleetInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.uniqueName] -\n *          An application-defined string that uniquely identifies the resource\n * @param {string} [opts.networkAccessProfile] -\n *          The SID or unique name of the Network Access Profile of the Fleet\n * @param {string} [opts.commandsUrl] -\n *          The URL that will receive a webhook when a Super SIM in the Fleet is used to send an SMS from your device to the Commands number\n * @param {string} [opts.commandsMethod] -\n *          A string representing the HTTP method to use when making a request to `commands_url`\n * @param {string} [opts.smsCommandsUrl] -\n *          The URL that will receive a webhook when a Super SIM in the Fleet is used to send an SMS from your device to the SMS Commands number\n * @param {string} [opts.smsCommandsMethod] -\n *          A string representing the HTTP method to use when making a request to `sms_commands_url`\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed FleetInstance\n */\n/* jshint ignore:end */\nFleetInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Supersim.V1.FleetInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nFleetInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nFleetInstance.prototype[util.inspect.custom] = function inspect(depth, options)\n    {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the FleetContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Supersim.V1.FleetContext\n *\n * @param {V1} version - Version of the resource\n * @param {sid_like} sid - The SID that identifies the resource to fetch\n */\n/* jshint ignore:end */\nFleetContext = function FleetContext(version, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {sid: sid, };\n  this._uri = `/Fleets/${sid}`;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a FleetInstance\n *\n * @function fetch\n * @memberof Twilio.Supersim.V1.FleetContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed FleetInstance\n */\n/* jshint ignore:end */\nFleetContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({uri: this._uri, method: 'GET'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new FleetInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * update a FleetInstance\n *\n * @function update\n * @memberof Twilio.Supersim.V1.FleetContext#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.uniqueName] -\n *          An application-defined string that uniquely identifies the resource\n * @param {string} [opts.networkAccessProfile] -\n *          The SID or unique name of the Network Access Profile of the Fleet\n * @param {string} [opts.commandsUrl] -\n *          The URL that will receive a webhook when a Super SIM in the Fleet is used to send an SMS from your device to the Commands number\n * @param {string} [opts.commandsMethod] -\n *          A string representing the HTTP method to use when making a request to `commands_url`\n * @param {string} [opts.smsCommandsUrl] -\n *          The URL that will receive a webhook when a Super SIM in the Fleet is used to send an SMS from your device to the SMS Commands number\n * @param {string} [opts.smsCommandsMethod] -\n *          A string representing the HTTP method to use when making a request to `sms_commands_url`\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed FleetInstance\n */\n/* jshint ignore:end */\nFleetContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n  opts = opts || {};\n\n  var deferred = Q.defer();\n  var data = values.of({\n    'UniqueName': _.get(opts, 'uniqueName'),\n    'NetworkAccessProfile': _.get(opts, 'networkAccessProfile'),\n    'CommandsUrl': _.get(opts, 'commandsUrl'),\n    'CommandsMethod': _.get(opts, 'commandsMethod'),\n    'SmsCommandsUrl': _.get(opts, 'smsCommandsUrl'),\n    'SmsCommandsMethod': _.get(opts, 'smsCommandsMethod')\n  });\n\n  var promise = this._version.update({uri: this._uri, method: 'POST', data: data});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new FleetInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Supersim.V1.FleetContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nFleetContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nFleetContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  FleetList: FleetList,\n  FleetPage: FleetPage,\n  FleetInstance: FleetInstance,\n  FleetContext: FleetContext\n};\n"]},"metadata":{},"sourceType":"script"}