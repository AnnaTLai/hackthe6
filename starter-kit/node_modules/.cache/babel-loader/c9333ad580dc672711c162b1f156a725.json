{"ast":null,"code":"// Generated by CoffeeScript 2.4.1\n(function () {\n  var NodeType,\n      WriterState,\n      XMLCData,\n      XMLComment,\n      XMLDTDAttList,\n      XMLDTDElement,\n      XMLDTDEntity,\n      XMLDTDNotation,\n      XMLDeclaration,\n      XMLDocType,\n      XMLDummy,\n      XMLElement,\n      XMLProcessingInstruction,\n      XMLRaw,\n      XMLText,\n      XMLWriterBase,\n      assign,\n      hasProp = {}.hasOwnProperty;\n  ({\n    assign\n  } = require('./Utility'));\n  NodeType = require('./NodeType');\n  XMLDeclaration = require('./XMLDeclaration');\n  XMLDocType = require('./XMLDocType');\n  XMLCData = require('./XMLCData');\n  XMLComment = require('./XMLComment');\n  XMLElement = require('./XMLElement');\n  XMLRaw = require('./XMLRaw');\n  XMLText = require('./XMLText');\n  XMLProcessingInstruction = require('./XMLProcessingInstruction');\n  XMLDummy = require('./XMLDummy');\n  XMLDTDAttList = require('./XMLDTDAttList');\n  XMLDTDElement = require('./XMLDTDElement');\n  XMLDTDEntity = require('./XMLDTDEntity');\n  XMLDTDNotation = require('./XMLDTDNotation');\n  WriterState = require('./WriterState'); // Base class for XML writers\n\n  module.exports = XMLWriterBase = class XMLWriterBase {\n    // Initializes a new instance of `XMLWriterBase`\n    // `options.pretty` pretty prints the result\n    // `options.indent` indentation string\n    // `options.newline` newline sequence\n    // `options.offset` a fixed number of indentations to add to every line\n    // `options.width` maximum column width\n    // `options.allowEmpty` do not self close empty element tags\n    // 'options.dontPrettyTextNodes' if any text is present in node, don't indent or LF\n    // `options.spaceBeforeSlash` add a space before the closing slash of empty elements\n    constructor(options) {\n      var key, ref, value;\n      options || (options = {});\n      this.options = options;\n      ref = options.writer || {};\n\n      for (key in ref) {\n        if (!hasProp.call(ref, key)) continue;\n        value = ref[key];\n        this[\"_\" + key] = this[key];\n        this[key] = value;\n      }\n    } // Filters writer options and provides defaults\n    // `options` writer options\n\n\n    filterOptions(options) {\n      var filteredOptions, ref, ref1, ref2, ref3, ref4, ref5, ref6, ref7;\n      options || (options = {});\n      options = assign({}, this.options, options);\n      filteredOptions = {\n        writer: this\n      };\n      filteredOptions.pretty = options.pretty || false;\n      filteredOptions.allowEmpty = options.allowEmpty || false;\n      filteredOptions.indent = (ref = options.indent) != null ? ref : '  ';\n      filteredOptions.newline = (ref1 = options.newline) != null ? ref1 : '\\n';\n      filteredOptions.offset = (ref2 = options.offset) != null ? ref2 : 0;\n      filteredOptions.width = (ref3 = options.width) != null ? ref3 : 0;\n      filteredOptions.dontPrettyTextNodes = (ref4 = (ref5 = options.dontPrettyTextNodes) != null ? ref5 : options.dontprettytextnodes) != null ? ref4 : 0;\n      filteredOptions.spaceBeforeSlash = (ref6 = (ref7 = options.spaceBeforeSlash) != null ? ref7 : options.spacebeforeslash) != null ? ref6 : '';\n\n      if (filteredOptions.spaceBeforeSlash === true) {\n        filteredOptions.spaceBeforeSlash = ' ';\n      }\n\n      filteredOptions.suppressPrettyCount = 0;\n      filteredOptions.user = {};\n      filteredOptions.state = WriterState.None;\n      return filteredOptions;\n    } // Returns the indentation string for the current level\n    // `node` current node\n    // `options` writer options\n    // `level` current indentation level\n\n\n    indent(node, options, level) {\n      var indentLevel;\n\n      if (!options.pretty || options.suppressPrettyCount) {\n        return '';\n      } else if (options.pretty) {\n        indentLevel = (level || 0) + options.offset + 1;\n\n        if (indentLevel > 0) {\n          return new Array(indentLevel).join(options.indent);\n        }\n      }\n\n      return '';\n    } // Returns the newline string\n    // `node` current node\n    // `options` writer options\n    // `level` current indentation level\n\n\n    endline(node, options, level) {\n      if (!options.pretty || options.suppressPrettyCount) {\n        return '';\n      } else {\n        return options.newline;\n      }\n    }\n\n    attribute(att, options, level) {\n      var r;\n      this.openAttribute(att, options, level);\n\n      if (options.pretty && options.width > 0) {\n        r = att.name + '=\"' + att.value + '\"';\n      } else {\n        r = ' ' + att.name + '=\"' + att.value + '\"';\n      }\n\n      this.closeAttribute(att, options, level);\n      return r;\n    }\n\n    cdata(node, options, level) {\n      var r;\n      this.openNode(node, options, level);\n      options.state = WriterState.OpenTag;\n      r = this.indent(node, options, level) + '<![CDATA[';\n      options.state = WriterState.InsideTag;\n      r += node.value;\n      options.state = WriterState.CloseTag;\n      r += ']]>' + this.endline(node, options, level);\n      options.state = WriterState.None;\n      this.closeNode(node, options, level);\n      return r;\n    }\n\n    comment(node, options, level) {\n      var r;\n      this.openNode(node, options, level);\n      options.state = WriterState.OpenTag;\n      r = this.indent(node, options, level) + '<!-- ';\n      options.state = WriterState.InsideTag;\n      r += node.value;\n      options.state = WriterState.CloseTag;\n      r += ' -->' + this.endline(node, options, level);\n      options.state = WriterState.None;\n      this.closeNode(node, options, level);\n      return r;\n    }\n\n    declaration(node, options, level) {\n      var r;\n      this.openNode(node, options, level);\n      options.state = WriterState.OpenTag;\n      r = this.indent(node, options, level) + '<?xml';\n      options.state = WriterState.InsideTag;\n      r += ' version=\"' + node.version + '\"';\n\n      if (node.encoding != null) {\n        r += ' encoding=\"' + node.encoding + '\"';\n      }\n\n      if (node.standalone != null) {\n        r += ' standalone=\"' + node.standalone + '\"';\n      }\n\n      options.state = WriterState.CloseTag;\n      r += options.spaceBeforeSlash + '?>';\n      r += this.endline(node, options, level);\n      options.state = WriterState.None;\n      this.closeNode(node, options, level);\n      return r;\n    }\n\n    docType(node, options, level) {\n      var child, i, len1, r, ref;\n      level || (level = 0);\n      this.openNode(node, options, level);\n      options.state = WriterState.OpenTag;\n      r = this.indent(node, options, level);\n      r += '<!DOCTYPE ' + node.root().name; // external identifier\n\n      if (node.pubID && node.sysID) {\n        r += ' PUBLIC \"' + node.pubID + '\" \"' + node.sysID + '\"';\n      } else if (node.sysID) {\n        r += ' SYSTEM \"' + node.sysID + '\"';\n      } // internal subset\n\n\n      if (node.children.length > 0) {\n        r += ' [';\n        r += this.endline(node, options, level);\n        options.state = WriterState.InsideTag;\n        ref = node.children;\n\n        for (i = 0, len1 = ref.length; i < len1; i++) {\n          child = ref[i];\n          r += this.writeChildNode(child, options, level + 1);\n        }\n\n        options.state = WriterState.CloseTag;\n        r += ']';\n      } // close tag\n\n\n      options.state = WriterState.CloseTag;\n      r += options.spaceBeforeSlash + '>';\n      r += this.endline(node, options, level);\n      options.state = WriterState.None;\n      this.closeNode(node, options, level);\n      return r;\n    }\n\n    element(node, options, level) {\n      var att, attLen, child, childNodeCount, firstChildNode, i, j, len, len1, len2, name, prettySuppressed, r, ratt, ref, ref1, ref2, ref3, rline;\n      level || (level = 0);\n      prettySuppressed = false; // open tag\n\n      this.openNode(node, options, level);\n      options.state = WriterState.OpenTag;\n      r = this.indent(node, options, level) + '<' + node.name; // attributes\n\n      if (options.pretty && options.width > 0) {\n        len = r.length;\n        ref = node.attribs;\n\n        for (name in ref) {\n          if (!hasProp.call(ref, name)) continue;\n          att = ref[name];\n          ratt = this.attribute(att, options, level);\n          attLen = ratt.length;\n\n          if (len + attLen > options.width) {\n            rline = this.indent(node, options, level + 1) + ratt;\n            r += this.endline(node, options, level) + rline;\n            len = rline.length;\n          } else {\n            rline = ' ' + ratt;\n            r += rline;\n            len += rline.length;\n          }\n        }\n      } else {\n        ref1 = node.attribs;\n\n        for (name in ref1) {\n          if (!hasProp.call(ref1, name)) continue;\n          att = ref1[name];\n          r += this.attribute(att, options, level);\n        }\n      }\n\n      childNodeCount = node.children.length;\n      firstChildNode = childNodeCount === 0 ? null : node.children[0];\n\n      if (childNodeCount === 0 || node.children.every(function (e) {\n        return (e.type === NodeType.Text || e.type === NodeType.Raw) && e.value === '';\n      })) {\n        // empty element\n        if (options.allowEmpty) {\n          r += '>';\n          options.state = WriterState.CloseTag;\n          r += '</' + node.name + '>' + this.endline(node, options, level);\n        } else {\n          options.state = WriterState.CloseTag;\n          r += options.spaceBeforeSlash + '/>' + this.endline(node, options, level);\n        }\n      } else if (options.pretty && childNodeCount === 1 && (firstChildNode.type === NodeType.Text || firstChildNode.type === NodeType.Raw) && firstChildNode.value != null) {\n        // do not indent text-only nodes\n        r += '>';\n        options.state = WriterState.InsideTag;\n        options.suppressPrettyCount++;\n        prettySuppressed = true;\n        r += this.writeChildNode(firstChildNode, options, level + 1);\n        options.suppressPrettyCount--;\n        prettySuppressed = false;\n        options.state = WriterState.CloseTag;\n        r += '</' + node.name + '>' + this.endline(node, options, level);\n      } else {\n        // if ANY are a text node, then suppress pretty now\n        if (options.dontPrettyTextNodes) {\n          ref2 = node.children;\n\n          for (i = 0, len1 = ref2.length; i < len1; i++) {\n            child = ref2[i];\n\n            if ((child.type === NodeType.Text || child.type === NodeType.Raw) && child.value != null) {\n              options.suppressPrettyCount++;\n              prettySuppressed = true;\n              break;\n            }\n          }\n        } // close the opening tag, after dealing with newline\n\n\n        r += '>' + this.endline(node, options, level);\n        options.state = WriterState.InsideTag;\n        ref3 = node.children; // inner tags\n\n        for (j = 0, len2 = ref3.length; j < len2; j++) {\n          child = ref3[j];\n          r += this.writeChildNode(child, options, level + 1);\n        } // close tag\n\n\n        options.state = WriterState.CloseTag;\n        r += this.indent(node, options, level) + '</' + node.name + '>';\n\n        if (prettySuppressed) {\n          options.suppressPrettyCount--;\n        }\n\n        r += this.endline(node, options, level);\n        options.state = WriterState.None;\n      }\n\n      this.closeNode(node, options, level);\n      return r;\n    }\n\n    writeChildNode(node, options, level) {\n      switch (node.type) {\n        case NodeType.CData:\n          return this.cdata(node, options, level);\n\n        case NodeType.Comment:\n          return this.comment(node, options, level);\n\n        case NodeType.Element:\n          return this.element(node, options, level);\n\n        case NodeType.Raw:\n          return this.raw(node, options, level);\n\n        case NodeType.Text:\n          return this.text(node, options, level);\n\n        case NodeType.ProcessingInstruction:\n          return this.processingInstruction(node, options, level);\n\n        case NodeType.Dummy:\n          return '';\n\n        case NodeType.Declaration:\n          return this.declaration(node, options, level);\n\n        case NodeType.DocType:\n          return this.docType(node, options, level);\n\n        case NodeType.AttributeDeclaration:\n          return this.dtdAttList(node, options, level);\n\n        case NodeType.ElementDeclaration:\n          return this.dtdElement(node, options, level);\n\n        case NodeType.EntityDeclaration:\n          return this.dtdEntity(node, options, level);\n\n        case NodeType.NotationDeclaration:\n          return this.dtdNotation(node, options, level);\n\n        default:\n          throw new Error(\"Unknown XML node type: \" + node.constructor.name);\n      }\n    }\n\n    processingInstruction(node, options, level) {\n      var r;\n      this.openNode(node, options, level);\n      options.state = WriterState.OpenTag;\n      r = this.indent(node, options, level) + '<?';\n      options.state = WriterState.InsideTag;\n      r += node.target;\n\n      if (node.value) {\n        r += ' ' + node.value;\n      }\n\n      options.state = WriterState.CloseTag;\n      r += options.spaceBeforeSlash + '?>';\n      r += this.endline(node, options, level);\n      options.state = WriterState.None;\n      this.closeNode(node, options, level);\n      return r;\n    }\n\n    raw(node, options, level) {\n      var r;\n      this.openNode(node, options, level);\n      options.state = WriterState.OpenTag;\n      r = this.indent(node, options, level);\n      options.state = WriterState.InsideTag;\n      r += node.value;\n      options.state = WriterState.CloseTag;\n      r += this.endline(node, options, level);\n      options.state = WriterState.None;\n      this.closeNode(node, options, level);\n      return r;\n    }\n\n    text(node, options, level) {\n      var r;\n      this.openNode(node, options, level);\n      options.state = WriterState.OpenTag;\n      r = this.indent(node, options, level);\n      options.state = WriterState.InsideTag;\n      r += node.value;\n      options.state = WriterState.CloseTag;\n      r += this.endline(node, options, level);\n      options.state = WriterState.None;\n      this.closeNode(node, options, level);\n      return r;\n    }\n\n    dtdAttList(node, options, level) {\n      var r;\n      this.openNode(node, options, level);\n      options.state = WriterState.OpenTag;\n      r = this.indent(node, options, level) + '<!ATTLIST';\n      options.state = WriterState.InsideTag;\n      r += ' ' + node.elementName + ' ' + node.attributeName + ' ' + node.attributeType;\n\n      if (node.defaultValueType !== '#DEFAULT') {\n        r += ' ' + node.defaultValueType;\n      }\n\n      if (node.defaultValue) {\n        r += ' \"' + node.defaultValue + '\"';\n      }\n\n      options.state = WriterState.CloseTag;\n      r += options.spaceBeforeSlash + '>' + this.endline(node, options, level);\n      options.state = WriterState.None;\n      this.closeNode(node, options, level);\n      return r;\n    }\n\n    dtdElement(node, options, level) {\n      var r;\n      this.openNode(node, options, level);\n      options.state = WriterState.OpenTag;\n      r = this.indent(node, options, level) + '<!ELEMENT';\n      options.state = WriterState.InsideTag;\n      r += ' ' + node.name + ' ' + node.value;\n      options.state = WriterState.CloseTag;\n      r += options.spaceBeforeSlash + '>' + this.endline(node, options, level);\n      options.state = WriterState.None;\n      this.closeNode(node, options, level);\n      return r;\n    }\n\n    dtdEntity(node, options, level) {\n      var r;\n      this.openNode(node, options, level);\n      options.state = WriterState.OpenTag;\n      r = this.indent(node, options, level) + '<!ENTITY';\n      options.state = WriterState.InsideTag;\n\n      if (node.pe) {\n        r += ' %';\n      }\n\n      r += ' ' + node.name;\n\n      if (node.value) {\n        r += ' \"' + node.value + '\"';\n      } else {\n        if (node.pubID && node.sysID) {\n          r += ' PUBLIC \"' + node.pubID + '\" \"' + node.sysID + '\"';\n        } else if (node.sysID) {\n          r += ' SYSTEM \"' + node.sysID + '\"';\n        }\n\n        if (node.nData) {\n          r += ' NDATA ' + node.nData;\n        }\n      }\n\n      options.state = WriterState.CloseTag;\n      r += options.spaceBeforeSlash + '>' + this.endline(node, options, level);\n      options.state = WriterState.None;\n      this.closeNode(node, options, level);\n      return r;\n    }\n\n    dtdNotation(node, options, level) {\n      var r;\n      this.openNode(node, options, level);\n      options.state = WriterState.OpenTag;\n      r = this.indent(node, options, level) + '<!NOTATION';\n      options.state = WriterState.InsideTag;\n      r += ' ' + node.name;\n\n      if (node.pubID && node.sysID) {\n        r += ' PUBLIC \"' + node.pubID + '\" \"' + node.sysID + '\"';\n      } else if (node.pubID) {\n        r += ' PUBLIC \"' + node.pubID + '\"';\n      } else if (node.sysID) {\n        r += ' SYSTEM \"' + node.sysID + '\"';\n      }\n\n      options.state = WriterState.CloseTag;\n      r += options.spaceBeforeSlash + '>' + this.endline(node, options, level);\n      options.state = WriterState.None;\n      this.closeNode(node, options, level);\n      return r;\n    }\n\n    openNode(node, options, level) {}\n\n    closeNode(node, options, level) {}\n\n    openAttribute(att, options, level) {}\n\n    closeAttribute(att, options, level) {}\n\n  };\n}).call(this);","map":{"version":3,"sources":["/Users/tony_niu/Visual Studio/Twilio/twilio-video-starter-kit/node_modules/xmlbuilder/lib/XMLWriterBase.js"],"names":["NodeType","WriterState","XMLCData","XMLComment","XMLDTDAttList","XMLDTDElement","XMLDTDEntity","XMLDTDNotation","XMLDeclaration","XMLDocType","XMLDummy","XMLElement","XMLProcessingInstruction","XMLRaw","XMLText","XMLWriterBase","assign","hasProp","hasOwnProperty","require","module","exports","constructor","options","key","ref","value","writer","call","filterOptions","filteredOptions","ref1","ref2","ref3","ref4","ref5","ref6","ref7","pretty","allowEmpty","indent","newline","offset","width","dontPrettyTextNodes","dontprettytextnodes","spaceBeforeSlash","spacebeforeslash","suppressPrettyCount","user","state","None","node","level","indentLevel","Array","join","endline","attribute","att","r","openAttribute","name","closeAttribute","cdata","openNode","OpenTag","InsideTag","CloseTag","closeNode","comment","declaration","version","encoding","standalone","docType","child","i","len1","root","pubID","sysID","children","length","writeChildNode","element","attLen","childNodeCount","firstChildNode","j","len","len2","prettySuppressed","ratt","rline","attribs","every","e","type","Text","Raw","CData","Comment","Element","raw","text","ProcessingInstruction","processingInstruction","Dummy","Declaration","DocType","AttributeDeclaration","dtdAttList","ElementDeclaration","dtdElement","EntityDeclaration","dtdEntity","NotationDeclaration","dtdNotation","Error","target","elementName","attributeName","attributeType","defaultValueType","defaultValue","pe","nData"],"mappings":"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","sourcesContent":["// Generated by CoffeeScript 2.4.1\n(function() {\n  var NodeType, WriterState, XMLCData, XMLComment, XMLDTDAttList, XMLDTDElement, XMLDTDEntity, XMLDTDNotation, XMLDeclaration, XMLDocType, XMLDummy, XMLElement, XMLProcessingInstruction, XMLRaw, XMLText, XMLWriterBase, assign,\n    hasProp = {}.hasOwnProperty;\n\n  ({assign} = require('./Utility'));\n\n  NodeType = require('./NodeType');\n\n  XMLDeclaration = require('./XMLDeclaration');\n\n  XMLDocType = require('./XMLDocType');\n\n  XMLCData = require('./XMLCData');\n\n  XMLComment = require('./XMLComment');\n\n  XMLElement = require('./XMLElement');\n\n  XMLRaw = require('./XMLRaw');\n\n  XMLText = require('./XMLText');\n\n  XMLProcessingInstruction = require('./XMLProcessingInstruction');\n\n  XMLDummy = require('./XMLDummy');\n\n  XMLDTDAttList = require('./XMLDTDAttList');\n\n  XMLDTDElement = require('./XMLDTDElement');\n\n  XMLDTDEntity = require('./XMLDTDEntity');\n\n  XMLDTDNotation = require('./XMLDTDNotation');\n\n  WriterState = require('./WriterState');\n\n  // Base class for XML writers\n  module.exports = XMLWriterBase = class XMLWriterBase {\n    // Initializes a new instance of `XMLWriterBase`\n\n    // `options.pretty` pretty prints the result\n    // `options.indent` indentation string\n    // `options.newline` newline sequence\n    // `options.offset` a fixed number of indentations to add to every line\n    // `options.width` maximum column width\n    // `options.allowEmpty` do not self close empty element tags\n    // 'options.dontPrettyTextNodes' if any text is present in node, don't indent or LF\n    // `options.spaceBeforeSlash` add a space before the closing slash of empty elements\n    constructor(options) {\n      var key, ref, value;\n      options || (options = {});\n      this.options = options;\n      ref = options.writer || {};\n      for (key in ref) {\n        if (!hasProp.call(ref, key)) continue;\n        value = ref[key];\n        this[\"_\" + key] = this[key];\n        this[key] = value;\n      }\n    }\n\n    // Filters writer options and provides defaults\n\n    // `options` writer options\n    filterOptions(options) {\n      var filteredOptions, ref, ref1, ref2, ref3, ref4, ref5, ref6, ref7;\n      options || (options = {});\n      options = assign({}, this.options, options);\n      filteredOptions = {\n        writer: this\n      };\n      filteredOptions.pretty = options.pretty || false;\n      filteredOptions.allowEmpty = options.allowEmpty || false;\n      filteredOptions.indent = (ref = options.indent) != null ? ref : '  ';\n      filteredOptions.newline = (ref1 = options.newline) != null ? ref1 : '\\n';\n      filteredOptions.offset = (ref2 = options.offset) != null ? ref2 : 0;\n      filteredOptions.width = (ref3 = options.width) != null ? ref3 : 0;\n      filteredOptions.dontPrettyTextNodes = (ref4 = (ref5 = options.dontPrettyTextNodes) != null ? ref5 : options.dontprettytextnodes) != null ? ref4 : 0;\n      filteredOptions.spaceBeforeSlash = (ref6 = (ref7 = options.spaceBeforeSlash) != null ? ref7 : options.spacebeforeslash) != null ? ref6 : '';\n      if (filteredOptions.spaceBeforeSlash === true) {\n        filteredOptions.spaceBeforeSlash = ' ';\n      }\n      filteredOptions.suppressPrettyCount = 0;\n      filteredOptions.user = {};\n      filteredOptions.state = WriterState.None;\n      return filteredOptions;\n    }\n\n    // Returns the indentation string for the current level\n\n    // `node` current node\n    // `options` writer options\n    // `level` current indentation level\n    indent(node, options, level) {\n      var indentLevel;\n      if (!options.pretty || options.suppressPrettyCount) {\n        return '';\n      } else if (options.pretty) {\n        indentLevel = (level || 0) + options.offset + 1;\n        if (indentLevel > 0) {\n          return new Array(indentLevel).join(options.indent);\n        }\n      }\n      return '';\n    }\n\n    // Returns the newline string\n\n    // `node` current node\n    // `options` writer options\n    // `level` current indentation level\n    endline(node, options, level) {\n      if (!options.pretty || options.suppressPrettyCount) {\n        return '';\n      } else {\n        return options.newline;\n      }\n    }\n\n    attribute(att, options, level) {\n      var r;\n      this.openAttribute(att, options, level);\n      if (options.pretty && options.width > 0) {\n        r = att.name + '=\"' + att.value + '\"';\n      } else {\n        r = ' ' + att.name + '=\"' + att.value + '\"';\n      }\n      this.closeAttribute(att, options, level);\n      return r;\n    }\n\n    cdata(node, options, level) {\n      var r;\n      this.openNode(node, options, level);\n      options.state = WriterState.OpenTag;\n      r = this.indent(node, options, level) + '<![CDATA[';\n      options.state = WriterState.InsideTag;\n      r += node.value;\n      options.state = WriterState.CloseTag;\n      r += ']]>' + this.endline(node, options, level);\n      options.state = WriterState.None;\n      this.closeNode(node, options, level);\n      return r;\n    }\n\n    comment(node, options, level) {\n      var r;\n      this.openNode(node, options, level);\n      options.state = WriterState.OpenTag;\n      r = this.indent(node, options, level) + '<!-- ';\n      options.state = WriterState.InsideTag;\n      r += node.value;\n      options.state = WriterState.CloseTag;\n      r += ' -->' + this.endline(node, options, level);\n      options.state = WriterState.None;\n      this.closeNode(node, options, level);\n      return r;\n    }\n\n    declaration(node, options, level) {\n      var r;\n      this.openNode(node, options, level);\n      options.state = WriterState.OpenTag;\n      r = this.indent(node, options, level) + '<?xml';\n      options.state = WriterState.InsideTag;\n      r += ' version=\"' + node.version + '\"';\n      if (node.encoding != null) {\n        r += ' encoding=\"' + node.encoding + '\"';\n      }\n      if (node.standalone != null) {\n        r += ' standalone=\"' + node.standalone + '\"';\n      }\n      options.state = WriterState.CloseTag;\n      r += options.spaceBeforeSlash + '?>';\n      r += this.endline(node, options, level);\n      options.state = WriterState.None;\n      this.closeNode(node, options, level);\n      return r;\n    }\n\n    docType(node, options, level) {\n      var child, i, len1, r, ref;\n      level || (level = 0);\n      this.openNode(node, options, level);\n      options.state = WriterState.OpenTag;\n      r = this.indent(node, options, level);\n      r += '<!DOCTYPE ' + node.root().name;\n      // external identifier\n      if (node.pubID && node.sysID) {\n        r += ' PUBLIC \"' + node.pubID + '\" \"' + node.sysID + '\"';\n      } else if (node.sysID) {\n        r += ' SYSTEM \"' + node.sysID + '\"';\n      }\n      // internal subset\n      if (node.children.length > 0) {\n        r += ' [';\n        r += this.endline(node, options, level);\n        options.state = WriterState.InsideTag;\n        ref = node.children;\n        for (i = 0, len1 = ref.length; i < len1; i++) {\n          child = ref[i];\n          r += this.writeChildNode(child, options, level + 1);\n        }\n        options.state = WriterState.CloseTag;\n        r += ']';\n      }\n      // close tag\n      options.state = WriterState.CloseTag;\n      r += options.spaceBeforeSlash + '>';\n      r += this.endline(node, options, level);\n      options.state = WriterState.None;\n      this.closeNode(node, options, level);\n      return r;\n    }\n\n    element(node, options, level) {\n      var att, attLen, child, childNodeCount, firstChildNode, i, j, len, len1, len2, name, prettySuppressed, r, ratt, ref, ref1, ref2, ref3, rline;\n      level || (level = 0);\n      prettySuppressed = false;\n      // open tag\n      this.openNode(node, options, level);\n      options.state = WriterState.OpenTag;\n      r = this.indent(node, options, level) + '<' + node.name;\n      // attributes\n      if (options.pretty && options.width > 0) {\n        len = r.length;\n        ref = node.attribs;\n        for (name in ref) {\n          if (!hasProp.call(ref, name)) continue;\n          att = ref[name];\n          ratt = this.attribute(att, options, level);\n          attLen = ratt.length;\n          if (len + attLen > options.width) {\n            rline = this.indent(node, options, level + 1) + ratt;\n            r += this.endline(node, options, level) + rline;\n            len = rline.length;\n          } else {\n            rline = ' ' + ratt;\n            r += rline;\n            len += rline.length;\n          }\n        }\n      } else {\n        ref1 = node.attribs;\n        for (name in ref1) {\n          if (!hasProp.call(ref1, name)) continue;\n          att = ref1[name];\n          r += this.attribute(att, options, level);\n        }\n      }\n      childNodeCount = node.children.length;\n      firstChildNode = childNodeCount === 0 ? null : node.children[0];\n      if (childNodeCount === 0 || node.children.every(function(e) {\n        return (e.type === NodeType.Text || e.type === NodeType.Raw) && e.value === '';\n      })) {\n        // empty element\n        if (options.allowEmpty) {\n          r += '>';\n          options.state = WriterState.CloseTag;\n          r += '</' + node.name + '>' + this.endline(node, options, level);\n        } else {\n          options.state = WriterState.CloseTag;\n          r += options.spaceBeforeSlash + '/>' + this.endline(node, options, level);\n        }\n      } else if (options.pretty && childNodeCount === 1 && (firstChildNode.type === NodeType.Text || firstChildNode.type === NodeType.Raw) && (firstChildNode.value != null)) {\n        // do not indent text-only nodes\n        r += '>';\n        options.state = WriterState.InsideTag;\n        options.suppressPrettyCount++;\n        prettySuppressed = true;\n        r += this.writeChildNode(firstChildNode, options, level + 1);\n        options.suppressPrettyCount--;\n        prettySuppressed = false;\n        options.state = WriterState.CloseTag;\n        r += '</' + node.name + '>' + this.endline(node, options, level);\n      } else {\n        // if ANY are a text node, then suppress pretty now\n        if (options.dontPrettyTextNodes) {\n          ref2 = node.children;\n          for (i = 0, len1 = ref2.length; i < len1; i++) {\n            child = ref2[i];\n            if ((child.type === NodeType.Text || child.type === NodeType.Raw) && (child.value != null)) {\n              options.suppressPrettyCount++;\n              prettySuppressed = true;\n              break;\n            }\n          }\n        }\n        // close the opening tag, after dealing with newline\n        r += '>' + this.endline(node, options, level);\n        options.state = WriterState.InsideTag;\n        ref3 = node.children;\n        // inner tags\n        for (j = 0, len2 = ref3.length; j < len2; j++) {\n          child = ref3[j];\n          r += this.writeChildNode(child, options, level + 1);\n        }\n        // close tag\n        options.state = WriterState.CloseTag;\n        r += this.indent(node, options, level) + '</' + node.name + '>';\n        if (prettySuppressed) {\n          options.suppressPrettyCount--;\n        }\n        r += this.endline(node, options, level);\n        options.state = WriterState.None;\n      }\n      this.closeNode(node, options, level);\n      return r;\n    }\n\n    writeChildNode(node, options, level) {\n      switch (node.type) {\n        case NodeType.CData:\n          return this.cdata(node, options, level);\n        case NodeType.Comment:\n          return this.comment(node, options, level);\n        case NodeType.Element:\n          return this.element(node, options, level);\n        case NodeType.Raw:\n          return this.raw(node, options, level);\n        case NodeType.Text:\n          return this.text(node, options, level);\n        case NodeType.ProcessingInstruction:\n          return this.processingInstruction(node, options, level);\n        case NodeType.Dummy:\n          return '';\n        case NodeType.Declaration:\n          return this.declaration(node, options, level);\n        case NodeType.DocType:\n          return this.docType(node, options, level);\n        case NodeType.AttributeDeclaration:\n          return this.dtdAttList(node, options, level);\n        case NodeType.ElementDeclaration:\n          return this.dtdElement(node, options, level);\n        case NodeType.EntityDeclaration:\n          return this.dtdEntity(node, options, level);\n        case NodeType.NotationDeclaration:\n          return this.dtdNotation(node, options, level);\n        default:\n          throw new Error(\"Unknown XML node type: \" + node.constructor.name);\n      }\n    }\n\n    processingInstruction(node, options, level) {\n      var r;\n      this.openNode(node, options, level);\n      options.state = WriterState.OpenTag;\n      r = this.indent(node, options, level) + '<?';\n      options.state = WriterState.InsideTag;\n      r += node.target;\n      if (node.value) {\n        r += ' ' + node.value;\n      }\n      options.state = WriterState.CloseTag;\n      r += options.spaceBeforeSlash + '?>';\n      r += this.endline(node, options, level);\n      options.state = WriterState.None;\n      this.closeNode(node, options, level);\n      return r;\n    }\n\n    raw(node, options, level) {\n      var r;\n      this.openNode(node, options, level);\n      options.state = WriterState.OpenTag;\n      r = this.indent(node, options, level);\n      options.state = WriterState.InsideTag;\n      r += node.value;\n      options.state = WriterState.CloseTag;\n      r += this.endline(node, options, level);\n      options.state = WriterState.None;\n      this.closeNode(node, options, level);\n      return r;\n    }\n\n    text(node, options, level) {\n      var r;\n      this.openNode(node, options, level);\n      options.state = WriterState.OpenTag;\n      r = this.indent(node, options, level);\n      options.state = WriterState.InsideTag;\n      r += node.value;\n      options.state = WriterState.CloseTag;\n      r += this.endline(node, options, level);\n      options.state = WriterState.None;\n      this.closeNode(node, options, level);\n      return r;\n    }\n\n    dtdAttList(node, options, level) {\n      var r;\n      this.openNode(node, options, level);\n      options.state = WriterState.OpenTag;\n      r = this.indent(node, options, level) + '<!ATTLIST';\n      options.state = WriterState.InsideTag;\n      r += ' ' + node.elementName + ' ' + node.attributeName + ' ' + node.attributeType;\n      if (node.defaultValueType !== '#DEFAULT') {\n        r += ' ' + node.defaultValueType;\n      }\n      if (node.defaultValue) {\n        r += ' \"' + node.defaultValue + '\"';\n      }\n      options.state = WriterState.CloseTag;\n      r += options.spaceBeforeSlash + '>' + this.endline(node, options, level);\n      options.state = WriterState.None;\n      this.closeNode(node, options, level);\n      return r;\n    }\n\n    dtdElement(node, options, level) {\n      var r;\n      this.openNode(node, options, level);\n      options.state = WriterState.OpenTag;\n      r = this.indent(node, options, level) + '<!ELEMENT';\n      options.state = WriterState.InsideTag;\n      r += ' ' + node.name + ' ' + node.value;\n      options.state = WriterState.CloseTag;\n      r += options.spaceBeforeSlash + '>' + this.endline(node, options, level);\n      options.state = WriterState.None;\n      this.closeNode(node, options, level);\n      return r;\n    }\n\n    dtdEntity(node, options, level) {\n      var r;\n      this.openNode(node, options, level);\n      options.state = WriterState.OpenTag;\n      r = this.indent(node, options, level) + '<!ENTITY';\n      options.state = WriterState.InsideTag;\n      if (node.pe) {\n        r += ' %';\n      }\n      r += ' ' + node.name;\n      if (node.value) {\n        r += ' \"' + node.value + '\"';\n      } else {\n        if (node.pubID && node.sysID) {\n          r += ' PUBLIC \"' + node.pubID + '\" \"' + node.sysID + '\"';\n        } else if (node.sysID) {\n          r += ' SYSTEM \"' + node.sysID + '\"';\n        }\n        if (node.nData) {\n          r += ' NDATA ' + node.nData;\n        }\n      }\n      options.state = WriterState.CloseTag;\n      r += options.spaceBeforeSlash + '>' + this.endline(node, options, level);\n      options.state = WriterState.None;\n      this.closeNode(node, options, level);\n      return r;\n    }\n\n    dtdNotation(node, options, level) {\n      var r;\n      this.openNode(node, options, level);\n      options.state = WriterState.OpenTag;\n      r = this.indent(node, options, level) + '<!NOTATION';\n      options.state = WriterState.InsideTag;\n      r += ' ' + node.name;\n      if (node.pubID && node.sysID) {\n        r += ' PUBLIC \"' + node.pubID + '\" \"' + node.sysID + '\"';\n      } else if (node.pubID) {\n        r += ' PUBLIC \"' + node.pubID + '\"';\n      } else if (node.sysID) {\n        r += ' SYSTEM \"' + node.sysID + '\"';\n      }\n      options.state = WriterState.CloseTag;\n      r += options.spaceBeforeSlash + '>' + this.endline(node, options, level);\n      options.state = WriterState.None;\n      this.closeNode(node, options, level);\n      return r;\n    }\n\n    openNode(node, options, level) {}\n\n    closeNode(node, options, level) {}\n\n    openAttribute(att, options, level) {}\n\n    closeAttribute(att, options, level) {}\n\n  };\n\n}).call(this);\n"]},"metadata":{},"sourceType":"script"}