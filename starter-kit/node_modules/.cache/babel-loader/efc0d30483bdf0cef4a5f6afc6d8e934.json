{"ast":null,"code":"'use strict';\n/* jshint ignore:start */\n\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n\n/* jshint ignore:end */\n\nvar Q = require('q');\n/* jshint ignore:line */\n\n\nvar _ = require('lodash');\n/* jshint ignore:line */\n\n\nvar util = require('util');\n/* jshint ignore:line */\n\n\nvar LocalList = require('./availablePhoneNumber/local').LocalList;\n\nvar MachineToMachineList = require('./availablePhoneNumber/machineToMachine').MachineToMachineList;\n\nvar MobileList = require('./availablePhoneNumber/mobile').MobileList;\n\nvar NationalList = require('./availablePhoneNumber/national').NationalList;\n\nvar Page = require('../../../../base/Page');\n/* jshint ignore:line */\n\n\nvar SharedCostList = require('./availablePhoneNumber/sharedCost').SharedCostList;\n\nvar TollFreeList = require('./availablePhoneNumber/tollFree').TollFreeList;\n\nvar VoipList = require('./availablePhoneNumber/voip').VoipList;\n\nvar values = require('../../../../base/values');\n/* jshint ignore:line */\n\n\nvar AvailablePhoneNumberCountryList;\nvar AvailablePhoneNumberCountryPage;\nvar AvailablePhoneNumberCountryInstance;\nvar AvailablePhoneNumberCountryContext;\n/* jshint ignore:start */\n\n/**\n * Initialize the AvailablePhoneNumberCountryList\n *\n * @constructor Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryList\n *\n * @param {Twilio.Api.V2010} version - Version of the resource\n * @param {string} accountSid -\n *          A 34 character string that uniquely identifies this resource.\n */\n\n/* jshint ignore:end */\n\nAvailablePhoneNumberCountryList = function AvailablePhoneNumberCountryList(version, accountSid) {\n  /* jshint ignore:start */\n\n  /**\n   * @function availablePhoneNumbers\n   * @memberof Twilio.Api.V2010.AccountContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext}\n   */\n\n  /* jshint ignore:end */\n  function AvailablePhoneNumberCountryListInstance(sid) {\n    return AvailablePhoneNumberCountryListInstance.get(sid);\n  }\n\n  AvailablePhoneNumberCountryListInstance._version = version; // Path Solution\n\n  AvailablePhoneNumberCountryListInstance._solution = {\n    accountSid: accountSid\n  };\n  AvailablePhoneNumberCountryListInstance._uri = `/Accounts/${accountSid}/AvailablePhoneNumbers.json`;\n  /* jshint ignore:start */\n\n  /**\n   * Streams AvailablePhoneNumberCountryInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n\n  /* jshint ignore:end */\n\n  AvailablePhoneNumberCountryListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Lists AvailablePhoneNumberCountryInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  AvailablePhoneNumberCountryListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single page of AvailablePhoneNumberCountryInstance records from the\n   * API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  AvailablePhoneNumberCountryListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new AvailablePhoneNumberCountryPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single target page of AvailablePhoneNumberCountryInstance records\n   * from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  AvailablePhoneNumberCountryListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new AvailablePhoneNumberCountryPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Constructs a available_phone_number_country\n   *\n   * @function get\n   * @memberof Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryList#\n   *\n   * @param {string} countryCode -\n   *          The ISO country code of the country to fetch available phone number information about\n   *\n   * @returns {Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext}\n   */\n\n  /* jshint ignore:end */\n\n\n  AvailablePhoneNumberCountryListInstance.get = function get(countryCode) {\n    return new AvailablePhoneNumberCountryContext(this._version, this._solution.accountSid, countryCode);\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryList#\n   *\n   * @returns Object\n   */\n\n  /* jshint ignore:end */\n\n\n  AvailablePhoneNumberCountryListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  AvailablePhoneNumberCountryListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return AvailablePhoneNumberCountryListInstance;\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the AvailablePhoneNumberCountryPage\n *\n * @constructor Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryPage\n *\n * @param {V2010} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {AvailablePhoneNumberCountrySolution} solution - Path solution\n *\n * @returns AvailablePhoneNumberCountryPage\n */\n\n/* jshint ignore:end */\n\n\nAvailablePhoneNumberCountryPage = function AvailablePhoneNumberCountryPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(AvailablePhoneNumberCountryPage.prototype, Page.prototype);\n\nAvailablePhoneNumberCountryPage.prototype.constructor = AvailablePhoneNumberCountryPage;\n/* jshint ignore:start */\n\n/**\n * Build an instance of AvailablePhoneNumberCountryInstance\n *\n * @function getInstance\n * @memberof Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryPage#\n *\n * @param {AvailablePhoneNumberCountryPayload} payload -\n *          Payload response from the API\n *\n * @returns AvailablePhoneNumberCountryInstance\n */\n\n/* jshint ignore:end */\n\nAvailablePhoneNumberCountryPage.prototype.getInstance = function getInstance(payload) {\n  return new AvailablePhoneNumberCountryInstance(this._version, payload, this._solution.accountSid);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryPage#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nAvailablePhoneNumberCountryPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nAvailablePhoneNumberCountryPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the AvailablePhoneNumberCountryContext\n *\n * @constructor Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryInstance\n *\n * @property {string} countryCode - The ISO-3166-1 country code of the country.\n * @property {string} country - The name of the country\n * @property {string} uri -\n *          The URI of the Country resource, relative to `https://api.twilio.com`\n * @property {boolean} beta -\n *          Whether all phone numbers available in the country are new to the Twilio platform.\n * @property {string} subresourceUris -\n *          A list of related resources identified by their relative URIs\n *\n * @param {V2010} version - Version of the resource\n * @param {AvailablePhoneNumberCountryPayload} payload - The instance payload\n * @param {sid} accountSid -\n *          A 34 character string that uniquely identifies this resource.\n * @param {iso_country_code} countryCode -\n *          The ISO country code of the country to fetch available phone number information about\n */\n\n/* jshint ignore:end */\n\n\nAvailablePhoneNumberCountryInstance = function AvailablePhoneNumberCountryInstance(version, payload, accountSid, countryCode) {\n  this._version = version; // Marshaled Properties\n\n  this.countryCode = payload.country_code; // jshint ignore:line\n\n  this.country = payload.country; // jshint ignore:line\n\n  this.uri = payload.uri; // jshint ignore:line\n\n  this.beta = payload.beta; // jshint ignore:line\n\n  this.subresourceUris = payload.subresource_uris; // jshint ignore:line\n  // Context\n\n  this._context = undefined;\n  this._solution = {\n    accountSid: accountSid,\n    countryCode: countryCode || this.countryCode\n  };\n};\n\nObject.defineProperty(AvailablePhoneNumberCountryInstance.prototype, '_proxy', {\n  get: function () {\n    if (!this._context) {\n      this._context = new AvailablePhoneNumberCountryContext(this._version, this._solution.accountSid, this._solution.countryCode);\n    }\n\n    return this._context;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * fetch a AvailablePhoneNumberCountryInstance\n *\n * @function fetch\n * @memberof Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed AvailablePhoneNumberCountryInstance\n */\n\n/* jshint ignore:end */\n\nAvailablePhoneNumberCountryInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n/* jshint ignore:start */\n\n/**\n * Access the local\n *\n * @function local\n * @memberof Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryInstance#\n *\n * @returns {Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext.LocalList}\n */\n\n/* jshint ignore:end */\n\n\nAvailablePhoneNumberCountryInstance.prototype.local = function local() {\n  return this._proxy.local;\n};\n/* jshint ignore:start */\n\n/**\n * Access the tollFree\n *\n * @function tollFree\n * @memberof Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryInstance#\n *\n * @returns {Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext.TollFreeList}\n */\n\n/* jshint ignore:end */\n\n\nAvailablePhoneNumberCountryInstance.prototype.tollFree = function tollFree() {\n  return this._proxy.tollFree;\n};\n/* jshint ignore:start */\n\n/**\n * Access the mobile\n *\n * @function mobile\n * @memberof Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryInstance#\n *\n * @returns {Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext.MobileList}\n */\n\n/* jshint ignore:end */\n\n\nAvailablePhoneNumberCountryInstance.prototype.mobile = function mobile() {\n  return this._proxy.mobile;\n};\n/* jshint ignore:start */\n\n/**\n * Access the national\n *\n * @function national\n * @memberof Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryInstance#\n *\n * @returns {Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext.NationalList}\n */\n\n/* jshint ignore:end */\n\n\nAvailablePhoneNumberCountryInstance.prototype.national = function national() {\n  return this._proxy.national;\n};\n/* jshint ignore:start */\n\n/**\n * Access the voip\n *\n * @function voip\n * @memberof Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryInstance#\n *\n * @returns {Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext.VoipList}\n */\n\n/* jshint ignore:end */\n\n\nAvailablePhoneNumberCountryInstance.prototype.voip = function voip() {\n  return this._proxy.voip;\n};\n/* jshint ignore:start */\n\n/**\n * Access the sharedCost\n *\n * @function sharedCost\n * @memberof Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryInstance#\n *\n * @returns {Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext.SharedCostList}\n */\n\n/* jshint ignore:end */\n\n\nAvailablePhoneNumberCountryInstance.prototype.sharedCost = function sharedCost() {\n  return this._proxy.sharedCost;\n};\n/* jshint ignore:start */\n\n/**\n * Access the machineToMachine\n *\n * @function machineToMachine\n * @memberof Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryInstance#\n *\n * @returns {Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext.MachineToMachineList}\n */\n\n/* jshint ignore:end */\n\n\nAvailablePhoneNumberCountryInstance.prototype.machineToMachine = function machineToMachine() {\n  return this._proxy.machineToMachine;\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryInstance#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nAvailablePhoneNumberCountryInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nAvailablePhoneNumberCountryInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the AvailablePhoneNumberCountryContext\n *\n * @constructor Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext\n *\n * @property {Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext.LocalList} local -\n *          local resource\n * @property {Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext.TollFreeList} tollFree -\n *          tollFree resource\n * @property {Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext.MobileList} mobile -\n *          mobile resource\n * @property {Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext.NationalList} national -\n *          national resource\n * @property {Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext.VoipList} voip -\n *          voip resource\n * @property {Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext.SharedCostList} sharedCost -\n *          sharedCost resource\n * @property {Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext.MachineToMachineList} machineToMachine -\n *          machineToMachine resource\n *\n * @param {V2010} version - Version of the resource\n * @param {sid} accountSid -\n *          The SID of the Account requesting the available phone number Country resource\n * @param {iso_country_code} countryCode -\n *          The ISO country code of the country to fetch available phone number information about\n */\n\n/* jshint ignore:end */\n\n\nAvailablePhoneNumberCountryContext = function AvailablePhoneNumberCountryContext(version, accountSid, countryCode) {\n  this._version = version; // Path Solution\n\n  this._solution = {\n    accountSid: accountSid,\n    countryCode: countryCode\n  };\n  this._uri = `/Accounts/${accountSid}/AvailablePhoneNumbers/${countryCode}.json`; // Dependents\n\n  this._local = undefined;\n  this._tollFree = undefined;\n  this._mobile = undefined;\n  this._national = undefined;\n  this._voip = undefined;\n  this._sharedCost = undefined;\n  this._machineToMachine = undefined;\n};\n/* jshint ignore:start */\n\n/**\n * fetch a AvailablePhoneNumberCountryInstance\n *\n * @function fetch\n * @memberof Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed AvailablePhoneNumberCountryInstance\n */\n\n/* jshint ignore:end */\n\n\nAvailablePhoneNumberCountryContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new AvailablePhoneNumberCountryInstance(this._version, payload, this._solution.accountSid, this._solution.countryCode));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\nObject.defineProperty(AvailablePhoneNumberCountryContext.prototype, 'local', {\n  get: function () {\n    if (!this._local) {\n      this._local = new LocalList(this._version, this._solution.accountSid, this._solution.countryCode);\n    }\n\n    return this._local;\n  }\n});\nObject.defineProperty(AvailablePhoneNumberCountryContext.prototype, 'tollFree', {\n  get: function () {\n    if (!this._tollFree) {\n      this._tollFree = new TollFreeList(this._version, this._solution.accountSid, this._solution.countryCode);\n    }\n\n    return this._tollFree;\n  }\n});\nObject.defineProperty(AvailablePhoneNumberCountryContext.prototype, 'mobile', {\n  get: function () {\n    if (!this._mobile) {\n      this._mobile = new MobileList(this._version, this._solution.accountSid, this._solution.countryCode);\n    }\n\n    return this._mobile;\n  }\n});\nObject.defineProperty(AvailablePhoneNumberCountryContext.prototype, 'national', {\n  get: function () {\n    if (!this._national) {\n      this._national = new NationalList(this._version, this._solution.accountSid, this._solution.countryCode);\n    }\n\n    return this._national;\n  }\n});\nObject.defineProperty(AvailablePhoneNumberCountryContext.prototype, 'voip', {\n  get: function () {\n    if (!this._voip) {\n      this._voip = new VoipList(this._version, this._solution.accountSid, this._solution.countryCode);\n    }\n\n    return this._voip;\n  }\n});\nObject.defineProperty(AvailablePhoneNumberCountryContext.prototype, 'sharedCost', {\n  get: function () {\n    if (!this._sharedCost) {\n      this._sharedCost = new SharedCostList(this._version, this._solution.accountSid, this._solution.countryCode);\n    }\n\n    return this._sharedCost;\n  }\n});\nObject.defineProperty(AvailablePhoneNumberCountryContext.prototype, 'machineToMachine', {\n  get: function () {\n    if (!this._machineToMachine) {\n      this._machineToMachine = new MachineToMachineList(this._version, this._solution.accountSid, this._solution.countryCode);\n    }\n\n    return this._machineToMachine;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\nAvailablePhoneNumberCountryContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nAvailablePhoneNumberCountryContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  AvailablePhoneNumberCountryList: AvailablePhoneNumberCountryList,\n  AvailablePhoneNumberCountryPage: AvailablePhoneNumberCountryPage,\n  AvailablePhoneNumberCountryInstance: AvailablePhoneNumberCountryInstance,\n  AvailablePhoneNumberCountryContext: AvailablePhoneNumberCountryContext\n};","map":{"version":3,"sources":["/Users/tony_niu/Visual Studio/Twilio/twilio-video-starter-kit/node_modules/twilio/lib/rest/api/v2010/account/availablePhoneNumber.js"],"names":["Q","require","_","util","LocalList","MachineToMachineList","MobileList","NationalList","Page","SharedCostList","TollFreeList","VoipList","values","AvailablePhoneNumberCountryList","AvailablePhoneNumberCountryPage","AvailablePhoneNumberCountryInstance","AvailablePhoneNumberCountryContext","version","accountSid","AvailablePhoneNumberCountryListInstance","sid","get","_version","_solution","_uri","each","opts","callback","isFunction","isUndefined","Error","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","error","fetchNextPage","fn","promise","then","page","instances","instance","bind","nextPage","catch","merge","list","deferred","defer","allResources","resource","push","length","resolve","reject","nodeify","data","of","pageToken","pageNumber","uri","method","params","payload","getPage","targetUrl","_domain","twilio","request","countryCode","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","country_code","country","beta","subresourceUris","subresource_uris","_context","undefined","Object","defineProperty","fetch","_proxy","local","tollFree","mobile","national","voip","sharedCost","machineToMachine","_local","_tollFree","_mobile","_national","_voip","_sharedCost","_machineToMachine","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar LocalList = require('./availablePhoneNumber/local').LocalList;\nvar MachineToMachineList = require(\n    './availablePhoneNumber/machineToMachine').MachineToMachineList;\nvar MobileList = require('./availablePhoneNumber/mobile').MobileList;\nvar NationalList = require('./availablePhoneNumber/national').NationalList;\nvar Page = require('../../../../base/Page');  /* jshint ignore:line */\nvar SharedCostList = require(\n    './availablePhoneNumber/sharedCost').SharedCostList;\nvar TollFreeList = require('./availablePhoneNumber/tollFree').TollFreeList;\nvar VoipList = require('./availablePhoneNumber/voip').VoipList;\nvar values = require('../../../../base/values');  /* jshint ignore:line */\n\nvar AvailablePhoneNumberCountryList;\nvar AvailablePhoneNumberCountryPage;\nvar AvailablePhoneNumberCountryInstance;\nvar AvailablePhoneNumberCountryContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the AvailablePhoneNumberCountryList\n *\n * @constructor Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryList\n *\n * @param {Twilio.Api.V2010} version - Version of the resource\n * @param {string} accountSid -\n *          A 34 character string that uniquely identifies this resource.\n */\n/* jshint ignore:end */\nAvailablePhoneNumberCountryList = function\n    AvailablePhoneNumberCountryList(version, accountSid) {\n  /* jshint ignore:start */\n  /**\n   * @function availablePhoneNumbers\n   * @memberof Twilio.Api.V2010.AccountContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext}\n   */\n  /* jshint ignore:end */\n  function AvailablePhoneNumberCountryListInstance(sid) {\n    return AvailablePhoneNumberCountryListInstance.get(sid);\n  }\n\n  AvailablePhoneNumberCountryListInstance._version = version;\n  // Path Solution\n  AvailablePhoneNumberCountryListInstance._solution = {accountSid: accountSid};\n  AvailablePhoneNumberCountryListInstance._uri = `/Accounts/${accountSid}/AvailablePhoneNumbers.json`;\n  /* jshint ignore:start */\n  /**\n   * Streams AvailablePhoneNumberCountryInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  AvailablePhoneNumberCountryListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists AvailablePhoneNumberCountryInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  AvailablePhoneNumberCountryListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of AvailablePhoneNumberCountryInstance records from the\n   * API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  AvailablePhoneNumberCountryListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new AvailablePhoneNumberCountryPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of AvailablePhoneNumberCountryInstance records\n   * from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  AvailablePhoneNumberCountryListInstance.getPage = function getPage(targetUrl,\n      callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new AvailablePhoneNumberCountryPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a available_phone_number_country\n   *\n   * @function get\n   * @memberof Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryList#\n   *\n   * @param {string} countryCode -\n   *          The ISO country code of the country to fetch available phone number information about\n   *\n   * @returns {Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext}\n   */\n  /* jshint ignore:end */\n  AvailablePhoneNumberCountryListInstance.get = function get(countryCode) {\n    return new AvailablePhoneNumberCountryContext(\n      this._version,\n      this._solution.accountSid,\n      countryCode\n    );\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  AvailablePhoneNumberCountryListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  AvailablePhoneNumberCountryListInstance[util.inspect.custom] = function\n      inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return AvailablePhoneNumberCountryListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the AvailablePhoneNumberCountryPage\n *\n * @constructor Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryPage\n *\n * @param {V2010} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {AvailablePhoneNumberCountrySolution} solution - Path solution\n *\n * @returns AvailablePhoneNumberCountryPage\n */\n/* jshint ignore:end */\nAvailablePhoneNumberCountryPage = function\n    AvailablePhoneNumberCountryPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(AvailablePhoneNumberCountryPage.prototype, Page.prototype);\nAvailablePhoneNumberCountryPage.prototype.constructor = AvailablePhoneNumberCountryPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of AvailablePhoneNumberCountryInstance\n *\n * @function getInstance\n * @memberof Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryPage#\n *\n * @param {AvailablePhoneNumberCountryPayload} payload -\n *          Payload response from the API\n *\n * @returns AvailablePhoneNumberCountryInstance\n */\n/* jshint ignore:end */\nAvailablePhoneNumberCountryPage.prototype.getInstance = function\n    getInstance(payload) {\n  return new AvailablePhoneNumberCountryInstance(this._version, payload, this._solution.accountSid);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nAvailablePhoneNumberCountryPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nAvailablePhoneNumberCountryPage.prototype[util.inspect.custom] = function\n    inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the AvailablePhoneNumberCountryContext\n *\n * @constructor Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryInstance\n *\n * @property {string} countryCode - The ISO-3166-1 country code of the country.\n * @property {string} country - The name of the country\n * @property {string} uri -\n *          The URI of the Country resource, relative to `https://api.twilio.com`\n * @property {boolean} beta -\n *          Whether all phone numbers available in the country are new to the Twilio platform.\n * @property {string} subresourceUris -\n *          A list of related resources identified by their relative URIs\n *\n * @param {V2010} version - Version of the resource\n * @param {AvailablePhoneNumberCountryPayload} payload - The instance payload\n * @param {sid} accountSid -\n *          A 34 character string that uniquely identifies this resource.\n * @param {iso_country_code} countryCode -\n *          The ISO country code of the country to fetch available phone number information about\n */\n/* jshint ignore:end */\nAvailablePhoneNumberCountryInstance = function\n    AvailablePhoneNumberCountryInstance(version, payload, accountSid,\n    countryCode) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.countryCode = payload.country_code; // jshint ignore:line\n  this.country = payload.country; // jshint ignore:line\n  this.uri = payload.uri; // jshint ignore:line\n  this.beta = payload.beta; // jshint ignore:line\n  this.subresourceUris = payload.subresource_uris; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {accountSid: accountSid, countryCode: countryCode || this.countryCode, };\n};\n\nObject.defineProperty(AvailablePhoneNumberCountryInstance.prototype,\n  '_proxy', {\n    get: function() {\n      if (!this._context) {\n        this._context = new AvailablePhoneNumberCountryContext(\n          this._version,\n          this._solution.accountSid,\n          this._solution.countryCode\n        );\n      }\n\n      return this._context;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a AvailablePhoneNumberCountryInstance\n *\n * @function fetch\n * @memberof Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed AvailablePhoneNumberCountryInstance\n */\n/* jshint ignore:end */\nAvailablePhoneNumberCountryInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * Access the local\n *\n * @function local\n * @memberof Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryInstance#\n *\n * @returns {Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext.LocalList}\n */\n/* jshint ignore:end */\nAvailablePhoneNumberCountryInstance.prototype.local = function local() {\n  return this._proxy.local;\n};\n\n/* jshint ignore:start */\n/**\n * Access the tollFree\n *\n * @function tollFree\n * @memberof Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryInstance#\n *\n * @returns {Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext.TollFreeList}\n */\n/* jshint ignore:end */\nAvailablePhoneNumberCountryInstance.prototype.tollFree = function tollFree() {\n  return this._proxy.tollFree;\n};\n\n/* jshint ignore:start */\n/**\n * Access the mobile\n *\n * @function mobile\n * @memberof Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryInstance#\n *\n * @returns {Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext.MobileList}\n */\n/* jshint ignore:end */\nAvailablePhoneNumberCountryInstance.prototype.mobile = function mobile() {\n  return this._proxy.mobile;\n};\n\n/* jshint ignore:start */\n/**\n * Access the national\n *\n * @function national\n * @memberof Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryInstance#\n *\n * @returns {Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext.NationalList}\n */\n/* jshint ignore:end */\nAvailablePhoneNumberCountryInstance.prototype.national = function national() {\n  return this._proxy.national;\n};\n\n/* jshint ignore:start */\n/**\n * Access the voip\n *\n * @function voip\n * @memberof Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryInstance#\n *\n * @returns {Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext.VoipList}\n */\n/* jshint ignore:end */\nAvailablePhoneNumberCountryInstance.prototype.voip = function voip() {\n  return this._proxy.voip;\n};\n\n/* jshint ignore:start */\n/**\n * Access the sharedCost\n *\n * @function sharedCost\n * @memberof Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryInstance#\n *\n * @returns {Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext.SharedCostList}\n */\n/* jshint ignore:end */\nAvailablePhoneNumberCountryInstance.prototype.sharedCost = function sharedCost()\n    {\n  return this._proxy.sharedCost;\n};\n\n/* jshint ignore:start */\n/**\n * Access the machineToMachine\n *\n * @function machineToMachine\n * @memberof Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryInstance#\n *\n * @returns {Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext.MachineToMachineList}\n */\n/* jshint ignore:end */\nAvailablePhoneNumberCountryInstance.prototype.machineToMachine = function\n    machineToMachine() {\n  return this._proxy.machineToMachine;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nAvailablePhoneNumberCountryInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nAvailablePhoneNumberCountryInstance.prototype[util.inspect.custom] = function\n    inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the AvailablePhoneNumberCountryContext\n *\n * @constructor Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext\n *\n * @property {Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext.LocalList} local -\n *          local resource\n * @property {Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext.TollFreeList} tollFree -\n *          tollFree resource\n * @property {Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext.MobileList} mobile -\n *          mobile resource\n * @property {Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext.NationalList} national -\n *          national resource\n * @property {Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext.VoipList} voip -\n *          voip resource\n * @property {Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext.SharedCostList} sharedCost -\n *          sharedCost resource\n * @property {Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext.MachineToMachineList} machineToMachine -\n *          machineToMachine resource\n *\n * @param {V2010} version - Version of the resource\n * @param {sid} accountSid -\n *          The SID of the Account requesting the available phone number Country resource\n * @param {iso_country_code} countryCode -\n *          The ISO country code of the country to fetch available phone number information about\n */\n/* jshint ignore:end */\nAvailablePhoneNumberCountryContext = function\n    AvailablePhoneNumberCountryContext(version, accountSid, countryCode) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {accountSid: accountSid, countryCode: countryCode, };\n  this._uri = `/Accounts/${accountSid}/AvailablePhoneNumbers/${countryCode}.json`;\n\n  // Dependents\n  this._local = undefined;\n  this._tollFree = undefined;\n  this._mobile = undefined;\n  this._national = undefined;\n  this._voip = undefined;\n  this._sharedCost = undefined;\n  this._machineToMachine = undefined;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a AvailablePhoneNumberCountryInstance\n *\n * @function fetch\n * @memberof Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed AvailablePhoneNumberCountryInstance\n */\n/* jshint ignore:end */\nAvailablePhoneNumberCountryContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({uri: this._uri, method: 'GET'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new AvailablePhoneNumberCountryInstance(\n      this._version,\n      payload,\n      this._solution.accountSid,\n      this._solution.countryCode\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\nObject.defineProperty(AvailablePhoneNumberCountryContext.prototype,\n  'local', {\n    get: function() {\n      if (!this._local) {\n        this._local = new LocalList(this._version, this._solution.accountSid, this._solution.countryCode);\n      }\n      return this._local;\n    }\n});\n\nObject.defineProperty(AvailablePhoneNumberCountryContext.prototype,\n  'tollFree', {\n    get: function() {\n      if (!this._tollFree) {\n        this._tollFree = new TollFreeList(\n          this._version,\n          this._solution.accountSid,\n          this._solution.countryCode\n        );\n      }\n      return this._tollFree;\n    }\n});\n\nObject.defineProperty(AvailablePhoneNumberCountryContext.prototype,\n  'mobile', {\n    get: function() {\n      if (!this._mobile) {\n        this._mobile = new MobileList(this._version, this._solution.accountSid, this._solution.countryCode);\n      }\n      return this._mobile;\n    }\n});\n\nObject.defineProperty(AvailablePhoneNumberCountryContext.prototype,\n  'national', {\n    get: function() {\n      if (!this._national) {\n        this._national = new NationalList(\n          this._version,\n          this._solution.accountSid,\n          this._solution.countryCode\n        );\n      }\n      return this._national;\n    }\n});\n\nObject.defineProperty(AvailablePhoneNumberCountryContext.prototype,\n  'voip', {\n    get: function() {\n      if (!this._voip) {\n        this._voip = new VoipList(this._version, this._solution.accountSid, this._solution.countryCode);\n      }\n      return this._voip;\n    }\n});\n\nObject.defineProperty(AvailablePhoneNumberCountryContext.prototype,\n  'sharedCost', {\n    get: function() {\n      if (!this._sharedCost) {\n        this._sharedCost = new SharedCostList(\n          this._version,\n          this._solution.accountSid,\n          this._solution.countryCode\n        );\n      }\n      return this._sharedCost;\n    }\n});\n\nObject.defineProperty(AvailablePhoneNumberCountryContext.prototype,\n  'machineToMachine', {\n    get: function() {\n      if (!this._machineToMachine) {\n        this._machineToMachine = new MachineToMachineList(\n          this._version,\n          this._solution.accountSid,\n          this._solution.countryCode\n        );\n      }\n      return this._machineToMachine;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.AvailablePhoneNumberCountryContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nAvailablePhoneNumberCountryContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nAvailablePhoneNumberCountryContext.prototype[util.inspect.custom] = function\n    inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  AvailablePhoneNumberCountryList: AvailablePhoneNumberCountryList,\n  AvailablePhoneNumberCountryPage: AvailablePhoneNumberCountryPage,\n  AvailablePhoneNumberCountryInstance: AvailablePhoneNumberCountryInstance,\n  AvailablePhoneNumberCountryContext: AvailablePhoneNumberCountryContext\n};\n"]},"metadata":{},"sourceType":"script"}