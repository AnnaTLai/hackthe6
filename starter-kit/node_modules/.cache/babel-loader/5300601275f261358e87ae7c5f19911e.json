{"ast":null,"code":"'use strict';\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _toConsumableArray(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar DefaultBackoff = require('backoff');\n\nvar _require = require('@twilio/webrtc'),\n    DefaultMediaStream = _require.MediaStream,\n    DefaultRTCIceCandidate = _require.RTCIceCandidate,\n    DefaultRTCPeerConnection = _require.RTCPeerConnection,\n    DefaultRTCSessionDescription = _require.RTCSessionDescription,\n    getStatistics = _require.getStats;\n\nvar _require2 = require('@twilio/webrtc/lib/util'),\n    guessBrowser = _require2.guessBrowser;\n\nvar _require3 = require('@twilio/webrtc/lib/util/sdp'),\n    getSdpFormat = _require3.getSdpFormat;\n\nvar _require4 = require('../../util/constants'),\n    DEFAULT_ICE_GATHERING_TIMEOUT_MS = _require4.DEFAULT_ICE_GATHERING_TIMEOUT_MS,\n    DEFAULT_LOG_LEVEL = _require4.DEFAULT_LOG_LEVEL,\n    DEFAULT_SESSION_TIMEOUT_SEC = _require4.DEFAULT_SESSION_TIMEOUT_SEC,\n    iceRestartBackoffConfig = _require4.iceRestartBackoffConfig;\n\nvar _require5 = require('../../util/sdp'),\n    createCodecMapForMediaSection = _require5.createCodecMapForMediaSection,\n    disableRtx = _require5.disableRtx,\n    getMediaSections = _require5.getMediaSections,\n    removeSSRCAttributes = _require5.removeSSRCAttributes,\n    revertSimulcastForNonVP8MediaSections = _require5.revertSimulcastForNonVP8MediaSections,\n    setBitrateParameters = _require5.setBitrateParameters,\n    setCodecPreferences = _require5.setCodecPreferences,\n    setSimulcast = _require5.setSimulcast,\n    unifiedPlanAddOrRewriteNewTrackIds = _require5.unifiedPlanAddOrRewriteNewTrackIds,\n    unifiedPlanAddOrRewriteTrackIds = _require5.unifiedPlanAddOrRewriteTrackIds,\n    unifiedPlanFilterLocalCodecs = _require5.unifiedPlanFilterLocalCodecs;\n\nvar DefaultTimeout = require('../../util/timeout');\n\nvar _require6 = require('../../util/twilio-video-errors'),\n    MediaClientLocalDescFailedError = _require6.MediaClientLocalDescFailedError,\n    MediaClientRemoteDescFailedError = _require6.MediaClientRemoteDescFailedError;\n\nvar _require7 = require('../../util'),\n    buildLogLevels = _require7.buildLogLevels,\n    isChromeScreenShareTrack = _require7.isChromeScreenShareTrack,\n    oncePerTick = _require7.oncePerTick;\n\nvar IceBox = require('./icebox');\n\nvar DefaultIceConnectionMonitor = require('./iceconnectionmonitor.js');\n\nvar DataTrackReceiver = require('../../data/receiver');\n\nvar MediaTrackReceiver = require('../../media/track/receiver');\n\nvar StateMachine = require('../../statemachine');\n\nvar Log = require('../../util/log');\n\nvar IdentityTrackMatcher = require('../../util/sdp/trackmatcher/identity');\n\nvar OrderedTrackMatcher = require('../../util/sdp/trackmatcher/ordered');\n\nvar MIDTrackMatcher = require('../../util/sdp/trackmatcher/mid');\n\nvar workaroundIssue8329 = require('../../util/sdp/issue8329');\n\nvar guess = guessBrowser();\nvar isChrome = guess === 'chrome';\nvar isFirefox = guess === 'firefox';\nvar isSafari = guess === 'safari';\nvar isRTCRtpSenderParamsSupported = typeof RTCRtpSender !== 'undefined' && typeof RTCRtpSender.prototype.getParameters === 'function' && typeof RTCRtpSender.prototype.setParameters === 'function';\nvar nInstances = 0;\n/*\nPeerConnectionV2 States\n-----------------------\n\n    +------+    +--------+\n    |      |    |        |\n    | open |--->| closed |\n    |      |    |        |\n    +------+    +--------+\n      |  ^          ^\n      |  |          |\n      |  |          |\n      v  |          |\n  +----------+      |\n  |          |      |\n  | updating |------+\n  |          |\n  +----------+\n\n*/\n\nvar states = {\n  open: ['closed', 'updating'],\n  updating: ['closed', 'open'],\n  closed: []\n};\n/**\n * @extends StateMachine\n * @property {id}\n * @emits PeerConnectionV2#connectionStateChanged\n * @emits PeerConnectionV2#iceConnectionStateChanged\n * @emits PeerConnectionV2#candidates\n * @emits PeerConnectionV2#description\n */\n\nvar PeerConnectionV2 = function (_StateMachine) {\n  _inherits(PeerConnectionV2, _StateMachine);\n  /**\n   * Construct a {@link PeerConnectionV2}.\n   * @param {string} id\n   * @param {EncodingParametersImpl} encodingParameters\n   * @param {PreferredCodecs} preferredCodecs\n   * @param {object} [options]\n   */\n\n\n  function PeerConnectionV2(id, encodingParameters, preferredCodecs, options) {\n    _classCallCheck(this, PeerConnectionV2);\n\n    var _this = _possibleConstructorReturn(this, (PeerConnectionV2.__proto__ || Object.getPrototypeOf(PeerConnectionV2)).call(this, 'open', states));\n\n    options = Object.assign({\n      enableDscp: false,\n      dummyAudioMediaStreamTrack: null,\n      isChromeScreenShareTrack: isChromeScreenShareTrack,\n      iceServers: [],\n      isRTCRtpSenderParamsSupported: isRTCRtpSenderParamsSupported,\n      logLevel: DEFAULT_LOG_LEVEL,\n      offerOptions: {},\n      revertSimulcastForNonVP8MediaSections: revertSimulcastForNonVP8MediaSections,\n      sessionTimeout: DEFAULT_SESSION_TIMEOUT_SEC * 1000,\n      setBitrateParameters: setBitrateParameters,\n      setCodecPreferences: setCodecPreferences,\n      setSimulcast: setSimulcast,\n      Backoff: DefaultBackoff,\n      IceConnectionMonitor: DefaultIceConnectionMonitor,\n      MediaStream: DefaultMediaStream,\n      RTCIceCandidate: DefaultRTCIceCandidate,\n      RTCPeerConnection: DefaultRTCPeerConnection,\n      RTCSessionDescription: DefaultRTCSessionDescription,\n      Timeout: DefaultTimeout\n    }, options);\n    var configuration = getConfiguration(options);\n    var sdpFormat = getSdpFormat(configuration.sdpSemantics);\n    var isUnifiedPlan = sdpFormat === 'unified';\n    var localMediaStream = isUnifiedPlan ? null : new options.MediaStream();\n    var logLevels = buildLogLevels(options.logLevel);\n    var RTCPeerConnection = options.RTCPeerConnection;\n\n    if (options.enableDscp === true) {\n      options.chromeSpecificConstraints = options.chromeSpecificConstraints || {};\n      options.chromeSpecificConstraints.optional = options.chromeSpecificConstraints.optional || [];\n      options.chromeSpecificConstraints.optional.push({\n        googDscp: true\n      });\n    }\n\n    var log = options.log ? options.log.createLog('signaling', _this) : new Log('webrtc', _this, logLevels);\n    var peerConnection = new RTCPeerConnection(configuration, options.chromeSpecificConstraints);\n\n    if (options.dummyAudioMediaStreamTrack) {\n      peerConnection.addTrack(options.dummyAudioMediaStreamTrack, localMediaStream || new options.MediaStream());\n    }\n\n    Object.defineProperties(_this, {\n      _appliedTrackIdsToAttributes: {\n        value: new Map(),\n        writable: true\n      },\n      _dataChannels: {\n        value: new Map()\n      },\n      _dataTrackReceivers: {\n        value: new Set()\n      },\n      _descriptionRevision: {\n        writable: true,\n        value: 0\n      },\n      _didGenerateLocalCandidates: {\n        writable: true,\n        value: false\n      },\n      _enableDscp: {\n        value: options.enableDscp\n      },\n      _encodingParameters: {\n        value: encodingParameters\n      },\n      _isChromeScreenShareTrack: {\n        value: options.isChromeScreenShareTrack\n      },\n      _iceGatheringFailed: {\n        value: false,\n        writable: true\n      },\n      _iceGatheringTimeout: {\n        value: new options.Timeout(function () {\n          return _this._handleIceGatheringTimeout();\n        }, DEFAULT_ICE_GATHERING_TIMEOUT_MS, false)\n      },\n      _iceRestartBackoff: {\n        value: options.Backoff.exponential(iceRestartBackoffConfig)\n      },\n      _instanceId: {\n        value: ++nInstances\n      },\n      _isIceConnectionInactive: {\n        writable: true,\n        value: false\n      },\n      _isIceLite: {\n        writable: true,\n        value: false\n      },\n      _isIceRestartBackoffInProgress: {\n        writable: true,\n        value: false\n      },\n      _isRestartingIce: {\n        writable: true,\n        value: false\n      },\n      _isUnifiedPlan: {\n        value: isUnifiedPlan\n      },\n      _isRTCRtpSenderParamsSupported: {\n        value: options.isRTCRtpSenderParamsSupported\n      },\n      _lastIceConnectionState: {\n        writable: true,\n        value: null\n      },\n      _lastStableDescriptionRevision: {\n        writable: true,\n        value: 0\n      },\n      _localCandidates: {\n        writable: true,\n        value: []\n      },\n      _localCodecs: {\n        value: new Set()\n      },\n      _localCandidatesRevision: {\n        writable: true,\n        value: 1\n      },\n      _localDescriptionWithoutSimulcast: {\n        writable: true,\n        value: null\n      },\n      _localDescription: {\n        writable: true,\n        value: null\n      },\n      _localMediaStream: {\n        value: localMediaStream\n      },\n      _localUfrag: {\n        writable: true,\n        value: null\n      },\n      _log: {\n        value: log\n      },\n      _remoteCodecMaps: {\n        value: new Map()\n      },\n      _rtpSenders: {\n        value: new Map()\n      },\n      _iceConnectionMonitor: {\n        value: new options.IceConnectionMonitor(peerConnection)\n      },\n      _mediaTrackReceivers: {\n        value: new Set()\n      },\n      _needsAnswer: {\n        writable: true,\n        value: false\n      },\n      _negotiationRole: {\n        writable: true,\n        value: null\n      },\n      _offerOptions: {\n        writable: true,\n        value: options.offerOptions\n      },\n      _peerConnection: {\n        value: peerConnection\n      },\n      _preferredAudioCodecs: {\n        value: preferredCodecs.audio\n      },\n      _preferredVideoCodecs: {\n        value: preferredCodecs.video\n      },\n      _shouldApplySimulcast: {\n        value: (isChrome || isSafari) && preferredCodecs.video.some(function (codecSettings) {\n          return codecSettings.codec.toLowerCase() === 'vp8' && codecSettings.simulcast;\n        })\n      },\n      _queuedDescription: {\n        writable: true,\n        value: null\n      },\n      _iceReconnectTimeout: {\n        value: new options.Timeout(function () {\n          log.debug('ICE reconnect timed out');\n\n          _this.close();\n        }, options.sessionTimeout, false)\n      },\n      _recycledTransceivers: {\n        value: {\n          audio: [],\n          video: []\n        }\n      },\n      _replaceTrackPromises: {\n        value: new Map()\n      },\n      _remoteCandidates: {\n        writable: true,\n        value: new IceBox()\n      },\n      _sdpFormat: {\n        value: sdpFormat\n      },\n      _setBitrateParameters: {\n        value: options.setBitrateParameters\n      },\n      _setCodecPreferences: {\n        value: options.setCodecPreferences\n      },\n      _setSimulcast: {\n        value: options.setSimulcast\n      },\n      _revertSimulcastForNonVP8MediaSections: {\n        value: options.revertSimulcastForNonVP8MediaSections\n      },\n      _RTCIceCandidate: {\n        value: options.RTCIceCandidate\n      },\n      _RTCPeerConnection: {\n        value: options.RTCPeerConnection\n      },\n      _RTCSessionDescription: {\n        value: options.RTCSessionDescription\n      },\n      _shouldOffer: {\n        writable: true,\n        value: false\n      },\n      _shouldRestartIce: {\n        writable: true,\n        value: false\n      },\n      _trackIdsToAttributes: {\n        value: new Map(),\n        writable: true\n      },\n      _trackMatcher: {\n        writable: true,\n        value: null\n      },\n      id: {\n        enumerable: true,\n        value: id\n      }\n    });\n    encodingParameters.on('changed', oncePerTick(function () {\n      if (_this._isRTCRtpSenderParamsSupported) {\n        if (!_this._needsAnswer) {\n          updateEncodingParameters(_this);\n        }\n\n        return;\n      }\n\n      _this.offer();\n    }));\n    peerConnection.addEventListener('connectionstatechange', _this._handleConnectionStateChange.bind(_this));\n    peerConnection.addEventListener('datachannel', _this._handleDataChannelEvent.bind(_this));\n    peerConnection.addEventListener('icecandidate', _this._handleIceCandidateEvent.bind(_this));\n    peerConnection.addEventListener('iceconnectionstatechange', _this._handleIceConnectionStateChange.bind(_this));\n    peerConnection.addEventListener('icegatheringstatechange', _this._handleIceGatheringStateChange.bind(_this));\n    peerConnection.addEventListener('signalingstatechange', _this._handleSignalingStateChange.bind(_this));\n    peerConnection.addEventListener('track', _this._handleTrackEvent.bind(_this));\n\n    _this._iceRestartBackoff.on('ready', function () {\n      return _this._initiateIceRestart();\n    });\n\n    var self = _this;\n\n    _this.on('stateChanged', function stateChanged(state) {\n      if (state !== 'closed') {\n        return;\n      }\n\n      self.removeListener('stateChanged', stateChanged);\n\n      self._dataChannels.forEach(function (dataChannel, dataTrackSender) {\n        self.removeDataTrackSender(dataTrackSender);\n      });\n    });\n\n    return _this;\n  }\n\n  _createClass(PeerConnectionV2, [{\n    key: 'toString',\n    value: function toString() {\n      return '[PeerConnectionV2 #' + this._instanceId + ': ' + this.id + ']';\n    }\n    /**\n     * The {@link PeerConnectionV2}'s underlying RTCPeerConnection's RTCPeerConnectionState\n     * if supported by the browser, its RTCIceConnectionState otherwise.\n     * @property {RTCPeerConnectionState}\n     */\n\n  }, {\n    key: '_addIceCandidate',\n\n    /**\n     * Add an ICE candidate to the {@link PeerConnectionV2}.\n     * @private\n     * @param {object} candidate\n     * @returns {Promise<void>}\n     */\n    value: function _addIceCandidate(candidate) {\n      var _this2 = this;\n\n      return Promise.resolve().then(function () {\n        candidate = new _this2._RTCIceCandidate(candidate);\n        return _this2._peerConnection.addIceCandidate(candidate);\n      }).catch(function (error) {\n        // NOTE(mmalavalli): Firefox 68+ now generates an RTCIceCandidate with an\n        // empty candidate string to signal end-of-candidates, followed by a null\n        // candidate. As of now, Chrome and Safari reject this RTCIceCandidate. Since\n        // this does not affect the media connection between Firefox 68+ and Chrome/Safari\n        // in Peer-to-Peer Rooms, we suppress the Error and log a warning message.\n        //\n        // Chrome bug: https://bugs.chromium.org/p/chromium/issues/detail?id=978582\n        //\n        _this2._log.warn('Failed to add RTCIceCandidate ' + (candidate ? '\"' + candidate.candidate + '\"' : 'null') + ': ' + error.message);\n      });\n    }\n    /**\n     * Add ICE candidates to the {@link PeerConnectionV2}.\n     * @private\n     * @param {Array<object>} candidates\n     * @returns {Promise<void>}\n     */\n\n  }, {\n    key: '_addIceCandidates',\n    value: function _addIceCandidates(candidates) {\n      return Promise.all(candidates.map(this._addIceCandidate, this)).then(function () {});\n    }\n    /**\n     * Add a new RTCRtpTransceiver or update an existing RTCRtpTransceiver for the\n     * given MediaStreamTrack.\n     * @private\n     * @param {MediaStreamTrack} track\n     * @returns {RTCRtpTransceiver}\n     */\n\n  }, {\n    key: '_addOrUpdateTransceiver',\n    value: function _addOrUpdateTransceiver(track) {\n      var _this3 = this;\n\n      var transceiver = takeRecycledTransceiver(this, track.kind);\n\n      if (transceiver && transceiver.sender) {\n        var oldTrackId = transceiver.sender.track ? transceiver.sender.track.id : null;\n\n        if (oldTrackId) {\n          this._log.warn('Reusing transceiver: ' + transceiver.mid + '] ' + oldTrackId + ' => ' + track.id);\n        } // NOTE(mpatwardhan):remember this transceiver while we replace track.\n        // we recycle transceivers that are not in use after 'negotiationCompleted', but we want to prevent\n        // this one from getting recycled while replaceTrack is pending.\n\n\n        this._replaceTrackPromises.set(transceiver, transceiver.sender.replaceTrack(track).then(function () {\n          transceiver.direction = 'sendrecv';\n        }, function () {// Do nothing.\n        }).finally(function () {\n          _this3._replaceTrackPromises.delete(transceiver);\n        }));\n\n        return transceiver;\n      }\n\n      return this._peerConnection.addTransceiver(track);\n    }\n    /**\n     * Check the {@link IceBox}.\n     * @private\n     * @param {RTCSessionDescriptionInit} description\n     * @returns {Promise<void>}\n     */\n\n  }, {\n    key: '_checkIceBox',\n    value: function _checkIceBox(description) {\n      var ufrag = getUfrag(description);\n\n      if (!ufrag) {\n        return Promise.resolve();\n      }\n\n      var candidates = this._remoteCandidates.setUfrag(ufrag);\n\n      return this._addIceCandidates(candidates);\n    }\n    /**\n     * Create an answer and set it on the {@link PeerConnectionV2}.\n     * @private\n     * @param {RTCSessionDescriptionInit} offer\n     * @returns {Promise<boolean>}\n     */\n\n  }, {\n    key: '_answer',\n    value: function _answer(offer) {\n      var _this4 = this;\n\n      return Promise.resolve().then(function () {\n        if (!_this4._negotiationRole) {\n          _this4._negotiationRole = 'answerer';\n        }\n\n        return _this4._setRemoteDescription(offer);\n      }).catch(function () {\n        throw new MediaClientRemoteDescFailedError();\n      }).then(function () {\n        return _this4._peerConnection.createAnswer();\n      }).then(function (answer) {\n        if (isFirefox) {\n          // NOTE(mmalavalli): We work around Chromium bug 1106157 by disabling\n          // RTX in Firefox 79+. For more details about the bug, please go here:\n          // https://bugs.chromium.org/p/chromium/issues/detail?id=1106157\n          answer = new _this4._RTCSessionDescription({\n            sdp: disableRtx(answer.sdp),\n            type: answer.type\n          });\n        } else {\n          answer = workaroundIssue8329(answer);\n        } // NOTE(mpatwardhan): Upcoming chrome versions are going to remove ssrc attributes\n        // mslabel and label. See this bug https://bugs.chromium.org/p/webrtc/issues/detail?id=7110\n        // and PSA: https://groups.google.com/forum/#!searchin/discuss-webrtc/PSA%7Csort:date/discuss-webrtc/jcZO-Wj0Wus/k2XvPCvoAwAJ\n        // We are not referencing those attributes, but this changes goes ahead and removes them to see if it works.\n        // this also helps reduce bytes on wires\n\n\n        var updatedSdp = removeSSRCAttributes(answer.sdp, ['mslabel', 'label']);\n\n        if (_this4._shouldApplySimulcast) {\n          var sdpWithoutSimulcast = updatedSdp;\n          updatedSdp = _this4._setSimulcast(sdpWithoutSimulcast, _this4._sdpFormat, _this4._trackIdsToAttributes); // NOTE(syerrapragada): VMS does not support H264 simulcast. So,\n          // unset simulcast for sections in local offer where corresponding\n          // sections in answer doesn't have vp8 as preferred codec and reapply offer.\n\n          updatedSdp = _this4._revertSimulcastForNonVP8MediaSections(updatedSdp, sdpWithoutSimulcast, offer.sdp);\n        } // NOTE(mmalavalli): Work around Chromium bug 1074421.\n        // https://bugs.chromium.org/p/chromium/issues/detail?id=1074421\n\n\n        updatedSdp = updatedSdp.replace(/42e015/g, '42e01f');\n        return _this4._setLocalDescription({\n          type: answer.type,\n          sdp: updatedSdp\n        });\n      }).then(function () {\n        return _this4._checkIceBox(offer);\n      }).then(function () {\n        return _this4._queuedDescription && _this4._updateDescription(_this4._queuedDescription);\n      }).then(function () {\n        _this4._queuedDescription = null;\n        return _this4._maybeReoffer(_this4._peerConnection.localDescription);\n      }).catch(function (error) {\n        throw error instanceof MediaClientRemoteDescFailedError ? error : new MediaClientLocalDescFailedError();\n      });\n    }\n    /**\n     * Close the underlying RTCPeerConnection. Returns false if the\n     * RTCPeerConnection was already closed.\n     * @private\n     * @returns {boolean}\n     */\n\n  }, {\n    key: '_close',\n    value: function _close() {\n      this._iceConnectionMonitor.stop();\n\n      if (this._peerConnection.signalingState !== 'closed') {\n        this._peerConnection.close();\n\n        this.preempt('closed');\n        return true;\n      }\n\n      return false;\n    }\n    /**\n     * Handle a \"connectionstatechange\" event.\n     * @private\n     * @returns {void}\n     */\n\n  }, {\n    key: '_handleConnectionStateChange',\n    value: function _handleConnectionStateChange() {\n      this.emit('connectionStateChanged');\n    }\n    /**\n     * Handle a \"datachannel\" event.\n     * @private\n     * @param {RTCDataChannelEvent} event\n     * @returns {void}\n     */\n\n  }, {\n    key: '_handleDataChannelEvent',\n    value: function _handleDataChannelEvent(event) {\n      var _this5 = this;\n\n      var dataChannel = event.channel;\n      var dataTrackReceiver = new DataTrackReceiver(dataChannel);\n\n      this._dataTrackReceivers.add(dataTrackReceiver);\n\n      dataChannel.addEventListener('close', function () {\n        _this5._dataTrackReceivers.delete(dataTrackReceiver);\n      });\n      this.emit('trackAdded', dataTrackReceiver);\n    }\n    /**\n     * Handle a glare scenario on the {@link PeerConnectionV2}.\n     * @private\n     * @param {RTCSessionDescriptionInit} offer\n     * @returns {Promise<void>}\n     */\n\n  }, {\n    key: '_handleGlare',\n    value: function _handleGlare(offer) {\n      var _this6 = this;\n\n      this._log.debug('Glare detected; rolling back');\n\n      if (this._isRestartingIce) {\n        this._log.debug('An ICE restart was in progress; we\\'ll need to restart ICE again after rolling back');\n\n        this._isRestartingIce = false;\n        this._shouldRestartIce = true;\n      }\n\n      return Promise.resolve().then(function () {\n        _this6._trackIdsToAttributes = new Map(_this6._appliedTrackIdsToAttributes);\n        return _this6._setLocalDescription({\n          type: 'rollback'\n        });\n      }).then(function () {\n        _this6._needsAnswer = false;\n        return _this6._answer(offer);\n      }).then(function (didReoffer) {\n        return didReoffer ? Promise.resolve() : _this6._offer();\n      });\n    }\n    /**\n     * Handle an ICE candidate event.\n     * @private\n     * @param {Event} event\n     * @returns {void}\n     */\n\n  }, {\n    key: '_handleIceCandidateEvent',\n    value: function _handleIceCandidateEvent(event) {\n      if (event.candidate) {\n        this._log.debug('Clearing ICE gathering timeout');\n\n        this._didGenerateLocalCandidates = true;\n\n        this._iceGatheringTimeout.clear();\n\n        this._localCandidates.push(event.candidate);\n      }\n\n      var peerConnectionState = {\n        ice: {\n          candidates: this._isIceLite ? [] : this._localCandidates.slice(),\n          ufrag: this._localUfrag\n        },\n        id: this.id\n      };\n\n      if (!event.candidate) {\n        peerConnectionState.ice.complete = true;\n      }\n\n      if (!(this._isIceLite && event.candidate)) {\n        peerConnectionState.ice.revision = this._localCandidatesRevision++;\n        this.emit('candidates', peerConnectionState);\n      }\n    }\n    /**\n     * Handle an ICE connection state change event.\n     * @private\n     * @returns {void}\n     */\n\n  }, {\n    key: '_handleIceConnectionStateChange',\n    value: function _handleIceConnectionStateChange() {\n      var _this7 = this;\n\n      var iceConnectionState = this._peerConnection.iceConnectionState;\n      var isIceConnectedOrComplete = ['connected', 'completed'].includes(iceConnectionState);\n      var log = this._log;\n      log.debug('ICE connection state is \"' + iceConnectionState + '\"');\n\n      if (isIceConnectedOrComplete) {\n        this._iceReconnectTimeout.clear();\n\n        this._iceRestartBackoff.reset();\n      }\n\n      if (this._lastIceConnectionState !== 'failed' && iceConnectionState === 'failed' && !this._shouldRestartIce && !this._isRestartingIce) {\n        // Case 1: Transition to \"failed\".\n        log.warn('ICE failed');\n\n        this._initiateIceRestartBackoff();\n      } else if (['disconnected', 'failed'].includes(this._lastIceConnectionState) && isIceConnectedOrComplete) {\n        // Case 2: Transition from \"disconnected\" or \"failed\".\n        log.debug('ICE reconnected');\n      } // start monitor media when connected, and continue to monitor while state is complete-disconnected-connected.\n\n\n      if (iceConnectionState === 'connected') {\n        this._isIceConnectionInactive = false;\n\n        this._iceConnectionMonitor.start(function () {\n          // note: iceConnection monitor waits for iceConnectionState=disconnected for\n          // detecting inactivity. Its possible that it may know about disconnected before _handleIceConnectionStateChange\n          _this7._iceConnectionMonitor.stop();\n\n          if (!_this7._shouldRestartIce && !_this7._isRestartingIce) {\n            log.warn('ICE Connection Monitor detected inactivity');\n            _this7._isIceConnectionInactive = true;\n\n            _this7._initiateIceRestartBackoff();\n\n            _this7.emit('iceConnectionStateChanged');\n\n            _this7.emit('connectionStateChanged');\n          }\n        });\n      } else if (!['disconnected', 'completed'].includes(iceConnectionState)) {\n        // don't stop monitoring for disconnected or completed.\n        this._iceConnectionMonitor.stop();\n\n        this._isIceConnectionInactive = false;\n      }\n\n      this._lastIceConnectionState = iceConnectionState;\n      this.emit('iceConnectionStateChanged');\n    }\n    /**\n     * Handle ICE gathering timeout.\n     * @private\n     * @returns {void}\n     */\n\n  }, {\n    key: '_handleIceGatheringTimeout',\n    value: function _handleIceGatheringTimeout() {\n      this._log.warn('ICE failed to gather any local candidates');\n\n      this._iceGatheringFailed = true;\n\n      this._initiateIceRestartBackoff();\n\n      this.emit('iceConnectionStateChanged');\n      this.emit('connectionStateChanged');\n    }\n    /**\n     * Handle an ICE gathering state change event.\n     * @private\n     * @returns {void}\n     */\n\n  }, {\n    key: '_handleIceGatheringStateChange',\n    value: function _handleIceGatheringStateChange() {\n      var iceGatheringState = this._peerConnection.iceGatheringState;\n      var log = this._log;\n      log.debug('ICE gathering state is \"' + iceGatheringState + '\"'); // NOTE(mmalavalli): Start the ICE gathering timeout only if the RTCPeerConnection\n      // has started gathering candidates for the first time since the initial offer/answer\n      // or an offer/answer with ICE restart.\n\n      var _iceGatheringTimeout = this._iceGatheringTimeout,\n          delay = _iceGatheringTimeout.delay,\n          isSet = _iceGatheringTimeout.isSet;\n\n      if (iceGatheringState === 'gathering' && !this._didGenerateLocalCandidates && !isSet) {\n        log.debug('Starting ICE gathering timeout: ' + delay);\n        this._iceGatheringFailed = false;\n\n        this._iceGatheringTimeout.start();\n      }\n    }\n    /**\n     * Handle a signaling state change event.\n     * @private\n     * @returns {void}\n     */\n\n  }, {\n    key: '_handleSignalingStateChange',\n    value: function _handleSignalingStateChange() {\n      if (this._peerConnection.signalingState === 'stable') {\n        this._appliedTrackIdsToAttributes = new Map(this._trackIdsToAttributes);\n      }\n    }\n    /**\n     * Handle a track event.\n     * @private\n     * @param {Event} event\n     * @returns {void}\n     */\n\n  }, {\n    key: '_handleTrackEvent',\n    value: function _handleTrackEvent(event) {\n      var _this8 = this;\n\n      var sdp = this._peerConnection.remoteDescription ? this._peerConnection.remoteDescription.sdp : null;\n\n      if (!this._trackMatcher) {\n        this._trackMatcher = event.transceiver && event.transceiver.mid ? new MIDTrackMatcher() // NOTE(mroberts): Until Chrome ships RTCRtpTransceivers with MID\n        // support, we have to use the same hacky solution as Safari. Revisit\n        // this when RTCRtpTransceivers and MIDs land. We should be able to use\n        // the same technique as Firefox.\n        : isSafari || this._isUnifiedPlan ? new OrderedTrackMatcher() : new IdentityTrackMatcher();\n      }\n\n      this._trackMatcher.update(sdp);\n\n      var mediaStreamTrack = event.track;\n      var signaledTrackId = this._trackMatcher.match(event) || mediaStreamTrack.id;\n      var mediaTrackReceiver = new MediaTrackReceiver(signaledTrackId, mediaStreamTrack); // NOTE(mmalavalli): In unified plan mode, \"ended\" is not fired on the remote\n      // MediaStreamTrack when the remote peer removes a track. So, when this\n      // MediaStreamTrack is re-used for a different track due to the remote peer\n      // calling RTCRtpSender.replaceTrack(), we delete the previous MediaTrackReceiver\n      // that owned this MediaStreamTrack before adding the new MediaTrackReceiver.\n\n      this._mediaTrackReceivers.forEach(function (trackReceiver) {\n        if (trackReceiver.track.id === mediaTrackReceiver.track.id) {\n          _this8._mediaTrackReceivers.delete(trackReceiver);\n        }\n      });\n\n      this._mediaTrackReceivers.add(mediaTrackReceiver);\n\n      mediaStreamTrack.addEventListener('ended', function () {\n        return _this8._mediaTrackReceivers.delete(mediaTrackReceiver);\n      });\n      this.emit('trackAdded', mediaTrackReceiver);\n    }\n    /**\n     * Initiate ICE Restart.\n     * @private\n     * @returns {void}\n     */\n\n  }, {\n    key: '_initiateIceRestart',\n    value: function _initiateIceRestart() {\n      if (this._peerConnection.signalingState === 'closed') {\n        return;\n      }\n\n      var log = this._log;\n      log.warn('Attempting to restart ICE');\n      this._didGenerateLocalCandidates = false;\n      this._isIceRestartBackoffInProgress = false;\n      this._shouldRestartIce = true;\n      var _iceReconnectTimeout = this._iceReconnectTimeout,\n          delay = _iceReconnectTimeout.delay,\n          isSet = _iceReconnectTimeout.isSet;\n\n      if (!isSet) {\n        log.debug('Starting ICE reconnect timeout: ' + delay);\n\n        this._iceReconnectTimeout.start();\n      }\n\n      this.offer();\n    }\n    /**\n     * Schedule an ICE Restart.\n     * @private\n     * @returns {void}\n     */\n\n  }, {\n    key: '_initiateIceRestartBackoff',\n    value: function _initiateIceRestartBackoff() {\n      if (this._peerConnection.signalingState === 'closed' || this._isIceRestartBackoffInProgress) {\n        return;\n      }\n\n      this._log.warn('An ICE restart has been scheduled');\n\n      this._isIceRestartBackoffInProgress = true;\n\n      this._iceRestartBackoff.backoff();\n    }\n    /**\n     * Conditionally re-offer.\n     * @private\n     * @param {?RTCSessionDescriptionInit} localDescription\n     * @returns {Promise<boolean>}\n     */\n\n  }, {\n    key: '_maybeReoffer',\n    value: function _maybeReoffer(localDescription) {\n      var shouldReoffer = this._shouldOffer;\n\n      if (localDescription && localDescription.sdp) {\n        // NOTE(mmalavalli): For \"unified-plan\" sdps, if the local RTCSessionDescription\n        // has fewer audio and/or video send* m= lines than the corresponding RTCRtpSenders\n        // with non-null MediaStreamTracks, it means that the newly added RTCRtpSenders\n        // require renegotiation.\n        if (this._isUnifiedPlan) {\n          var senders = this._peerConnection.getSenders().filter(function (sender) {\n            return sender.track;\n          });\n\n          shouldReoffer = ['audio', 'video'].reduce(function (shouldOffer, kind) {\n            var mediaSections = getMediaSections(localDescription.sdp, kind, '(sendrecv|sendonly)');\n            var sendersOfKind = senders.filter(isSenderOfKind.bind(null, kind));\n            return shouldOffer || mediaSections.length < sendersOfKind.length;\n          }, shouldReoffer);\n        } // NOTE(mroberts): We also need to re-offer if we have a DataTrack to share\n        // but no m= application section.\n\n\n        var hasDataTrack = this._dataChannels.size > 0;\n        var hasApplicationMediaSection = getMediaSections(localDescription.sdp, 'application').length > 0;\n        var needsApplicationMediaSection = hasDataTrack && !hasApplicationMediaSection;\n        shouldReoffer = shouldReoffer || needsApplicationMediaSection;\n      }\n\n      var promise = shouldReoffer ? this._offer() : Promise.resolve();\n      return promise.then(function () {\n        return shouldReoffer;\n      });\n    }\n    /**\n     * Create an offer and set it on the {@link PeerConnectionV2}.\n     * @private\n     * @returns {Promise<void>}\n     */\n\n  }, {\n    key: '_offer',\n    value: function _offer() {\n      var _this9 = this;\n\n      var offerOptions = Object.assign({}, this._offerOptions);\n      this._needsAnswer = true;\n\n      if (this._shouldRestartIce) {\n        this._shouldRestartIce = false;\n        this._isRestartingIce = true;\n        offerOptions.iceRestart = true;\n      }\n\n      return Promise.all(this._replaceTrackPromises.values()).then(function () {\n        return _this9._peerConnection.createOffer(offerOptions);\n      }).catch(function () {\n        throw new MediaClientLocalDescFailedError();\n      }).then(function (offer) {\n        if (isFirefox) {\n          // NOTE(mmalavalli): We work around Chromium bug 1106157 by disabling\n          // RTX in Firefox 79+. For more details about the bug, please go here:\n          // https://bugs.chromium.org/p/chromium/issues/detail?id=1106157\n          offer = new _this9._RTCSessionDescription({\n            sdp: disableRtx(offer.sdp),\n            type: offer.type\n          });\n        } else {\n          offer = workaroundIssue8329(offer);\n        } // NOTE(mpatwardhan): upcoming chrome versions are going to remove ssrc attributes\n        // mslabel and label. See this bug https://bugs.chromium.org/p/webrtc/issues/detail?id=7110\n        // and PSA: https://groups.google.com/forum/#!searchin/discuss-webrtc/PSA%7Csort:date/discuss-webrtc/jcZO-Wj0Wus/k2XvPCvoAwAJ\n        // Looks like we are not referencing those attributes, but this changes goes ahead and removes them to see if it works.\n        // this also helps reduce bytes on wires\n\n\n        var sdp = removeSSRCAttributes(offer.sdp, ['mslabel', 'label']);\n        sdp = _this9._isUnifiedPlan && _this9._peerConnection.remoteDescription ? unifiedPlanFilterLocalCodecs(sdp, _this9._peerConnection.remoteDescription.sdp) : sdp;\n\n        var updatedSdp = _this9._setCodecPreferences(sdp, _this9._preferredAudioCodecs, _this9._preferredVideoCodecs);\n\n        _this9._shouldOffer = false;\n\n        if (!_this9._negotiationRole) {\n          _this9._negotiationRole = 'offerer';\n        }\n\n        if (_this9._shouldApplySimulcast) {\n          _this9._localDescriptionWithoutSimulcast = {\n            type: 'offer',\n            sdp: updatedSdp\n          };\n          updatedSdp = _this9._setSimulcast(updatedSdp, _this9._sdpFormat, _this9._trackIdsToAttributes);\n        }\n\n        return _this9._setLocalDescription({\n          type: 'offer',\n          sdp: updatedSdp\n        });\n      });\n    }\n    /**\n     * Get the MediaTrackSender ID of the given MediaStreamTrack ID.\n     * Since a MediaTrackSender's underlying MediaStreamTrack can be\n     * replaced, the corresponding IDs can mismatch.\n     * @private\n     * @param {Track.ID} id\n     * @returns {Track.ID}\n     */\n\n  }, {\n    key: '_getMediaTrackSenderId',\n    value: function _getMediaTrackSenderId(trackId) {\n      var mediaTrackSender = Array.from(this._rtpSenders.keys()).find(function (_ref) {\n        var id = _ref.track.id;\n        return id === trackId;\n      });\n      return mediaTrackSender ? mediaTrackSender.id : trackId;\n    }\n    /**\n     * Add or rewrite local MediaStreamTrack IDs in the given Unified Plan RTCSessionDescription.\n     * @private\n     * @param {RTCSessionDescription} description\n     * @return {RTCSessionDescription}\n     */\n\n  }, {\n    key: '_addOrRewriteLocalTrackIds',\n    value: function _addOrRewriteLocalTrackIds(description) {\n      var _this10 = this;\n\n      var transceivers = this._peerConnection.getTransceivers();\n\n      var activeTransceivers = transceivers.filter(function (_ref2) {\n        var sender = _ref2.sender,\n            stopped = _ref2.stopped;\n        return !stopped && sender && sender.track;\n      }); // NOTE(mmalavalli): There is no guarantee that MediaStreamTrack IDs will be present in\n      // SDPs, and even if they are, there is no guarantee that they will be the same as the\n      // actual MediaStreamTrack IDs. So, we add or re-write the actual MediaStreamTrack IDs\n      // to the assigned m= sections here.\n\n      var assignedTransceivers = activeTransceivers.filter(function (_ref3) {\n        var mid = _ref3.mid;\n        return mid;\n      });\n      var midsToTrackIds = new Map(assignedTransceivers.map(function (_ref4) {\n        var mid = _ref4.mid,\n            sender = _ref4.sender;\n        return [mid, _this10._getMediaTrackSenderId(sender.track.id)];\n      }));\n      var sdp1 = unifiedPlanAddOrRewriteTrackIds(description.sdp, midsToTrackIds); // NOTE(mmalavalli): Chrome and Safari do not apply the offer until they get an answer.\n      // So, we add or re-write the actual MediaStreamTrack IDs to the unassigned m= sections here.\n\n      var unassignedTransceivers = activeTransceivers.filter(function (_ref5) {\n        var mid = _ref5.mid;\n        return !mid;\n      });\n      var newTrackIdsByKind = new Map(['audio', 'video'].map(function (kind) {\n        return [kind, unassignedTransceivers.filter(function (_ref6) {\n          var sender = _ref6.sender;\n          return sender.track.kind === kind;\n        }).map(function (_ref7) {\n          var sender = _ref7.sender;\n          return _this10._getMediaTrackSenderId(sender.track.id);\n        })];\n      }));\n      var sdp2 = unifiedPlanAddOrRewriteNewTrackIds(sdp1, midsToTrackIds, newTrackIdsByKind);\n      return new this._RTCSessionDescription({\n        sdp: sdp2,\n        type: description.type\n      });\n    }\n    /**\n     * Rollback and apply the given offer.\n     * @private\n     * @param {RTCSessionDescriptionInit} offer\n     * @returns {Promise<void>}\n     */\n\n  }, {\n    key: '_rollbackAndApplyOffer',\n    value: function _rollbackAndApplyOffer(offer) {\n      var _this11 = this;\n\n      return this._setLocalDescription({\n        type: 'rollback'\n      }).then(function () {\n        return _this11._setLocalDescription(offer);\n      });\n    }\n    /**\n     * Set a local description on the {@link PeerConnectionV2}.\n     * @private\n     * @param {RTCSessionDescription|RTCSessionDescriptionInit} description\n     * @returns {Promise<void>}\n     */\n\n  }, {\n    key: '_setLocalDescription',\n    value: function _setLocalDescription(description) {\n      var _this12 = this;\n\n      return this._peerConnection.setLocalDescription(description).catch(function (error) {\n        _this12._log.warn('Calling setLocalDescription with an RTCSessionDescription of type \"' + description.type + '\" failed with the error \"' + error.message + '\".');\n\n        if (description.sdp) {\n          _this12._log.warn('The SDP was ' + description.sdp);\n        }\n\n        throw new MediaClientLocalDescFailedError();\n      }).then(function () {\n        if (description.type !== 'rollback') {\n          _this12._localDescription = _this12._isUnifiedPlan ? _this12._addOrRewriteLocalTrackIds(description) : description;\n          _this12._localCandidates = [];\n\n          if (description.type === 'offer') {\n            _this12._descriptionRevision++;\n          } else if (description.type === 'answer') {\n            _this12._lastStableDescriptionRevision = _this12._descriptionRevision;\n            negotiationCompleted(_this12);\n          }\n\n          _this12._localUfrag = getUfrag(description);\n\n          _this12.emit('description', _this12.getState());\n        }\n      });\n    }\n    /**\n     * Set a remote RTCSessionDescription on the {@link PeerConnectionV2}.\n     * @private\n     * @param {RTCSessionDescriptionInit} description\n     * @returns {Promise<void>}\n     */\n\n  }, {\n    key: '_setRemoteDescription',\n    value: function _setRemoteDescription(description) {\n      var _this13 = this;\n\n      if (description.sdp) {\n        if (!this._isRTCRtpSenderParamsSupported) {\n          description.sdp = this._setBitrateParameters(description.sdp, isFirefox ? 'TIAS' : 'AS', this._encodingParameters.maxAudioBitrate, this._encodingParameters.maxVideoBitrate);\n        }\n\n        description.sdp = this._setCodecPreferences(description.sdp, this._preferredAudioCodecs, this._preferredVideoCodecs); // NOTE(mroberts): Do this to reduce our MediaStream count in Firefox. By\n        // mapping MediaStream IDs in the SDP to \"-\", we ensure the \"track\" event\n        // doesn't include any new MediaStreams in Firefox. Its `streams` member\n        // will always be the empty Array.\n\n        if (isFirefox) {\n          description.sdp = filterOutMediaStreamIds(description.sdp);\n        }\n\n        if (!this._peerConnection.remoteDescription) {\n          this._isIceLite = /a=ice-lite/.test(description.sdp);\n        }\n      }\n\n      description = new this._RTCSessionDescription(description); // eslint-disable-next-line consistent-return\n\n      return Promise.resolve().then(function () {\n        // NOTE(syerrapragada): VMS does not support H264 simulcast. So,\n        // unset simulcast for sections in local offer where corresponding\n        // sections in answer doesn't have vp8 as preferred codec and reapply offer.\n        if (description.type === 'answer' && _this13._shouldApplySimulcast) {\n          var sdpWithoutSimulcastForNonVP8MediaSections = _this13._revertSimulcastForNonVP8MediaSections(_this13._localDescription.sdp, _this13._localDescriptionWithoutSimulcast.sdp, description.sdp);\n\n          if (sdpWithoutSimulcastForNonVP8MediaSections !== _this13._localDescription.sdp) {\n            return _this13._rollbackAndApplyOffer({\n              type: _this13._localDescription.type,\n              sdp: sdpWithoutSimulcastForNonVP8MediaSections\n            });\n          }\n        }\n      }).then(function () {\n        return _this13._peerConnection.setRemoteDescription(description);\n      }).then(function () {\n        if (description.type === 'answer') {\n          if (_this13._isRestartingIce) {\n            _this13._log.debug('An ICE restart was in-progress and is now completed');\n\n            _this13._isRestartingIce = false;\n          }\n\n          negotiationCompleted(_this13);\n        }\n      }, function (error) {\n        _this13._log.warn('Calling setRemoteDescription with an RTCSessionDescription of type \"' + description.type + '\" failed with the error \"' + error.message + '\".');\n\n        if (description.sdp) {\n          _this13._log.warn('The SDP was ' + description.sdp);\n        }\n\n        throw error;\n      });\n    }\n    /**\n     * Update the {@link PeerConnectionV2}'s description.\n     * @private\n     * @param {RTCSessionDescriptionInit} description\n     * @returns {Promise<void>}\n     */\n\n  }, {\n    key: '_updateDescription',\n    value: function _updateDescription(description) {\n      var _this14 = this;\n\n      switch (description.type) {\n        case 'answer':\n        case 'pranswer':\n          if (description.revision !== this._descriptionRevision || this._peerConnection.signalingState !== 'have-local-offer') {\n            return Promise.resolve();\n          }\n\n          this._descriptionRevision = description.revision;\n          break;\n\n        case 'close':\n          return this._close();\n\n        case 'create-offer':\n          if (description.revision <= this._lastStableDescriptionRevision) {\n            return Promise.resolve();\n          } else if (this._needsAnswer) {\n            this._queuedDescription = description;\n            return Promise.resolve();\n          }\n\n          this._descriptionRevision = description.revision;\n          return this._offer();\n\n        case 'offer':\n          if (description.revision <= this._lastStableDescriptionRevision || this._peerConnection.signalingState === 'closed') {\n            return Promise.resolve();\n          }\n\n          if (this._peerConnection.signalingState === 'have-local-offer') {\n            // NOTE(mpatwardhan): For a peer connection\n            // 1) createOffer always generate SDP with `setup:actpass`\n            // 2) when remote description is set `setup:active`  - the answer generated selects the dtls role of setup:passive\n            // 3) when remote description is set `setup:passive` - the answer generated selects the dtls role of setup:active\n            // 4) when remote description is set `setup:actpass` - the answer generated uses the previously negotiated role (if not negotiated previously setup:active is used)\n            // This test shows the  behavior: https://github.com/twilio/twilio-webrtc.js/blob/master/test/integration/spec/rtcpeerconnection.js#L936\n            // with glare handling (if dtls role was not negotiated before ) the generated answer will set setup:active.\n            // we do not want that. lets wait for \"initial negotiation\" before attempting glare handling.\n            if (this._needsAnswer && this._lastStableDescriptionRevision === 0) {\n              this._queuedDescription = description;\n              return Promise.resolve();\n            }\n\n            this._descriptionRevision = description.revision;\n            return this._handleGlare(description);\n          }\n\n          this._descriptionRevision = description.revision;\n          return this._answer(description).then(function () {});\n\n        default: // Do nothing.\n\n      } // Handle answer or pranswer.\n\n\n      var revision = description.revision;\n      return Promise.resolve().then(function () {\n        return _this14._setRemoteDescription(description);\n      }).catch(function () {\n        throw new MediaClientRemoteDescFailedError();\n      }).then(function () {\n        _this14._lastStableDescriptionRevision = revision;\n        _this14._needsAnswer = false;\n        return _this14._checkIceBox(description);\n      }).then(function () {\n        return _this14._queuedDescription && _this14._updateDescription(_this14._queuedDescription);\n      }).then(function () {\n        _this14._queuedDescription = null;\n        return _this14._maybeReoffer(_this14._peerConnection.localDescription).then(function () {});\n      });\n    }\n    /**\n     * Update the {@link PeerConnectionV2}'s ICE candidates.\n     * @private\n     * @param {object} iceState\n     * @returns {Promise<void>}\n     */\n\n  }, {\n    key: '_updateIce',\n    value: function _updateIce(iceState) {\n      var candidates = this._remoteCandidates.update(iceState);\n\n      return this._addIceCandidates(candidates);\n    }\n    /**\n     * Add a {@link DataTrackSender} to the {@link PeerConnectionV2}.\n     * @param {DataTrackSender} dataTrackSender\n     * @returns {void}\n     */\n\n  }, {\n    key: 'addDataTrackSender',\n    value: function addDataTrackSender(dataTrackSender) {\n      if (this._dataChannels.has(dataTrackSender)) {\n        return;\n      }\n\n      try {\n        var dataChannelDict = {\n          ordered: dataTrackSender.ordered\n        };\n\n        if (dataTrackSender.maxPacketLifeTime !== null) {\n          dataChannelDict.maxPacketLifeTime = dataTrackSender.maxPacketLifeTime;\n        }\n\n        if (dataTrackSender.maxRetransmits !== null) {\n          dataChannelDict.maxRetransmits = dataTrackSender.maxRetransmits;\n        }\n\n        var dataChannel = this._peerConnection.createDataChannel(dataTrackSender.id, dataChannelDict);\n\n        dataTrackSender.addDataChannel(dataChannel);\n\n        this._dataChannels.set(dataTrackSender, dataChannel);\n      } catch (error) {\n        this._log.warn('Error creating an RTCDataChannel for DataTrack \"' + dataTrackSender.id + '\": ' + error.message);\n      }\n    }\n    /**\n     * Add the {@link MediaTrackSender} to the {@link PeerConnectionV2}.\n     * @param {MediaTrackSender} mediaTrackSender\n     * @returns {void}\n     */\n\n  }, {\n    key: 'addMediaTrackSender',\n    value: function addMediaTrackSender(mediaTrackSender) {\n      if (this._peerConnection.signalingState === 'closed' || this._rtpSenders.has(mediaTrackSender)) {\n        return;\n      }\n\n      var sender = void 0;\n\n      if (this._localMediaStream) {\n        this._localMediaStream.addTrack(mediaTrackSender.track);\n\n        sender = this._peerConnection.addTrack(mediaTrackSender.track, this._localMediaStream);\n      } else {\n        var transceiver = this._addOrUpdateTransceiver(mediaTrackSender.track);\n\n        sender = transceiver.sender;\n      }\n\n      mediaTrackSender.addSender(sender);\n\n      this._rtpSenders.set(mediaTrackSender, sender);\n    }\n    /**\n     * Close the {@link PeerConnectionV2}.\n     * @returns {void}\n     */\n\n  }, {\n    key: 'close',\n    value: function close() {\n      if (this._close()) {\n        this._descriptionRevision++;\n        this._localDescription = {\n          type: 'close'\n        };\n        this.emit('description', this.getState());\n      }\n    }\n    /**\n     * Get the {@link DataTrackReceiver}s and the {@link MediaTrackReceivers} on the\n     * {@link PeerConnectionV2}.\n     * @returns {Array<DataTrackReceiver|MediaTrackReceiver>} trackReceivers\n     */\n\n  }, {\n    key: 'getTrackReceivers',\n    value: function getTrackReceivers() {\n      return Array.from(this._dataTrackReceivers).concat(Array.from(this._mediaTrackReceivers));\n    }\n    /**\n     * Get the {@link PeerConnectionV2}'s state (specifically, its description).\n     * @returns {?object}\n     */\n\n  }, {\n    key: 'getState',\n    value: function getState() {\n      if (!this._localDescription) {\n        return null;\n      } // NOTE(mpatwardhan): Return most recent localDescription. If the most recent local description is an\n      // answer, and this method is called for sending a \"sync\" message while the next remote offer is being processed,\n      // we need to send the most recent stable description revision instead of the current description revision,\n      // which is supposed to be for the next local answer.\n\n\n      var localDescriptionRevision = this._localDescription.type === 'answer' ? this._lastStableDescriptionRevision : this._descriptionRevision;\n      var localDescription = {\n        type: this._localDescription.type,\n        revision: localDescriptionRevision\n      };\n\n      if (this._localDescription.sdp) {\n        localDescription.sdp = this._localDescription.sdp;\n      }\n\n      return {\n        description: localDescription,\n        id: this.id\n      };\n    }\n    /**\n     * Create an offer and set it on the {@link PeerConnectionV2}.\n     * @returns {Promise<void>}\n     */\n\n  }, {\n    key: 'offer',\n    value: function offer() {\n      var _this15 = this;\n\n      if (this._needsAnswer || this._isRestartingIce) {\n        this._shouldOffer = true;\n        return Promise.resolve();\n      }\n\n      return this.bracket('offering', function (key) {\n        _this15.transition('updating', key);\n\n        var promise = _this15._needsAnswer || _this15._isRestartingIce ? Promise.resolve() : _this15._offer();\n        return promise.then(function () {\n          _this15.tryTransition('open', key);\n        }, function (error) {\n          _this15.tryTransition('open', key);\n\n          throw error;\n        });\n      });\n    }\n    /**\n     * Remove a {@link DataTrackSender} from the {@link PeerConnectionV2}.\n     * @param {DataTrackSender} dataTrackSender\n     * @returns {void}\n     */\n\n  }, {\n    key: 'removeDataTrackSender',\n    value: function removeDataTrackSender(dataTrackSender) {\n      var dataChannel = this._dataChannels.get(dataTrackSender);\n\n      if (dataChannel) {\n        dataTrackSender.removeDataChannel(dataChannel);\n\n        this._dataChannels.delete(dataTrackSender);\n\n        dataChannel.close();\n      }\n    }\n    /**\n     * Remove the {@link MediaTrackSender} from the {@link PeerConnectionV2}.\n     * @param {MediaTrackSender} mediaTrackSender\n     * @returns {void}\n     */\n\n  }, {\n    key: 'removeMediaTrackSender',\n    value: function removeMediaTrackSender(mediaTrackSender) {\n      if (this._peerConnection.signalingState === 'closed' || !this._rtpSenders.has(mediaTrackSender)) {\n        return;\n      }\n\n      var sender = this._rtpSenders.get(mediaTrackSender);\n\n      this._peerConnection.removeTrack(sender);\n\n      if (this._localMediaStream) {\n        this._localMediaStream.removeTrack(mediaTrackSender.track);\n      }\n\n      mediaTrackSender.removeSender(sender);\n\n      this._rtpSenders.delete(mediaTrackSender);\n    }\n    /**\n     * Set the RTCConfiguration on the underlying RTCPeerConnection.\n     * @param {RTCConfiguration} configuration\n     * @returns {void}\n     */\n\n  }, {\n    key: 'setConfiguration',\n    value: function setConfiguration(configuration) {\n      if (typeof this._peerConnection.setConfiguration === 'function') {\n        this._peerConnection.setConfiguration(getConfiguration(configuration));\n      }\n    }\n    /**\n     * Set the ICE reconnect timeout period.\n     * @param {number} period - Period in milliseconds.\n     * @returns {this}\n     */\n\n  }, {\n    key: 'setIceReconnectTimeout',\n    value: function setIceReconnectTimeout(period) {\n      this._iceReconnectTimeout.setDelay(period);\n\n      this._log.debug('Updated ICE reconnection timeout period:', this._iceReconnectTimeout.delay);\n\n      return this;\n    }\n    /**\n     * Update the {@link PeerConnectionV2}.\n     * @param {object} peerConnectionState\n     * @returns {Promise<void>}\n     */\n\n  }, {\n    key: 'update',\n    value: function update(peerConnectionState) {\n      var _this16 = this;\n\n      return this.bracket('updating', function (key) {\n        if (_this16.state === 'closed') {\n          return Promise.resolve();\n        }\n\n        _this16.transition('updating', key);\n\n        var updates = [];\n\n        if (peerConnectionState.ice) {\n          updates.push(_this16._updateIce(peerConnectionState.ice));\n        }\n\n        if (peerConnectionState.description) {\n          updates.push(_this16._updateDescription(peerConnectionState.description));\n        }\n\n        return Promise.all(updates).then(function () {\n          _this16.tryTransition('open', key);\n        }, function (error) {\n          _this16.tryTransition('open', key);\n\n          throw error;\n        });\n      });\n    }\n    /**\n     * Get the {@link PeerConnectionV2}'s media statistics.\n     * @returns {Promise<StandardizedStatsResponse>}\n     */\n\n  }, {\n    key: 'getStats',\n    value: function getStats() {\n      var _this17 = this;\n\n      return getStatistics(this._peerConnection).then(function (response) {\n        return rewriteTrackIds(_this17, response);\n      });\n    }\n  }, {\n    key: 'connectionState',\n    get: function get() {\n      return this.iceConnectionState === 'failed' ? 'failed' : this._peerConnection.connectionState || this.iceConnectionState;\n    }\n    /**\n     * The {@link PeerConnectionV2}'s underlying RTCPeerConnection's\n     * RTCIceConnectionState.\n     * @property {RTCIceConnectionState}\n     */\n\n  }, {\n    key: 'iceConnectionState',\n    get: function get() {\n      return this._isIceConnectionInactive && this._peerConnection.iceConnectionState === 'disconnected' || this._iceGatheringFailed ? 'failed' : this._peerConnection.iceConnectionState;\n    }\n    /**\n     * Whether the {@link PeerConnectionV2} has negotiated or is in the process\n     * of negotiating the application m= section.\n     * @returns {boolean}\n     */\n\n  }, {\n    key: 'isApplicationSectionNegotiated',\n    get: function get() {\n      if (this._peerConnection.signalingState !== 'closed') {\n        // accessing .localDescription in 'closed' state causes it throw exceptions.\n        return this._peerConnection.localDescription ? getMediaSections(this._peerConnection.localDescription.sdp, 'application').length > 0 : false;\n      }\n\n      return true;\n    }\n  }]);\n\n  return PeerConnectionV2;\n}(StateMachine);\n\nfunction rewriteLocalTrackId(pcv2, stats) {\n  var trackId = pcv2._getMediaTrackSenderId(stats.trackId);\n\n  return Object.assign(stats, {\n    trackId: trackId\n  });\n}\n\nfunction rewriteTrackId(pcv2, stats) {\n  var receiver = [].concat(_toConsumableArray(pcv2._mediaTrackReceivers)).find(function (receiver) {\n    return receiver.track.id === stats.trackId;\n  });\n  var trackId = receiver ? receiver.id : null;\n  return Object.assign(stats, {\n    trackId: trackId\n  });\n}\n\nfunction rewriteTrackIds(pcv2, response) {\n  return Object.assign(response, {\n    remoteAudioTrackStats: response.remoteAudioTrackStats.map(function (stats) {\n      return rewriteTrackId(pcv2, stats);\n    }),\n    remoteVideoTrackStats: response.remoteVideoTrackStats.map(function (stats) {\n      return rewriteTrackId(pcv2, stats);\n    }),\n    localAudioTrackStats: response.localAudioTrackStats.map(function (stats) {\n      return rewriteLocalTrackId(pcv2, stats);\n    }),\n    localVideoTrackStats: response.localVideoTrackStats.map(function (stats) {\n      return rewriteLocalTrackId(pcv2, stats);\n    })\n  });\n}\n/**\n * @event PeerConnectionV2#candidates\n * @param {object} candidates\n */\n\n/**\n * @event PeerConnectionV2#connectionStateChanged\n */\n\n/**\n * @event PeerConnectionV2#description\n * @param {object} description\n */\n\n/**\n * @event PeerConnectionV2#iceConnectionStateChanged\n */\n\n/**\n * @event PeerConnectionV2#trackAdded\n * @param {DataTrackReceiver|MediaTrackReceiver} trackReceiver\n */\n\n\nfunction getUfrag(description) {\n  if (description.sdp) {\n    var match = description.sdp.match(/^a=ice-ufrag:([a-zA-Z0-9+/]+)/m);\n\n    if (match) {\n      return match[1];\n    }\n  }\n\n  return null;\n}\n\nfunction getConfiguration(configuration) {\n  return Object.assign({\n    bundlePolicy: 'max-bundle',\n    rtcpMuxPolicy: 'require'\n  }, configuration);\n}\n/**\n * Whether the MediaStreamTrack of the given RTCRTPSender is a non-ended\n * MediaStreamTrack of a given kind.\n * @private\n * @param {string} kind\n * @param {RTCRtpSender} sender\n * @return {boolean}\n */\n\n\nfunction isSenderOfKind(kind, sender) {\n  var track = sender.track;\n  return track && track.kind === kind && track.readyState !== 'ended';\n}\n/**\n * Preferred codecs.\n * @typedef {object} PreferredCodecs\n * @property {Array<AudioCodec>} audio\n * @property {Array<VideoCodec>} video\n */\n\n\nfunction filterOutMediaStreamIds(sdp) {\n  return sdp.replace(/a=msid:[^ ]+ /g, 'a=msid:- ');\n}\n/**\n * Whether an RTCRtpTransceiver can be recycled.\n * @param {RTCRtpTransceiver} transceiver\n * @returns {boolean}\n */\n\n\nfunction shouldRecycleTransceiver(transceiver, pcv2) {\n  return !transceiver.stopped && !pcv2._replaceTrackPromises.has(transceiver) && (transceiver.currentDirection === 'inactive' || transceiver.currentDirection === 'recvonly' || transceiver.direction === 'recvonly');\n}\n/**\n * Take a recycled RTCRtpTransceiver if available.\n * @param {PeerConnectionV2} pcv2\n * @param {Track.Kind} kind\n * @returns {?RTCRtpTransceiver}\n */\n\n\nfunction takeRecycledTransceiver(pcv2, kind) {\n  var preferredCodecs = {\n    audio: pcv2._preferredAudioCodecs.map(function (codec) {\n      return codec.toLowerCase();\n    }),\n    video: pcv2._preferredVideoCodecs.map(function (_ref8) {\n      var codec = _ref8.codec;\n      return codec.toLowerCase();\n    })\n  }[kind];\n  var recycledTransceivers = pcv2._recycledTransceivers[kind];\n  var localCodec = preferredCodecs.find(function (codec) {\n    return pcv2._localCodecs.has(codec);\n  });\n\n  if (!localCodec) {\n    return recycledTransceivers.shift();\n  }\n\n  var transceiver = recycledTransceivers.find(function (transceiver) {\n    var remoteCodecMap = pcv2._remoteCodecMaps.get(transceiver.mid);\n\n    return remoteCodecMap && remoteCodecMap.has(localCodec);\n  });\n\n  if (transceiver) {\n    recycledTransceivers.splice(recycledTransceivers.indexOf(transceiver), 1);\n  }\n\n  return transceiver;\n}\n/**\n * Update the set of locally supported {@link Codec}s.\n * @param pcv2\n * @returns {void}\n */\n\n\nfunction updateLocalCodecs(pcv2) {\n  var description = pcv2._peerConnection.localDescription;\n\n  if (!description) {\n    return;\n  }\n\n  getMediaSections(description.sdp).forEach(function (section) {\n    var codecMap = createCodecMapForMediaSection(section);\n    codecMap.forEach(function (pts, codec) {\n      return pcv2._localCodecs.add(codec);\n    });\n  });\n}\n/**\n * Update the {@link Codec} maps for all m= sections in the remote {@link RTCSessionDescription}s.\n * @param {PeerConnectionV2} pcv2\n * @returns {void}\n */\n\n\nfunction updateRemoteCodecMaps(pcv2) {\n  var description = pcv2._peerConnection.remoteDescription;\n\n  if (!description) {\n    return;\n  }\n\n  getMediaSections(description.sdp).forEach(function (section) {\n    var mid = section.match(/^a=mid:(.+)$/m)[1];\n    var codecMap = createCodecMapForMediaSection(section);\n\n    pcv2._remoteCodecMaps.set(mid, codecMap);\n  });\n}\n/**\n * Update the list of recycled RTCRtpTransceivers.\n * @param {PeerConnectionV2} pcv2\n */\n\n\nfunction updateRecycledTransceivers(pcv2) {\n  pcv2._recycledTransceivers.audio = [];\n  pcv2._recycledTransceivers.video = [];\n\n  pcv2._peerConnection.getTransceivers().forEach(function (transceiver) {\n    if (shouldRecycleTransceiver(transceiver, pcv2)) {\n      var track = transceiver.receiver.track;\n\n      pcv2._recycledTransceivers[track.kind].push(transceiver);\n    }\n  });\n}\n/**\n * Perform certain updates after an SDP negotiation is completed.\n * @param {PeerConnectionV2} pcv2\n * @returns {void}\n */\n\n\nfunction negotiationCompleted(pcv2) {\n  if (pcv2._isUnifiedPlan) {\n    updateRecycledTransceivers(pcv2);\n    updateLocalCodecs(pcv2);\n    updateRemoteCodecMaps(pcv2);\n  }\n\n  if (pcv2._isRTCRtpSenderParamsSupported) {\n    updateEncodingParameters(pcv2);\n  }\n}\n/**\n * Update the RTCRtpEncodingParameters of all active RTCRtpSenders.\n * @param {PeerConnectionV2} pcv2\n * @returns {void}\n */\n\n\nfunction updateEncodingParameters(pcv2) {\n  var _pcv2$_encodingParame = pcv2._encodingParameters,\n      maxAudioBitrate = _pcv2$_encodingParame.maxAudioBitrate,\n      maxVideoBitrate = _pcv2$_encodingParame.maxVideoBitrate;\n  var maxBitrates = new Map([['audio', maxAudioBitrate], ['video', maxVideoBitrate]]);\n\n  pcv2._peerConnection.getSenders().filter(function (sender) {\n    return sender.track;\n  }).forEach(function (sender) {\n    var maxBitrate = maxBitrates.get(sender.track.kind);\n    var params = sender.getParameters();\n\n    if (maxBitrate === null || maxBitrate === 0) {\n      removeMaxBitrate(params);\n    } else if (pcv2._isChromeScreenShareTrack(sender.track)) {\n      // NOTE(mpatwardhan): Sometimes (JSDK-2557) chrome does not send any bytes on screen track if MaxBitRate is set on it via setParameters,\n      // To workaround this issue we will not apply maxBitrate if the track appears to be a screen share track created by chrome\n      pcv2._log.warn('Not setting maxBitrate for ' + sender.track.kind + ' Track ' + sender.track.id + ' because it appears to be screen share track: ' + sender.track.label);\n    } else {\n      setMaxBitrate(params, maxBitrate);\n    }\n\n    if (!isFirefox && pcv2._enableDscp && params.encodings.length > 0) {\n      // NOTE(mmalavalli): \"networkPriority\" is a per-sender property and not\n      // a per-encoding-layer property. So, we set the value only on the first\n      // encoding layer. Any attempt to set the value on subsequent encoding\n      // layers (in the case of simulcast) will result in the Promise returned\n      // by RTCRtpSender.setParameters() being rejected.\n      params.encodings[0].networkPriority = 'high';\n    }\n\n    sender.setParameters(params).catch(function (error) {\n      pcv2._log.warn('Error while setting encodings parameters for ' + sender.track.kind + ' Track ' + sender.track.id + ': ' + (error.message || error.name));\n    });\n  });\n}\n/**\n * Remove maxBitrate from the RTCRtpSendParameters' encodings.\n * @param {RTCRtpSendParameters} params\n * @returns {void}\n */\n\n\nfunction removeMaxBitrate(params) {\n  if (Array.isArray(params.encodings)) {\n    params.encodings.forEach(function (encoding) {\n      return delete encoding.maxBitrate;\n    });\n  }\n}\n/**\n * Set the given maxBitrate in the RTCRtpSendParameters' encodings.\n * @param {RTCRtpSendParameters} params\n * @param {number} maxBitrate\n * @returns {void}\n */\n\n\nfunction setMaxBitrate(params, maxBitrate) {\n  if (isFirefox) {\n    params.encodings = [{\n      maxBitrate: maxBitrate\n    }];\n  } else {\n    params.encodings.forEach(function (encoding) {\n      encoding.maxBitrate = maxBitrate;\n    });\n  }\n}\n\nmodule.exports = PeerConnectionV2;","map":{"version":3,"sources":["/Users/tony_niu/Visual Studio/Twilio/twilio-video-starter-kit/node_modules/twilio-video/es5/signaling/v2/peerconnection.js"],"names":["_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","Constructor","protoProps","staticProps","prototype","_toConsumableArray","arr","Array","isArray","arr2","from","_classCallCheck","instance","TypeError","_possibleConstructorReturn","self","call","ReferenceError","_inherits","subClass","superClass","create","constructor","value","setPrototypeOf","__proto__","DefaultBackoff","require","_require","DefaultMediaStream","MediaStream","DefaultRTCIceCandidate","RTCIceCandidate","DefaultRTCPeerConnection","RTCPeerConnection","DefaultRTCSessionDescription","RTCSessionDescription","getStatistics","getStats","_require2","guessBrowser","_require3","getSdpFormat","_require4","DEFAULT_ICE_GATHERING_TIMEOUT_MS","DEFAULT_LOG_LEVEL","DEFAULT_SESSION_TIMEOUT_SEC","iceRestartBackoffConfig","_require5","createCodecMapForMediaSection","disableRtx","getMediaSections","removeSSRCAttributes","revertSimulcastForNonVP8MediaSections","setBitrateParameters","setCodecPreferences","setSimulcast","unifiedPlanAddOrRewriteNewTrackIds","unifiedPlanAddOrRewriteTrackIds","unifiedPlanFilterLocalCodecs","DefaultTimeout","_require6","MediaClientLocalDescFailedError","MediaClientRemoteDescFailedError","_require7","buildLogLevels","isChromeScreenShareTrack","oncePerTick","IceBox","DefaultIceConnectionMonitor","DataTrackReceiver","MediaTrackReceiver","StateMachine","Log","IdentityTrackMatcher","OrderedTrackMatcher","MIDTrackMatcher","workaroundIssue8329","guess","isChrome","isFirefox","isSafari","isRTCRtpSenderParamsSupported","RTCRtpSender","getParameters","setParameters","nInstances","states","open","updating","closed","PeerConnectionV2","_StateMachine","id","encodingParameters","preferredCodecs","options","_this","getPrototypeOf","assign","enableDscp","dummyAudioMediaStreamTrack","iceServers","logLevel","offerOptions","sessionTimeout","Backoff","IceConnectionMonitor","Timeout","configuration","getConfiguration","sdpFormat","sdpSemantics","isUnifiedPlan","localMediaStream","logLevels","chromeSpecificConstraints","optional","push","googDscp","log","createLog","peerConnection","addTrack","_appliedTrackIdsToAttributes","Map","_dataChannels","_dataTrackReceivers","Set","_descriptionRevision","_didGenerateLocalCandidates","_enableDscp","_encodingParameters","_isChromeScreenShareTrack","_iceGatheringFailed","_iceGatheringTimeout","_handleIceGatheringTimeout","_iceRestartBackoff","exponential","_instanceId","_isIceConnectionInactive","_isIceLite","_isIceRestartBackoffInProgress","_isRestartingIce","_isUnifiedPlan","_isRTCRtpSenderParamsSupported","_lastIceConnectionState","_lastStableDescriptionRevision","_localCandidates","_localCodecs","_localCandidatesRevision","_localDescriptionWithoutSimulcast","_localDescription","_localMediaStream","_localUfrag","_log","_remoteCodecMaps","_rtpSenders","_iceConnectionMonitor","_mediaTrackReceivers","_needsAnswer","_negotiationRole","_offerOptions","_peerConnection","_preferredAudioCodecs","audio","_preferredVideoCodecs","video","_shouldApplySimulcast","some","codecSettings","codec","toLowerCase","simulcast","_queuedDescription","_iceReconnectTimeout","debug","close","_recycledTransceivers","_replaceTrackPromises","_remoteCandidates","_sdpFormat","_setBitrateParameters","_setCodecPreferences","_setSimulcast","_revertSimulcastForNonVP8MediaSections","_RTCIceCandidate","_RTCPeerConnection","_RTCSessionDescription","_shouldOffer","_shouldRestartIce","_trackIdsToAttributes","_trackMatcher","on","updateEncodingParameters","offer","addEventListener","_handleConnectionStateChange","bind","_handleDataChannelEvent","_handleIceCandidateEvent","_handleIceConnectionStateChange","_handleIceGatheringStateChange","_handleSignalingStateChange","_handleTrackEvent","_initiateIceRestart","stateChanged","state","removeListener","forEach","dataChannel","dataTrackSender","removeDataTrackSender","toString","_addIceCandidate","candidate","_this2","Promise","resolve","then","addIceCandidate","catch","error","warn","message","_addIceCandidates","candidates","all","map","_addOrUpdateTransceiver","track","_this3","transceiver","takeRecycledTransceiver","kind","sender","oldTrackId","mid","set","replaceTrack","direction","finally","delete","addTransceiver","_checkIceBox","description","ufrag","getUfrag","setUfrag","_answer","_this4","_setRemoteDescription","createAnswer","answer","sdp","type","updatedSdp","sdpWithoutSimulcast","replace","_setLocalDescription","_updateDescription","_maybeReoffer","localDescription","_close","stop","signalingState","preempt","emit","event","_this5","channel","dataTrackReceiver","add","_handleGlare","_this6","didReoffer","_offer","clear","peerConnectionState","ice","slice","complete","revision","_this7","iceConnectionState","isIceConnectedOrComplete","includes","reset","_initiateIceRestartBackoff","start","iceGatheringState","delay","isSet","_this8","remoteDescription","update","mediaStreamTrack","signaledTrackId","match","mediaTrackReceiver","trackReceiver","backoff","shouldReoffer","senders","getSenders","filter","reduce","shouldOffer","mediaSections","sendersOfKind","isSenderOfKind","hasDataTrack","size","hasApplicationMediaSection","needsApplicationMediaSection","promise","_this9","iceRestart","values","createOffer","_getMediaTrackSenderId","trackId","mediaTrackSender","keys","find","_ref","_addOrRewriteLocalTrackIds","_this10","transceivers","getTransceivers","activeTransceivers","_ref2","stopped","assignedTransceivers","_ref3","midsToTrackIds","_ref4","sdp1","unassignedTransceivers","_ref5","newTrackIdsByKind","_ref6","_ref7","sdp2","_rollbackAndApplyOffer","_this11","_this12","setLocalDescription","negotiationCompleted","getState","_this13","maxAudioBitrate","maxVideoBitrate","filterOutMediaStreamIds","test","sdpWithoutSimulcastForNonVP8MediaSections","setRemoteDescription","_this14","_updateIce","iceState","addDataTrackSender","has","dataChannelDict","ordered","maxPacketLifeTime","maxRetransmits","createDataChannel","addDataChannel","addMediaTrackSender","addSender","getTrackReceivers","concat","localDescriptionRevision","_this15","bracket","transition","tryTransition","get","removeDataChannel","removeMediaTrackSender","removeTrack","removeSender","setConfiguration","setIceReconnectTimeout","period","setDelay","_this16","updates","_this17","response","rewriteTrackIds","connectionState","rewriteLocalTrackId","pcv2","stats","rewriteTrackId","receiver","remoteAudioTrackStats","remoteVideoTrackStats","localAudioTrackStats","localVideoTrackStats","bundlePolicy","rtcpMuxPolicy","readyState","shouldRecycleTransceiver","currentDirection","_ref8","recycledTransceivers","localCodec","shift","remoteCodecMap","splice","indexOf","updateLocalCodecs","section","codecMap","pts","updateRemoteCodecMaps","updateRecycledTransceivers","_pcv2$_encodingParame","maxBitrates","maxBitrate","params","removeMaxBitrate","label","setMaxBitrate","encodings","networkPriority","name","encoding","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar DefaultBackoff = require('backoff');\n\nvar _require = require('@twilio/webrtc'),\n    DefaultMediaStream = _require.MediaStream,\n    DefaultRTCIceCandidate = _require.RTCIceCandidate,\n    DefaultRTCPeerConnection = _require.RTCPeerConnection,\n    DefaultRTCSessionDescription = _require.RTCSessionDescription,\n    getStatistics = _require.getStats;\n\nvar _require2 = require('@twilio/webrtc/lib/util'),\n    guessBrowser = _require2.guessBrowser;\n\nvar _require3 = require('@twilio/webrtc/lib/util/sdp'),\n    getSdpFormat = _require3.getSdpFormat;\n\nvar _require4 = require('../../util/constants'),\n    DEFAULT_ICE_GATHERING_TIMEOUT_MS = _require4.DEFAULT_ICE_GATHERING_TIMEOUT_MS,\n    DEFAULT_LOG_LEVEL = _require4.DEFAULT_LOG_LEVEL,\n    DEFAULT_SESSION_TIMEOUT_SEC = _require4.DEFAULT_SESSION_TIMEOUT_SEC,\n    iceRestartBackoffConfig = _require4.iceRestartBackoffConfig;\n\nvar _require5 = require('../../util/sdp'),\n    createCodecMapForMediaSection = _require5.createCodecMapForMediaSection,\n    disableRtx = _require5.disableRtx,\n    getMediaSections = _require5.getMediaSections,\n    removeSSRCAttributes = _require5.removeSSRCAttributes,\n    revertSimulcastForNonVP8MediaSections = _require5.revertSimulcastForNonVP8MediaSections,\n    setBitrateParameters = _require5.setBitrateParameters,\n    setCodecPreferences = _require5.setCodecPreferences,\n    setSimulcast = _require5.setSimulcast,\n    unifiedPlanAddOrRewriteNewTrackIds = _require5.unifiedPlanAddOrRewriteNewTrackIds,\n    unifiedPlanAddOrRewriteTrackIds = _require5.unifiedPlanAddOrRewriteTrackIds,\n    unifiedPlanFilterLocalCodecs = _require5.unifiedPlanFilterLocalCodecs;\n\nvar DefaultTimeout = require('../../util/timeout');\n\nvar _require6 = require('../../util/twilio-video-errors'),\n    MediaClientLocalDescFailedError = _require6.MediaClientLocalDescFailedError,\n    MediaClientRemoteDescFailedError = _require6.MediaClientRemoteDescFailedError;\n\nvar _require7 = require('../../util'),\n    buildLogLevels = _require7.buildLogLevels,\n    isChromeScreenShareTrack = _require7.isChromeScreenShareTrack,\n    oncePerTick = _require7.oncePerTick;\n\nvar IceBox = require('./icebox');\nvar DefaultIceConnectionMonitor = require('./iceconnectionmonitor.js');\nvar DataTrackReceiver = require('../../data/receiver');\nvar MediaTrackReceiver = require('../../media/track/receiver');\nvar StateMachine = require('../../statemachine');\nvar Log = require('../../util/log');\nvar IdentityTrackMatcher = require('../../util/sdp/trackmatcher/identity');\nvar OrderedTrackMatcher = require('../../util/sdp/trackmatcher/ordered');\nvar MIDTrackMatcher = require('../../util/sdp/trackmatcher/mid');\nvar workaroundIssue8329 = require('../../util/sdp/issue8329');\n\nvar guess = guessBrowser();\nvar isChrome = guess === 'chrome';\nvar isFirefox = guess === 'firefox';\nvar isSafari = guess === 'safari';\n\nvar isRTCRtpSenderParamsSupported = typeof RTCRtpSender !== 'undefined' && typeof RTCRtpSender.prototype.getParameters === 'function' && typeof RTCRtpSender.prototype.setParameters === 'function';\n\nvar nInstances = 0;\n\n/*\nPeerConnectionV2 States\n-----------------------\n\n    +------+    +--------+\n    |      |    |        |\n    | open |--->| closed |\n    |      |    |        |\n    +------+    +--------+\n      |  ^          ^\n      |  |          |\n      |  |          |\n      v  |          |\n  +----------+      |\n  |          |      |\n  | updating |------+\n  |          |\n  +----------+\n\n*/\n\nvar states = {\n  open: ['closed', 'updating'],\n  updating: ['closed', 'open'],\n  closed: []\n};\n\n/**\n * @extends StateMachine\n * @property {id}\n * @emits PeerConnectionV2#connectionStateChanged\n * @emits PeerConnectionV2#iceConnectionStateChanged\n * @emits PeerConnectionV2#candidates\n * @emits PeerConnectionV2#description\n */\n\nvar PeerConnectionV2 = function (_StateMachine) {\n  _inherits(PeerConnectionV2, _StateMachine);\n\n  /**\n   * Construct a {@link PeerConnectionV2}.\n   * @param {string} id\n   * @param {EncodingParametersImpl} encodingParameters\n   * @param {PreferredCodecs} preferredCodecs\n   * @param {object} [options]\n   */\n  function PeerConnectionV2(id, encodingParameters, preferredCodecs, options) {\n    _classCallCheck(this, PeerConnectionV2);\n\n    var _this = _possibleConstructorReturn(this, (PeerConnectionV2.__proto__ || Object.getPrototypeOf(PeerConnectionV2)).call(this, 'open', states));\n\n    options = Object.assign({\n      enableDscp: false,\n      dummyAudioMediaStreamTrack: null,\n      isChromeScreenShareTrack: isChromeScreenShareTrack,\n      iceServers: [],\n      isRTCRtpSenderParamsSupported: isRTCRtpSenderParamsSupported,\n      logLevel: DEFAULT_LOG_LEVEL,\n      offerOptions: {},\n      revertSimulcastForNonVP8MediaSections: revertSimulcastForNonVP8MediaSections,\n      sessionTimeout: DEFAULT_SESSION_TIMEOUT_SEC * 1000,\n      setBitrateParameters: setBitrateParameters,\n      setCodecPreferences: setCodecPreferences,\n      setSimulcast: setSimulcast,\n      Backoff: DefaultBackoff,\n      IceConnectionMonitor: DefaultIceConnectionMonitor,\n      MediaStream: DefaultMediaStream,\n      RTCIceCandidate: DefaultRTCIceCandidate,\n      RTCPeerConnection: DefaultRTCPeerConnection,\n      RTCSessionDescription: DefaultRTCSessionDescription,\n      Timeout: DefaultTimeout\n    }, options);\n\n    var configuration = getConfiguration(options);\n    var sdpFormat = getSdpFormat(configuration.sdpSemantics);\n    var isUnifiedPlan = sdpFormat === 'unified';\n\n    var localMediaStream = isUnifiedPlan ? null : new options.MediaStream();\n    var logLevels = buildLogLevels(options.logLevel);\n    var RTCPeerConnection = options.RTCPeerConnection;\n\n    if (options.enableDscp === true) {\n      options.chromeSpecificConstraints = options.chromeSpecificConstraints || {};\n      options.chromeSpecificConstraints.optional = options.chromeSpecificConstraints.optional || [];\n      options.chromeSpecificConstraints.optional.push({ googDscp: true });\n    }\n\n    var log = options.log ? options.log.createLog('signaling', _this) : new Log('webrtc', _this, logLevels);\n    var peerConnection = new RTCPeerConnection(configuration, options.chromeSpecificConstraints);\n\n    if (options.dummyAudioMediaStreamTrack) {\n      peerConnection.addTrack(options.dummyAudioMediaStreamTrack, localMediaStream || new options.MediaStream());\n    }\n\n    Object.defineProperties(_this, {\n      _appliedTrackIdsToAttributes: {\n        value: new Map(),\n        writable: true\n      },\n      _dataChannels: {\n        value: new Map()\n      },\n      _dataTrackReceivers: {\n        value: new Set()\n      },\n      _descriptionRevision: {\n        writable: true,\n        value: 0\n      },\n      _didGenerateLocalCandidates: {\n        writable: true,\n        value: false\n      },\n      _enableDscp: {\n        value: options.enableDscp\n      },\n      _encodingParameters: {\n        value: encodingParameters\n      },\n      _isChromeScreenShareTrack: {\n        value: options.isChromeScreenShareTrack\n      },\n      _iceGatheringFailed: {\n        value: false,\n        writable: true\n      },\n      _iceGatheringTimeout: {\n        value: new options.Timeout(function () {\n          return _this._handleIceGatheringTimeout();\n        }, DEFAULT_ICE_GATHERING_TIMEOUT_MS, false)\n      },\n      _iceRestartBackoff: {\n        value: options.Backoff.exponential(iceRestartBackoffConfig)\n      },\n      _instanceId: {\n        value: ++nInstances\n      },\n      _isIceConnectionInactive: {\n        writable: true,\n        value: false\n      },\n      _isIceLite: {\n        writable: true,\n        value: false\n      },\n      _isIceRestartBackoffInProgress: {\n        writable: true,\n        value: false\n      },\n      _isRestartingIce: {\n        writable: true,\n        value: false\n      },\n      _isUnifiedPlan: {\n        value: isUnifiedPlan\n      },\n      _isRTCRtpSenderParamsSupported: {\n        value: options.isRTCRtpSenderParamsSupported\n      },\n      _lastIceConnectionState: {\n        writable: true,\n        value: null\n      },\n      _lastStableDescriptionRevision: {\n        writable: true,\n        value: 0\n      },\n      _localCandidates: {\n        writable: true,\n        value: []\n      },\n      _localCodecs: {\n        value: new Set()\n      },\n      _localCandidatesRevision: {\n        writable: true,\n        value: 1\n      },\n      _localDescriptionWithoutSimulcast: {\n        writable: true,\n        value: null\n      },\n      _localDescription: {\n        writable: true,\n        value: null\n      },\n      _localMediaStream: {\n        value: localMediaStream\n      },\n      _localUfrag: {\n        writable: true,\n        value: null\n      },\n      _log: {\n        value: log\n      },\n      _remoteCodecMaps: {\n        value: new Map()\n      },\n      _rtpSenders: {\n        value: new Map()\n      },\n      _iceConnectionMonitor: {\n        value: new options.IceConnectionMonitor(peerConnection)\n      },\n      _mediaTrackReceivers: {\n        value: new Set()\n      },\n      _needsAnswer: {\n        writable: true,\n        value: false\n      },\n      _negotiationRole: {\n        writable: true,\n        value: null\n      },\n      _offerOptions: {\n        writable: true,\n        value: options.offerOptions\n      },\n      _peerConnection: {\n        value: peerConnection\n      },\n      _preferredAudioCodecs: {\n        value: preferredCodecs.audio\n      },\n      _preferredVideoCodecs: {\n        value: preferredCodecs.video\n      },\n      _shouldApplySimulcast: {\n        value: (isChrome || isSafari) && preferredCodecs.video.some(function (codecSettings) {\n          return codecSettings.codec.toLowerCase() === 'vp8' && codecSettings.simulcast;\n        })\n      },\n      _queuedDescription: {\n        writable: true,\n        value: null\n      },\n      _iceReconnectTimeout: {\n        value: new options.Timeout(function () {\n          log.debug('ICE reconnect timed out');\n          _this.close();\n        }, options.sessionTimeout, false)\n      },\n      _recycledTransceivers: {\n        value: {\n          audio: [],\n          video: []\n        }\n      },\n      _replaceTrackPromises: {\n        value: new Map()\n      },\n      _remoteCandidates: {\n        writable: true,\n        value: new IceBox()\n      },\n      _sdpFormat: {\n        value: sdpFormat\n      },\n      _setBitrateParameters: {\n        value: options.setBitrateParameters\n      },\n      _setCodecPreferences: {\n        value: options.setCodecPreferences\n      },\n      _setSimulcast: {\n        value: options.setSimulcast\n      },\n      _revertSimulcastForNonVP8MediaSections: {\n        value: options.revertSimulcastForNonVP8MediaSections\n      },\n      _RTCIceCandidate: {\n        value: options.RTCIceCandidate\n      },\n      _RTCPeerConnection: {\n        value: options.RTCPeerConnection\n      },\n      _RTCSessionDescription: {\n        value: options.RTCSessionDescription\n      },\n      _shouldOffer: {\n        writable: true,\n        value: false\n      },\n      _shouldRestartIce: {\n        writable: true,\n        value: false\n      },\n      _trackIdsToAttributes: {\n        value: new Map(),\n        writable: true\n      },\n      _trackMatcher: {\n        writable: true,\n        value: null\n      },\n      id: {\n        enumerable: true,\n        value: id\n      }\n    });\n\n    encodingParameters.on('changed', oncePerTick(function () {\n      if (_this._isRTCRtpSenderParamsSupported) {\n        if (!_this._needsAnswer) {\n          updateEncodingParameters(_this);\n        }\n        return;\n      }\n      _this.offer();\n    }));\n\n    peerConnection.addEventListener('connectionstatechange', _this._handleConnectionStateChange.bind(_this));\n    peerConnection.addEventListener('datachannel', _this._handleDataChannelEvent.bind(_this));\n    peerConnection.addEventListener('icecandidate', _this._handleIceCandidateEvent.bind(_this));\n    peerConnection.addEventListener('iceconnectionstatechange', _this._handleIceConnectionStateChange.bind(_this));\n    peerConnection.addEventListener('icegatheringstatechange', _this._handleIceGatheringStateChange.bind(_this));\n    peerConnection.addEventListener('signalingstatechange', _this._handleSignalingStateChange.bind(_this));\n    peerConnection.addEventListener('track', _this._handleTrackEvent.bind(_this));\n    _this._iceRestartBackoff.on('ready', function () {\n      return _this._initiateIceRestart();\n    });\n\n    var self = _this;\n    _this.on('stateChanged', function stateChanged(state) {\n      if (state !== 'closed') {\n        return;\n      }\n      self.removeListener('stateChanged', stateChanged);\n      self._dataChannels.forEach(function (dataChannel, dataTrackSender) {\n        self.removeDataTrackSender(dataTrackSender);\n      });\n    });\n    return _this;\n  }\n\n  _createClass(PeerConnectionV2, [{\n    key: 'toString',\n    value: function toString() {\n      return '[PeerConnectionV2 #' + this._instanceId + ': ' + this.id + ']';\n    }\n\n    /**\n     * The {@link PeerConnectionV2}'s underlying RTCPeerConnection's RTCPeerConnectionState\n     * if supported by the browser, its RTCIceConnectionState otherwise.\n     * @property {RTCPeerConnectionState}\n     */\n\n  }, {\n    key: '_addIceCandidate',\n\n\n    /**\n     * Add an ICE candidate to the {@link PeerConnectionV2}.\n     * @private\n     * @param {object} candidate\n     * @returns {Promise<void>}\n     */\n    value: function _addIceCandidate(candidate) {\n      var _this2 = this;\n\n      return Promise.resolve().then(function () {\n        candidate = new _this2._RTCIceCandidate(candidate);\n        return _this2._peerConnection.addIceCandidate(candidate);\n      }).catch(function (error) {\n        // NOTE(mmalavalli): Firefox 68+ now generates an RTCIceCandidate with an\n        // empty candidate string to signal end-of-candidates, followed by a null\n        // candidate. As of now, Chrome and Safari reject this RTCIceCandidate. Since\n        // this does not affect the media connection between Firefox 68+ and Chrome/Safari\n        // in Peer-to-Peer Rooms, we suppress the Error and log a warning message.\n        //\n        // Chrome bug: https://bugs.chromium.org/p/chromium/issues/detail?id=978582\n        //\n        _this2._log.warn('Failed to add RTCIceCandidate ' + (candidate ? '\"' + candidate.candidate + '\"' : 'null') + ': ' + error.message);\n      });\n    }\n\n    /**\n     * Add ICE candidates to the {@link PeerConnectionV2}.\n     * @private\n     * @param {Array<object>} candidates\n     * @returns {Promise<void>}\n     */\n\n  }, {\n    key: '_addIceCandidates',\n    value: function _addIceCandidates(candidates) {\n      return Promise.all(candidates.map(this._addIceCandidate, this)).then(function () {});\n    }\n\n    /**\n     * Add a new RTCRtpTransceiver or update an existing RTCRtpTransceiver for the\n     * given MediaStreamTrack.\n     * @private\n     * @param {MediaStreamTrack} track\n     * @returns {RTCRtpTransceiver}\n     */\n\n  }, {\n    key: '_addOrUpdateTransceiver',\n    value: function _addOrUpdateTransceiver(track) {\n      var _this3 = this;\n\n      var transceiver = takeRecycledTransceiver(this, track.kind);\n      if (transceiver && transceiver.sender) {\n        var oldTrackId = transceiver.sender.track ? transceiver.sender.track.id : null;\n        if (oldTrackId) {\n          this._log.warn('Reusing transceiver: ' + transceiver.mid + '] ' + oldTrackId + ' => ' + track.id);\n        }\n        // NOTE(mpatwardhan):remember this transceiver while we replace track.\n        // we recycle transceivers that are not in use after 'negotiationCompleted', but we want to prevent\n        // this one from getting recycled while replaceTrack is pending.\n        this._replaceTrackPromises.set(transceiver, transceiver.sender.replaceTrack(track).then(function () {\n          transceiver.direction = 'sendrecv';\n        }, function () {\n          // Do nothing.\n        }).finally(function () {\n          _this3._replaceTrackPromises.delete(transceiver);\n        }));\n        return transceiver;\n      }\n      return this._peerConnection.addTransceiver(track);\n    }\n\n    /**\n     * Check the {@link IceBox}.\n     * @private\n     * @param {RTCSessionDescriptionInit} description\n     * @returns {Promise<void>}\n     */\n\n  }, {\n    key: '_checkIceBox',\n    value: function _checkIceBox(description) {\n      var ufrag = getUfrag(description);\n      if (!ufrag) {\n        return Promise.resolve();\n      }\n      var candidates = this._remoteCandidates.setUfrag(ufrag);\n      return this._addIceCandidates(candidates);\n    }\n\n    /**\n     * Create an answer and set it on the {@link PeerConnectionV2}.\n     * @private\n     * @param {RTCSessionDescriptionInit} offer\n     * @returns {Promise<boolean>}\n     */\n\n  }, {\n    key: '_answer',\n    value: function _answer(offer) {\n      var _this4 = this;\n\n      return Promise.resolve().then(function () {\n        if (!_this4._negotiationRole) {\n          _this4._negotiationRole = 'answerer';\n        }\n        return _this4._setRemoteDescription(offer);\n      }).catch(function () {\n        throw new MediaClientRemoteDescFailedError();\n      }).then(function () {\n        return _this4._peerConnection.createAnswer();\n      }).then(function (answer) {\n        if (isFirefox) {\n          // NOTE(mmalavalli): We work around Chromium bug 1106157 by disabling\n          // RTX in Firefox 79+. For more details about the bug, please go here:\n          // https://bugs.chromium.org/p/chromium/issues/detail?id=1106157\n          answer = new _this4._RTCSessionDescription({\n            sdp: disableRtx(answer.sdp),\n            type: answer.type\n          });\n        } else {\n          answer = workaroundIssue8329(answer);\n        }\n\n        // NOTE(mpatwardhan): Upcoming chrome versions are going to remove ssrc attributes\n        // mslabel and label. See this bug https://bugs.chromium.org/p/webrtc/issues/detail?id=7110\n        // and PSA: https://groups.google.com/forum/#!searchin/discuss-webrtc/PSA%7Csort:date/discuss-webrtc/jcZO-Wj0Wus/k2XvPCvoAwAJ\n        // We are not referencing those attributes, but this changes goes ahead and removes them to see if it works.\n        // this also helps reduce bytes on wires\n        var updatedSdp = removeSSRCAttributes(answer.sdp, ['mslabel', 'label']);\n        if (_this4._shouldApplySimulcast) {\n          var sdpWithoutSimulcast = updatedSdp;\n          updatedSdp = _this4._setSimulcast(sdpWithoutSimulcast, _this4._sdpFormat, _this4._trackIdsToAttributes);\n          // NOTE(syerrapragada): VMS does not support H264 simulcast. So,\n          // unset simulcast for sections in local offer where corresponding\n          // sections in answer doesn't have vp8 as preferred codec and reapply offer.\n          updatedSdp = _this4._revertSimulcastForNonVP8MediaSections(updatedSdp, sdpWithoutSimulcast, offer.sdp);\n        }\n\n        // NOTE(mmalavalli): Work around Chromium bug 1074421.\n        // https://bugs.chromium.org/p/chromium/issues/detail?id=1074421\n        updatedSdp = updatedSdp.replace(/42e015/g, '42e01f');\n\n        return _this4._setLocalDescription({\n          type: answer.type,\n          sdp: updatedSdp\n        });\n      }).then(function () {\n        return _this4._checkIceBox(offer);\n      }).then(function () {\n        return _this4._queuedDescription && _this4._updateDescription(_this4._queuedDescription);\n      }).then(function () {\n        _this4._queuedDescription = null;\n        return _this4._maybeReoffer(_this4._peerConnection.localDescription);\n      }).catch(function (error) {\n        throw error instanceof MediaClientRemoteDescFailedError ? error : new MediaClientLocalDescFailedError();\n      });\n    }\n\n    /**\n     * Close the underlying RTCPeerConnection. Returns false if the\n     * RTCPeerConnection was already closed.\n     * @private\n     * @returns {boolean}\n     */\n\n  }, {\n    key: '_close',\n    value: function _close() {\n      this._iceConnectionMonitor.stop();\n      if (this._peerConnection.signalingState !== 'closed') {\n        this._peerConnection.close();\n        this.preempt('closed');\n        return true;\n      }\n      return false;\n    }\n\n    /**\n     * Handle a \"connectionstatechange\" event.\n     * @private\n     * @returns {void}\n     */\n\n  }, {\n    key: '_handleConnectionStateChange',\n    value: function _handleConnectionStateChange() {\n      this.emit('connectionStateChanged');\n    }\n\n    /**\n     * Handle a \"datachannel\" event.\n     * @private\n     * @param {RTCDataChannelEvent} event\n     * @returns {void}\n     */\n\n  }, {\n    key: '_handleDataChannelEvent',\n    value: function _handleDataChannelEvent(event) {\n      var _this5 = this;\n\n      var dataChannel = event.channel;\n      var dataTrackReceiver = new DataTrackReceiver(dataChannel);\n      this._dataTrackReceivers.add(dataTrackReceiver);\n\n      dataChannel.addEventListener('close', function () {\n        _this5._dataTrackReceivers.delete(dataTrackReceiver);\n      });\n\n      this.emit('trackAdded', dataTrackReceiver);\n    }\n\n    /**\n     * Handle a glare scenario on the {@link PeerConnectionV2}.\n     * @private\n     * @param {RTCSessionDescriptionInit} offer\n     * @returns {Promise<void>}\n     */\n\n  }, {\n    key: '_handleGlare',\n    value: function _handleGlare(offer) {\n      var _this6 = this;\n\n      this._log.debug('Glare detected; rolling back');\n      if (this._isRestartingIce) {\n        this._log.debug('An ICE restart was in progress; we\\'ll need to restart ICE again after rolling back');\n        this._isRestartingIce = false;\n        this._shouldRestartIce = true;\n      }\n      return Promise.resolve().then(function () {\n        _this6._trackIdsToAttributes = new Map(_this6._appliedTrackIdsToAttributes);\n        return _this6._setLocalDescription({ type: 'rollback' });\n      }).then(function () {\n        _this6._needsAnswer = false;\n        return _this6._answer(offer);\n      }).then(function (didReoffer) {\n        return didReoffer ? Promise.resolve() : _this6._offer();\n      });\n    }\n\n    /**\n     * Handle an ICE candidate event.\n     * @private\n     * @param {Event} event\n     * @returns {void}\n     */\n\n  }, {\n    key: '_handleIceCandidateEvent',\n    value: function _handleIceCandidateEvent(event) {\n      if (event.candidate) {\n        this._log.debug('Clearing ICE gathering timeout');\n        this._didGenerateLocalCandidates = true;\n        this._iceGatheringTimeout.clear();\n        this._localCandidates.push(event.candidate);\n      }\n      var peerConnectionState = {\n        ice: {\n          candidates: this._isIceLite ? [] : this._localCandidates.slice(),\n          ufrag: this._localUfrag\n        },\n        id: this.id\n      };\n      if (!event.candidate) {\n        peerConnectionState.ice.complete = true;\n      }\n      if (!(this._isIceLite && event.candidate)) {\n        peerConnectionState.ice.revision = this._localCandidatesRevision++;\n        this.emit('candidates', peerConnectionState);\n      }\n    }\n\n    /**\n     * Handle an ICE connection state change event.\n     * @private\n     * @returns {void}\n     */\n\n  }, {\n    key: '_handleIceConnectionStateChange',\n    value: function _handleIceConnectionStateChange() {\n      var _this7 = this;\n\n      var iceConnectionState = this._peerConnection.iceConnectionState;\n\n      var isIceConnectedOrComplete = ['connected', 'completed'].includes(iceConnectionState);\n      var log = this._log;\n\n      log.debug('ICE connection state is \"' + iceConnectionState + '\"');\n      if (isIceConnectedOrComplete) {\n        this._iceReconnectTimeout.clear();\n        this._iceRestartBackoff.reset();\n      }\n\n      if (this._lastIceConnectionState !== 'failed' && iceConnectionState === 'failed' && !this._shouldRestartIce && !this._isRestartingIce) {\n        // Case 1: Transition to \"failed\".\n        log.warn('ICE failed');\n        this._initiateIceRestartBackoff();\n      } else if (['disconnected', 'failed'].includes(this._lastIceConnectionState) && isIceConnectedOrComplete) {\n        // Case 2: Transition from \"disconnected\" or \"failed\".\n        log.debug('ICE reconnected');\n      }\n\n      // start monitor media when connected, and continue to monitor while state is complete-disconnected-connected.\n      if (iceConnectionState === 'connected') {\n        this._isIceConnectionInactive = false;\n        this._iceConnectionMonitor.start(function () {\n          // note: iceConnection monitor waits for iceConnectionState=disconnected for\n          // detecting inactivity. Its possible that it may know about disconnected before _handleIceConnectionStateChange\n          _this7._iceConnectionMonitor.stop();\n          if (!_this7._shouldRestartIce && !_this7._isRestartingIce) {\n            log.warn('ICE Connection Monitor detected inactivity');\n            _this7._isIceConnectionInactive = true;\n            _this7._initiateIceRestartBackoff();\n            _this7.emit('iceConnectionStateChanged');\n            _this7.emit('connectionStateChanged');\n          }\n        });\n      } else if (!['disconnected', 'completed'].includes(iceConnectionState)) {\n        // don't stop monitoring for disconnected or completed.\n        this._iceConnectionMonitor.stop();\n        this._isIceConnectionInactive = false;\n      }\n\n      this._lastIceConnectionState = iceConnectionState;\n      this.emit('iceConnectionStateChanged');\n    }\n\n    /**\n     * Handle ICE gathering timeout.\n     * @private\n     * @returns {void}\n     */\n\n  }, {\n    key: '_handleIceGatheringTimeout',\n    value: function _handleIceGatheringTimeout() {\n      this._log.warn('ICE failed to gather any local candidates');\n      this._iceGatheringFailed = true;\n      this._initiateIceRestartBackoff();\n      this.emit('iceConnectionStateChanged');\n      this.emit('connectionStateChanged');\n    }\n\n    /**\n     * Handle an ICE gathering state change event.\n     * @private\n     * @returns {void}\n     */\n\n  }, {\n    key: '_handleIceGatheringStateChange',\n    value: function _handleIceGatheringStateChange() {\n      var iceGatheringState = this._peerConnection.iceGatheringState;\n\n      var log = this._log;\n      log.debug('ICE gathering state is \"' + iceGatheringState + '\"');\n\n      // NOTE(mmalavalli): Start the ICE gathering timeout only if the RTCPeerConnection\n      // has started gathering candidates for the first time since the initial offer/answer\n      // or an offer/answer with ICE restart.\n      var _iceGatheringTimeout = this._iceGatheringTimeout,\n          delay = _iceGatheringTimeout.delay,\n          isSet = _iceGatheringTimeout.isSet;\n\n      if (iceGatheringState === 'gathering' && !this._didGenerateLocalCandidates && !isSet) {\n        log.debug('Starting ICE gathering timeout: ' + delay);\n        this._iceGatheringFailed = false;\n        this._iceGatheringTimeout.start();\n      }\n    }\n\n    /**\n     * Handle a signaling state change event.\n     * @private\n     * @returns {void}\n     */\n\n  }, {\n    key: '_handleSignalingStateChange',\n    value: function _handleSignalingStateChange() {\n      if (this._peerConnection.signalingState === 'stable') {\n        this._appliedTrackIdsToAttributes = new Map(this._trackIdsToAttributes);\n      }\n    }\n\n    /**\n     * Handle a track event.\n     * @private\n     * @param {Event} event\n     * @returns {void}\n     */\n\n  }, {\n    key: '_handleTrackEvent',\n    value: function _handleTrackEvent(event) {\n      var _this8 = this;\n\n      var sdp = this._peerConnection.remoteDescription ? this._peerConnection.remoteDescription.sdp : null;\n\n      if (!this._trackMatcher) {\n        this._trackMatcher = event.transceiver && event.transceiver.mid ? new MIDTrackMatcher()\n        // NOTE(mroberts): Until Chrome ships RTCRtpTransceivers with MID\n        // support, we have to use the same hacky solution as Safari. Revisit\n        // this when RTCRtpTransceivers and MIDs land. We should be able to use\n        // the same technique as Firefox.\n        : isSafari || this._isUnifiedPlan ? new OrderedTrackMatcher() : new IdentityTrackMatcher();\n      }\n      this._trackMatcher.update(sdp);\n\n      var mediaStreamTrack = event.track;\n      var signaledTrackId = this._trackMatcher.match(event) || mediaStreamTrack.id;\n      var mediaTrackReceiver = new MediaTrackReceiver(signaledTrackId, mediaStreamTrack);\n\n      // NOTE(mmalavalli): In unified plan mode, \"ended\" is not fired on the remote\n      // MediaStreamTrack when the remote peer removes a track. So, when this\n      // MediaStreamTrack is re-used for a different track due to the remote peer\n      // calling RTCRtpSender.replaceTrack(), we delete the previous MediaTrackReceiver\n      // that owned this MediaStreamTrack before adding the new MediaTrackReceiver.\n      this._mediaTrackReceivers.forEach(function (trackReceiver) {\n        if (trackReceiver.track.id === mediaTrackReceiver.track.id) {\n          _this8._mediaTrackReceivers.delete(trackReceiver);\n        }\n      });\n\n      this._mediaTrackReceivers.add(mediaTrackReceiver);\n      mediaStreamTrack.addEventListener('ended', function () {\n        return _this8._mediaTrackReceivers.delete(mediaTrackReceiver);\n      });\n      this.emit('trackAdded', mediaTrackReceiver);\n    }\n\n    /**\n     * Initiate ICE Restart.\n     * @private\n     * @returns {void}\n     */\n\n  }, {\n    key: '_initiateIceRestart',\n    value: function _initiateIceRestart() {\n      if (this._peerConnection.signalingState === 'closed') {\n        return;\n      }\n      var log = this._log;\n      log.warn('Attempting to restart ICE');\n      this._didGenerateLocalCandidates = false;\n      this._isIceRestartBackoffInProgress = false;\n      this._shouldRestartIce = true;\n\n      var _iceReconnectTimeout = this._iceReconnectTimeout,\n          delay = _iceReconnectTimeout.delay,\n          isSet = _iceReconnectTimeout.isSet;\n\n      if (!isSet) {\n        log.debug('Starting ICE reconnect timeout: ' + delay);\n        this._iceReconnectTimeout.start();\n      }\n      this.offer();\n    }\n\n    /**\n     * Schedule an ICE Restart.\n     * @private\n     * @returns {void}\n     */\n\n  }, {\n    key: '_initiateIceRestartBackoff',\n    value: function _initiateIceRestartBackoff() {\n      if (this._peerConnection.signalingState === 'closed' || this._isIceRestartBackoffInProgress) {\n        return;\n      }\n      this._log.warn('An ICE restart has been scheduled');\n      this._isIceRestartBackoffInProgress = true;\n      this._iceRestartBackoff.backoff();\n    }\n\n    /**\n     * Conditionally re-offer.\n     * @private\n     * @param {?RTCSessionDescriptionInit} localDescription\n     * @returns {Promise<boolean>}\n     */\n\n  }, {\n    key: '_maybeReoffer',\n    value: function _maybeReoffer(localDescription) {\n      var shouldReoffer = this._shouldOffer;\n\n      if (localDescription && localDescription.sdp) {\n        // NOTE(mmalavalli): For \"unified-plan\" sdps, if the local RTCSessionDescription\n        // has fewer audio and/or video send* m= lines than the corresponding RTCRtpSenders\n        // with non-null MediaStreamTracks, it means that the newly added RTCRtpSenders\n        // require renegotiation.\n        if (this._isUnifiedPlan) {\n          var senders = this._peerConnection.getSenders().filter(function (sender) {\n            return sender.track;\n          });\n          shouldReoffer = ['audio', 'video'].reduce(function (shouldOffer, kind) {\n            var mediaSections = getMediaSections(localDescription.sdp, kind, '(sendrecv|sendonly)');\n            var sendersOfKind = senders.filter(isSenderOfKind.bind(null, kind));\n            return shouldOffer || mediaSections.length < sendersOfKind.length;\n          }, shouldReoffer);\n        }\n\n        // NOTE(mroberts): We also need to re-offer if we have a DataTrack to share\n        // but no m= application section.\n        var hasDataTrack = this._dataChannels.size > 0;\n        var hasApplicationMediaSection = getMediaSections(localDescription.sdp, 'application').length > 0;\n        var needsApplicationMediaSection = hasDataTrack && !hasApplicationMediaSection;\n        shouldReoffer = shouldReoffer || needsApplicationMediaSection;\n      }\n\n      var promise = shouldReoffer ? this._offer() : Promise.resolve();\n      return promise.then(function () {\n        return shouldReoffer;\n      });\n    }\n\n    /**\n     * Create an offer and set it on the {@link PeerConnectionV2}.\n     * @private\n     * @returns {Promise<void>}\n     */\n\n  }, {\n    key: '_offer',\n    value: function _offer() {\n      var _this9 = this;\n\n      var offerOptions = Object.assign({}, this._offerOptions);\n      this._needsAnswer = true;\n      if (this._shouldRestartIce) {\n        this._shouldRestartIce = false;\n        this._isRestartingIce = true;\n        offerOptions.iceRestart = true;\n      }\n\n      return Promise.all(this._replaceTrackPromises.values()).then(function () {\n        return _this9._peerConnection.createOffer(offerOptions);\n      }).catch(function () {\n        throw new MediaClientLocalDescFailedError();\n      }).then(function (offer) {\n        if (isFirefox) {\n          // NOTE(mmalavalli): We work around Chromium bug 1106157 by disabling\n          // RTX in Firefox 79+. For more details about the bug, please go here:\n          // https://bugs.chromium.org/p/chromium/issues/detail?id=1106157\n          offer = new _this9._RTCSessionDescription({\n            sdp: disableRtx(offer.sdp),\n            type: offer.type\n          });\n        } else {\n          offer = workaroundIssue8329(offer);\n        }\n\n        // NOTE(mpatwardhan): upcoming chrome versions are going to remove ssrc attributes\n        // mslabel and label. See this bug https://bugs.chromium.org/p/webrtc/issues/detail?id=7110\n        // and PSA: https://groups.google.com/forum/#!searchin/discuss-webrtc/PSA%7Csort:date/discuss-webrtc/jcZO-Wj0Wus/k2XvPCvoAwAJ\n        // Looks like we are not referencing those attributes, but this changes goes ahead and removes them to see if it works.\n        // this also helps reduce bytes on wires\n        var sdp = removeSSRCAttributes(offer.sdp, ['mslabel', 'label']);\n        sdp = _this9._isUnifiedPlan && _this9._peerConnection.remoteDescription ? unifiedPlanFilterLocalCodecs(sdp, _this9._peerConnection.remoteDescription.sdp) : sdp;\n\n        var updatedSdp = _this9._setCodecPreferences(sdp, _this9._preferredAudioCodecs, _this9._preferredVideoCodecs);\n\n        _this9._shouldOffer = false;\n        if (!_this9._negotiationRole) {\n          _this9._negotiationRole = 'offerer';\n        }\n\n        if (_this9._shouldApplySimulcast) {\n          _this9._localDescriptionWithoutSimulcast = {\n            type: 'offer',\n            sdp: updatedSdp\n          };\n          updatedSdp = _this9._setSimulcast(updatedSdp, _this9._sdpFormat, _this9._trackIdsToAttributes);\n        }\n        return _this9._setLocalDescription({\n          type: 'offer',\n          sdp: updatedSdp\n        });\n      });\n    }\n\n    /**\n     * Get the MediaTrackSender ID of the given MediaStreamTrack ID.\n     * Since a MediaTrackSender's underlying MediaStreamTrack can be\n     * replaced, the corresponding IDs can mismatch.\n     * @private\n     * @param {Track.ID} id\n     * @returns {Track.ID}\n     */\n\n  }, {\n    key: '_getMediaTrackSenderId',\n    value: function _getMediaTrackSenderId(trackId) {\n      var mediaTrackSender = Array.from(this._rtpSenders.keys()).find(function (_ref) {\n        var id = _ref.track.id;\n        return id === trackId;\n      });\n      return mediaTrackSender ? mediaTrackSender.id : trackId;\n    }\n\n    /**\n     * Add or rewrite local MediaStreamTrack IDs in the given Unified Plan RTCSessionDescription.\n     * @private\n     * @param {RTCSessionDescription} description\n     * @return {RTCSessionDescription}\n     */\n\n  }, {\n    key: '_addOrRewriteLocalTrackIds',\n    value: function _addOrRewriteLocalTrackIds(description) {\n      var _this10 = this;\n\n      var transceivers = this._peerConnection.getTransceivers();\n      var activeTransceivers = transceivers.filter(function (_ref2) {\n        var sender = _ref2.sender,\n            stopped = _ref2.stopped;\n        return !stopped && sender && sender.track;\n      });\n\n      // NOTE(mmalavalli): There is no guarantee that MediaStreamTrack IDs will be present in\n      // SDPs, and even if they are, there is no guarantee that they will be the same as the\n      // actual MediaStreamTrack IDs. So, we add or re-write the actual MediaStreamTrack IDs\n      // to the assigned m= sections here.\n      var assignedTransceivers = activeTransceivers.filter(function (_ref3) {\n        var mid = _ref3.mid;\n        return mid;\n      });\n      var midsToTrackIds = new Map(assignedTransceivers.map(function (_ref4) {\n        var mid = _ref4.mid,\n            sender = _ref4.sender;\n        return [mid, _this10._getMediaTrackSenderId(sender.track.id)];\n      }));\n      var sdp1 = unifiedPlanAddOrRewriteTrackIds(description.sdp, midsToTrackIds);\n\n      // NOTE(mmalavalli): Chrome and Safari do not apply the offer until they get an answer.\n      // So, we add or re-write the actual MediaStreamTrack IDs to the unassigned m= sections here.\n      var unassignedTransceivers = activeTransceivers.filter(function (_ref5) {\n        var mid = _ref5.mid;\n        return !mid;\n      });\n      var newTrackIdsByKind = new Map(['audio', 'video'].map(function (kind) {\n        return [kind, unassignedTransceivers.filter(function (_ref6) {\n          var sender = _ref6.sender;\n          return sender.track.kind === kind;\n        }).map(function (_ref7) {\n          var sender = _ref7.sender;\n          return _this10._getMediaTrackSenderId(sender.track.id);\n        })];\n      }));\n      var sdp2 = unifiedPlanAddOrRewriteNewTrackIds(sdp1, midsToTrackIds, newTrackIdsByKind);\n\n      return new this._RTCSessionDescription({\n        sdp: sdp2,\n        type: description.type\n      });\n    }\n\n    /**\n     * Rollback and apply the given offer.\n     * @private\n     * @param {RTCSessionDescriptionInit} offer\n     * @returns {Promise<void>}\n     */\n\n  }, {\n    key: '_rollbackAndApplyOffer',\n    value: function _rollbackAndApplyOffer(offer) {\n      var _this11 = this;\n\n      return this._setLocalDescription({ type: 'rollback' }).then(function () {\n        return _this11._setLocalDescription(offer);\n      });\n    }\n\n    /**\n     * Set a local description on the {@link PeerConnectionV2}.\n     * @private\n     * @param {RTCSessionDescription|RTCSessionDescriptionInit} description\n     * @returns {Promise<void>}\n     */\n\n  }, {\n    key: '_setLocalDescription',\n    value: function _setLocalDescription(description) {\n      var _this12 = this;\n\n      return this._peerConnection.setLocalDescription(description).catch(function (error) {\n        _this12._log.warn('Calling setLocalDescription with an RTCSessionDescription of type \"' + description.type + '\" failed with the error \"' + error.message + '\".');\n        if (description.sdp) {\n          _this12._log.warn('The SDP was ' + description.sdp);\n        }\n        throw new MediaClientLocalDescFailedError();\n      }).then(function () {\n        if (description.type !== 'rollback') {\n          _this12._localDescription = _this12._isUnifiedPlan ? _this12._addOrRewriteLocalTrackIds(description) : description;\n          _this12._localCandidates = [];\n          if (description.type === 'offer') {\n            _this12._descriptionRevision++;\n          } else if (description.type === 'answer') {\n            _this12._lastStableDescriptionRevision = _this12._descriptionRevision;\n            negotiationCompleted(_this12);\n          }\n          _this12._localUfrag = getUfrag(description);\n          _this12.emit('description', _this12.getState());\n        }\n      });\n    }\n\n    /**\n     * Set a remote RTCSessionDescription on the {@link PeerConnectionV2}.\n     * @private\n     * @param {RTCSessionDescriptionInit} description\n     * @returns {Promise<void>}\n     */\n\n  }, {\n    key: '_setRemoteDescription',\n    value: function _setRemoteDescription(description) {\n      var _this13 = this;\n\n      if (description.sdp) {\n        if (!this._isRTCRtpSenderParamsSupported) {\n          description.sdp = this._setBitrateParameters(description.sdp, isFirefox ? 'TIAS' : 'AS', this._encodingParameters.maxAudioBitrate, this._encodingParameters.maxVideoBitrate);\n        }\n        description.sdp = this._setCodecPreferences(description.sdp, this._preferredAudioCodecs, this._preferredVideoCodecs);\n        // NOTE(mroberts): Do this to reduce our MediaStream count in Firefox. By\n        // mapping MediaStream IDs in the SDP to \"-\", we ensure the \"track\" event\n        // doesn't include any new MediaStreams in Firefox. Its `streams` member\n        // will always be the empty Array.\n        if (isFirefox) {\n          description.sdp = filterOutMediaStreamIds(description.sdp);\n        }\n        if (!this._peerConnection.remoteDescription) {\n          this._isIceLite = /a=ice-lite/.test(description.sdp);\n        }\n      }\n      description = new this._RTCSessionDescription(description);\n      // eslint-disable-next-line consistent-return\n      return Promise.resolve().then(function () {\n        // NOTE(syerrapragada): VMS does not support H264 simulcast. So,\n        // unset simulcast for sections in local offer where corresponding\n        // sections in answer doesn't have vp8 as preferred codec and reapply offer.\n        if (description.type === 'answer' && _this13._shouldApplySimulcast) {\n          var sdpWithoutSimulcastForNonVP8MediaSections = _this13._revertSimulcastForNonVP8MediaSections(_this13._localDescription.sdp, _this13._localDescriptionWithoutSimulcast.sdp, description.sdp);\n          if (sdpWithoutSimulcastForNonVP8MediaSections !== _this13._localDescription.sdp) {\n            return _this13._rollbackAndApplyOffer({\n              type: _this13._localDescription.type,\n              sdp: sdpWithoutSimulcastForNonVP8MediaSections\n            });\n          }\n        }\n      }).then(function () {\n        return _this13._peerConnection.setRemoteDescription(description);\n      }).then(function () {\n        if (description.type === 'answer') {\n          if (_this13._isRestartingIce) {\n            _this13._log.debug('An ICE restart was in-progress and is now completed');\n            _this13._isRestartingIce = false;\n          }\n          negotiationCompleted(_this13);\n        }\n      }, function (error) {\n        _this13._log.warn('Calling setRemoteDescription with an RTCSessionDescription of type \"' + description.type + '\" failed with the error \"' + error.message + '\".');\n        if (description.sdp) {\n          _this13._log.warn('The SDP was ' + description.sdp);\n        }\n        throw error;\n      });\n    }\n\n    /**\n     * Update the {@link PeerConnectionV2}'s description.\n     * @private\n     * @param {RTCSessionDescriptionInit} description\n     * @returns {Promise<void>}\n     */\n\n  }, {\n    key: '_updateDescription',\n    value: function _updateDescription(description) {\n      var _this14 = this;\n\n      switch (description.type) {\n        case 'answer':\n        case 'pranswer':\n          if (description.revision !== this._descriptionRevision || this._peerConnection.signalingState !== 'have-local-offer') {\n            return Promise.resolve();\n          }\n          this._descriptionRevision = description.revision;\n          break;\n        case 'close':\n          return this._close();\n        case 'create-offer':\n          if (description.revision <= this._lastStableDescriptionRevision) {\n            return Promise.resolve();\n          } else if (this._needsAnswer) {\n            this._queuedDescription = description;\n            return Promise.resolve();\n          }\n          this._descriptionRevision = description.revision;\n          return this._offer();\n        case 'offer':\n          if (description.revision <= this._lastStableDescriptionRevision || this._peerConnection.signalingState === 'closed') {\n            return Promise.resolve();\n          }\n          if (this._peerConnection.signalingState === 'have-local-offer') {\n            // NOTE(mpatwardhan): For a peer connection\n            // 1) createOffer always generate SDP with `setup:actpass`\n            // 2) when remote description is set `setup:active`  - the answer generated selects the dtls role of setup:passive\n            // 3) when remote description is set `setup:passive` - the answer generated selects the dtls role of setup:active\n            // 4) when remote description is set `setup:actpass` - the answer generated uses the previously negotiated role (if not negotiated previously setup:active is used)\n            // This test shows the  behavior: https://github.com/twilio/twilio-webrtc.js/blob/master/test/integration/spec/rtcpeerconnection.js#L936\n            // with glare handling (if dtls role was not negotiated before ) the generated answer will set setup:active.\n            // we do not want that. lets wait for \"initial negotiation\" before attempting glare handling.\n            if (this._needsAnswer && this._lastStableDescriptionRevision === 0) {\n              this._queuedDescription = description;\n              return Promise.resolve();\n            }\n            this._descriptionRevision = description.revision;\n            return this._handleGlare(description);\n          }\n          this._descriptionRevision = description.revision;\n          return this._answer(description).then(function () {});\n        default:\n        // Do nothing.\n      }\n\n      // Handle answer or pranswer.\n      var revision = description.revision;\n      return Promise.resolve().then(function () {\n        return _this14._setRemoteDescription(description);\n      }).catch(function () {\n        throw new MediaClientRemoteDescFailedError();\n      }).then(function () {\n        _this14._lastStableDescriptionRevision = revision;\n        _this14._needsAnswer = false;\n        return _this14._checkIceBox(description);\n      }).then(function () {\n        return _this14._queuedDescription && _this14._updateDescription(_this14._queuedDescription);\n      }).then(function () {\n        _this14._queuedDescription = null;\n        return _this14._maybeReoffer(_this14._peerConnection.localDescription).then(function () {});\n      });\n    }\n\n    /**\n     * Update the {@link PeerConnectionV2}'s ICE candidates.\n     * @private\n     * @param {object} iceState\n     * @returns {Promise<void>}\n     */\n\n  }, {\n    key: '_updateIce',\n    value: function _updateIce(iceState) {\n      var candidates = this._remoteCandidates.update(iceState);\n      return this._addIceCandidates(candidates);\n    }\n\n    /**\n     * Add a {@link DataTrackSender} to the {@link PeerConnectionV2}.\n     * @param {DataTrackSender} dataTrackSender\n     * @returns {void}\n     */\n\n  }, {\n    key: 'addDataTrackSender',\n    value: function addDataTrackSender(dataTrackSender) {\n      if (this._dataChannels.has(dataTrackSender)) {\n        return;\n      }\n      try {\n        var dataChannelDict = {\n          ordered: dataTrackSender.ordered\n        };\n        if (dataTrackSender.maxPacketLifeTime !== null) {\n          dataChannelDict.maxPacketLifeTime = dataTrackSender.maxPacketLifeTime;\n        }\n        if (dataTrackSender.maxRetransmits !== null) {\n          dataChannelDict.maxRetransmits = dataTrackSender.maxRetransmits;\n        }\n        var dataChannel = this._peerConnection.createDataChannel(dataTrackSender.id, dataChannelDict);\n        dataTrackSender.addDataChannel(dataChannel);\n        this._dataChannels.set(dataTrackSender, dataChannel);\n      } catch (error) {\n        this._log.warn('Error creating an RTCDataChannel for DataTrack \"' + dataTrackSender.id + '\": ' + error.message);\n      }\n    }\n\n    /**\n     * Add the {@link MediaTrackSender} to the {@link PeerConnectionV2}.\n     * @param {MediaTrackSender} mediaTrackSender\n     * @returns {void}\n     */\n\n  }, {\n    key: 'addMediaTrackSender',\n    value: function addMediaTrackSender(mediaTrackSender) {\n      if (this._peerConnection.signalingState === 'closed' || this._rtpSenders.has(mediaTrackSender)) {\n        return;\n      }\n      var sender = void 0;\n      if (this._localMediaStream) {\n        this._localMediaStream.addTrack(mediaTrackSender.track);\n        sender = this._peerConnection.addTrack(mediaTrackSender.track, this._localMediaStream);\n      } else {\n        var transceiver = this._addOrUpdateTransceiver(mediaTrackSender.track);\n        sender = transceiver.sender;\n      }\n      mediaTrackSender.addSender(sender);\n      this._rtpSenders.set(mediaTrackSender, sender);\n    }\n\n    /**\n     * Close the {@link PeerConnectionV2}.\n     * @returns {void}\n     */\n\n  }, {\n    key: 'close',\n    value: function close() {\n      if (this._close()) {\n        this._descriptionRevision++;\n        this._localDescription = { type: 'close' };\n        this.emit('description', this.getState());\n      }\n    }\n\n    /**\n     * Get the {@link DataTrackReceiver}s and the {@link MediaTrackReceivers} on the\n     * {@link PeerConnectionV2}.\n     * @returns {Array<DataTrackReceiver|MediaTrackReceiver>} trackReceivers\n     */\n\n  }, {\n    key: 'getTrackReceivers',\n    value: function getTrackReceivers() {\n      return Array.from(this._dataTrackReceivers).concat(Array.from(this._mediaTrackReceivers));\n    }\n\n    /**\n     * Get the {@link PeerConnectionV2}'s state (specifically, its description).\n     * @returns {?object}\n     */\n\n  }, {\n    key: 'getState',\n    value: function getState() {\n      if (!this._localDescription) {\n        return null;\n      }\n\n      // NOTE(mpatwardhan): Return most recent localDescription. If the most recent local description is an\n      // answer, and this method is called for sending a \"sync\" message while the next remote offer is being processed,\n      // we need to send the most recent stable description revision instead of the current description revision,\n      // which is supposed to be for the next local answer.\n      var localDescriptionRevision = this._localDescription.type === 'answer' ? this._lastStableDescriptionRevision : this._descriptionRevision;\n      var localDescription = {\n        type: this._localDescription.type,\n        revision: localDescriptionRevision\n      };\n      if (this._localDescription.sdp) {\n        localDescription.sdp = this._localDescription.sdp;\n      }\n      return {\n        description: localDescription,\n        id: this.id\n      };\n    }\n\n    /**\n     * Create an offer and set it on the {@link PeerConnectionV2}.\n     * @returns {Promise<void>}\n     */\n\n  }, {\n    key: 'offer',\n    value: function offer() {\n      var _this15 = this;\n\n      if (this._needsAnswer || this._isRestartingIce) {\n        this._shouldOffer = true;\n        return Promise.resolve();\n      }\n\n      return this.bracket('offering', function (key) {\n        _this15.transition('updating', key);\n        var promise = _this15._needsAnswer || _this15._isRestartingIce ? Promise.resolve() : _this15._offer();\n        return promise.then(function () {\n          _this15.tryTransition('open', key);\n        }, function (error) {\n          _this15.tryTransition('open', key);\n          throw error;\n        });\n      });\n    }\n\n    /**\n     * Remove a {@link DataTrackSender} from the {@link PeerConnectionV2}.\n     * @param {DataTrackSender} dataTrackSender\n     * @returns {void}\n     */\n\n  }, {\n    key: 'removeDataTrackSender',\n    value: function removeDataTrackSender(dataTrackSender) {\n      var dataChannel = this._dataChannels.get(dataTrackSender);\n      if (dataChannel) {\n        dataTrackSender.removeDataChannel(dataChannel);\n        this._dataChannels.delete(dataTrackSender);\n        dataChannel.close();\n      }\n    }\n\n    /**\n     * Remove the {@link MediaTrackSender} from the {@link PeerConnectionV2}.\n     * @param {MediaTrackSender} mediaTrackSender\n     * @returns {void}\n     */\n\n  }, {\n    key: 'removeMediaTrackSender',\n    value: function removeMediaTrackSender(mediaTrackSender) {\n      if (this._peerConnection.signalingState === 'closed' || !this._rtpSenders.has(mediaTrackSender)) {\n        return;\n      }\n      var sender = this._rtpSenders.get(mediaTrackSender);\n      this._peerConnection.removeTrack(sender);\n      if (this._localMediaStream) {\n        this._localMediaStream.removeTrack(mediaTrackSender.track);\n      }\n      mediaTrackSender.removeSender(sender);\n      this._rtpSenders.delete(mediaTrackSender);\n    }\n\n    /**\n     * Set the RTCConfiguration on the underlying RTCPeerConnection.\n     * @param {RTCConfiguration} configuration\n     * @returns {void}\n     */\n\n  }, {\n    key: 'setConfiguration',\n    value: function setConfiguration(configuration) {\n      if (typeof this._peerConnection.setConfiguration === 'function') {\n        this._peerConnection.setConfiguration(getConfiguration(configuration));\n      }\n    }\n\n    /**\n     * Set the ICE reconnect timeout period.\n     * @param {number} period - Period in milliseconds.\n     * @returns {this}\n     */\n\n  }, {\n    key: 'setIceReconnectTimeout',\n    value: function setIceReconnectTimeout(period) {\n      this._iceReconnectTimeout.setDelay(period);\n      this._log.debug('Updated ICE reconnection timeout period:', this._iceReconnectTimeout.delay);\n      return this;\n    }\n\n    /**\n     * Update the {@link PeerConnectionV2}.\n     * @param {object} peerConnectionState\n     * @returns {Promise<void>}\n     */\n\n  }, {\n    key: 'update',\n    value: function update(peerConnectionState) {\n      var _this16 = this;\n\n      return this.bracket('updating', function (key) {\n        if (_this16.state === 'closed') {\n          return Promise.resolve();\n        }\n\n        _this16.transition('updating', key);\n\n        var updates = [];\n\n        if (peerConnectionState.ice) {\n          updates.push(_this16._updateIce(peerConnectionState.ice));\n        }\n\n        if (peerConnectionState.description) {\n          updates.push(_this16._updateDescription(peerConnectionState.description));\n        }\n\n        return Promise.all(updates).then(function () {\n          _this16.tryTransition('open', key);\n        }, function (error) {\n          _this16.tryTransition('open', key);\n          throw error;\n        });\n      });\n    }\n\n    /**\n     * Get the {@link PeerConnectionV2}'s media statistics.\n     * @returns {Promise<StandardizedStatsResponse>}\n     */\n\n  }, {\n    key: 'getStats',\n    value: function getStats() {\n      var _this17 = this;\n\n      return getStatistics(this._peerConnection).then(function (response) {\n        return rewriteTrackIds(_this17, response);\n      });\n    }\n  }, {\n    key: 'connectionState',\n    get: function get() {\n      return this.iceConnectionState === 'failed' ? 'failed' : this._peerConnection.connectionState || this.iceConnectionState;\n    }\n\n    /**\n     * The {@link PeerConnectionV2}'s underlying RTCPeerConnection's\n     * RTCIceConnectionState.\n     * @property {RTCIceConnectionState}\n     */\n\n  }, {\n    key: 'iceConnectionState',\n    get: function get() {\n      return this._isIceConnectionInactive && this._peerConnection.iceConnectionState === 'disconnected' || this._iceGatheringFailed ? 'failed' : this._peerConnection.iceConnectionState;\n    }\n\n    /**\n     * Whether the {@link PeerConnectionV2} has negotiated or is in the process\n     * of negotiating the application m= section.\n     * @returns {boolean}\n     */\n\n  }, {\n    key: 'isApplicationSectionNegotiated',\n    get: function get() {\n      if (this._peerConnection.signalingState !== 'closed') {\n        // accessing .localDescription in 'closed' state causes it throw exceptions.\n        return this._peerConnection.localDescription ? getMediaSections(this._peerConnection.localDescription.sdp, 'application').length > 0 : false;\n      }\n      return true;\n    }\n  }]);\n\n  return PeerConnectionV2;\n}(StateMachine);\n\nfunction rewriteLocalTrackId(pcv2, stats) {\n  var trackId = pcv2._getMediaTrackSenderId(stats.trackId);\n  return Object.assign(stats, { trackId: trackId });\n}\n\nfunction rewriteTrackId(pcv2, stats) {\n  var receiver = [].concat(_toConsumableArray(pcv2._mediaTrackReceivers)).find(function (receiver) {\n    return receiver.track.id === stats.trackId;\n  });\n  var trackId = receiver ? receiver.id : null;\n  return Object.assign(stats, { trackId: trackId });\n}\n\nfunction rewriteTrackIds(pcv2, response) {\n  return Object.assign(response, {\n    remoteAudioTrackStats: response.remoteAudioTrackStats.map(function (stats) {\n      return rewriteTrackId(pcv2, stats);\n    }),\n    remoteVideoTrackStats: response.remoteVideoTrackStats.map(function (stats) {\n      return rewriteTrackId(pcv2, stats);\n    }),\n    localAudioTrackStats: response.localAudioTrackStats.map(function (stats) {\n      return rewriteLocalTrackId(pcv2, stats);\n    }),\n    localVideoTrackStats: response.localVideoTrackStats.map(function (stats) {\n      return rewriteLocalTrackId(pcv2, stats);\n    })\n  });\n}\n\n/**\n * @event PeerConnectionV2#candidates\n * @param {object} candidates\n */\n\n/**\n * @event PeerConnectionV2#connectionStateChanged\n */\n\n/**\n * @event PeerConnectionV2#description\n * @param {object} description\n */\n\n/**\n * @event PeerConnectionV2#iceConnectionStateChanged\n */\n\n/**\n * @event PeerConnectionV2#trackAdded\n * @param {DataTrackReceiver|MediaTrackReceiver} trackReceiver\n */\n\nfunction getUfrag(description) {\n  if (description.sdp) {\n    var match = description.sdp.match(/^a=ice-ufrag:([a-zA-Z0-9+/]+)/m);\n    if (match) {\n      return match[1];\n    }\n  }\n  return null;\n}\n\nfunction getConfiguration(configuration) {\n  return Object.assign({\n    bundlePolicy: 'max-bundle',\n    rtcpMuxPolicy: 'require'\n  }, configuration);\n}\n\n/**\n * Whether the MediaStreamTrack of the given RTCRTPSender is a non-ended\n * MediaStreamTrack of a given kind.\n * @private\n * @param {string} kind\n * @param {RTCRtpSender} sender\n * @return {boolean}\n */\nfunction isSenderOfKind(kind, sender) {\n  var track = sender.track;\n  return track && track.kind === kind && track.readyState !== 'ended';\n}\n\n/**\n * Preferred codecs.\n * @typedef {object} PreferredCodecs\n * @property {Array<AudioCodec>} audio\n * @property {Array<VideoCodec>} video\n */\n\nfunction filterOutMediaStreamIds(sdp) {\n  return sdp.replace(/a=msid:[^ ]+ /g, 'a=msid:- ');\n}\n\n/**\n * Whether an RTCRtpTransceiver can be recycled.\n * @param {RTCRtpTransceiver} transceiver\n * @returns {boolean}\n */\nfunction shouldRecycleTransceiver(transceiver, pcv2) {\n  return !transceiver.stopped && !pcv2._replaceTrackPromises.has(transceiver) && (transceiver.currentDirection === 'inactive' || transceiver.currentDirection === 'recvonly' || transceiver.direction === 'recvonly');\n}\n\n/**\n * Take a recycled RTCRtpTransceiver if available.\n * @param {PeerConnectionV2} pcv2\n * @param {Track.Kind} kind\n * @returns {?RTCRtpTransceiver}\n */\nfunction takeRecycledTransceiver(pcv2, kind) {\n  var preferredCodecs = {\n    audio: pcv2._preferredAudioCodecs.map(function (codec) {\n      return codec.toLowerCase();\n    }),\n    video: pcv2._preferredVideoCodecs.map(function (_ref8) {\n      var codec = _ref8.codec;\n      return codec.toLowerCase();\n    })\n  }[kind];\n\n  var recycledTransceivers = pcv2._recycledTransceivers[kind];\n  var localCodec = preferredCodecs.find(function (codec) {\n    return pcv2._localCodecs.has(codec);\n  });\n  if (!localCodec) {\n    return recycledTransceivers.shift();\n  }\n\n  var transceiver = recycledTransceivers.find(function (transceiver) {\n    var remoteCodecMap = pcv2._remoteCodecMaps.get(transceiver.mid);\n    return remoteCodecMap && remoteCodecMap.has(localCodec);\n  });\n\n  if (transceiver) {\n    recycledTransceivers.splice(recycledTransceivers.indexOf(transceiver), 1);\n  }\n  return transceiver;\n}\n\n/**\n * Update the set of locally supported {@link Codec}s.\n * @param pcv2\n * @returns {void}\n */\nfunction updateLocalCodecs(pcv2) {\n  var description = pcv2._peerConnection.localDescription;\n  if (!description) {\n    return;\n  }\n  getMediaSections(description.sdp).forEach(function (section) {\n    var codecMap = createCodecMapForMediaSection(section);\n    codecMap.forEach(function (pts, codec) {\n      return pcv2._localCodecs.add(codec);\n    });\n  });\n}\n\n/**\n * Update the {@link Codec} maps for all m= sections in the remote {@link RTCSessionDescription}s.\n * @param {PeerConnectionV2} pcv2\n * @returns {void}\n */\nfunction updateRemoteCodecMaps(pcv2) {\n  var description = pcv2._peerConnection.remoteDescription;\n  if (!description) {\n    return;\n  }\n  getMediaSections(description.sdp).forEach(function (section) {\n    var mid = section.match(/^a=mid:(.+)$/m)[1];\n    var codecMap = createCodecMapForMediaSection(section);\n    pcv2._remoteCodecMaps.set(mid, codecMap);\n  });\n}\n\n/**\n * Update the list of recycled RTCRtpTransceivers.\n * @param {PeerConnectionV2} pcv2\n */\nfunction updateRecycledTransceivers(pcv2) {\n  pcv2._recycledTransceivers.audio = [];\n  pcv2._recycledTransceivers.video = [];\n  pcv2._peerConnection.getTransceivers().forEach(function (transceiver) {\n    if (shouldRecycleTransceiver(transceiver, pcv2)) {\n      var track = transceiver.receiver.track;\n      pcv2._recycledTransceivers[track.kind].push(transceiver);\n    }\n  });\n}\n\n/**\n * Perform certain updates after an SDP negotiation is completed.\n * @param {PeerConnectionV2} pcv2\n * @returns {void}\n */\nfunction negotiationCompleted(pcv2) {\n  if (pcv2._isUnifiedPlan) {\n    updateRecycledTransceivers(pcv2);\n    updateLocalCodecs(pcv2);\n    updateRemoteCodecMaps(pcv2);\n  }\n  if (pcv2._isRTCRtpSenderParamsSupported) {\n    updateEncodingParameters(pcv2);\n  }\n}\n\n/**\n * Update the RTCRtpEncodingParameters of all active RTCRtpSenders.\n * @param {PeerConnectionV2} pcv2\n * @returns {void}\n */\nfunction updateEncodingParameters(pcv2) {\n  var _pcv2$_encodingParame = pcv2._encodingParameters,\n      maxAudioBitrate = _pcv2$_encodingParame.maxAudioBitrate,\n      maxVideoBitrate = _pcv2$_encodingParame.maxVideoBitrate;\n\n\n  var maxBitrates = new Map([['audio', maxAudioBitrate], ['video', maxVideoBitrate]]);\n\n  pcv2._peerConnection.getSenders().filter(function (sender) {\n    return sender.track;\n  }).forEach(function (sender) {\n    var maxBitrate = maxBitrates.get(sender.track.kind);\n    var params = sender.getParameters();\n\n    if (maxBitrate === null || maxBitrate === 0) {\n      removeMaxBitrate(params);\n    } else if (pcv2._isChromeScreenShareTrack(sender.track)) {\n      // NOTE(mpatwardhan): Sometimes (JSDK-2557) chrome does not send any bytes on screen track if MaxBitRate is set on it via setParameters,\n      // To workaround this issue we will not apply maxBitrate if the track appears to be a screen share track created by chrome\n      pcv2._log.warn('Not setting maxBitrate for ' + sender.track.kind + ' Track ' + sender.track.id + ' because it appears to be screen share track: ' + sender.track.label);\n    } else {\n      setMaxBitrate(params, maxBitrate);\n    }\n\n    if (!isFirefox && pcv2._enableDscp && params.encodings.length > 0) {\n      // NOTE(mmalavalli): \"networkPriority\" is a per-sender property and not\n      // a per-encoding-layer property. So, we set the value only on the first\n      // encoding layer. Any attempt to set the value on subsequent encoding\n      // layers (in the case of simulcast) will result in the Promise returned\n      // by RTCRtpSender.setParameters() being rejected.\n      params.encodings[0].networkPriority = 'high';\n    }\n\n    sender.setParameters(params).catch(function (error) {\n      pcv2._log.warn('Error while setting encodings parameters for ' + sender.track.kind + ' Track ' + sender.track.id + ': ' + (error.message || error.name));\n    });\n  });\n}\n\n/**\n * Remove maxBitrate from the RTCRtpSendParameters' encodings.\n * @param {RTCRtpSendParameters} params\n * @returns {void}\n */\nfunction removeMaxBitrate(params) {\n  if (Array.isArray(params.encodings)) {\n    params.encodings.forEach(function (encoding) {\n      return delete encoding.maxBitrate;\n    });\n  }\n}\n\n/**\n * Set the given maxBitrate in the RTCRtpSendParameters' encodings.\n * @param {RTCRtpSendParameters} params\n * @param {number} maxBitrate\n * @returns {void}\n */\nfunction setMaxBitrate(params, maxBitrate) {\n  if (isFirefox) {\n    params.encodings = [{ maxBitrate: maxBitrate }];\n  } else {\n    params.encodings.forEach(function (encoding) {\n      encoding.maxBitrate = maxBitrate;\n    });\n  }\n}\nmodule.exports = PeerConnectionV2;"]},"metadata":{},"sourceType":"script"}