{"ast":null,"code":"'use strict';\n/* jshint ignore:start */\n\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n\n/* jshint ignore:end */\n\nvar Q = require('q');\n/* jshint ignore:line */\n\n\nvar _ = require('lodash');\n/* jshint ignore:line */\n\n\nvar util = require('util');\n/* jshint ignore:line */\n\n\nvar DocumentPermissionList = require('./document/documentPermission').DocumentPermissionList;\n\nvar Page = require('../../../../base/Page');\n/* jshint ignore:line */\n\n\nvar deserialize = require('../../../../base/deserialize');\n/* jshint ignore:line */\n\n\nvar serialize = require('../../../../base/serialize');\n/* jshint ignore:line */\n\n\nvar values = require('../../../../base/values');\n/* jshint ignore:line */\n\n\nvar DocumentList;\nvar DocumentPage;\nvar DocumentInstance;\nvar DocumentContext;\n/* jshint ignore:start */\n\n/**\n * Initialize the DocumentList\n *\n * @constructor Twilio.Sync.V1.ServiceContext.DocumentList\n *\n * @param {Twilio.Sync.V1} version - Version of the resource\n * @param {string} serviceSid -\n *          The SID of the Sync Service that the resource is associated with\n */\n\n/* jshint ignore:end */\n\nDocumentList = function DocumentList(version, serviceSid) {\n  /* jshint ignore:start */\n\n  /**\n   * @function documents\n   * @memberof Twilio.Sync.V1.ServiceContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Sync.V1.ServiceContext.DocumentContext}\n   */\n\n  /* jshint ignore:end */\n  function DocumentListInstance(sid) {\n    return DocumentListInstance.get(sid);\n  }\n\n  DocumentListInstance._version = version; // Path Solution\n\n  DocumentListInstance._solution = {\n    serviceSid: serviceSid\n  };\n  DocumentListInstance._uri = `/Services/${serviceSid}/Documents`;\n  /* jshint ignore:start */\n\n  /**\n   * create a DocumentInstance\n   *\n   * @function create\n   * @memberof Twilio.Sync.V1.ServiceContext.DocumentList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.uniqueName] -\n   *          An application-defined string that uniquely identifies the Sync Document\n   * @param {object} [opts.data] -\n   *          A JSON string that represents an arbitrary, schema-less object that the Sync Document stores\n   * @param {number} [opts.ttl] -\n   *          How long, in seconds, before the Sync Document expires and is deleted\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed DocumentInstance\n   */\n\n  /* jshint ignore:end */\n\n  DocumentListInstance.create = function create(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'UniqueName': _.get(opts, 'uniqueName'),\n      'Data': serialize.object(_.get(opts, 'data')),\n      'Ttl': _.get(opts, 'ttl')\n    });\n\n    var promise = this._version.create({\n      uri: this._uri,\n      method: 'POST',\n      data: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new DocumentInstance(this._version, payload, this._solution.serviceSid, this._solution.sid));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Streams DocumentInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Sync.V1.ServiceContext.DocumentList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n\n  /* jshint ignore:end */\n\n\n  DocumentListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Lists DocumentInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Sync.V1.ServiceContext.DocumentList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  DocumentListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single page of DocumentInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Sync.V1.ServiceContext.DocumentList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  DocumentListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new DocumentPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single target page of DocumentInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Sync.V1.ServiceContext.DocumentList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  DocumentListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new DocumentPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Constructs a document\n   *\n   * @function get\n   * @memberof Twilio.Sync.V1.ServiceContext.DocumentList#\n   *\n   * @param {string} sid - The SID of the Document resource to fetch\n   *\n   * @returns {Twilio.Sync.V1.ServiceContext.DocumentContext}\n   */\n\n  /* jshint ignore:end */\n\n\n  DocumentListInstance.get = function get(sid) {\n    return new DocumentContext(this._version, this._solution.serviceSid, sid);\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Sync.V1.ServiceContext.DocumentList#\n   *\n   * @returns Object\n   */\n\n  /* jshint ignore:end */\n\n\n  DocumentListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  DocumentListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return DocumentListInstance;\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the DocumentPage\n *\n * @constructor Twilio.Sync.V1.ServiceContext.DocumentPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {DocumentSolution} solution - Path solution\n *\n * @returns DocumentPage\n */\n\n/* jshint ignore:end */\n\n\nDocumentPage = function DocumentPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(DocumentPage.prototype, Page.prototype);\n\nDocumentPage.prototype.constructor = DocumentPage;\n/* jshint ignore:start */\n\n/**\n * Build an instance of DocumentInstance\n *\n * @function getInstance\n * @memberof Twilio.Sync.V1.ServiceContext.DocumentPage#\n *\n * @param {DocumentPayload} payload - Payload response from the API\n *\n * @returns DocumentInstance\n */\n\n/* jshint ignore:end */\n\nDocumentPage.prototype.getInstance = function getInstance(payload) {\n  return new DocumentInstance(this._version, payload, this._solution.serviceSid);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Sync.V1.ServiceContext.DocumentPage#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nDocumentPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nDocumentPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the DocumentContext\n *\n * @constructor Twilio.Sync.V1.ServiceContext.DocumentInstance\n *\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} uniqueName -\n *          An application-defined string that uniquely identifies the resource\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {string} serviceSid -\n *          The SID of the Sync Service that the resource is associated with\n * @property {string} url - The absolute URL of the Document resource\n * @property {string} links - The URLs of resources related to the Sync Document\n * @property {string} revision -\n *          The current revision of the Sync Document, represented by a string identifier\n * @property {object} data -\n *          An arbitrary, schema-less object that the Sync Document stores\n * @property {Date} dateExpires -\n *          The ISO 8601 date and time in GMT when the Sync Document expires\n * @property {Date} dateCreated -\n *          The ISO 8601 date and time in GMT when the resource was created\n * @property {Date} dateUpdated -\n *          The ISO 8601 date and time in GMT when the resource was last updated\n * @property {string} createdBy - The identity of the Sync Document's creator\n *\n * @param {V1} version - Version of the resource\n * @param {DocumentPayload} payload - The instance payload\n * @param {sid} serviceSid -\n *          The SID of the Sync Service that the resource is associated with\n * @param {sid_like} sid - The SID of the Document resource to fetch\n */\n\n/* jshint ignore:end */\n\n\nDocumentInstance = function DocumentInstance(version, payload, serviceSid, sid) {\n  this._version = version; // Marshaled Properties\n\n  this.sid = payload.sid; // jshint ignore:line\n\n  this.uniqueName = payload.unique_name; // jshint ignore:line\n\n  this.accountSid = payload.account_sid; // jshint ignore:line\n\n  this.serviceSid = payload.service_sid; // jshint ignore:line\n\n  this.url = payload.url; // jshint ignore:line\n\n  this.links = payload.links; // jshint ignore:line\n\n  this.revision = payload.revision; // jshint ignore:line\n\n  this.data = payload.data; // jshint ignore:line\n\n  this.dateExpires = deserialize.iso8601DateTime(payload.date_expires); // jshint ignore:line\n\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n\n  this.createdBy = payload.created_by; // jshint ignore:line\n  // Context\n\n  this._context = undefined;\n  this._solution = {\n    serviceSid: serviceSid,\n    sid: sid || this.sid\n  };\n};\n\nObject.defineProperty(DocumentInstance.prototype, '_proxy', {\n  get: function () {\n    if (!this._context) {\n      this._context = new DocumentContext(this._version, this._solution.serviceSid, this._solution.sid);\n    }\n\n    return this._context;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * fetch a DocumentInstance\n *\n * @function fetch\n * @memberof Twilio.Sync.V1.ServiceContext.DocumentInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed DocumentInstance\n */\n\n/* jshint ignore:end */\n\nDocumentInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n/* jshint ignore:start */\n\n/**\n * remove a DocumentInstance\n *\n * @function remove\n * @memberof Twilio.Sync.V1.ServiceContext.DocumentInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed DocumentInstance\n */\n\n/* jshint ignore:end */\n\n\nDocumentInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n/* jshint ignore:start */\n\n/**\n * update a DocumentInstance\n *\n * @function update\n * @memberof Twilio.Sync.V1.ServiceContext.DocumentInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {object} [opts.data] -\n *          A JSON string that represents an arbitrary, schema-less object that the Sync Document stores\n * @param {number} [opts.ttl] -\n *          How long, in seconds, before the Document resource expires and is deleted\n * @param {string} [opts.ifMatch] - The If-Match HTTP request header\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed DocumentInstance\n */\n\n/* jshint ignore:end */\n\n\nDocumentInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n/* jshint ignore:start */\n\n/**\n * Access the documentPermissions\n *\n * @function documentPermissions\n * @memberof Twilio.Sync.V1.ServiceContext.DocumentInstance#\n *\n * @returns {Twilio.Sync.V1.ServiceContext.DocumentContext.DocumentPermissionList}\n */\n\n/* jshint ignore:end */\n\n\nDocumentInstance.prototype.documentPermissions = function documentPermissions() {\n  return this._proxy.documentPermissions;\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Sync.V1.ServiceContext.DocumentInstance#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nDocumentInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nDocumentInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the DocumentContext\n *\n * @constructor Twilio.Sync.V1.ServiceContext.DocumentContext\n *\n * @property {Twilio.Sync.V1.ServiceContext.DocumentContext.DocumentPermissionList} documentPermissions -\n *          documentPermissions resource\n *\n * @param {V1} version - Version of the resource\n * @param {sid_like} serviceSid -\n *          The SID of the Sync Service with the Document resource to fetch\n * @param {sid_like} sid - The SID of the Document resource to fetch\n */\n\n/* jshint ignore:end */\n\n\nDocumentContext = function DocumentContext(version, serviceSid, sid) {\n  this._version = version; // Path Solution\n\n  this._solution = {\n    serviceSid: serviceSid,\n    sid: sid\n  };\n  this._uri = `/Services/${serviceSid}/Documents/${sid}`; // Dependents\n\n  this._documentPermissions = undefined;\n};\n/* jshint ignore:start */\n\n/**\n * fetch a DocumentInstance\n *\n * @function fetch\n * @memberof Twilio.Sync.V1.ServiceContext.DocumentContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed DocumentInstance\n */\n\n/* jshint ignore:end */\n\n\nDocumentContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new DocumentInstance(this._version, payload, this._solution.serviceSid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * remove a DocumentInstance\n *\n * @function remove\n * @memberof Twilio.Sync.V1.ServiceContext.DocumentContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed DocumentInstance\n */\n\n/* jshint ignore:end */\n\n\nDocumentContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.remove({\n    uri: this._uri,\n    method: 'DELETE'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * update a DocumentInstance\n *\n * @function update\n * @memberof Twilio.Sync.V1.ServiceContext.DocumentContext#\n *\n * @param {object} [opts] - Options for request\n * @param {object} [opts.data] -\n *          A JSON string that represents an arbitrary, schema-less object that the Sync Document stores\n * @param {number} [opts.ttl] -\n *          How long, in seconds, before the Document resource expires and is deleted\n * @param {string} [opts.ifMatch] - The If-Match HTTP request header\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed DocumentInstance\n */\n\n/* jshint ignore:end */\n\n\nDocumentContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n\n  opts = opts || {};\n  var deferred = Q.defer();\n  var data = values.of({\n    'Data': serialize.object(_.get(opts, 'data')),\n    'Ttl': _.get(opts, 'ttl')\n  });\n  var headers = values.of({\n    'If-Match': _.get(opts, 'ifMatch')\n  });\n\n  var promise = this._version.update({\n    uri: this._uri,\n    method: 'POST',\n    data: data,\n    headers: headers\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new DocumentInstance(this._version, payload, this._solution.serviceSid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\nObject.defineProperty(DocumentContext.prototype, 'documentPermissions', {\n  get: function () {\n    if (!this._documentPermissions) {\n      this._documentPermissions = new DocumentPermissionList(this._version, this._solution.serviceSid, this._solution.sid);\n    }\n\n    return this._documentPermissions;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Sync.V1.ServiceContext.DocumentContext#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\nDocumentContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nDocumentContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  DocumentList: DocumentList,\n  DocumentPage: DocumentPage,\n  DocumentInstance: DocumentInstance,\n  DocumentContext: DocumentContext\n};","map":{"version":3,"sources":["/Users/tony_niu/Visual Studio/Twilio/twilio-video-starter-kit/node_modules/twilio/lib/rest/sync/v1/service/document.js"],"names":["Q","require","_","util","DocumentPermissionList","Page","deserialize","serialize","values","DocumentList","DocumentPage","DocumentInstance","DocumentContext","version","serviceSid","DocumentListInstance","sid","get","_version","_solution","_uri","create","opts","callback","isFunction","deferred","defer","data","of","object","promise","uri","method","then","payload","resolve","bind","catch","error","reject","nodeify","each","isUndefined","Error","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","fetchNextPage","fn","page","instances","instance","nextPage","merge","list","allResources","resource","push","length","pageToken","pageNumber","params","getPage","targetUrl","_domain","twilio","request","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","uniqueName","unique_name","accountSid","account_sid","service_sid","url","links","revision","dateExpires","iso8601DateTime","date_expires","dateCreated","date_created","dateUpdated","date_updated","createdBy","created_by","_context","undefined","Object","defineProperty","fetch","_proxy","remove","update","documentPermissions","_documentPermissions","headers","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar DocumentPermissionList = require(\n    './document/documentPermission').DocumentPermissionList;\nvar Page = require('../../../../base/Page');  /* jshint ignore:line */\nvar deserialize = require(\n    '../../../../base/deserialize');  /* jshint ignore:line */\nvar serialize = require('../../../../base/serialize');  /* jshint ignore:line */\nvar values = require('../../../../base/values');  /* jshint ignore:line */\n\nvar DocumentList;\nvar DocumentPage;\nvar DocumentInstance;\nvar DocumentContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the DocumentList\n *\n * @constructor Twilio.Sync.V1.ServiceContext.DocumentList\n *\n * @param {Twilio.Sync.V1} version - Version of the resource\n * @param {string} serviceSid -\n *          The SID of the Sync Service that the resource is associated with\n */\n/* jshint ignore:end */\nDocumentList = function DocumentList(version, serviceSid) {\n  /* jshint ignore:start */\n  /**\n   * @function documents\n   * @memberof Twilio.Sync.V1.ServiceContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Sync.V1.ServiceContext.DocumentContext}\n   */\n  /* jshint ignore:end */\n  function DocumentListInstance(sid) {\n    return DocumentListInstance.get(sid);\n  }\n\n  DocumentListInstance._version = version;\n  // Path Solution\n  DocumentListInstance._solution = {serviceSid: serviceSid};\n  DocumentListInstance._uri = `/Services/${serviceSid}/Documents`;\n  /* jshint ignore:start */\n  /**\n   * create a DocumentInstance\n   *\n   * @function create\n   * @memberof Twilio.Sync.V1.ServiceContext.DocumentList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.uniqueName] -\n   *          An application-defined string that uniquely identifies the Sync Document\n   * @param {object} [opts.data] -\n   *          A JSON string that represents an arbitrary, schema-less object that the Sync Document stores\n   * @param {number} [opts.ttl] -\n   *          How long, in seconds, before the Sync Document expires and is deleted\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed DocumentInstance\n   */\n  /* jshint ignore:end */\n  DocumentListInstance.create = function create(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'UniqueName': _.get(opts, 'uniqueName'),\n      'Data': serialize.object(_.get(opts, 'data')),\n      'Ttl': _.get(opts, 'ttl')\n    });\n\n    var promise = this._version.create({uri: this._uri, method: 'POST', data: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new DocumentInstance(\n        this._version,\n        payload,\n        this._solution.serviceSid,\n        this._solution.sid\n      ));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Streams DocumentInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Sync.V1.ServiceContext.DocumentList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  DocumentListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists DocumentInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Sync.V1.ServiceContext.DocumentList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  DocumentListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of DocumentInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Sync.V1.ServiceContext.DocumentList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  DocumentListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new DocumentPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of DocumentInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Sync.V1.ServiceContext.DocumentList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  DocumentListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new DocumentPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a document\n   *\n   * @function get\n   * @memberof Twilio.Sync.V1.ServiceContext.DocumentList#\n   *\n   * @param {string} sid - The SID of the Document resource to fetch\n   *\n   * @returns {Twilio.Sync.V1.ServiceContext.DocumentContext}\n   */\n  /* jshint ignore:end */\n  DocumentListInstance.get = function get(sid) {\n    return new DocumentContext(this._version, this._solution.serviceSid, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Sync.V1.ServiceContext.DocumentList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  DocumentListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  DocumentListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return DocumentListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the DocumentPage\n *\n * @constructor Twilio.Sync.V1.ServiceContext.DocumentPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {DocumentSolution} solution - Path solution\n *\n * @returns DocumentPage\n */\n/* jshint ignore:end */\nDocumentPage = function DocumentPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(DocumentPage.prototype, Page.prototype);\nDocumentPage.prototype.constructor = DocumentPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of DocumentInstance\n *\n * @function getInstance\n * @memberof Twilio.Sync.V1.ServiceContext.DocumentPage#\n *\n * @param {DocumentPayload} payload - Payload response from the API\n *\n * @returns DocumentInstance\n */\n/* jshint ignore:end */\nDocumentPage.prototype.getInstance = function getInstance(payload) {\n  return new DocumentInstance(this._version, payload, this._solution.serviceSid);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Sync.V1.ServiceContext.DocumentPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nDocumentPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nDocumentPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the DocumentContext\n *\n * @constructor Twilio.Sync.V1.ServiceContext.DocumentInstance\n *\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} uniqueName -\n *          An application-defined string that uniquely identifies the resource\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {string} serviceSid -\n *          The SID of the Sync Service that the resource is associated with\n * @property {string} url - The absolute URL of the Document resource\n * @property {string} links - The URLs of resources related to the Sync Document\n * @property {string} revision -\n *          The current revision of the Sync Document, represented by a string identifier\n * @property {object} data -\n *          An arbitrary, schema-less object that the Sync Document stores\n * @property {Date} dateExpires -\n *          The ISO 8601 date and time in GMT when the Sync Document expires\n * @property {Date} dateCreated -\n *          The ISO 8601 date and time in GMT when the resource was created\n * @property {Date} dateUpdated -\n *          The ISO 8601 date and time in GMT when the resource was last updated\n * @property {string} createdBy - The identity of the Sync Document's creator\n *\n * @param {V1} version - Version of the resource\n * @param {DocumentPayload} payload - The instance payload\n * @param {sid} serviceSid -\n *          The SID of the Sync Service that the resource is associated with\n * @param {sid_like} sid - The SID of the Document resource to fetch\n */\n/* jshint ignore:end */\nDocumentInstance = function DocumentInstance(version, payload, serviceSid, sid)\n                                              {\n  this._version = version;\n\n  // Marshaled Properties\n  this.sid = payload.sid; // jshint ignore:line\n  this.uniqueName = payload.unique_name; // jshint ignore:line\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.serviceSid = payload.service_sid; // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n  this.links = payload.links; // jshint ignore:line\n  this.revision = payload.revision; // jshint ignore:line\n  this.data = payload.data; // jshint ignore:line\n  this.dateExpires = deserialize.iso8601DateTime(payload.date_expires); // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n  this.createdBy = payload.created_by; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {serviceSid: serviceSid, sid: sid || this.sid, };\n};\n\nObject.defineProperty(DocumentInstance.prototype,\n  '_proxy', {\n    get: function() {\n      if (!this._context) {\n        this._context = new DocumentContext(this._version, this._solution.serviceSid, this._solution.sid);\n      }\n\n      return this._context;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a DocumentInstance\n *\n * @function fetch\n * @memberof Twilio.Sync.V1.ServiceContext.DocumentInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed DocumentInstance\n */\n/* jshint ignore:end */\nDocumentInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * remove a DocumentInstance\n *\n * @function remove\n * @memberof Twilio.Sync.V1.ServiceContext.DocumentInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed DocumentInstance\n */\n/* jshint ignore:end */\nDocumentInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n\n/* jshint ignore:start */\n/**\n * update a DocumentInstance\n *\n * @function update\n * @memberof Twilio.Sync.V1.ServiceContext.DocumentInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {object} [opts.data] -\n *          A JSON string that represents an arbitrary, schema-less object that the Sync Document stores\n * @param {number} [opts.ttl] -\n *          How long, in seconds, before the Document resource expires and is deleted\n * @param {string} [opts.ifMatch] - The If-Match HTTP request header\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed DocumentInstance\n */\n/* jshint ignore:end */\nDocumentInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * Access the documentPermissions\n *\n * @function documentPermissions\n * @memberof Twilio.Sync.V1.ServiceContext.DocumentInstance#\n *\n * @returns {Twilio.Sync.V1.ServiceContext.DocumentContext.DocumentPermissionList}\n */\n/* jshint ignore:end */\nDocumentInstance.prototype.documentPermissions = function documentPermissions()\n    {\n  return this._proxy.documentPermissions;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Sync.V1.ServiceContext.DocumentInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nDocumentInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nDocumentInstance.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the DocumentContext\n *\n * @constructor Twilio.Sync.V1.ServiceContext.DocumentContext\n *\n * @property {Twilio.Sync.V1.ServiceContext.DocumentContext.DocumentPermissionList} documentPermissions -\n *          documentPermissions resource\n *\n * @param {V1} version - Version of the resource\n * @param {sid_like} serviceSid -\n *          The SID of the Sync Service with the Document resource to fetch\n * @param {sid_like} sid - The SID of the Document resource to fetch\n */\n/* jshint ignore:end */\nDocumentContext = function DocumentContext(version, serviceSid, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {serviceSid: serviceSid, sid: sid, };\n  this._uri = `/Services/${serviceSid}/Documents/${sid}`;\n\n  // Dependents\n  this._documentPermissions = undefined;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a DocumentInstance\n *\n * @function fetch\n * @memberof Twilio.Sync.V1.ServiceContext.DocumentContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed DocumentInstance\n */\n/* jshint ignore:end */\nDocumentContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({uri: this._uri, method: 'GET'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new DocumentInstance(\n      this._version,\n      payload,\n      this._solution.serviceSid,\n      this._solution.sid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * remove a DocumentInstance\n *\n * @function remove\n * @memberof Twilio.Sync.V1.ServiceContext.DocumentContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed DocumentInstance\n */\n/* jshint ignore:end */\nDocumentContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.remove({uri: this._uri, method: 'DELETE'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * update a DocumentInstance\n *\n * @function update\n * @memberof Twilio.Sync.V1.ServiceContext.DocumentContext#\n *\n * @param {object} [opts] - Options for request\n * @param {object} [opts.data] -\n *          A JSON string that represents an arbitrary, schema-less object that the Sync Document stores\n * @param {number} [opts.ttl] -\n *          How long, in seconds, before the Document resource expires and is deleted\n * @param {string} [opts.ifMatch] - The If-Match HTTP request header\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed DocumentInstance\n */\n/* jshint ignore:end */\nDocumentContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n  opts = opts || {};\n\n  var deferred = Q.defer();\n  var data = values.of({'Data': serialize.object(_.get(opts, 'data')), 'Ttl': _.get(opts, 'ttl')});\n  var headers = values.of({'If-Match': _.get(opts, 'ifMatch')});\n\n  var promise = this._version.update({uri: this._uri, method: 'POST', data: data, headers: headers});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new DocumentInstance(\n      this._version,\n      payload,\n      this._solution.serviceSid,\n      this._solution.sid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\nObject.defineProperty(DocumentContext.prototype,\n  'documentPermissions', {\n    get: function() {\n      if (!this._documentPermissions) {\n        this._documentPermissions = new DocumentPermissionList(\n          this._version,\n          this._solution.serviceSid,\n          this._solution.sid\n        );\n      }\n      return this._documentPermissions;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Sync.V1.ServiceContext.DocumentContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nDocumentContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nDocumentContext.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  DocumentList: DocumentList,\n  DocumentPage: DocumentPage,\n  DocumentInstance: DocumentInstance,\n  DocumentContext: DocumentContext\n};\n"]},"metadata":{},"sourceType":"script"}