{"ast":null,"code":"'use strict';\n/* jshint ignore:start */\n\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n\n/* jshint ignore:end */\n\nvar Q = require('q');\n/* jshint ignore:line */\n\n\nvar _ = require('lodash');\n/* jshint ignore:line */\n\n\nvar util = require('util');\n/* jshint ignore:line */\n\n\nvar Page = require('../../../../base/Page');\n/* jshint ignore:line */\n\n\nvar deserialize = require('../../../../base/deserialize');\n/* jshint ignore:line */\n\n\nvar values = require('../../../../base/values');\n/* jshint ignore:line */\n\n\nvar FaxMediaList;\nvar FaxMediaPage;\nvar FaxMediaInstance;\nvar FaxMediaContext;\n/* jshint ignore:start */\n\n/**\n * Initialize the FaxMediaList\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Fax.V1.FaxContext.FaxMediaList\n *\n * @param {Twilio.Fax.V1} version - Version of the resource\n * @param {string} faxSid -\n *          The SID of the fax the FaxMedia resource is associated with\n */\n\n/* jshint ignore:end */\n\nFaxMediaList = function FaxMediaList(version, faxSid) {\n  /* jshint ignore:start */\n\n  /**\n   * @function media\n   * @memberof Twilio.Fax.V1.FaxContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Fax.V1.FaxContext.FaxMediaContext}\n   */\n\n  /* jshint ignore:end */\n  function FaxMediaListInstance(sid) {\n    return FaxMediaListInstance.get(sid);\n  }\n\n  FaxMediaListInstance._version = version; // Path Solution\n\n  FaxMediaListInstance._solution = {\n    faxSid: faxSid\n  };\n  FaxMediaListInstance._uri = `/Faxes/${faxSid}/Media`;\n  /* jshint ignore:start */\n\n  /**\n   * Streams FaxMediaInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Fax.V1.FaxContext.FaxMediaList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n\n  /* jshint ignore:end */\n\n  FaxMediaListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Lists FaxMediaInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Fax.V1.FaxContext.FaxMediaList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  FaxMediaListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single page of FaxMediaInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Fax.V1.FaxContext.FaxMediaList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  FaxMediaListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new FaxMediaPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single target page of FaxMediaInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Fax.V1.FaxContext.FaxMediaList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  FaxMediaListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new FaxMediaPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Constructs a fax_media\n   *\n   * @function get\n   * @memberof Twilio.Fax.V1.FaxContext.FaxMediaList#\n   *\n   * @param {string} sid - The unique string that identifies the resource to fetch\n   *\n   * @returns {Twilio.Fax.V1.FaxContext.FaxMediaContext}\n   */\n\n  /* jshint ignore:end */\n\n\n  FaxMediaListInstance.get = function get(sid) {\n    return new FaxMediaContext(this._version, this._solution.faxSid, sid);\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Fax.V1.FaxContext.FaxMediaList#\n   *\n   * @returns Object\n   */\n\n  /* jshint ignore:end */\n\n\n  FaxMediaListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  FaxMediaListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return FaxMediaListInstance;\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the FaxMediaPage\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Fax.V1.FaxContext.FaxMediaPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {FaxMediaSolution} solution - Path solution\n *\n * @returns FaxMediaPage\n */\n\n/* jshint ignore:end */\n\n\nFaxMediaPage = function FaxMediaPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(FaxMediaPage.prototype, Page.prototype);\n\nFaxMediaPage.prototype.constructor = FaxMediaPage;\n/* jshint ignore:start */\n\n/**\n * Build an instance of FaxMediaInstance\n *\n * @function getInstance\n * @memberof Twilio.Fax.V1.FaxContext.FaxMediaPage#\n *\n * @param {FaxMediaPayload} payload - Payload response from the API\n *\n * @returns FaxMediaInstance\n */\n\n/* jshint ignore:end */\n\nFaxMediaPage.prototype.getInstance = function getInstance(payload) {\n  return new FaxMediaInstance(this._version, payload, this._solution.faxSid);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Fax.V1.FaxContext.FaxMediaPage#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nFaxMediaPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nFaxMediaPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the FaxMediaContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Fax.V1.FaxContext.FaxMediaInstance\n *\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {string} faxSid -\n *          The SID of the fax the FaxMedia resource is associated with\n * @property {string} contentType - The content type of the stored fax media\n * @property {Date} dateCreated -\n *          The ISO 8601 date and time in GMT when the resource was created\n * @property {Date} dateUpdated -\n *          The ISO 8601 date and time in GMT when the resource was last updated\n * @property {string} url - The absolute URL of the FaxMedia resource\n *\n * @param {V1} version - Version of the resource\n * @param {FaxMediaPayload} payload - The instance payload\n * @param {sid} faxSid -\n *          The SID of the fax the FaxMedia resource is associated with\n * @param {sid} sid - The unique string that identifies the resource to fetch\n */\n\n/* jshint ignore:end */\n\n\nFaxMediaInstance = function FaxMediaInstance(version, payload, faxSid, sid) {\n  this._version = version; // Marshaled Properties\n\n  this.sid = payload.sid; // jshint ignore:line\n\n  this.accountSid = payload.account_sid; // jshint ignore:line\n\n  this.faxSid = payload.fax_sid; // jshint ignore:line\n\n  this.contentType = payload.content_type; // jshint ignore:line\n\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n\n  this.url = payload.url; // jshint ignore:line\n  // Context\n\n  this._context = undefined;\n  this._solution = {\n    faxSid: faxSid,\n    sid: sid || this.sid\n  };\n};\n\nObject.defineProperty(FaxMediaInstance.prototype, '_proxy', {\n  get: function () {\n    if (!this._context) {\n      this._context = new FaxMediaContext(this._version, this._solution.faxSid, this._solution.sid);\n    }\n\n    return this._context;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * fetch a FaxMediaInstance\n *\n * @function fetch\n * @memberof Twilio.Fax.V1.FaxContext.FaxMediaInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed FaxMediaInstance\n */\n\n/* jshint ignore:end */\n\nFaxMediaInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n/* jshint ignore:start */\n\n/**\n * remove a FaxMediaInstance\n *\n * @function remove\n * @memberof Twilio.Fax.V1.FaxContext.FaxMediaInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed FaxMediaInstance\n */\n\n/* jshint ignore:end */\n\n\nFaxMediaInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Fax.V1.FaxContext.FaxMediaInstance#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nFaxMediaInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nFaxMediaInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the FaxMediaContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Fax.V1.FaxContext.FaxMediaContext\n *\n * @param {V1} version - Version of the resource\n * @param {sid} faxSid - The SID of the fax with the FaxMedia resource to fetch\n * @param {sid} sid - The unique string that identifies the resource to fetch\n */\n\n/* jshint ignore:end */\n\n\nFaxMediaContext = function FaxMediaContext(version, faxSid, sid) {\n  this._version = version; // Path Solution\n\n  this._solution = {\n    faxSid: faxSid,\n    sid: sid\n  };\n  this._uri = `/Faxes/${faxSid}/Media/${sid}`;\n};\n/* jshint ignore:start */\n\n/**\n * fetch a FaxMediaInstance\n *\n * @function fetch\n * @memberof Twilio.Fax.V1.FaxContext.FaxMediaContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed FaxMediaInstance\n */\n\n/* jshint ignore:end */\n\n\nFaxMediaContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new FaxMediaInstance(this._version, payload, this._solution.faxSid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * remove a FaxMediaInstance\n *\n * @function remove\n * @memberof Twilio.Fax.V1.FaxContext.FaxMediaContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed FaxMediaInstance\n */\n\n/* jshint ignore:end */\n\n\nFaxMediaContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.remove({\n    uri: this._uri,\n    method: 'DELETE'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Fax.V1.FaxContext.FaxMediaContext#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nFaxMediaContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nFaxMediaContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  FaxMediaList: FaxMediaList,\n  FaxMediaPage: FaxMediaPage,\n  FaxMediaInstance: FaxMediaInstance,\n  FaxMediaContext: FaxMediaContext\n};","map":{"version":3,"sources":["/Users/tony_niu/Visual Studio/Twilio/twilio-video-starter-kit/node_modules/twilio/lib/rest/fax/v1/fax/faxMedia.js"],"names":["Q","require","_","util","Page","deserialize","values","FaxMediaList","FaxMediaPage","FaxMediaInstance","FaxMediaContext","version","faxSid","FaxMediaListInstance","sid","get","_version","_solution","_uri","each","opts","callback","isFunction","isUndefined","Error","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","error","fetchNextPage","fn","promise","then","page","instances","instance","bind","nextPage","catch","merge","list","deferred","defer","allResources","resource","push","length","resolve","reject","nodeify","data","of","pageToken","pageNumber","uri","method","params","payload","getPage","targetUrl","_domain","twilio","request","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","accountSid","account_sid","fax_sid","contentType","content_type","dateCreated","iso8601DateTime","date_created","dateUpdated","date_updated","url","_context","undefined","Object","defineProperty","fetch","_proxy","remove","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar Page = require('../../../../base/Page');  /* jshint ignore:line */\nvar deserialize = require(\n    '../../../../base/deserialize');  /* jshint ignore:line */\nvar values = require('../../../../base/values');  /* jshint ignore:line */\n\nvar FaxMediaList;\nvar FaxMediaPage;\nvar FaxMediaInstance;\nvar FaxMediaContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the FaxMediaList\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Fax.V1.FaxContext.FaxMediaList\n *\n * @param {Twilio.Fax.V1} version - Version of the resource\n * @param {string} faxSid -\n *          The SID of the fax the FaxMedia resource is associated with\n */\n/* jshint ignore:end */\nFaxMediaList = function FaxMediaList(version, faxSid) {\n  /* jshint ignore:start */\n  /**\n   * @function media\n   * @memberof Twilio.Fax.V1.FaxContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Fax.V1.FaxContext.FaxMediaContext}\n   */\n  /* jshint ignore:end */\n  function FaxMediaListInstance(sid) {\n    return FaxMediaListInstance.get(sid);\n  }\n\n  FaxMediaListInstance._version = version;\n  // Path Solution\n  FaxMediaListInstance._solution = {faxSid: faxSid};\n  FaxMediaListInstance._uri = `/Faxes/${faxSid}/Media`;\n  /* jshint ignore:start */\n  /**\n   * Streams FaxMediaInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Fax.V1.FaxContext.FaxMediaList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  FaxMediaListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists FaxMediaInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Fax.V1.FaxContext.FaxMediaList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  FaxMediaListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of FaxMediaInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Fax.V1.FaxContext.FaxMediaList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  FaxMediaListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new FaxMediaPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of FaxMediaInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Fax.V1.FaxContext.FaxMediaList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  FaxMediaListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new FaxMediaPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a fax_media\n   *\n   * @function get\n   * @memberof Twilio.Fax.V1.FaxContext.FaxMediaList#\n   *\n   * @param {string} sid - The unique string that identifies the resource to fetch\n   *\n   * @returns {Twilio.Fax.V1.FaxContext.FaxMediaContext}\n   */\n  /* jshint ignore:end */\n  FaxMediaListInstance.get = function get(sid) {\n    return new FaxMediaContext(this._version, this._solution.faxSid, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Fax.V1.FaxContext.FaxMediaList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  FaxMediaListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  FaxMediaListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return FaxMediaListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the FaxMediaPage\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Fax.V1.FaxContext.FaxMediaPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {FaxMediaSolution} solution - Path solution\n *\n * @returns FaxMediaPage\n */\n/* jshint ignore:end */\nFaxMediaPage = function FaxMediaPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(FaxMediaPage.prototype, Page.prototype);\nFaxMediaPage.prototype.constructor = FaxMediaPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of FaxMediaInstance\n *\n * @function getInstance\n * @memberof Twilio.Fax.V1.FaxContext.FaxMediaPage#\n *\n * @param {FaxMediaPayload} payload - Payload response from the API\n *\n * @returns FaxMediaInstance\n */\n/* jshint ignore:end */\nFaxMediaPage.prototype.getInstance = function getInstance(payload) {\n  return new FaxMediaInstance(this._version, payload, this._solution.faxSid);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Fax.V1.FaxContext.FaxMediaPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nFaxMediaPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nFaxMediaPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the FaxMediaContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Fax.V1.FaxContext.FaxMediaInstance\n *\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {string} faxSid -\n *          The SID of the fax the FaxMedia resource is associated with\n * @property {string} contentType - The content type of the stored fax media\n * @property {Date} dateCreated -\n *          The ISO 8601 date and time in GMT when the resource was created\n * @property {Date} dateUpdated -\n *          The ISO 8601 date and time in GMT when the resource was last updated\n * @property {string} url - The absolute URL of the FaxMedia resource\n *\n * @param {V1} version - Version of the resource\n * @param {FaxMediaPayload} payload - The instance payload\n * @param {sid} faxSid -\n *          The SID of the fax the FaxMedia resource is associated with\n * @param {sid} sid - The unique string that identifies the resource to fetch\n */\n/* jshint ignore:end */\nFaxMediaInstance = function FaxMediaInstance(version, payload, faxSid, sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.sid = payload.sid; // jshint ignore:line\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.faxSid = payload.fax_sid; // jshint ignore:line\n  this.contentType = payload.content_type; // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {faxSid: faxSid, sid: sid || this.sid, };\n};\n\nObject.defineProperty(FaxMediaInstance.prototype,\n  '_proxy', {\n    get: function() {\n      if (!this._context) {\n        this._context = new FaxMediaContext(this._version, this._solution.faxSid, this._solution.sid);\n      }\n\n      return this._context;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a FaxMediaInstance\n *\n * @function fetch\n * @memberof Twilio.Fax.V1.FaxContext.FaxMediaInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed FaxMediaInstance\n */\n/* jshint ignore:end */\nFaxMediaInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * remove a FaxMediaInstance\n *\n * @function remove\n * @memberof Twilio.Fax.V1.FaxContext.FaxMediaInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed FaxMediaInstance\n */\n/* jshint ignore:end */\nFaxMediaInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Fax.V1.FaxContext.FaxMediaInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nFaxMediaInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nFaxMediaInstance.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the FaxMediaContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Fax.V1.FaxContext.FaxMediaContext\n *\n * @param {V1} version - Version of the resource\n * @param {sid} faxSid - The SID of the fax with the FaxMedia resource to fetch\n * @param {sid} sid - The unique string that identifies the resource to fetch\n */\n/* jshint ignore:end */\nFaxMediaContext = function FaxMediaContext(version, faxSid, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {faxSid: faxSid, sid: sid, };\n  this._uri = `/Faxes/${faxSid}/Media/${sid}`;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a FaxMediaInstance\n *\n * @function fetch\n * @memberof Twilio.Fax.V1.FaxContext.FaxMediaContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed FaxMediaInstance\n */\n/* jshint ignore:end */\nFaxMediaContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({uri: this._uri, method: 'GET'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new FaxMediaInstance(\n      this._version,\n      payload,\n      this._solution.faxSid,\n      this._solution.sid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * remove a FaxMediaInstance\n *\n * @function remove\n * @memberof Twilio.Fax.V1.FaxContext.FaxMediaContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed FaxMediaInstance\n */\n/* jshint ignore:end */\nFaxMediaContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.remove({uri: this._uri, method: 'DELETE'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Fax.V1.FaxContext.FaxMediaContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nFaxMediaContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nFaxMediaContext.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  FaxMediaList: FaxMediaList,\n  FaxMediaPage: FaxMediaPage,\n  FaxMediaInstance: FaxMediaInstance,\n  FaxMediaContext: FaxMediaContext\n};\n"]},"metadata":{},"sourceType":"script"}