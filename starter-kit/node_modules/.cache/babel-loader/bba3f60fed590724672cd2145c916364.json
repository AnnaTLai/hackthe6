{"ast":null,"code":"'use strict';\n/* jshint ignore:start */\n\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n\n/* jshint ignore:end */\n\nvar Q = require('q');\n/* jshint ignore:line */\n\n\nvar _ = require('lodash');\n/* jshint ignore:line */\n\n\nvar util = require('util');\n/* jshint ignore:line */\n\n\nvar Page = require('../../../base/Page');\n/* jshint ignore:line */\n\n\nvar deserialize = require('../../../base/deserialize');\n/* jshint ignore:line */\n\n\nvar serialize = require('../../../base/serialize');\n/* jshint ignore:line */\n\n\nvar values = require('../../../base/values');\n/* jshint ignore:line */\n\n\nvar CompositionHookList;\nvar CompositionHookPage;\nvar CompositionHookInstance;\nvar CompositionHookContext;\n/* jshint ignore:start */\n\n/**\n * Initialize the CompositionHookList\n *\n * @constructor Twilio.Video.V1.CompositionHookList\n *\n * @param {Twilio.Video.V1} version - Version of the resource\n */\n\n/* jshint ignore:end */\n\nCompositionHookList = function CompositionHookList(version) {\n  /* jshint ignore:start */\n\n  /**\n   * @function compositionHooks\n   * @memberof Twilio.Video.V1#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Video.V1.CompositionHookContext}\n   */\n\n  /* jshint ignore:end */\n  function CompositionHookListInstance(sid) {\n    return CompositionHookListInstance.get(sid);\n  }\n\n  CompositionHookListInstance._version = version; // Path Solution\n\n  CompositionHookListInstance._solution = {};\n  CompositionHookListInstance._uri = `/CompositionHooks`;\n  /* jshint ignore:start */\n\n  /**\n   * Streams CompositionHookInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Video.V1.CompositionHookList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {boolean} [opts.enabled] -\n   *          Read only CompositionHook resources with an enabled value that matches this parameter\n   * @param {Date} [opts.dateCreatedAfter] -\n   *          Read only CompositionHook resources created on or after this ISO 8601 datetime with time zone\n   * @param {Date} [opts.dateCreatedBefore] -\n   *          Read only CompositionHook resources created before this ISO 8601 datetime with time zone\n   * @param {string} [opts.friendlyName] -\n   *          Read only CompositionHook resources with friendly names that match this string\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n\n  /* jshint ignore:end */\n\n  CompositionHookListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Lists CompositionHookInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Video.V1.CompositionHookList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {boolean} [opts.enabled] -\n   *          Read only CompositionHook resources with an enabled value that matches this parameter\n   * @param {Date} [opts.dateCreatedAfter] -\n   *          Read only CompositionHook resources created on or after this ISO 8601 datetime with time zone\n   * @param {Date} [opts.dateCreatedBefore] -\n   *          Read only CompositionHook resources created before this ISO 8601 datetime with time zone\n   * @param {string} [opts.friendlyName] -\n   *          Read only CompositionHook resources with friendly names that match this string\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  CompositionHookListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single page of CompositionHookInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Video.V1.CompositionHookList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {boolean} [opts.enabled] -\n   *          Read only CompositionHook resources with an enabled value that matches this parameter\n   * @param {Date} [opts.dateCreatedAfter] -\n   *          Read only CompositionHook resources created on or after this ISO 8601 datetime with time zone\n   * @param {Date} [opts.dateCreatedBefore] -\n   *          Read only CompositionHook resources created before this ISO 8601 datetime with time zone\n   * @param {string} [opts.friendlyName] -\n   *          Read only CompositionHook resources with friendly names that match this string\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  CompositionHookListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'Enabled': serialize.bool(_.get(opts, 'enabled')),\n      'DateCreatedAfter': serialize.iso8601DateTime(_.get(opts, 'dateCreatedAfter')),\n      'DateCreatedBefore': serialize.iso8601DateTime(_.get(opts, 'dateCreatedBefore')),\n      'FriendlyName': _.get(opts, 'friendlyName'),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new CompositionHookPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single target page of CompositionHookInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Video.V1.CompositionHookList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  CompositionHookListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new CompositionHookPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * create a CompositionHookInstance\n   *\n   * @function create\n   * @memberof Twilio.Video.V1.CompositionHookList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.friendlyName - A unique string to describe the resource\n   * @param {boolean} [opts.enabled] - Whether the composition hook is active\n   * @param {object} [opts.videoLayout] -\n   *          An object that describes the video layout of the composition hook\n   * @param {string|list} [opts.audioSources] -\n   *          An array of track names from the same group room to merge\n   * @param {string|list} [opts.audioSourcesExcluded] -\n   *          An array of track names to exclude\n   * @param {string} [opts.resolution] -\n   *          A string that describes the rows (width) and columns (height) of the generated composed video in pixels\n   * @param {composition_hook.format} [opts.format] -\n   *          The container format of the media files used by the compositions created by the composition hook\n   * @param {string} [opts.statusCallback] -\n   *          The URL we should call to send status information to your application\n   * @param {string} [opts.statusCallbackMethod] -\n   *          The HTTP method we should use to call status_callback\n   * @param {boolean} [opts.trim] -\n   *          Whether to clip the intervals where there is no active media in the Compositions triggered by the composition hook\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed CompositionHookInstance\n   */\n\n  /* jshint ignore:end */\n\n\n  CompositionHookListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n\n    if (_.isUndefined(opts.friendlyName)) {\n      throw new Error('Required parameter \"opts.friendlyName\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'FriendlyName': _.get(opts, 'friendlyName'),\n      'Enabled': serialize.bool(_.get(opts, 'enabled')),\n      'VideoLayout': serialize.object(_.get(opts, 'videoLayout')),\n      'AudioSources': serialize.map(_.get(opts, 'audioSources'), function (e) {\n        return e;\n      }),\n      'AudioSourcesExcluded': serialize.map(_.get(opts, 'audioSourcesExcluded'), function (e) {\n        return e;\n      }),\n      'Resolution': _.get(opts, 'resolution'),\n      'Format': _.get(opts, 'format'),\n      'StatusCallback': _.get(opts, 'statusCallback'),\n      'StatusCallbackMethod': _.get(opts, 'statusCallbackMethod'),\n      'Trim': serialize.bool(_.get(opts, 'trim'))\n    });\n\n    var promise = this._version.create({\n      uri: this._uri,\n      method: 'POST',\n      data: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new CompositionHookInstance(this._version, payload, this._solution.sid));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Constructs a composition_hook\n   *\n   * @function get\n   * @memberof Twilio.Video.V1.CompositionHookList#\n   *\n   * @param {string} sid - The SID that identifies the resource to fetch\n   *\n   * @returns {Twilio.Video.V1.CompositionHookContext}\n   */\n\n  /* jshint ignore:end */\n\n\n  CompositionHookListInstance.get = function get(sid) {\n    return new CompositionHookContext(this._version, sid);\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Video.V1.CompositionHookList#\n   *\n   * @returns Object\n   */\n\n  /* jshint ignore:end */\n\n\n  CompositionHookListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  CompositionHookListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return CompositionHookListInstance;\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the CompositionHookPage\n *\n * @constructor Twilio.Video.V1.CompositionHookPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {CompositionHookSolution} solution - Path solution\n *\n * @returns CompositionHookPage\n */\n\n/* jshint ignore:end */\n\n\nCompositionHookPage = function CompositionHookPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(CompositionHookPage.prototype, Page.prototype);\n\nCompositionHookPage.prototype.constructor = CompositionHookPage;\n/* jshint ignore:start */\n\n/**\n * Build an instance of CompositionHookInstance\n *\n * @function getInstance\n * @memberof Twilio.Video.V1.CompositionHookPage#\n *\n * @param {CompositionHookPayload} payload - Payload response from the API\n *\n * @returns CompositionHookInstance\n */\n\n/* jshint ignore:end */\n\nCompositionHookPage.prototype.getInstance = function getInstance(payload) {\n  return new CompositionHookInstance(this._version, payload);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Video.V1.CompositionHookPage#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nCompositionHookPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nCompositionHookPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the CompositionHookContext\n *\n * @constructor Twilio.Video.V1.CompositionHookInstance\n *\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {string} friendlyName -\n *          The string that you assigned to describe the resource\n * @property {boolean} enabled - Whether the CompositionHook is active\n * @property {Date} dateCreated -\n *          The ISO 8601 date and time in GMT when the resource was created\n * @property {Date} dateUpdated -\n *          The ISO 8601 date and time in GMT when the resource was last updated\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} audioSources -\n *          The array of track names to include in the compositions created by the composition hook\n * @property {string} audioSourcesExcluded -\n *          The array of track names to exclude from the compositions created by the composition hook\n * @property {object} videoLayout -\n *          A JSON object that describes the video layout of the Composition\n * @property {string} resolution -\n *          The dimensions of the video image in pixels expressed as columns (width) and rows (height)\n * @property {boolean} trim - Whether intervals with no media are clipped\n * @property {composition_hook.format} format -\n *          The container format of the media files used by the compositions created by the composition hook\n * @property {string} statusCallback -\n *          The URL to send status information to your application\n * @property {string} statusCallbackMethod -\n *          The HTTP method we should use to call status_callback\n * @property {string} url - The absolute URL of the resource\n *\n * @param {V1} version - Version of the resource\n * @param {CompositionHookPayload} payload - The instance payload\n * @param {sid} sid - The SID that identifies the resource to fetch\n */\n\n/* jshint ignore:end */\n\n\nCompositionHookInstance = function CompositionHookInstance(version, payload, sid) {\n  this._version = version; // Marshaled Properties\n\n  this.accountSid = payload.account_sid; // jshint ignore:line\n\n  this.friendlyName = payload.friendly_name; // jshint ignore:line\n\n  this.enabled = payload.enabled; // jshint ignore:line\n\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n\n  this.sid = payload.sid; // jshint ignore:line\n\n  this.audioSources = payload.audio_sources; // jshint ignore:line\n\n  this.audioSourcesExcluded = payload.audio_sources_excluded; // jshint ignore:line\n\n  this.videoLayout = payload.video_layout; // jshint ignore:line\n\n  this.resolution = payload.resolution; // jshint ignore:line\n\n  this.trim = payload.trim; // jshint ignore:line\n\n  this.format = payload.format; // jshint ignore:line\n\n  this.statusCallback = payload.status_callback; // jshint ignore:line\n\n  this.statusCallbackMethod = payload.status_callback_method; // jshint ignore:line\n\n  this.url = payload.url; // jshint ignore:line\n  // Context\n\n  this._context = undefined;\n  this._solution = {\n    sid: sid || this.sid\n  };\n};\n\nObject.defineProperty(CompositionHookInstance.prototype, '_proxy', {\n  get: function () {\n    if (!this._context) {\n      this._context = new CompositionHookContext(this._version, this._solution.sid);\n    }\n\n    return this._context;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * fetch a CompositionHookInstance\n *\n * @function fetch\n * @memberof Twilio.Video.V1.CompositionHookInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed CompositionHookInstance\n */\n\n/* jshint ignore:end */\n\nCompositionHookInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n/* jshint ignore:start */\n\n/**\n * remove a CompositionHookInstance\n *\n * @function remove\n * @memberof Twilio.Video.V1.CompositionHookInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed CompositionHookInstance\n */\n\n/* jshint ignore:end */\n\n\nCompositionHookInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n/* jshint ignore:start */\n\n/**\n * update a CompositionHookInstance\n *\n * @function update\n * @memberof Twilio.Video.V1.CompositionHookInstance#\n *\n * @param {object} opts - Options for request\n * @param {string} opts.friendlyName - A unique string to describe the resource\n * @param {boolean} [opts.enabled] - Whether the composition hook is active\n * @param {object} [opts.videoLayout] -\n *          A JSON object that describes the video layout of the composition hook\n * @param {string|list} [opts.audioSources] -\n *          An array of track names from the same group room to merge\n * @param {string|list} [opts.audioSourcesExcluded] -\n *          An array of track names to exclude\n * @param {boolean} [opts.trim] -\n *          Whether to clip the intervals where there is no active media in the Compositions triggered by the composition hook\n * @param {composition_hook.format} [opts.format] -\n *          The container format of the media files used by the compositions created by the composition hook\n * @param {string} [opts.resolution] -\n *          A string that describes the columns (width) and rows (height) of the generated composed video in pixels\n * @param {string} [opts.statusCallback] -\n *          The URL we should call to send status information to your application\n * @param {string} [opts.statusCallbackMethod] -\n *          The HTTP method we should use to call status_callback\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed CompositionHookInstance\n */\n\n/* jshint ignore:end */\n\n\nCompositionHookInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Video.V1.CompositionHookInstance#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nCompositionHookInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nCompositionHookInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the CompositionHookContext\n *\n * @constructor Twilio.Video.V1.CompositionHookContext\n *\n * @param {V1} version - Version of the resource\n * @param {sid} sid - The SID that identifies the resource to fetch\n */\n\n/* jshint ignore:end */\n\n\nCompositionHookContext = function CompositionHookContext(version, sid) {\n  this._version = version; // Path Solution\n\n  this._solution = {\n    sid: sid\n  };\n  this._uri = `/CompositionHooks/${sid}`;\n};\n/* jshint ignore:start */\n\n/**\n * fetch a CompositionHookInstance\n *\n * @function fetch\n * @memberof Twilio.Video.V1.CompositionHookContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed CompositionHookInstance\n */\n\n/* jshint ignore:end */\n\n\nCompositionHookContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new CompositionHookInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * remove a CompositionHookInstance\n *\n * @function remove\n * @memberof Twilio.Video.V1.CompositionHookContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed CompositionHookInstance\n */\n\n/* jshint ignore:end */\n\n\nCompositionHookContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.remove({\n    uri: this._uri,\n    method: 'DELETE'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * update a CompositionHookInstance\n *\n * @function update\n * @memberof Twilio.Video.V1.CompositionHookContext#\n *\n * @param {object} opts - Options for request\n * @param {string} opts.friendlyName - A unique string to describe the resource\n * @param {boolean} [opts.enabled] - Whether the composition hook is active\n * @param {object} [opts.videoLayout] -\n *          A JSON object that describes the video layout of the composition hook\n * @param {string|list} [opts.audioSources] -\n *          An array of track names from the same group room to merge\n * @param {string|list} [opts.audioSourcesExcluded] -\n *          An array of track names to exclude\n * @param {boolean} [opts.trim] -\n *          Whether to clip the intervals where there is no active media in the Compositions triggered by the composition hook\n * @param {composition_hook.format} [opts.format] -\n *          The container format of the media files used by the compositions created by the composition hook\n * @param {string} [opts.resolution] -\n *          A string that describes the columns (width) and rows (height) of the generated composed video in pixels\n * @param {string} [opts.statusCallback] -\n *          The URL we should call to send status information to your application\n * @param {string} [opts.statusCallbackMethod] -\n *          The HTTP method we should use to call status_callback\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed CompositionHookInstance\n */\n\n/* jshint ignore:end */\n\n\nCompositionHookContext.prototype.update = function update(opts, callback) {\n  if (_.isUndefined(opts)) {\n    throw new Error('Required parameter \"opts\" missing.');\n  }\n\n  if (_.isUndefined(opts.friendlyName)) {\n    throw new Error('Required parameter \"opts.friendlyName\" missing.');\n  }\n\n  var deferred = Q.defer();\n  var data = values.of({\n    'FriendlyName': _.get(opts, 'friendlyName'),\n    'Enabled': serialize.bool(_.get(opts, 'enabled')),\n    'VideoLayout': serialize.object(_.get(opts, 'videoLayout')),\n    'AudioSources': serialize.map(_.get(opts, 'audioSources'), function (e) {\n      return e;\n    }),\n    'AudioSourcesExcluded': serialize.map(_.get(opts, 'audioSourcesExcluded'), function (e) {\n      return e;\n    }),\n    'Trim': serialize.bool(_.get(opts, 'trim')),\n    'Format': _.get(opts, 'format'),\n    'Resolution': _.get(opts, 'resolution'),\n    'StatusCallback': _.get(opts, 'statusCallback'),\n    'StatusCallbackMethod': _.get(opts, 'statusCallbackMethod')\n  });\n\n  var promise = this._version.update({\n    uri: this._uri,\n    method: 'POST',\n    data: data\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new CompositionHookInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Video.V1.CompositionHookContext#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nCompositionHookContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nCompositionHookContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  CompositionHookList: CompositionHookList,\n  CompositionHookPage: CompositionHookPage,\n  CompositionHookInstance: CompositionHookInstance,\n  CompositionHookContext: CompositionHookContext\n};","map":{"version":3,"sources":["/Users/tony_niu/Visual Studio/Twilio/twilio-video-starter-kit/src/token-service/node_modules/twilio/lib/rest/video/v1/compositionHook.js"],"names":["Q","require","_","util","Page","deserialize","serialize","values","CompositionHookList","CompositionHookPage","CompositionHookInstance","CompositionHookContext","version","CompositionHookListInstance","sid","get","_version","_solution","_uri","each","opts","callback","isFunction","isUndefined","Error","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","error","fetchNextPage","fn","promise","then","page","instances","instance","bind","nextPage","catch","merge","list","deferred","defer","allResources","resource","push","length","resolve","reject","nodeify","data","of","bool","iso8601DateTime","pageToken","pageNumber","uri","method","params","payload","getPage","targetUrl","_domain","twilio","request","create","friendlyName","object","map","e","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","accountSid","account_sid","friendly_name","enabled","dateCreated","date_created","dateUpdated","date_updated","audioSources","audio_sources","audioSourcesExcluded","audio_sources_excluded","videoLayout","video_layout","resolution","trim","format","statusCallback","status_callback","statusCallbackMethod","status_callback_method","url","_context","undefined","Object","defineProperty","fetch","_proxy","remove","update","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar Page = require('../../../base/Page');  /* jshint ignore:line */\nvar deserialize = require(\n    '../../../base/deserialize');  /* jshint ignore:line */\nvar serialize = require('../../../base/serialize');  /* jshint ignore:line */\nvar values = require('../../../base/values');  /* jshint ignore:line */\n\nvar CompositionHookList;\nvar CompositionHookPage;\nvar CompositionHookInstance;\nvar CompositionHookContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the CompositionHookList\n *\n * @constructor Twilio.Video.V1.CompositionHookList\n *\n * @param {Twilio.Video.V1} version - Version of the resource\n */\n/* jshint ignore:end */\nCompositionHookList = function CompositionHookList(version) {\n  /* jshint ignore:start */\n  /**\n   * @function compositionHooks\n   * @memberof Twilio.Video.V1#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Video.V1.CompositionHookContext}\n   */\n  /* jshint ignore:end */\n  function CompositionHookListInstance(sid) {\n    return CompositionHookListInstance.get(sid);\n  }\n\n  CompositionHookListInstance._version = version;\n  // Path Solution\n  CompositionHookListInstance._solution = {};\n  CompositionHookListInstance._uri = `/CompositionHooks`;\n  /* jshint ignore:start */\n  /**\n   * Streams CompositionHookInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Video.V1.CompositionHookList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {boolean} [opts.enabled] -\n   *          Read only CompositionHook resources with an enabled value that matches this parameter\n   * @param {Date} [opts.dateCreatedAfter] -\n   *          Read only CompositionHook resources created on or after this ISO 8601 datetime with time zone\n   * @param {Date} [opts.dateCreatedBefore] -\n   *          Read only CompositionHook resources created before this ISO 8601 datetime with time zone\n   * @param {string} [opts.friendlyName] -\n   *          Read only CompositionHook resources with friendly names that match this string\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  CompositionHookListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists CompositionHookInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Video.V1.CompositionHookList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {boolean} [opts.enabled] -\n   *          Read only CompositionHook resources with an enabled value that matches this parameter\n   * @param {Date} [opts.dateCreatedAfter] -\n   *          Read only CompositionHook resources created on or after this ISO 8601 datetime with time zone\n   * @param {Date} [opts.dateCreatedBefore] -\n   *          Read only CompositionHook resources created before this ISO 8601 datetime with time zone\n   * @param {string} [opts.friendlyName] -\n   *          Read only CompositionHook resources with friendly names that match this string\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  CompositionHookListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of CompositionHookInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Video.V1.CompositionHookList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {boolean} [opts.enabled] -\n   *          Read only CompositionHook resources with an enabled value that matches this parameter\n   * @param {Date} [opts.dateCreatedAfter] -\n   *          Read only CompositionHook resources created on or after this ISO 8601 datetime with time zone\n   * @param {Date} [opts.dateCreatedBefore] -\n   *          Read only CompositionHook resources created before this ISO 8601 datetime with time zone\n   * @param {string} [opts.friendlyName] -\n   *          Read only CompositionHook resources with friendly names that match this string\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  CompositionHookListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'Enabled': serialize.bool(_.get(opts, 'enabled')),\n      'DateCreatedAfter': serialize.iso8601DateTime(_.get(opts, 'dateCreatedAfter')),\n      'DateCreatedBefore': serialize.iso8601DateTime(_.get(opts, 'dateCreatedBefore')),\n      'FriendlyName': _.get(opts, 'friendlyName'),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new CompositionHookPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of CompositionHookInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Video.V1.CompositionHookList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  CompositionHookListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new CompositionHookPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * create a CompositionHookInstance\n   *\n   * @function create\n   * @memberof Twilio.Video.V1.CompositionHookList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.friendlyName - A unique string to describe the resource\n   * @param {boolean} [opts.enabled] - Whether the composition hook is active\n   * @param {object} [opts.videoLayout] -\n   *          An object that describes the video layout of the composition hook\n   * @param {string|list} [opts.audioSources] -\n   *          An array of track names from the same group room to merge\n   * @param {string|list} [opts.audioSourcesExcluded] -\n   *          An array of track names to exclude\n   * @param {string} [opts.resolution] -\n   *          A string that describes the rows (width) and columns (height) of the generated composed video in pixels\n   * @param {composition_hook.format} [opts.format] -\n   *          The container format of the media files used by the compositions created by the composition hook\n   * @param {string} [opts.statusCallback] -\n   *          The URL we should call to send status information to your application\n   * @param {string} [opts.statusCallbackMethod] -\n   *          The HTTP method we should use to call status_callback\n   * @param {boolean} [opts.trim] -\n   *          Whether to clip the intervals where there is no active media in the Compositions triggered by the composition hook\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed CompositionHookInstance\n   */\n  /* jshint ignore:end */\n  CompositionHookListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n    if (_.isUndefined(opts.friendlyName)) {\n      throw new Error('Required parameter \"opts.friendlyName\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'FriendlyName': _.get(opts, 'friendlyName'),\n      'Enabled': serialize.bool(_.get(opts, 'enabled')),\n      'VideoLayout': serialize.object(_.get(opts, 'videoLayout')),\n      'AudioSources': serialize.map(_.get(opts, 'audioSources'), function(e) { return e; }),\n      'AudioSourcesExcluded': serialize.map(_.get(opts, 'audioSourcesExcluded'), function(e) { return e; }),\n      'Resolution': _.get(opts, 'resolution'),\n      'Format': _.get(opts, 'format'),\n      'StatusCallback': _.get(opts, 'statusCallback'),\n      'StatusCallbackMethod': _.get(opts, 'statusCallbackMethod'),\n      'Trim': serialize.bool(_.get(opts, 'trim'))\n    });\n\n    var promise = this._version.create({uri: this._uri, method: 'POST', data: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new CompositionHookInstance(this._version, payload, this._solution.sid));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a composition_hook\n   *\n   * @function get\n   * @memberof Twilio.Video.V1.CompositionHookList#\n   *\n   * @param {string} sid - The SID that identifies the resource to fetch\n   *\n   * @returns {Twilio.Video.V1.CompositionHookContext}\n   */\n  /* jshint ignore:end */\n  CompositionHookListInstance.get = function get(sid) {\n    return new CompositionHookContext(this._version, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Video.V1.CompositionHookList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  CompositionHookListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  CompositionHookListInstance[util.inspect.custom] = function inspect(depth,\n      options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return CompositionHookListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the CompositionHookPage\n *\n * @constructor Twilio.Video.V1.CompositionHookPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {CompositionHookSolution} solution - Path solution\n *\n * @returns CompositionHookPage\n */\n/* jshint ignore:end */\nCompositionHookPage = function CompositionHookPage(version, response, solution)\n                                                    {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(CompositionHookPage.prototype, Page.prototype);\nCompositionHookPage.prototype.constructor = CompositionHookPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of CompositionHookInstance\n *\n * @function getInstance\n * @memberof Twilio.Video.V1.CompositionHookPage#\n *\n * @param {CompositionHookPayload} payload - Payload response from the API\n *\n * @returns CompositionHookInstance\n */\n/* jshint ignore:end */\nCompositionHookPage.prototype.getInstance = function getInstance(payload) {\n  return new CompositionHookInstance(this._version, payload);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Video.V1.CompositionHookPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nCompositionHookPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nCompositionHookPage.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the CompositionHookContext\n *\n * @constructor Twilio.Video.V1.CompositionHookInstance\n *\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {string} friendlyName -\n *          The string that you assigned to describe the resource\n * @property {boolean} enabled - Whether the CompositionHook is active\n * @property {Date} dateCreated -\n *          The ISO 8601 date and time in GMT when the resource was created\n * @property {Date} dateUpdated -\n *          The ISO 8601 date and time in GMT when the resource was last updated\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} audioSources -\n *          The array of track names to include in the compositions created by the composition hook\n * @property {string} audioSourcesExcluded -\n *          The array of track names to exclude from the compositions created by the composition hook\n * @property {object} videoLayout -\n *          A JSON object that describes the video layout of the Composition\n * @property {string} resolution -\n *          The dimensions of the video image in pixels expressed as columns (width) and rows (height)\n * @property {boolean} trim - Whether intervals with no media are clipped\n * @property {composition_hook.format} format -\n *          The container format of the media files used by the compositions created by the composition hook\n * @property {string} statusCallback -\n *          The URL to send status information to your application\n * @property {string} statusCallbackMethod -\n *          The HTTP method we should use to call status_callback\n * @property {string} url - The absolute URL of the resource\n *\n * @param {V1} version - Version of the resource\n * @param {CompositionHookPayload} payload - The instance payload\n * @param {sid} sid - The SID that identifies the resource to fetch\n */\n/* jshint ignore:end */\nCompositionHookInstance = function CompositionHookInstance(version, payload,\n                                                            sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.friendlyName = payload.friendly_name; // jshint ignore:line\n  this.enabled = payload.enabled; // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n  this.sid = payload.sid; // jshint ignore:line\n  this.audioSources = payload.audio_sources; // jshint ignore:line\n  this.audioSourcesExcluded = payload.audio_sources_excluded; // jshint ignore:line\n  this.videoLayout = payload.video_layout; // jshint ignore:line\n  this.resolution = payload.resolution; // jshint ignore:line\n  this.trim = payload.trim; // jshint ignore:line\n  this.format = payload.format; // jshint ignore:line\n  this.statusCallback = payload.status_callback; // jshint ignore:line\n  this.statusCallbackMethod = payload.status_callback_method; // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {sid: sid || this.sid, };\n};\n\nObject.defineProperty(CompositionHookInstance.prototype,\n  '_proxy', {\n    get: function() {\n      if (!this._context) {\n        this._context = new CompositionHookContext(this._version, this._solution.sid);\n      }\n\n      return this._context;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a CompositionHookInstance\n *\n * @function fetch\n * @memberof Twilio.Video.V1.CompositionHookInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed CompositionHookInstance\n */\n/* jshint ignore:end */\nCompositionHookInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * remove a CompositionHookInstance\n *\n * @function remove\n * @memberof Twilio.Video.V1.CompositionHookInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed CompositionHookInstance\n */\n/* jshint ignore:end */\nCompositionHookInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n\n/* jshint ignore:start */\n/**\n * update a CompositionHookInstance\n *\n * @function update\n * @memberof Twilio.Video.V1.CompositionHookInstance#\n *\n * @param {object} opts - Options for request\n * @param {string} opts.friendlyName - A unique string to describe the resource\n * @param {boolean} [opts.enabled] - Whether the composition hook is active\n * @param {object} [opts.videoLayout] -\n *          A JSON object that describes the video layout of the composition hook\n * @param {string|list} [opts.audioSources] -\n *          An array of track names from the same group room to merge\n * @param {string|list} [opts.audioSourcesExcluded] -\n *          An array of track names to exclude\n * @param {boolean} [opts.trim] -\n *          Whether to clip the intervals where there is no active media in the Compositions triggered by the composition hook\n * @param {composition_hook.format} [opts.format] -\n *          The container format of the media files used by the compositions created by the composition hook\n * @param {string} [opts.resolution] -\n *          A string that describes the columns (width) and rows (height) of the generated composed video in pixels\n * @param {string} [opts.statusCallback] -\n *          The URL we should call to send status information to your application\n * @param {string} [opts.statusCallbackMethod] -\n *          The HTTP method we should use to call status_callback\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed CompositionHookInstance\n */\n/* jshint ignore:end */\nCompositionHookInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Video.V1.CompositionHookInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nCompositionHookInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nCompositionHookInstance.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the CompositionHookContext\n *\n * @constructor Twilio.Video.V1.CompositionHookContext\n *\n * @param {V1} version - Version of the resource\n * @param {sid} sid - The SID that identifies the resource to fetch\n */\n/* jshint ignore:end */\nCompositionHookContext = function CompositionHookContext(version, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {sid: sid, };\n  this._uri = `/CompositionHooks/${sid}`;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a CompositionHookInstance\n *\n * @function fetch\n * @memberof Twilio.Video.V1.CompositionHookContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed CompositionHookInstance\n */\n/* jshint ignore:end */\nCompositionHookContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({uri: this._uri, method: 'GET'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new CompositionHookInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * remove a CompositionHookInstance\n *\n * @function remove\n * @memberof Twilio.Video.V1.CompositionHookContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed CompositionHookInstance\n */\n/* jshint ignore:end */\nCompositionHookContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.remove({uri: this._uri, method: 'DELETE'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * update a CompositionHookInstance\n *\n * @function update\n * @memberof Twilio.Video.V1.CompositionHookContext#\n *\n * @param {object} opts - Options for request\n * @param {string} opts.friendlyName - A unique string to describe the resource\n * @param {boolean} [opts.enabled] - Whether the composition hook is active\n * @param {object} [opts.videoLayout] -\n *          A JSON object that describes the video layout of the composition hook\n * @param {string|list} [opts.audioSources] -\n *          An array of track names from the same group room to merge\n * @param {string|list} [opts.audioSourcesExcluded] -\n *          An array of track names to exclude\n * @param {boolean} [opts.trim] -\n *          Whether to clip the intervals where there is no active media in the Compositions triggered by the composition hook\n * @param {composition_hook.format} [opts.format] -\n *          The container format of the media files used by the compositions created by the composition hook\n * @param {string} [opts.resolution] -\n *          A string that describes the columns (width) and rows (height) of the generated composed video in pixels\n * @param {string} [opts.statusCallback] -\n *          The URL we should call to send status information to your application\n * @param {string} [opts.statusCallbackMethod] -\n *          The HTTP method we should use to call status_callback\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed CompositionHookInstance\n */\n/* jshint ignore:end */\nCompositionHookContext.prototype.update = function update(opts, callback) {\n  if (_.isUndefined(opts)) {\n    throw new Error('Required parameter \"opts\" missing.');\n  }\n  if (_.isUndefined(opts.friendlyName)) {\n    throw new Error('Required parameter \"opts.friendlyName\" missing.');\n  }\n\n  var deferred = Q.defer();\n  var data = values.of({\n    'FriendlyName': _.get(opts, 'friendlyName'),\n    'Enabled': serialize.bool(_.get(opts, 'enabled')),\n    'VideoLayout': serialize.object(_.get(opts, 'videoLayout')),\n    'AudioSources': serialize.map(_.get(opts, 'audioSources'), function(e) { return e; }),\n    'AudioSourcesExcluded': serialize.map(_.get(opts, 'audioSourcesExcluded'), function(e) { return e; }),\n    'Trim': serialize.bool(_.get(opts, 'trim')),\n    'Format': _.get(opts, 'format'),\n    'Resolution': _.get(opts, 'resolution'),\n    'StatusCallback': _.get(opts, 'statusCallback'),\n    'StatusCallbackMethod': _.get(opts, 'statusCallbackMethod')\n  });\n\n  var promise = this._version.update({uri: this._uri, method: 'POST', data: data});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new CompositionHookInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Video.V1.CompositionHookContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nCompositionHookContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nCompositionHookContext.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  CompositionHookList: CompositionHookList,\n  CompositionHookPage: CompositionHookPage,\n  CompositionHookInstance: CompositionHookInstance,\n  CompositionHookContext: CompositionHookContext\n};\n"]},"metadata":{},"sourceType":"module"}