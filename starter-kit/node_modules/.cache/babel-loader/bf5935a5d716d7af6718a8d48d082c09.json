{"ast":null,"code":"'use strict';\n/* jshint ignore:start */\n\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n\n/* jshint ignore:end */\n\nvar Q = require('q');\n/* jshint ignore:line */\n\n\nvar _ = require('lodash');\n/* jshint ignore:line */\n\n\nvar util = require('util');\n/* jshint ignore:line */\n\n\nvar Page = require('../../../../../../base/Page');\n/* jshint ignore:line */\n\n\nvar deserialize = require('../../../../../../base/deserialize');\n/* jshint ignore:line */\n\n\nvar values = require('../../../../../../base/values');\n/* jshint ignore:line */\n\n\nvar NotificationList;\nvar NotificationPage;\nvar NotificationInstance;\n/* jshint ignore:start */\n\n/**\n * Initialize the NotificationList\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Verify.V2.ServiceContext.EntityContext.ChallengeContext.NotificationList\n *\n * @param {Twilio.Verify.V2} version - Version of the resource\n * @param {string} serviceSid - Service Sid.\n * @param {string} identity - Unique external identifier of the Entity\n * @param {string} challengeSid - Challenge Sid.\n */\n\n/* jshint ignore:end */\n\nNotificationList = function NotificationList(version, serviceSid, identity, challengeSid) {\n  /* jshint ignore:start */\n\n  /**\n   * @function notifications\n   * @memberof Twilio.Verify.V2.ServiceContext.EntityContext.ChallengeContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Verify.V2.ServiceContext.EntityContext.ChallengeContext.NotificationContext}\n   */\n\n  /* jshint ignore:end */\n  function NotificationListInstance(sid) {\n    return NotificationListInstance.get(sid);\n  }\n\n  NotificationListInstance._version = version; // Path Solution\n\n  NotificationListInstance._solution = {\n    serviceSid: serviceSid,\n    identity: identity,\n    challengeSid: challengeSid\n  };\n  NotificationListInstance._uri = `/Services/${serviceSid}/Entities/${identity}/Challenges/${challengeSid}/Notifications`;\n  /* jshint ignore:start */\n\n  /**\n   * create a NotificationInstance\n   *\n   * @function create\n   * @memberof Twilio.Verify.V2.ServiceContext.EntityContext.ChallengeContext.NotificationList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.ttl] - How long, in seconds, the notification is valid.\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed NotificationInstance\n   */\n\n  /* jshint ignore:end */\n\n  NotificationListInstance.create = function create(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'Ttl': _.get(opts, 'ttl')\n    });\n\n    var promise = this._version.create({\n      uri: this._uri,\n      method: 'POST',\n      data: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new NotificationInstance(this._version, payload));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Verify.V2.ServiceContext.EntityContext.ChallengeContext.NotificationList#\n   *\n   * @returns Object\n   */\n\n  /* jshint ignore:end */\n\n\n  NotificationListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  NotificationListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return NotificationListInstance;\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the NotificationPage\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Verify.V2.ServiceContext.EntityContext.ChallengeContext.NotificationPage\n *\n * @param {V2} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {NotificationSolution} solution - Path solution\n *\n * @returns NotificationPage\n */\n\n/* jshint ignore:end */\n\n\nNotificationPage = function NotificationPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(NotificationPage.prototype, Page.prototype);\n\nNotificationPage.prototype.constructor = NotificationPage;\n/* jshint ignore:start */\n\n/**\n * Build an instance of NotificationInstance\n *\n * @function getInstance\n * @memberof Twilio.Verify.V2.ServiceContext.EntityContext.ChallengeContext.NotificationPage#\n *\n * @param {NotificationPayload} payload - Payload response from the API\n *\n * @returns NotificationInstance\n */\n\n/* jshint ignore:end */\n\nNotificationPage.prototype.getInstance = function getInstance(payload) {\n  return new NotificationInstance(this._version, payload, this._solution.serviceSid, this._solution.identity, this._solution.challengeSid);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Verify.V2.ServiceContext.EntityContext.ChallengeContext.NotificationPage#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nNotificationPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nNotificationPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the NotificationContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Verify.V2.ServiceContext.EntityContext.ChallengeContext.NotificationInstance\n *\n * @property {string} sid - A string that uniquely identifies this Notification.\n * @property {string} accountSid - Account Sid.\n * @property {string} serviceSid - Service Sid.\n * @property {string} entitySid - Entity Sid.\n * @property {string} identity - Unique external identifier of the Entity\n * @property {string} challengeSid - Challenge Sid.\n * @property {string} priority - The priority of the notification.\n * @property {number} ttl - How long, in seconds, the notification is valid.\n * @property {Date} dateCreated - The date this Notification was created\n *\n * @param {V2} version - Version of the resource\n * @param {NotificationPayload} payload - The instance payload\n * @param {sid} serviceSid - Service Sid.\n * @param {string} identity - Unique external identifier of the Entity\n * @param {sid} challengeSid - Challenge Sid.\n */\n\n/* jshint ignore:end */\n\n\nNotificationInstance = function NotificationInstance(version, payload, serviceSid, identity, challengeSid) {\n  this._version = version; // Marshaled Properties\n\n  this.sid = payload.sid; // jshint ignore:line\n\n  this.accountSid = payload.account_sid; // jshint ignore:line\n\n  this.serviceSid = payload.service_sid; // jshint ignore:line\n\n  this.entitySid = payload.entity_sid; // jshint ignore:line\n\n  this.identity = payload.identity; // jshint ignore:line\n\n  this.challengeSid = payload.challenge_sid; // jshint ignore:line\n\n  this.priority = payload.priority; // jshint ignore:line\n\n  this.ttl = deserialize.integer(payload.ttl); // jshint ignore:line\n\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  // Context\n\n  this._context = undefined;\n  this._solution = {\n    serviceSid: serviceSid,\n    identity: identity,\n    challengeSid: challengeSid\n  };\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Verify.V2.ServiceContext.EntityContext.ChallengeContext.NotificationInstance#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nNotificationInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nNotificationInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  NotificationList: NotificationList,\n  NotificationPage: NotificationPage,\n  NotificationInstance: NotificationInstance\n};","map":{"version":3,"sources":["/Users/tony_niu/Visual Studio/Twilio/twilio-video-starter-kit/src/token-service/node_modules/twilio/lib/rest/verify/v2/service/entity/challenge/notification.js"],"names":["Q","require","_","util","Page","deserialize","values","NotificationList","NotificationPage","NotificationInstance","version","serviceSid","identity","challengeSid","NotificationListInstance","sid","get","_version","_solution","_uri","create","opts","callback","isFunction","deferred","defer","data","of","promise","uri","method","then","payload","resolve","bind","catch","error","reject","nodeify","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","accountSid","account_sid","service_sid","entitySid","entity_sid","challenge_sid","priority","ttl","integer","dateCreated","iso8601DateTime","date_created","_context","undefined","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar Page = require('../../../../../../base/Page');  /* jshint ignore:line */\nvar deserialize = require(\n    '../../../../../../base/deserialize');  /* jshint ignore:line */\nvar values = require('../../../../../../base/values');  /* jshint ignore:line */\n\nvar NotificationList;\nvar NotificationPage;\nvar NotificationInstance;\n\n/* jshint ignore:start */\n/**\n * Initialize the NotificationList\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Verify.V2.ServiceContext.EntityContext.ChallengeContext.NotificationList\n *\n * @param {Twilio.Verify.V2} version - Version of the resource\n * @param {string} serviceSid - Service Sid.\n * @param {string} identity - Unique external identifier of the Entity\n * @param {string} challengeSid - Challenge Sid.\n */\n/* jshint ignore:end */\nNotificationList = function NotificationList(version, serviceSid, identity,\n                                              challengeSid) {\n  /* jshint ignore:start */\n  /**\n   * @function notifications\n   * @memberof Twilio.Verify.V2.ServiceContext.EntityContext.ChallengeContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Verify.V2.ServiceContext.EntityContext.ChallengeContext.NotificationContext}\n   */\n  /* jshint ignore:end */\n  function NotificationListInstance(sid) {\n    return NotificationListInstance.get(sid);\n  }\n\n  NotificationListInstance._version = version;\n  // Path Solution\n  NotificationListInstance._solution = {\n    serviceSid: serviceSid,\n    identity: identity,\n    challengeSid: challengeSid\n  };\n  NotificationListInstance._uri = `/Services/${serviceSid}/Entities/${identity}/Challenges/${challengeSid}/Notifications`;\n  /* jshint ignore:start */\n  /**\n   * create a NotificationInstance\n   *\n   * @function create\n   * @memberof Twilio.Verify.V2.ServiceContext.EntityContext.ChallengeContext.NotificationList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.ttl] - How long, in seconds, the notification is valid.\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed NotificationInstance\n   */\n  /* jshint ignore:end */\n  NotificationListInstance.create = function create(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({'Ttl': _.get(opts, 'ttl')});\n\n    var promise = this._version.create({uri: this._uri, method: 'POST', data: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new NotificationInstance(this._version, payload));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Verify.V2.ServiceContext.EntityContext.ChallengeContext.NotificationList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  NotificationListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  NotificationListInstance[util.inspect.custom] = function inspect(depth, options)\n      {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return NotificationListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the NotificationPage\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Verify.V2.ServiceContext.EntityContext.ChallengeContext.NotificationPage\n *\n * @param {V2} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {NotificationSolution} solution - Path solution\n *\n * @returns NotificationPage\n */\n/* jshint ignore:end */\nNotificationPage = function NotificationPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(NotificationPage.prototype, Page.prototype);\nNotificationPage.prototype.constructor = NotificationPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of NotificationInstance\n *\n * @function getInstance\n * @memberof Twilio.Verify.V2.ServiceContext.EntityContext.ChallengeContext.NotificationPage#\n *\n * @param {NotificationPayload} payload - Payload response from the API\n *\n * @returns NotificationInstance\n */\n/* jshint ignore:end */\nNotificationPage.prototype.getInstance = function getInstance(payload) {\n  return new NotificationInstance(\n    this._version,\n    payload,\n    this._solution.serviceSid,\n    this._solution.identity,\n    this._solution.challengeSid\n  );\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Verify.V2.ServiceContext.EntityContext.ChallengeContext.NotificationPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nNotificationPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nNotificationPage.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the NotificationContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Verify.V2.ServiceContext.EntityContext.ChallengeContext.NotificationInstance\n *\n * @property {string} sid - A string that uniquely identifies this Notification.\n * @property {string} accountSid - Account Sid.\n * @property {string} serviceSid - Service Sid.\n * @property {string} entitySid - Entity Sid.\n * @property {string} identity - Unique external identifier of the Entity\n * @property {string} challengeSid - Challenge Sid.\n * @property {string} priority - The priority of the notification.\n * @property {number} ttl - How long, in seconds, the notification is valid.\n * @property {Date} dateCreated - The date this Notification was created\n *\n * @param {V2} version - Version of the resource\n * @param {NotificationPayload} payload - The instance payload\n * @param {sid} serviceSid - Service Sid.\n * @param {string} identity - Unique external identifier of the Entity\n * @param {sid} challengeSid - Challenge Sid.\n */\n/* jshint ignore:end */\nNotificationInstance = function NotificationInstance(version, payload,\n                                                      serviceSid, identity,\n                                                      challengeSid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.sid = payload.sid; // jshint ignore:line\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.serviceSid = payload.service_sid; // jshint ignore:line\n  this.entitySid = payload.entity_sid; // jshint ignore:line\n  this.identity = payload.identity; // jshint ignore:line\n  this.challengeSid = payload.challenge_sid; // jshint ignore:line\n  this.priority = payload.priority; // jshint ignore:line\n  this.ttl = deserialize.integer(payload.ttl); // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {serviceSid: serviceSid, identity: identity, challengeSid: challengeSid, };\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Verify.V2.ServiceContext.EntityContext.ChallengeContext.NotificationInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nNotificationInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nNotificationInstance.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  NotificationList: NotificationList,\n  NotificationPage: NotificationPage,\n  NotificationInstance: NotificationInstance\n};\n"]},"metadata":{},"sourceType":"module"}