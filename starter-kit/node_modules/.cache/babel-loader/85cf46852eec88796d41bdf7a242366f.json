{"ast":null,"code":"'use strict';\n/* jshint ignore:start */\n\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n\n/* jshint ignore:end */\n\nvar Q = require('q');\n/* jshint ignore:line */\n\n\nvar _ = require('lodash');\n/* jshint ignore:line */\n\n\nvar util = require('util');\n/* jshint ignore:line */\n\n\nvar Page = require('../../../../../base/Page');\n/* jshint ignore:line */\n\n\nvar deserialize = require('../../../../../base/deserialize');\n/* jshint ignore:line */\n\n\nvar serialize = require('../../../../../base/serialize');\n/* jshint ignore:line */\n\n\nvar values = require('../../../../../base/values');\n/* jshint ignore:line */\n\n\nvar ReservationList;\nvar ReservationPage;\nvar ReservationInstance;\nvar ReservationContext;\n/* jshint ignore:start */\n\n/**\n * Initialize the ReservationList\n *\n * @constructor Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.ReservationList\n *\n * @param {Twilio.Taskrouter.V1} version - Version of the resource\n * @param {string} workspaceSid -\n *          The SID of the Workspace that this worker is contained within.\n * @param {string} workerSid - The SID of the reserved Worker resource\n */\n\n/* jshint ignore:end */\n\nReservationList = function ReservationList(version, workspaceSid, workerSid) {\n  /* jshint ignore:start */\n\n  /**\n   * @function reservations\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.ReservationContext}\n   */\n\n  /* jshint ignore:end */\n  function ReservationListInstance(sid) {\n    return ReservationListInstance.get(sid);\n  }\n\n  ReservationListInstance._version = version; // Path Solution\n\n  ReservationListInstance._solution = {\n    workspaceSid: workspaceSid,\n    workerSid: workerSid\n  };\n  ReservationListInstance._uri = `/Workspaces/${workspaceSid}/Workers/${workerSid}/Reservations`;\n  /* jshint ignore:start */\n\n  /**\n   * Streams ReservationInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.ReservationList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {reservation.status} [opts.reservationStatus] -\n   *          Returns the list of reservations for a worker with a specified ReservationStatus\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n\n  /* jshint ignore:end */\n\n  ReservationListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Lists ReservationInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.ReservationList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {reservation.status} [opts.reservationStatus] -\n   *          Returns the list of reservations for a worker with a specified ReservationStatus\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  ReservationListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single page of ReservationInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.ReservationList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {reservation.status} [opts.reservationStatus] -\n   *          Returns the list of reservations for a worker with a specified ReservationStatus\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  ReservationListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'ReservationStatus': _.get(opts, 'reservationStatus'),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new ReservationPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single target page of ReservationInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.ReservationList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  ReservationListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new ReservationPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Constructs a reservation\n   *\n   * @function get\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.ReservationList#\n   *\n   * @param {string} sid - The SID of the WorkerReservation resource to fetch\n   *\n   * @returns {Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.ReservationContext}\n   */\n\n  /* jshint ignore:end */\n\n\n  ReservationListInstance.get = function get(sid) {\n    return new ReservationContext(this._version, this._solution.workspaceSid, this._solution.workerSid, sid);\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.ReservationList#\n   *\n   * @returns Object\n   */\n\n  /* jshint ignore:end */\n\n\n  ReservationListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  ReservationListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return ReservationListInstance;\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the ReservationPage\n *\n * @constructor Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.ReservationPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {ReservationSolution} solution - Path solution\n *\n * @returns ReservationPage\n */\n\n/* jshint ignore:end */\n\n\nReservationPage = function ReservationPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(ReservationPage.prototype, Page.prototype);\n\nReservationPage.prototype.constructor = ReservationPage;\n/* jshint ignore:start */\n\n/**\n * Build an instance of ReservationInstance\n *\n * @function getInstance\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.ReservationPage#\n *\n * @param {ReservationPayload} payload - Payload response from the API\n *\n * @returns ReservationInstance\n */\n\n/* jshint ignore:end */\n\nReservationPage.prototype.getInstance = function getInstance(payload) {\n  return new ReservationInstance(this._version, payload, this._solution.workspaceSid, this._solution.workerSid);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.ReservationPage#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nReservationPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nReservationPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the ReservationContext\n *\n * @constructor Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.ReservationInstance\n *\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {Date} dateCreated -\n *          The ISO 8601 date and time in GMT when the resource was created\n * @property {Date} dateUpdated -\n *          The ISO 8601 date and time in GMT when the resource was last updated\n * @property {reservation.status} reservationStatus -\n *          The current status of the reservation\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} taskSid - The SID of the reserved Task resource\n * @property {string} workerName - The friendly_name of the Worker that is reserved\n * @property {string} workerSid - The SID of the reserved Worker resource\n * @property {string} workspaceSid -\n *          The SID of the Workspace that this worker is contained within.\n * @property {string} url - The absolute URL of the WorkerReservation resource\n * @property {string} links - The URLs of related resources\n *\n * @param {V1} version - Version of the resource\n * @param {ReservationPayload} payload - The instance payload\n * @param {sid} workspaceSid -\n *          The SID of the Workspace that this worker is contained within.\n * @param {sid} workerSid - The SID of the reserved Worker resource\n * @param {sid} sid - The SID of the WorkerReservation resource to fetch\n */\n\n/* jshint ignore:end */\n\n\nReservationInstance = function ReservationInstance(version, payload, workspaceSid, workerSid, sid) {\n  this._version = version; // Marshaled Properties\n\n  this.accountSid = payload.account_sid; // jshint ignore:line\n\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n\n  this.reservationStatus = payload.reservation_status; // jshint ignore:line\n\n  this.sid = payload.sid; // jshint ignore:line\n\n  this.taskSid = payload.task_sid; // jshint ignore:line\n\n  this.workerName = payload.worker_name; // jshint ignore:line\n\n  this.workerSid = payload.worker_sid; // jshint ignore:line\n\n  this.workspaceSid = payload.workspace_sid; // jshint ignore:line\n\n  this.url = payload.url; // jshint ignore:line\n\n  this.links = payload.links; // jshint ignore:line\n  // Context\n\n  this._context = undefined;\n  this._solution = {\n    workspaceSid: workspaceSid,\n    workerSid: workerSid,\n    sid: sid || this.sid\n  };\n};\n\nObject.defineProperty(ReservationInstance.prototype, '_proxy', {\n  get: function () {\n    if (!this._context) {\n      this._context = new ReservationContext(this._version, this._solution.workspaceSid, this._solution.workerSid, this._solution.sid);\n    }\n\n    return this._context;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * fetch a ReservationInstance\n *\n * @function fetch\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.ReservationInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ReservationInstance\n */\n\n/* jshint ignore:end */\n\nReservationInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n/* jshint ignore:start */\n\n/**\n * update a ReservationInstance\n *\n * @function update\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.ReservationInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {reservation.status} [opts.reservationStatus] -\n *          The new status of the reservation\n * @param {string} [opts.workerActivitySid] -\n *          The new worker activity SID if rejecting a reservation\n * @param {string} [opts.instruction] -\n *          The assignment instruction for the reservation\n * @param {string} [opts.dequeuePostWorkActivitySid] -\n *          The SID of the Activity resource to start after executing a Dequeue instruction\n * @param {string} [opts.dequeueFrom] -\n *          The caller ID of the call to the worker when executing a Dequeue instruction\n * @param {string} [opts.dequeueRecord] -\n *          Whether to record both legs of a call when executing a Dequeue instruction\n * @param {number} [opts.dequeueTimeout] -\n *          The timeout for call when executing a Dequeue instruction\n * @param {string} [opts.dequeueTo] -\n *          The contact URI of the worker when executing a Dequeue instruction\n * @param {string} [opts.dequeueStatusCallbackUrl] -\n *          The callback URL for completed call event when executing a Dequeue instruction\n * @param {string} [opts.callFrom] -\n *          The Caller ID of the outbound call when executing a Call instruction\n * @param {string} [opts.callRecord] -\n *          Whether to record both legs of a call when executing a Call instruction\n * @param {number} [opts.callTimeout] -\n *          The timeout for a call when executing a Call instruction\n * @param {string} [opts.callTo] -\n *          The contact URI of the worker when executing a Call instruction\n * @param {string} [opts.callUrl] -\n *          TwiML URI executed on answering the worker's leg as a result of the Call instruction\n * @param {string} [opts.callStatusCallbackUrl] -\n *          The URL to call for the completed call event when executing a Call instruction\n * @param {boolean} [opts.callAccept] -\n *          Whether to accept a reservation when executing a Call instruction\n * @param {string} [opts.redirectCallSid] -\n *          The Call SID of the call parked in the queue when executing a Redirect instruction\n * @param {boolean} [opts.redirectAccept] -\n *          Whether the reservation should be accepted when executing a Redirect instruction\n * @param {string} [opts.redirectUrl] -\n *          TwiML URI to redirect the call to when executing the Redirect instruction\n * @param {string} [opts.to] -\n *          The Contact URI of the worker when executing a Conference instruction\n * @param {string} [opts.from] -\n *          The caller ID of the call to the worker when executing a Conference instruction\n * @param {string} [opts.statusCallback] -\n *          The URL we should call to send status information to your application\n * @param {string} [opts.statusCallbackMethod] -\n *          The HTTP method we should use to call status_callback\n * @param {reservation.call_status|list} [opts.statusCallbackEvent] -\n *          The call progress events that we will send to status_callback\n * @param {number} [opts.timeout] -\n *          The timeout for a call when executing a Conference instruction\n * @param {boolean} [opts.record] -\n *          Whether to record the participant and their conferences\n * @param {boolean} [opts.muted] - Whether to mute the agent\n * @param {string} [opts.beep] -\n *          Whether to play a notification beep when the participant joins\n * @param {boolean} [opts.startConferenceOnEnter] -\n *          Whether the conference starts when the participant joins the conference\n * @param {boolean} [opts.endConferenceOnExit] -\n *          Whether to end the conference when the agent leaves\n * @param {string} [opts.waitUrl] - URL that hosts pre-conference hold music\n * @param {string} [opts.waitMethod] -\n *          The HTTP method we should use to call `wait_url`\n * @param {boolean} [opts.earlyMedia] -\n *          Whether agents can hear the state of the outbound call\n * @param {number} [opts.maxParticipants] -\n *          The maximum number of agent conference participants\n * @param {string} [opts.conferenceStatusCallback] -\n *          The callback URL for conference events\n * @param {string} [opts.conferenceStatusCallbackMethod] -\n *          HTTP method for requesting `conference_status_callback` URL\n * @param {reservation.conference_event|list} [opts.conferenceStatusCallbackEvent] -\n *          The conference status events that we will send to conference_status_callback\n * @param {string} [opts.conferenceRecord] -\n *          Whether to record the conference the participant is joining\n * @param {string} [opts.conferenceTrim] -\n *          Whether to trim leading and trailing silence from your recorded conference audio files\n * @param {string} [opts.recordingChannels] -\n *          Specify `mono` or `dual` recording channels\n * @param {string} [opts.recordingStatusCallback] -\n *          The URL that we should call using the `recording_status_callback_method` when the recording status changes\n * @param {string} [opts.recordingStatusCallbackMethod] -\n *          The HTTP method we should use when we call `recording_status_callback`\n * @param {string} [opts.conferenceRecordingStatusCallback] -\n *          The URL we should call using the `conference_recording_status_callback_method` when the conference recording is available\n * @param {string} [opts.conferenceRecordingStatusCallbackMethod] -\n *          The HTTP method we should use to call `conference_recording_status_callback`\n * @param {string} [opts.region] -\n *          The region where we should mix the conference audio\n * @param {string} [opts.sipAuthUsername] -\n *          The SIP username used for authentication\n * @param {string} [opts.sipAuthPassword] - The SIP password for authentication\n * @param {string|list} [opts.dequeueStatusCallbackEvent] -\n *          The call progress events sent via webhooks as a result of a Dequeue instruction\n * @param {string} [opts.postWorkActivitySid] -\n *          The new worker activity SID after executing a Conference instruction\n * @param {boolean} [opts.endConferenceOnCustomerExit] -\n *          Whether to end the conference when the customer leaves\n * @param {boolean} [opts.beepOnCustomerEntrance] -\n *          Whether to play a notification beep when the customer joins\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ReservationInstance\n */\n\n/* jshint ignore:end */\n\n\nReservationInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.ReservationInstance#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nReservationInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nReservationInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the ReservationContext\n *\n * @constructor Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.ReservationContext\n *\n * @param {V1} version - Version of the resource\n * @param {sid} workspaceSid -\n *          The SID of the Workspace with the WorkerReservation resource to fetch\n * @param {sid} workerSid -\n *          The SID of the reserved Worker resource with the WorkerReservation resource to fetch\n * @param {sid} sid - The SID of the WorkerReservation resource to fetch\n */\n\n/* jshint ignore:end */\n\n\nReservationContext = function ReservationContext(version, workspaceSid, workerSid, sid) {\n  this._version = version; // Path Solution\n\n  this._solution = {\n    workspaceSid: workspaceSid,\n    workerSid: workerSid,\n    sid: sid\n  };\n  this._uri = `/Workspaces/${workspaceSid}/Workers/${workerSid}/Reservations/${sid}`;\n};\n/* jshint ignore:start */\n\n/**\n * fetch a ReservationInstance\n *\n * @function fetch\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.ReservationContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ReservationInstance\n */\n\n/* jshint ignore:end */\n\n\nReservationContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new ReservationInstance(this._version, payload, this._solution.workspaceSid, this._solution.workerSid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * update a ReservationInstance\n *\n * @function update\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.ReservationContext#\n *\n * @param {object} [opts] - Options for request\n * @param {reservation.status} [opts.reservationStatus] -\n *          The new status of the reservation\n * @param {string} [opts.workerActivitySid] -\n *          The new worker activity SID if rejecting a reservation\n * @param {string} [opts.instruction] -\n *          The assignment instruction for the reservation\n * @param {string} [opts.dequeuePostWorkActivitySid] -\n *          The SID of the Activity resource to start after executing a Dequeue instruction\n * @param {string} [opts.dequeueFrom] -\n *          The caller ID of the call to the worker when executing a Dequeue instruction\n * @param {string} [opts.dequeueRecord] -\n *          Whether to record both legs of a call when executing a Dequeue instruction\n * @param {number} [opts.dequeueTimeout] -\n *          The timeout for call when executing a Dequeue instruction\n * @param {string} [opts.dequeueTo] -\n *          The contact URI of the worker when executing a Dequeue instruction\n * @param {string} [opts.dequeueStatusCallbackUrl] -\n *          The callback URL for completed call event when executing a Dequeue instruction\n * @param {string} [opts.callFrom] -\n *          The Caller ID of the outbound call when executing a Call instruction\n * @param {string} [opts.callRecord] -\n *          Whether to record both legs of a call when executing a Call instruction\n * @param {number} [opts.callTimeout] -\n *          The timeout for a call when executing a Call instruction\n * @param {string} [opts.callTo] -\n *          The contact URI of the worker when executing a Call instruction\n * @param {string} [opts.callUrl] -\n *          TwiML URI executed on answering the worker's leg as a result of the Call instruction\n * @param {string} [opts.callStatusCallbackUrl] -\n *          The URL to call for the completed call event when executing a Call instruction\n * @param {boolean} [opts.callAccept] -\n *          Whether to accept a reservation when executing a Call instruction\n * @param {string} [opts.redirectCallSid] -\n *          The Call SID of the call parked in the queue when executing a Redirect instruction\n * @param {boolean} [opts.redirectAccept] -\n *          Whether the reservation should be accepted when executing a Redirect instruction\n * @param {string} [opts.redirectUrl] -\n *          TwiML URI to redirect the call to when executing the Redirect instruction\n * @param {string} [opts.to] -\n *          The Contact URI of the worker when executing a Conference instruction\n * @param {string} [opts.from] -\n *          The caller ID of the call to the worker when executing a Conference instruction\n * @param {string} [opts.statusCallback] -\n *          The URL we should call to send status information to your application\n * @param {string} [opts.statusCallbackMethod] -\n *          The HTTP method we should use to call status_callback\n * @param {reservation.call_status|list} [opts.statusCallbackEvent] -\n *          The call progress events that we will send to status_callback\n * @param {number} [opts.timeout] -\n *          The timeout for a call when executing a Conference instruction\n * @param {boolean} [opts.record] -\n *          Whether to record the participant and their conferences\n * @param {boolean} [opts.muted] - Whether to mute the agent\n * @param {string} [opts.beep] -\n *          Whether to play a notification beep when the participant joins\n * @param {boolean} [opts.startConferenceOnEnter] -\n *          Whether the conference starts when the participant joins the conference\n * @param {boolean} [opts.endConferenceOnExit] -\n *          Whether to end the conference when the agent leaves\n * @param {string} [opts.waitUrl] - URL that hosts pre-conference hold music\n * @param {string} [opts.waitMethod] -\n *          The HTTP method we should use to call `wait_url`\n * @param {boolean} [opts.earlyMedia] -\n *          Whether agents can hear the state of the outbound call\n * @param {number} [opts.maxParticipants] -\n *          The maximum number of agent conference participants\n * @param {string} [opts.conferenceStatusCallback] -\n *          The callback URL for conference events\n * @param {string} [opts.conferenceStatusCallbackMethod] -\n *          HTTP method for requesting `conference_status_callback` URL\n * @param {reservation.conference_event|list} [opts.conferenceStatusCallbackEvent] -\n *          The conference status events that we will send to conference_status_callback\n * @param {string} [opts.conferenceRecord] -\n *          Whether to record the conference the participant is joining\n * @param {string} [opts.conferenceTrim] -\n *          Whether to trim leading and trailing silence from your recorded conference audio files\n * @param {string} [opts.recordingChannels] -\n *          Specify `mono` or `dual` recording channels\n * @param {string} [opts.recordingStatusCallback] -\n *          The URL that we should call using the `recording_status_callback_method` when the recording status changes\n * @param {string} [opts.recordingStatusCallbackMethod] -\n *          The HTTP method we should use when we call `recording_status_callback`\n * @param {string} [opts.conferenceRecordingStatusCallback] -\n *          The URL we should call using the `conference_recording_status_callback_method` when the conference recording is available\n * @param {string} [opts.conferenceRecordingStatusCallbackMethod] -\n *          The HTTP method we should use to call `conference_recording_status_callback`\n * @param {string} [opts.region] -\n *          The region where we should mix the conference audio\n * @param {string} [opts.sipAuthUsername] -\n *          The SIP username used for authentication\n * @param {string} [opts.sipAuthPassword] - The SIP password for authentication\n * @param {string|list} [opts.dequeueStatusCallbackEvent] -\n *          The call progress events sent via webhooks as a result of a Dequeue instruction\n * @param {string} [opts.postWorkActivitySid] -\n *          The new worker activity SID after executing a Conference instruction\n * @param {boolean} [opts.endConferenceOnCustomerExit] -\n *          Whether to end the conference when the customer leaves\n * @param {boolean} [opts.beepOnCustomerEntrance] -\n *          Whether to play a notification beep when the customer joins\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ReservationInstance\n */\n\n/* jshint ignore:end */\n\n\nReservationContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n\n  opts = opts || {};\n  var deferred = Q.defer();\n  var data = values.of({\n    'ReservationStatus': _.get(opts, 'reservationStatus'),\n    'WorkerActivitySid': _.get(opts, 'workerActivitySid'),\n    'Instruction': _.get(opts, 'instruction'),\n    'DequeuePostWorkActivitySid': _.get(opts, 'dequeuePostWorkActivitySid'),\n    'DequeueFrom': _.get(opts, 'dequeueFrom'),\n    'DequeueRecord': _.get(opts, 'dequeueRecord'),\n    'DequeueTimeout': _.get(opts, 'dequeueTimeout'),\n    'DequeueTo': _.get(opts, 'dequeueTo'),\n    'DequeueStatusCallbackUrl': _.get(opts, 'dequeueStatusCallbackUrl'),\n    'CallFrom': _.get(opts, 'callFrom'),\n    'CallRecord': _.get(opts, 'callRecord'),\n    'CallTimeout': _.get(opts, 'callTimeout'),\n    'CallTo': _.get(opts, 'callTo'),\n    'CallUrl': _.get(opts, 'callUrl'),\n    'CallStatusCallbackUrl': _.get(opts, 'callStatusCallbackUrl'),\n    'CallAccept': serialize.bool(_.get(opts, 'callAccept')),\n    'RedirectCallSid': _.get(opts, 'redirectCallSid'),\n    'RedirectAccept': serialize.bool(_.get(opts, 'redirectAccept')),\n    'RedirectUrl': _.get(opts, 'redirectUrl'),\n    'To': _.get(opts, 'to'),\n    'From': _.get(opts, 'from'),\n    'StatusCallback': _.get(opts, 'statusCallback'),\n    'StatusCallbackMethod': _.get(opts, 'statusCallbackMethod'),\n    'StatusCallbackEvent': serialize.map(_.get(opts, 'statusCallbackEvent'), function (e) {\n      return e;\n    }),\n    'Timeout': _.get(opts, 'timeout'),\n    'Record': serialize.bool(_.get(opts, 'record')),\n    'Muted': serialize.bool(_.get(opts, 'muted')),\n    'Beep': _.get(opts, 'beep'),\n    'StartConferenceOnEnter': serialize.bool(_.get(opts, 'startConferenceOnEnter')),\n    'EndConferenceOnExit': serialize.bool(_.get(opts, 'endConferenceOnExit')),\n    'WaitUrl': _.get(opts, 'waitUrl'),\n    'WaitMethod': _.get(opts, 'waitMethod'),\n    'EarlyMedia': serialize.bool(_.get(opts, 'earlyMedia')),\n    'MaxParticipants': _.get(opts, 'maxParticipants'),\n    'ConferenceStatusCallback': _.get(opts, 'conferenceStatusCallback'),\n    'ConferenceStatusCallbackMethod': _.get(opts, 'conferenceStatusCallbackMethod'),\n    'ConferenceStatusCallbackEvent': serialize.map(_.get(opts, 'conferenceStatusCallbackEvent'), function (e) {\n      return e;\n    }),\n    'ConferenceRecord': _.get(opts, 'conferenceRecord'),\n    'ConferenceTrim': _.get(opts, 'conferenceTrim'),\n    'RecordingChannels': _.get(opts, 'recordingChannels'),\n    'RecordingStatusCallback': _.get(opts, 'recordingStatusCallback'),\n    'RecordingStatusCallbackMethod': _.get(opts, 'recordingStatusCallbackMethod'),\n    'ConferenceRecordingStatusCallback': _.get(opts, 'conferenceRecordingStatusCallback'),\n    'ConferenceRecordingStatusCallbackMethod': _.get(opts, 'conferenceRecordingStatusCallbackMethod'),\n    'Region': _.get(opts, 'region'),\n    'SipAuthUsername': _.get(opts, 'sipAuthUsername'),\n    'SipAuthPassword': _.get(opts, 'sipAuthPassword'),\n    'DequeueStatusCallbackEvent': serialize.map(_.get(opts, 'dequeueStatusCallbackEvent'), function (e) {\n      return e;\n    }),\n    'PostWorkActivitySid': _.get(opts, 'postWorkActivitySid'),\n    'EndConferenceOnCustomerExit': serialize.bool(_.get(opts, 'endConferenceOnCustomerExit')),\n    'BeepOnCustomerEntrance': serialize.bool(_.get(opts, 'beepOnCustomerEntrance'))\n  });\n\n  var promise = this._version.update({\n    uri: this._uri,\n    method: 'POST',\n    data: data\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new ReservationInstance(this._version, payload, this._solution.workspaceSid, this._solution.workerSid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.ReservationContext#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nReservationContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nReservationContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  ReservationList: ReservationList,\n  ReservationPage: ReservationPage,\n  ReservationInstance: ReservationInstance,\n  ReservationContext: ReservationContext\n};","map":{"version":3,"sources":["/Users/tony_niu/Visual Studio/Twilio/twilio-video-starter-kit/node_modules/twilio/lib/rest/taskrouter/v1/workspace/worker/reservation.js"],"names":["Q","require","_","util","Page","deserialize","serialize","values","ReservationList","ReservationPage","ReservationInstance","ReservationContext","version","workspaceSid","workerSid","ReservationListInstance","sid","get","_version","_solution","_uri","each","opts","callback","isFunction","isUndefined","Error","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","error","fetchNextPage","fn","promise","then","page","instances","instance","bind","nextPage","catch","merge","list","deferred","defer","allResources","resource","push","length","resolve","reject","nodeify","data","of","pageToken","pageNumber","uri","method","params","payload","getPage","targetUrl","_domain","twilio","request","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","accountSid","account_sid","dateCreated","iso8601DateTime","date_created","dateUpdated","date_updated","reservationStatus","reservation_status","taskSid","task_sid","workerName","worker_name","worker_sid","workspace_sid","url","links","_context","undefined","Object","defineProperty","fetch","_proxy","update","bool","map","e","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar Page = require('../../../../../base/Page');  /* jshint ignore:line */\nvar deserialize = require(\n    '../../../../../base/deserialize');  /* jshint ignore:line */\nvar serialize = require(\n    '../../../../../base/serialize');  /* jshint ignore:line */\nvar values = require('../../../../../base/values');  /* jshint ignore:line */\n\nvar ReservationList;\nvar ReservationPage;\nvar ReservationInstance;\nvar ReservationContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the ReservationList\n *\n * @constructor Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.ReservationList\n *\n * @param {Twilio.Taskrouter.V1} version - Version of the resource\n * @param {string} workspaceSid -\n *          The SID of the Workspace that this worker is contained within.\n * @param {string} workerSid - The SID of the reserved Worker resource\n */\n/* jshint ignore:end */\nReservationList = function ReservationList(version, workspaceSid, workerSid) {\n  /* jshint ignore:start */\n  /**\n   * @function reservations\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.ReservationContext}\n   */\n  /* jshint ignore:end */\n  function ReservationListInstance(sid) {\n    return ReservationListInstance.get(sid);\n  }\n\n  ReservationListInstance._version = version;\n  // Path Solution\n  ReservationListInstance._solution = {workspaceSid: workspaceSid, workerSid: workerSid};\n  ReservationListInstance._uri = `/Workspaces/${workspaceSid}/Workers/${workerSid}/Reservations`;\n  /* jshint ignore:start */\n  /**\n   * Streams ReservationInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.ReservationList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {reservation.status} [opts.reservationStatus] -\n   *          Returns the list of reservations for a worker with a specified ReservationStatus\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  ReservationListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists ReservationInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.ReservationList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {reservation.status} [opts.reservationStatus] -\n   *          Returns the list of reservations for a worker with a specified ReservationStatus\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  ReservationListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of ReservationInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.ReservationList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {reservation.status} [opts.reservationStatus] -\n   *          Returns the list of reservations for a worker with a specified ReservationStatus\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  ReservationListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'ReservationStatus': _.get(opts, 'reservationStatus'),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new ReservationPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of ReservationInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.ReservationList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  ReservationListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new ReservationPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a reservation\n   *\n   * @function get\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.ReservationList#\n   *\n   * @param {string} sid - The SID of the WorkerReservation resource to fetch\n   *\n   * @returns {Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.ReservationContext}\n   */\n  /* jshint ignore:end */\n  ReservationListInstance.get = function get(sid) {\n    return new ReservationContext(\n      this._version,\n      this._solution.workspaceSid,\n      this._solution.workerSid,\n      sid\n    );\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.ReservationList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  ReservationListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  ReservationListInstance[util.inspect.custom] = function inspect(depth, options)\n      {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return ReservationListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the ReservationPage\n *\n * @constructor Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.ReservationPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {ReservationSolution} solution - Path solution\n *\n * @returns ReservationPage\n */\n/* jshint ignore:end */\nReservationPage = function ReservationPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(ReservationPage.prototype, Page.prototype);\nReservationPage.prototype.constructor = ReservationPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of ReservationInstance\n *\n * @function getInstance\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.ReservationPage#\n *\n * @param {ReservationPayload} payload - Payload response from the API\n *\n * @returns ReservationInstance\n */\n/* jshint ignore:end */\nReservationPage.prototype.getInstance = function getInstance(payload) {\n  return new ReservationInstance(\n    this._version,\n    payload,\n    this._solution.workspaceSid,\n    this._solution.workerSid\n  );\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.ReservationPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nReservationPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nReservationPage.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the ReservationContext\n *\n * @constructor Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.ReservationInstance\n *\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {Date} dateCreated -\n *          The ISO 8601 date and time in GMT when the resource was created\n * @property {Date} dateUpdated -\n *          The ISO 8601 date and time in GMT when the resource was last updated\n * @property {reservation.status} reservationStatus -\n *          The current status of the reservation\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} taskSid - The SID of the reserved Task resource\n * @property {string} workerName - The friendly_name of the Worker that is reserved\n * @property {string} workerSid - The SID of the reserved Worker resource\n * @property {string} workspaceSid -\n *          The SID of the Workspace that this worker is contained within.\n * @property {string} url - The absolute URL of the WorkerReservation resource\n * @property {string} links - The URLs of related resources\n *\n * @param {V1} version - Version of the resource\n * @param {ReservationPayload} payload - The instance payload\n * @param {sid} workspaceSid -\n *          The SID of the Workspace that this worker is contained within.\n * @param {sid} workerSid - The SID of the reserved Worker resource\n * @param {sid} sid - The SID of the WorkerReservation resource to fetch\n */\n/* jshint ignore:end */\nReservationInstance = function ReservationInstance(version, payload,\n                                                    workspaceSid, workerSid,\n                                                    sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n  this.reservationStatus = payload.reservation_status; // jshint ignore:line\n  this.sid = payload.sid; // jshint ignore:line\n  this.taskSid = payload.task_sid; // jshint ignore:line\n  this.workerName = payload.worker_name; // jshint ignore:line\n  this.workerSid = payload.worker_sid; // jshint ignore:line\n  this.workspaceSid = payload.workspace_sid; // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n  this.links = payload.links; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {workspaceSid: workspaceSid, workerSid: workerSid, sid: sid || this.sid, };\n};\n\nObject.defineProperty(ReservationInstance.prototype,\n  '_proxy', {\n    get: function() {\n      if (!this._context) {\n        this._context = new ReservationContext(\n          this._version,\n          this._solution.workspaceSid,\n          this._solution.workerSid,\n          this._solution.sid\n        );\n      }\n\n      return this._context;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a ReservationInstance\n *\n * @function fetch\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.ReservationInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ReservationInstance\n */\n/* jshint ignore:end */\nReservationInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * update a ReservationInstance\n *\n * @function update\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.ReservationInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {reservation.status} [opts.reservationStatus] -\n *          The new status of the reservation\n * @param {string} [opts.workerActivitySid] -\n *          The new worker activity SID if rejecting a reservation\n * @param {string} [opts.instruction] -\n *          The assignment instruction for the reservation\n * @param {string} [opts.dequeuePostWorkActivitySid] -\n *          The SID of the Activity resource to start after executing a Dequeue instruction\n * @param {string} [opts.dequeueFrom] -\n *          The caller ID of the call to the worker when executing a Dequeue instruction\n * @param {string} [opts.dequeueRecord] -\n *          Whether to record both legs of a call when executing a Dequeue instruction\n * @param {number} [opts.dequeueTimeout] -\n *          The timeout for call when executing a Dequeue instruction\n * @param {string} [opts.dequeueTo] -\n *          The contact URI of the worker when executing a Dequeue instruction\n * @param {string} [opts.dequeueStatusCallbackUrl] -\n *          The callback URL for completed call event when executing a Dequeue instruction\n * @param {string} [opts.callFrom] -\n *          The Caller ID of the outbound call when executing a Call instruction\n * @param {string} [opts.callRecord] -\n *          Whether to record both legs of a call when executing a Call instruction\n * @param {number} [opts.callTimeout] -\n *          The timeout for a call when executing a Call instruction\n * @param {string} [opts.callTo] -\n *          The contact URI of the worker when executing a Call instruction\n * @param {string} [opts.callUrl] -\n *          TwiML URI executed on answering the worker's leg as a result of the Call instruction\n * @param {string} [opts.callStatusCallbackUrl] -\n *          The URL to call for the completed call event when executing a Call instruction\n * @param {boolean} [opts.callAccept] -\n *          Whether to accept a reservation when executing a Call instruction\n * @param {string} [opts.redirectCallSid] -\n *          The Call SID of the call parked in the queue when executing a Redirect instruction\n * @param {boolean} [opts.redirectAccept] -\n *          Whether the reservation should be accepted when executing a Redirect instruction\n * @param {string} [opts.redirectUrl] -\n *          TwiML URI to redirect the call to when executing the Redirect instruction\n * @param {string} [opts.to] -\n *          The Contact URI of the worker when executing a Conference instruction\n * @param {string} [opts.from] -\n *          The caller ID of the call to the worker when executing a Conference instruction\n * @param {string} [opts.statusCallback] -\n *          The URL we should call to send status information to your application\n * @param {string} [opts.statusCallbackMethod] -\n *          The HTTP method we should use to call status_callback\n * @param {reservation.call_status|list} [opts.statusCallbackEvent] -\n *          The call progress events that we will send to status_callback\n * @param {number} [opts.timeout] -\n *          The timeout for a call when executing a Conference instruction\n * @param {boolean} [opts.record] -\n *          Whether to record the participant and their conferences\n * @param {boolean} [opts.muted] - Whether to mute the agent\n * @param {string} [opts.beep] -\n *          Whether to play a notification beep when the participant joins\n * @param {boolean} [opts.startConferenceOnEnter] -\n *          Whether the conference starts when the participant joins the conference\n * @param {boolean} [opts.endConferenceOnExit] -\n *          Whether to end the conference when the agent leaves\n * @param {string} [opts.waitUrl] - URL that hosts pre-conference hold music\n * @param {string} [opts.waitMethod] -\n *          The HTTP method we should use to call `wait_url`\n * @param {boolean} [opts.earlyMedia] -\n *          Whether agents can hear the state of the outbound call\n * @param {number} [opts.maxParticipants] -\n *          The maximum number of agent conference participants\n * @param {string} [opts.conferenceStatusCallback] -\n *          The callback URL for conference events\n * @param {string} [opts.conferenceStatusCallbackMethod] -\n *          HTTP method for requesting `conference_status_callback` URL\n * @param {reservation.conference_event|list} [opts.conferenceStatusCallbackEvent] -\n *          The conference status events that we will send to conference_status_callback\n * @param {string} [opts.conferenceRecord] -\n *          Whether to record the conference the participant is joining\n * @param {string} [opts.conferenceTrim] -\n *          Whether to trim leading and trailing silence from your recorded conference audio files\n * @param {string} [opts.recordingChannels] -\n *          Specify `mono` or `dual` recording channels\n * @param {string} [opts.recordingStatusCallback] -\n *          The URL that we should call using the `recording_status_callback_method` when the recording status changes\n * @param {string} [opts.recordingStatusCallbackMethod] -\n *          The HTTP method we should use when we call `recording_status_callback`\n * @param {string} [opts.conferenceRecordingStatusCallback] -\n *          The URL we should call using the `conference_recording_status_callback_method` when the conference recording is available\n * @param {string} [opts.conferenceRecordingStatusCallbackMethod] -\n *          The HTTP method we should use to call `conference_recording_status_callback`\n * @param {string} [opts.region] -\n *          The region where we should mix the conference audio\n * @param {string} [opts.sipAuthUsername] -\n *          The SIP username used for authentication\n * @param {string} [opts.sipAuthPassword] - The SIP password for authentication\n * @param {string|list} [opts.dequeueStatusCallbackEvent] -\n *          The call progress events sent via webhooks as a result of a Dequeue instruction\n * @param {string} [opts.postWorkActivitySid] -\n *          The new worker activity SID after executing a Conference instruction\n * @param {boolean} [opts.endConferenceOnCustomerExit] -\n *          Whether to end the conference when the customer leaves\n * @param {boolean} [opts.beepOnCustomerEntrance] -\n *          Whether to play a notification beep when the customer joins\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ReservationInstance\n */\n/* jshint ignore:end */\nReservationInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.ReservationInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nReservationInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nReservationInstance.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the ReservationContext\n *\n * @constructor Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.ReservationContext\n *\n * @param {V1} version - Version of the resource\n * @param {sid} workspaceSid -\n *          The SID of the Workspace with the WorkerReservation resource to fetch\n * @param {sid} workerSid -\n *          The SID of the reserved Worker resource with the WorkerReservation resource to fetch\n * @param {sid} sid - The SID of the WorkerReservation resource to fetch\n */\n/* jshint ignore:end */\nReservationContext = function ReservationContext(version, workspaceSid,\n                                                  workerSid, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {workspaceSid: workspaceSid, workerSid: workerSid, sid: sid, };\n  this._uri = `/Workspaces/${workspaceSid}/Workers/${workerSid}/Reservations/${sid}`;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a ReservationInstance\n *\n * @function fetch\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.ReservationContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ReservationInstance\n */\n/* jshint ignore:end */\nReservationContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({uri: this._uri, method: 'GET'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new ReservationInstance(\n      this._version,\n      payload,\n      this._solution.workspaceSid,\n      this._solution.workerSid,\n      this._solution.sid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * update a ReservationInstance\n *\n * @function update\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.ReservationContext#\n *\n * @param {object} [opts] - Options for request\n * @param {reservation.status} [opts.reservationStatus] -\n *          The new status of the reservation\n * @param {string} [opts.workerActivitySid] -\n *          The new worker activity SID if rejecting a reservation\n * @param {string} [opts.instruction] -\n *          The assignment instruction for the reservation\n * @param {string} [opts.dequeuePostWorkActivitySid] -\n *          The SID of the Activity resource to start after executing a Dequeue instruction\n * @param {string} [opts.dequeueFrom] -\n *          The caller ID of the call to the worker when executing a Dequeue instruction\n * @param {string} [opts.dequeueRecord] -\n *          Whether to record both legs of a call when executing a Dequeue instruction\n * @param {number} [opts.dequeueTimeout] -\n *          The timeout for call when executing a Dequeue instruction\n * @param {string} [opts.dequeueTo] -\n *          The contact URI of the worker when executing a Dequeue instruction\n * @param {string} [opts.dequeueStatusCallbackUrl] -\n *          The callback URL for completed call event when executing a Dequeue instruction\n * @param {string} [opts.callFrom] -\n *          The Caller ID of the outbound call when executing a Call instruction\n * @param {string} [opts.callRecord] -\n *          Whether to record both legs of a call when executing a Call instruction\n * @param {number} [opts.callTimeout] -\n *          The timeout for a call when executing a Call instruction\n * @param {string} [opts.callTo] -\n *          The contact URI of the worker when executing a Call instruction\n * @param {string} [opts.callUrl] -\n *          TwiML URI executed on answering the worker's leg as a result of the Call instruction\n * @param {string} [opts.callStatusCallbackUrl] -\n *          The URL to call for the completed call event when executing a Call instruction\n * @param {boolean} [opts.callAccept] -\n *          Whether to accept a reservation when executing a Call instruction\n * @param {string} [opts.redirectCallSid] -\n *          The Call SID of the call parked in the queue when executing a Redirect instruction\n * @param {boolean} [opts.redirectAccept] -\n *          Whether the reservation should be accepted when executing a Redirect instruction\n * @param {string} [opts.redirectUrl] -\n *          TwiML URI to redirect the call to when executing the Redirect instruction\n * @param {string} [opts.to] -\n *          The Contact URI of the worker when executing a Conference instruction\n * @param {string} [opts.from] -\n *          The caller ID of the call to the worker when executing a Conference instruction\n * @param {string} [opts.statusCallback] -\n *          The URL we should call to send status information to your application\n * @param {string} [opts.statusCallbackMethod] -\n *          The HTTP method we should use to call status_callback\n * @param {reservation.call_status|list} [opts.statusCallbackEvent] -\n *          The call progress events that we will send to status_callback\n * @param {number} [opts.timeout] -\n *          The timeout for a call when executing a Conference instruction\n * @param {boolean} [opts.record] -\n *          Whether to record the participant and their conferences\n * @param {boolean} [opts.muted] - Whether to mute the agent\n * @param {string} [opts.beep] -\n *          Whether to play a notification beep when the participant joins\n * @param {boolean} [opts.startConferenceOnEnter] -\n *          Whether the conference starts when the participant joins the conference\n * @param {boolean} [opts.endConferenceOnExit] -\n *          Whether to end the conference when the agent leaves\n * @param {string} [opts.waitUrl] - URL that hosts pre-conference hold music\n * @param {string} [opts.waitMethod] -\n *          The HTTP method we should use to call `wait_url`\n * @param {boolean} [opts.earlyMedia] -\n *          Whether agents can hear the state of the outbound call\n * @param {number} [opts.maxParticipants] -\n *          The maximum number of agent conference participants\n * @param {string} [opts.conferenceStatusCallback] -\n *          The callback URL for conference events\n * @param {string} [opts.conferenceStatusCallbackMethod] -\n *          HTTP method for requesting `conference_status_callback` URL\n * @param {reservation.conference_event|list} [opts.conferenceStatusCallbackEvent] -\n *          The conference status events that we will send to conference_status_callback\n * @param {string} [opts.conferenceRecord] -\n *          Whether to record the conference the participant is joining\n * @param {string} [opts.conferenceTrim] -\n *          Whether to trim leading and trailing silence from your recorded conference audio files\n * @param {string} [opts.recordingChannels] -\n *          Specify `mono` or `dual` recording channels\n * @param {string} [opts.recordingStatusCallback] -\n *          The URL that we should call using the `recording_status_callback_method` when the recording status changes\n * @param {string} [opts.recordingStatusCallbackMethod] -\n *          The HTTP method we should use when we call `recording_status_callback`\n * @param {string} [opts.conferenceRecordingStatusCallback] -\n *          The URL we should call using the `conference_recording_status_callback_method` when the conference recording is available\n * @param {string} [opts.conferenceRecordingStatusCallbackMethod] -\n *          The HTTP method we should use to call `conference_recording_status_callback`\n * @param {string} [opts.region] -\n *          The region where we should mix the conference audio\n * @param {string} [opts.sipAuthUsername] -\n *          The SIP username used for authentication\n * @param {string} [opts.sipAuthPassword] - The SIP password for authentication\n * @param {string|list} [opts.dequeueStatusCallbackEvent] -\n *          The call progress events sent via webhooks as a result of a Dequeue instruction\n * @param {string} [opts.postWorkActivitySid] -\n *          The new worker activity SID after executing a Conference instruction\n * @param {boolean} [opts.endConferenceOnCustomerExit] -\n *          Whether to end the conference when the customer leaves\n * @param {boolean} [opts.beepOnCustomerEntrance] -\n *          Whether to play a notification beep when the customer joins\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ReservationInstance\n */\n/* jshint ignore:end */\nReservationContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n  opts = opts || {};\n\n  var deferred = Q.defer();\n  var data = values.of({\n    'ReservationStatus': _.get(opts, 'reservationStatus'),\n    'WorkerActivitySid': _.get(opts, 'workerActivitySid'),\n    'Instruction': _.get(opts, 'instruction'),\n    'DequeuePostWorkActivitySid': _.get(opts, 'dequeuePostWorkActivitySid'),\n    'DequeueFrom': _.get(opts, 'dequeueFrom'),\n    'DequeueRecord': _.get(opts, 'dequeueRecord'),\n    'DequeueTimeout': _.get(opts, 'dequeueTimeout'),\n    'DequeueTo': _.get(opts, 'dequeueTo'),\n    'DequeueStatusCallbackUrl': _.get(opts, 'dequeueStatusCallbackUrl'),\n    'CallFrom': _.get(opts, 'callFrom'),\n    'CallRecord': _.get(opts, 'callRecord'),\n    'CallTimeout': _.get(opts, 'callTimeout'),\n    'CallTo': _.get(opts, 'callTo'),\n    'CallUrl': _.get(opts, 'callUrl'),\n    'CallStatusCallbackUrl': _.get(opts, 'callStatusCallbackUrl'),\n    'CallAccept': serialize.bool(_.get(opts, 'callAccept')),\n    'RedirectCallSid': _.get(opts, 'redirectCallSid'),\n    'RedirectAccept': serialize.bool(_.get(opts, 'redirectAccept')),\n    'RedirectUrl': _.get(opts, 'redirectUrl'),\n    'To': _.get(opts, 'to'),\n    'From': _.get(opts, 'from'),\n    'StatusCallback': _.get(opts, 'statusCallback'),\n    'StatusCallbackMethod': _.get(opts, 'statusCallbackMethod'),\n    'StatusCallbackEvent': serialize.map(_.get(opts, 'statusCallbackEvent'), function(e) { return e; }),\n    'Timeout': _.get(opts, 'timeout'),\n    'Record': serialize.bool(_.get(opts, 'record')),\n    'Muted': serialize.bool(_.get(opts, 'muted')),\n    'Beep': _.get(opts, 'beep'),\n    'StartConferenceOnEnter': serialize.bool(_.get(opts, 'startConferenceOnEnter')),\n    'EndConferenceOnExit': serialize.bool(_.get(opts, 'endConferenceOnExit')),\n    'WaitUrl': _.get(opts, 'waitUrl'),\n    'WaitMethod': _.get(opts, 'waitMethod'),\n    'EarlyMedia': serialize.bool(_.get(opts, 'earlyMedia')),\n    'MaxParticipants': _.get(opts, 'maxParticipants'),\n    'ConferenceStatusCallback': _.get(opts, 'conferenceStatusCallback'),\n    'ConferenceStatusCallbackMethod': _.get(opts, 'conferenceStatusCallbackMethod'),\n    'ConferenceStatusCallbackEvent': serialize.map(_.get(opts, 'conferenceStatusCallbackEvent'), function(e) { return e; }),\n    'ConferenceRecord': _.get(opts, 'conferenceRecord'),\n    'ConferenceTrim': _.get(opts, 'conferenceTrim'),\n    'RecordingChannels': _.get(opts, 'recordingChannels'),\n    'RecordingStatusCallback': _.get(opts, 'recordingStatusCallback'),\n    'RecordingStatusCallbackMethod': _.get(opts, 'recordingStatusCallbackMethod'),\n    'ConferenceRecordingStatusCallback': _.get(opts, 'conferenceRecordingStatusCallback'),\n    'ConferenceRecordingStatusCallbackMethod': _.get(opts, 'conferenceRecordingStatusCallbackMethod'),\n    'Region': _.get(opts, 'region'),\n    'SipAuthUsername': _.get(opts, 'sipAuthUsername'),\n    'SipAuthPassword': _.get(opts, 'sipAuthPassword'),\n    'DequeueStatusCallbackEvent': serialize.map(_.get(opts, 'dequeueStatusCallbackEvent'), function(e) { return e; }),\n    'PostWorkActivitySid': _.get(opts, 'postWorkActivitySid'),\n    'EndConferenceOnCustomerExit': serialize.bool(_.get(opts, 'endConferenceOnCustomerExit')),\n    'BeepOnCustomerEntrance': serialize.bool(_.get(opts, 'beepOnCustomerEntrance'))\n  });\n\n  var promise = this._version.update({uri: this._uri, method: 'POST', data: data});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new ReservationInstance(\n      this._version,\n      payload,\n      this._solution.workspaceSid,\n      this._solution.workerSid,\n      this._solution.sid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.ReservationContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nReservationContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nReservationContext.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  ReservationList: ReservationList,\n  ReservationPage: ReservationPage,\n  ReservationInstance: ReservationInstance,\n  ReservationContext: ReservationContext\n};\n"]},"metadata":{},"sourceType":"script"}