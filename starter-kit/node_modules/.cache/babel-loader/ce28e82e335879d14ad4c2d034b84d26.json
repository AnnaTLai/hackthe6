{"ast":null,"code":"'use strict';\n/* jshint ignore:start */\n\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n\n/* jshint ignore:end */\n\nvar Q = require('q');\n/* jshint ignore:line */\n\n\nvar _ = require('lodash');\n/* jshint ignore:line */\n\n\nvar util = require('util');\n/* jshint ignore:line */\n\n\nvar MessageInteractionList = require('./participant/messageInteraction').MessageInteractionList;\n\nvar Page = require('../../../../../base/Page');\n/* jshint ignore:line */\n\n\nvar deserialize = require('../../../../../base/deserialize');\n/* jshint ignore:line */\n\n\nvar serialize = require('../../../../../base/serialize');\n/* jshint ignore:line */\n\n\nvar values = require('../../../../../base/values');\n/* jshint ignore:line */\n\n\nvar ParticipantList;\nvar ParticipantPage;\nvar ParticipantInstance;\nvar ParticipantContext;\n/* jshint ignore:start */\n\n/**\n * Initialize the ParticipantList\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Proxy.V1.ServiceContext.SessionContext.ParticipantList\n *\n * @param {Twilio.Proxy.V1} version - Version of the resource\n * @param {string} serviceSid - The SID of the resource's parent Service\n * @param {string} sessionSid - The SID of the resource's parent Session\n */\n\n/* jshint ignore:end */\n\nParticipantList = function ParticipantList(version, serviceSid, sessionSid) {\n  /* jshint ignore:start */\n\n  /**\n   * @function participants\n   * @memberof Twilio.Proxy.V1.ServiceContext.SessionContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Proxy.V1.ServiceContext.SessionContext.ParticipantContext}\n   */\n\n  /* jshint ignore:end */\n  function ParticipantListInstance(sid) {\n    return ParticipantListInstance.get(sid);\n  }\n\n  ParticipantListInstance._version = version; // Path Solution\n\n  ParticipantListInstance._solution = {\n    serviceSid: serviceSid,\n    sessionSid: sessionSid\n  };\n  ParticipantListInstance._uri = `/Services/${serviceSid}/Sessions/${sessionSid}/Participants`;\n  /* jshint ignore:start */\n\n  /**\n   * Streams ParticipantInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Proxy.V1.ServiceContext.SessionContext.ParticipantList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n\n  /* jshint ignore:end */\n\n  ParticipantListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Lists ParticipantInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Proxy.V1.ServiceContext.SessionContext.ParticipantList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  ParticipantListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single page of ParticipantInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Proxy.V1.ServiceContext.SessionContext.ParticipantList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  ParticipantListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new ParticipantPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single target page of ParticipantInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Proxy.V1.ServiceContext.SessionContext.ParticipantList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  ParticipantListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new ParticipantPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * create a ParticipantInstance\n   *\n   * @function create\n   * @memberof Twilio.Proxy.V1.ServiceContext.SessionContext.ParticipantList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.identifier - The phone number of the Participant\n   * @param {string} [opts.friendlyName] -\n   *          The string that you assigned to describe the participant\n   * @param {string} [opts.proxyIdentifier] -\n   *          The proxy phone number to use for the Participant\n   * @param {string} [opts.proxyIdentifierSid] - The Proxy Identifier Sid\n   * @param {boolean} [opts.failOnParticipantConflict] -\n   *          An experimental parameter to override the ProxyAllowParticipantConflict account flag on a per-request basis.\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed ParticipantInstance\n   */\n\n  /* jshint ignore:end */\n\n\n  ParticipantListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n\n    if (_.isUndefined(opts.identifier)) {\n      throw new Error('Required parameter \"opts.identifier\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'Identifier': _.get(opts, 'identifier'),\n      'FriendlyName': _.get(opts, 'friendlyName'),\n      'ProxyIdentifier': _.get(opts, 'proxyIdentifier'),\n      'ProxyIdentifierSid': _.get(opts, 'proxyIdentifierSid'),\n      'FailOnParticipantConflict': serialize.bool(_.get(opts, 'failOnParticipantConflict'))\n    });\n\n    var promise = this._version.create({\n      uri: this._uri,\n      method: 'POST',\n      data: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new ParticipantInstance(this._version, payload, this._solution.serviceSid, this._solution.sessionSid, this._solution.sid));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Constructs a participant\n   *\n   * @function get\n   * @memberof Twilio.Proxy.V1.ServiceContext.SessionContext.ParticipantList#\n   *\n   * @param {string} sid - The unique string that identifies the resource\n   *\n   * @returns {Twilio.Proxy.V1.ServiceContext.SessionContext.ParticipantContext}\n   */\n\n  /* jshint ignore:end */\n\n\n  ParticipantListInstance.get = function get(sid) {\n    return new ParticipantContext(this._version, this._solution.serviceSid, this._solution.sessionSid, sid);\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Proxy.V1.ServiceContext.SessionContext.ParticipantList#\n   *\n   * @returns Object\n   */\n\n  /* jshint ignore:end */\n\n\n  ParticipantListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  ParticipantListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return ParticipantListInstance;\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the ParticipantPage\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Proxy.V1.ServiceContext.SessionContext.ParticipantPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {ParticipantSolution} solution - Path solution\n *\n * @returns ParticipantPage\n */\n\n/* jshint ignore:end */\n\n\nParticipantPage = function ParticipantPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(ParticipantPage.prototype, Page.prototype);\n\nParticipantPage.prototype.constructor = ParticipantPage;\n/* jshint ignore:start */\n\n/**\n * Build an instance of ParticipantInstance\n *\n * @function getInstance\n * @memberof Twilio.Proxy.V1.ServiceContext.SessionContext.ParticipantPage#\n *\n * @param {ParticipantPayload} payload - Payload response from the API\n *\n * @returns ParticipantInstance\n */\n\n/* jshint ignore:end */\n\nParticipantPage.prototype.getInstance = function getInstance(payload) {\n  return new ParticipantInstance(this._version, payload, this._solution.serviceSid, this._solution.sessionSid);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Proxy.V1.ServiceContext.SessionContext.ParticipantPage#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nParticipantPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nParticipantPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the ParticipantContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Proxy.V1.ServiceContext.SessionContext.ParticipantInstance\n *\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} sessionSid - The SID of the resource's parent Session\n * @property {string} serviceSid - The SID of the resource's parent Service\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {string} friendlyName -\n *          The string that you assigned to describe the participant\n * @property {string} identifier -\n *          The phone number or channel identifier of the Participant\n * @property {string} proxyIdentifier -\n *          The phone number or short code of the participant's partner\n * @property {string} proxyIdentifierSid -\n *          The SID of the Proxy Identifier assigned to the Participant\n * @property {Date} dateDeleted - The ISO 8601 date the Participant was removed\n * @property {Date} dateCreated -\n *          The ISO 8601 date and time in GMT when the resource was created\n * @property {Date} dateUpdated -\n *          The ISO 8601 date and time in GMT when the resource was last updated\n * @property {string} url - The absolute URL of the Participant resource\n * @property {string} links - The URLs to resources related the participant\n *\n * @param {V1} version - Version of the resource\n * @param {ParticipantPayload} payload - The instance payload\n * @param {sid} serviceSid - The SID of the resource's parent Service\n * @param {sid} sessionSid - The SID of the resource's parent Session\n * @param {sid} sid - The unique string that identifies the resource\n */\n\n/* jshint ignore:end */\n\n\nParticipantInstance = function ParticipantInstance(version, payload, serviceSid, sessionSid, sid) {\n  this._version = version; // Marshaled Properties\n\n  this.sid = payload.sid; // jshint ignore:line\n\n  this.sessionSid = payload.session_sid; // jshint ignore:line\n\n  this.serviceSid = payload.service_sid; // jshint ignore:line\n\n  this.accountSid = payload.account_sid; // jshint ignore:line\n\n  this.friendlyName = payload.friendly_name; // jshint ignore:line\n\n  this.identifier = payload.identifier; // jshint ignore:line\n\n  this.proxyIdentifier = payload.proxy_identifier; // jshint ignore:line\n\n  this.proxyIdentifierSid = payload.proxy_identifier_sid; // jshint ignore:line\n\n  this.dateDeleted = deserialize.iso8601DateTime(payload.date_deleted); // jshint ignore:line\n\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n\n  this.url = payload.url; // jshint ignore:line\n\n  this.links = payload.links; // jshint ignore:line\n  // Context\n\n  this._context = undefined;\n  this._solution = {\n    serviceSid: serviceSid,\n    sessionSid: sessionSid,\n    sid: sid || this.sid\n  };\n};\n\nObject.defineProperty(ParticipantInstance.prototype, '_proxy', {\n  get: function () {\n    if (!this._context) {\n      this._context = new ParticipantContext(this._version, this._solution.serviceSid, this._solution.sessionSid, this._solution.sid);\n    }\n\n    return this._context;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * fetch a ParticipantInstance\n *\n * @function fetch\n * @memberof Twilio.Proxy.V1.ServiceContext.SessionContext.ParticipantInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ParticipantInstance\n */\n\n/* jshint ignore:end */\n\nParticipantInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n/* jshint ignore:start */\n\n/**\n * remove a ParticipantInstance\n *\n * @function remove\n * @memberof Twilio.Proxy.V1.ServiceContext.SessionContext.ParticipantInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ParticipantInstance\n */\n\n/* jshint ignore:end */\n\n\nParticipantInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n/* jshint ignore:start */\n\n/**\n * Access the messageInteractions\n *\n * @function messageInteractions\n * @memberof Twilio.Proxy.V1.ServiceContext.SessionContext.ParticipantInstance#\n *\n * @returns {Twilio.Proxy.V1.ServiceContext.SessionContext.ParticipantContext.MessageInteractionList}\n */\n\n/* jshint ignore:end */\n\n\nParticipantInstance.prototype.messageInteractions = function messageInteractions() {\n  return this._proxy.messageInteractions;\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Proxy.V1.ServiceContext.SessionContext.ParticipantInstance#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nParticipantInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nParticipantInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the ParticipantContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Proxy.V1.ServiceContext.SessionContext.ParticipantContext\n *\n * @property {Twilio.Proxy.V1.ServiceContext.SessionContext.ParticipantContext.MessageInteractionList} messageInteractions -\n *          messageInteractions resource\n *\n * @param {V1} version - Version of the resource\n * @param {sid} serviceSid - The SID of the parent Service of the resource to fetch\n * @param {sid} sessionSid - The SID of the parent Session of the resource to fetch\n * @param {sid} sid - The unique string that identifies the resource\n */\n\n/* jshint ignore:end */\n\n\nParticipantContext = function ParticipantContext(version, serviceSid, sessionSid, sid) {\n  this._version = version; // Path Solution\n\n  this._solution = {\n    serviceSid: serviceSid,\n    sessionSid: sessionSid,\n    sid: sid\n  };\n  this._uri = `/Services/${serviceSid}/Sessions/${sessionSid}/Participants/${sid}`; // Dependents\n\n  this._messageInteractions = undefined;\n};\n/* jshint ignore:start */\n\n/**\n * fetch a ParticipantInstance\n *\n * @function fetch\n * @memberof Twilio.Proxy.V1.ServiceContext.SessionContext.ParticipantContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ParticipantInstance\n */\n\n/* jshint ignore:end */\n\n\nParticipantContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new ParticipantInstance(this._version, payload, this._solution.serviceSid, this._solution.sessionSid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * remove a ParticipantInstance\n *\n * @function remove\n * @memberof Twilio.Proxy.V1.ServiceContext.SessionContext.ParticipantContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ParticipantInstance\n */\n\n/* jshint ignore:end */\n\n\nParticipantContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.remove({\n    uri: this._uri,\n    method: 'DELETE'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\nObject.defineProperty(ParticipantContext.prototype, 'messageInteractions', {\n  get: function () {\n    if (!this._messageInteractions) {\n      this._messageInteractions = new MessageInteractionList(this._version, this._solution.serviceSid, this._solution.sessionSid, this._solution.sid);\n    }\n\n    return this._messageInteractions;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Proxy.V1.ServiceContext.SessionContext.ParticipantContext#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\nParticipantContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nParticipantContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  ParticipantList: ParticipantList,\n  ParticipantPage: ParticipantPage,\n  ParticipantInstance: ParticipantInstance,\n  ParticipantContext: ParticipantContext\n};","map":{"version":3,"sources":["/Users/tony_niu/Visual Studio/Twilio/twilio-video-starter-kit/src/token-service/node_modules/twilio/lib/rest/proxy/v1/service/session/participant.js"],"names":["Q","require","_","util","MessageInteractionList","Page","deserialize","serialize","values","ParticipantList","ParticipantPage","ParticipantInstance","ParticipantContext","version","serviceSid","sessionSid","ParticipantListInstance","sid","get","_version","_solution","_uri","each","opts","callback","isFunction","isUndefined","Error","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","error","fetchNextPage","fn","promise","then","page","instances","instance","bind","nextPage","catch","merge","list","deferred","defer","allResources","resource","push","length","resolve","reject","nodeify","data","of","pageToken","pageNumber","uri","method","params","payload","getPage","targetUrl","_domain","twilio","request","create","identifier","bool","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","session_sid","service_sid","accountSid","account_sid","friendlyName","friendly_name","proxyIdentifier","proxy_identifier","proxyIdentifierSid","proxy_identifier_sid","dateDeleted","iso8601DateTime","date_deleted","dateCreated","date_created","dateUpdated","date_updated","url","links","_context","undefined","Object","defineProperty","fetch","_proxy","remove","messageInteractions","_messageInteractions","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar MessageInteractionList = require(\n    './participant/messageInteraction').MessageInteractionList;\nvar Page = require('../../../../../base/Page');  /* jshint ignore:line */\nvar deserialize = require(\n    '../../../../../base/deserialize');  /* jshint ignore:line */\nvar serialize = require(\n    '../../../../../base/serialize');  /* jshint ignore:line */\nvar values = require('../../../../../base/values');  /* jshint ignore:line */\n\nvar ParticipantList;\nvar ParticipantPage;\nvar ParticipantInstance;\nvar ParticipantContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the ParticipantList\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Proxy.V1.ServiceContext.SessionContext.ParticipantList\n *\n * @param {Twilio.Proxy.V1} version - Version of the resource\n * @param {string} serviceSid - The SID of the resource's parent Service\n * @param {string} sessionSid - The SID of the resource's parent Session\n */\n/* jshint ignore:end */\nParticipantList = function ParticipantList(version, serviceSid, sessionSid) {\n  /* jshint ignore:start */\n  /**\n   * @function participants\n   * @memberof Twilio.Proxy.V1.ServiceContext.SessionContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Proxy.V1.ServiceContext.SessionContext.ParticipantContext}\n   */\n  /* jshint ignore:end */\n  function ParticipantListInstance(sid) {\n    return ParticipantListInstance.get(sid);\n  }\n\n  ParticipantListInstance._version = version;\n  // Path Solution\n  ParticipantListInstance._solution = {serviceSid: serviceSid, sessionSid: sessionSid};\n  ParticipantListInstance._uri = `/Services/${serviceSid}/Sessions/${sessionSid}/Participants`;\n  /* jshint ignore:start */\n  /**\n   * Streams ParticipantInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Proxy.V1.ServiceContext.SessionContext.ParticipantList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  ParticipantListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists ParticipantInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Proxy.V1.ServiceContext.SessionContext.ParticipantList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  ParticipantListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of ParticipantInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Proxy.V1.ServiceContext.SessionContext.ParticipantList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  ParticipantListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new ParticipantPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of ParticipantInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Proxy.V1.ServiceContext.SessionContext.ParticipantList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  ParticipantListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new ParticipantPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * create a ParticipantInstance\n   *\n   * @function create\n   * @memberof Twilio.Proxy.V1.ServiceContext.SessionContext.ParticipantList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.identifier - The phone number of the Participant\n   * @param {string} [opts.friendlyName] -\n   *          The string that you assigned to describe the participant\n   * @param {string} [opts.proxyIdentifier] -\n   *          The proxy phone number to use for the Participant\n   * @param {string} [opts.proxyIdentifierSid] - The Proxy Identifier Sid\n   * @param {boolean} [opts.failOnParticipantConflict] -\n   *          An experimental parameter to override the ProxyAllowParticipantConflict account flag on a per-request basis.\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed ParticipantInstance\n   */\n  /* jshint ignore:end */\n  ParticipantListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n    if (_.isUndefined(opts.identifier)) {\n      throw new Error('Required parameter \"opts.identifier\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'Identifier': _.get(opts, 'identifier'),\n      'FriendlyName': _.get(opts, 'friendlyName'),\n      'ProxyIdentifier': _.get(opts, 'proxyIdentifier'),\n      'ProxyIdentifierSid': _.get(opts, 'proxyIdentifierSid'),\n      'FailOnParticipantConflict': serialize.bool(_.get(opts, 'failOnParticipantConflict'))\n    });\n\n    var promise = this._version.create({uri: this._uri, method: 'POST', data: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new ParticipantInstance(\n        this._version,\n        payload,\n        this._solution.serviceSid,\n        this._solution.sessionSid,\n        this._solution.sid\n      ));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a participant\n   *\n   * @function get\n   * @memberof Twilio.Proxy.V1.ServiceContext.SessionContext.ParticipantList#\n   *\n   * @param {string} sid - The unique string that identifies the resource\n   *\n   * @returns {Twilio.Proxy.V1.ServiceContext.SessionContext.ParticipantContext}\n   */\n  /* jshint ignore:end */\n  ParticipantListInstance.get = function get(sid) {\n    return new ParticipantContext(\n      this._version,\n      this._solution.serviceSid,\n      this._solution.sessionSid,\n      sid\n    );\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Proxy.V1.ServiceContext.SessionContext.ParticipantList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  ParticipantListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  ParticipantListInstance[util.inspect.custom] = function inspect(depth, options)\n      {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return ParticipantListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the ParticipantPage\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Proxy.V1.ServiceContext.SessionContext.ParticipantPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {ParticipantSolution} solution - Path solution\n *\n * @returns ParticipantPage\n */\n/* jshint ignore:end */\nParticipantPage = function ParticipantPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(ParticipantPage.prototype, Page.prototype);\nParticipantPage.prototype.constructor = ParticipantPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of ParticipantInstance\n *\n * @function getInstance\n * @memberof Twilio.Proxy.V1.ServiceContext.SessionContext.ParticipantPage#\n *\n * @param {ParticipantPayload} payload - Payload response from the API\n *\n * @returns ParticipantInstance\n */\n/* jshint ignore:end */\nParticipantPage.prototype.getInstance = function getInstance(payload) {\n  return new ParticipantInstance(\n    this._version,\n    payload,\n    this._solution.serviceSid,\n    this._solution.sessionSid\n  );\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Proxy.V1.ServiceContext.SessionContext.ParticipantPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nParticipantPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nParticipantPage.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the ParticipantContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Proxy.V1.ServiceContext.SessionContext.ParticipantInstance\n *\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} sessionSid - The SID of the resource's parent Session\n * @property {string} serviceSid - The SID of the resource's parent Service\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {string} friendlyName -\n *          The string that you assigned to describe the participant\n * @property {string} identifier -\n *          The phone number or channel identifier of the Participant\n * @property {string} proxyIdentifier -\n *          The phone number or short code of the participant's partner\n * @property {string} proxyIdentifierSid -\n *          The SID of the Proxy Identifier assigned to the Participant\n * @property {Date} dateDeleted - The ISO 8601 date the Participant was removed\n * @property {Date} dateCreated -\n *          The ISO 8601 date and time in GMT when the resource was created\n * @property {Date} dateUpdated -\n *          The ISO 8601 date and time in GMT when the resource was last updated\n * @property {string} url - The absolute URL of the Participant resource\n * @property {string} links - The URLs to resources related the participant\n *\n * @param {V1} version - Version of the resource\n * @param {ParticipantPayload} payload - The instance payload\n * @param {sid} serviceSid - The SID of the resource's parent Service\n * @param {sid} sessionSid - The SID of the resource's parent Session\n * @param {sid} sid - The unique string that identifies the resource\n */\n/* jshint ignore:end */\nParticipantInstance = function ParticipantInstance(version, payload, serviceSid,\n                                                    sessionSid, sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.sid = payload.sid; // jshint ignore:line\n  this.sessionSid = payload.session_sid; // jshint ignore:line\n  this.serviceSid = payload.service_sid; // jshint ignore:line\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.friendlyName = payload.friendly_name; // jshint ignore:line\n  this.identifier = payload.identifier; // jshint ignore:line\n  this.proxyIdentifier = payload.proxy_identifier; // jshint ignore:line\n  this.proxyIdentifierSid = payload.proxy_identifier_sid; // jshint ignore:line\n  this.dateDeleted = deserialize.iso8601DateTime(payload.date_deleted); // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n  this.links = payload.links; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {serviceSid: serviceSid, sessionSid: sessionSid, sid: sid || this.sid, };\n};\n\nObject.defineProperty(ParticipantInstance.prototype,\n  '_proxy', {\n    get: function() {\n      if (!this._context) {\n        this._context = new ParticipantContext(\n          this._version,\n          this._solution.serviceSid,\n          this._solution.sessionSid,\n          this._solution.sid\n        );\n      }\n\n      return this._context;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a ParticipantInstance\n *\n * @function fetch\n * @memberof Twilio.Proxy.V1.ServiceContext.SessionContext.ParticipantInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ParticipantInstance\n */\n/* jshint ignore:end */\nParticipantInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * remove a ParticipantInstance\n *\n * @function remove\n * @memberof Twilio.Proxy.V1.ServiceContext.SessionContext.ParticipantInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ParticipantInstance\n */\n/* jshint ignore:end */\nParticipantInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n\n/* jshint ignore:start */\n/**\n * Access the messageInteractions\n *\n * @function messageInteractions\n * @memberof Twilio.Proxy.V1.ServiceContext.SessionContext.ParticipantInstance#\n *\n * @returns {Twilio.Proxy.V1.ServiceContext.SessionContext.ParticipantContext.MessageInteractionList}\n */\n/* jshint ignore:end */\nParticipantInstance.prototype.messageInteractions = function\n    messageInteractions() {\n  return this._proxy.messageInteractions;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Proxy.V1.ServiceContext.SessionContext.ParticipantInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nParticipantInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nParticipantInstance.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the ParticipantContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Proxy.V1.ServiceContext.SessionContext.ParticipantContext\n *\n * @property {Twilio.Proxy.V1.ServiceContext.SessionContext.ParticipantContext.MessageInteractionList} messageInteractions -\n *          messageInteractions resource\n *\n * @param {V1} version - Version of the resource\n * @param {sid} serviceSid - The SID of the parent Service of the resource to fetch\n * @param {sid} sessionSid - The SID of the parent Session of the resource to fetch\n * @param {sid} sid - The unique string that identifies the resource\n */\n/* jshint ignore:end */\nParticipantContext = function ParticipantContext(version, serviceSid,\n                                                  sessionSid, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {serviceSid: serviceSid, sessionSid: sessionSid, sid: sid, };\n  this._uri = `/Services/${serviceSid}/Sessions/${sessionSid}/Participants/${sid}`;\n\n  // Dependents\n  this._messageInteractions = undefined;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a ParticipantInstance\n *\n * @function fetch\n * @memberof Twilio.Proxy.V1.ServiceContext.SessionContext.ParticipantContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ParticipantInstance\n */\n/* jshint ignore:end */\nParticipantContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({uri: this._uri, method: 'GET'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new ParticipantInstance(\n      this._version,\n      payload,\n      this._solution.serviceSid,\n      this._solution.sessionSid,\n      this._solution.sid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * remove a ParticipantInstance\n *\n * @function remove\n * @memberof Twilio.Proxy.V1.ServiceContext.SessionContext.ParticipantContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ParticipantInstance\n */\n/* jshint ignore:end */\nParticipantContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.remove({uri: this._uri, method: 'DELETE'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\nObject.defineProperty(ParticipantContext.prototype,\n  'messageInteractions', {\n    get: function() {\n      if (!this._messageInteractions) {\n        this._messageInteractions = new MessageInteractionList(\n          this._version,\n          this._solution.serviceSid,\n          this._solution.sessionSid,\n          this._solution.sid\n        );\n      }\n      return this._messageInteractions;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Proxy.V1.ServiceContext.SessionContext.ParticipantContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nParticipantContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nParticipantContext.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  ParticipantList: ParticipantList,\n  ParticipantPage: ParticipantPage,\n  ParticipantInstance: ParticipantInstance,\n  ParticipantContext: ParticipantContext\n};\n"]},"metadata":{},"sourceType":"module"}