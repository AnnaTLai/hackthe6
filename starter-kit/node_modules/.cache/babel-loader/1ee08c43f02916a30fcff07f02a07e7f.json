{"ast":null,"code":"'use strict';\n/* jshint ignore:start */\n\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n\n/* jshint ignore:end */\n\nvar Q = require('q');\n/* jshint ignore:line */\n\n\nvar _ = require('lodash');\n/* jshint ignore:line */\n\n\nvar util = require('util');\n/* jshint ignore:line */\n\n\nvar Page = require('../../../../base/Page');\n/* jshint ignore:line */\n\n\nvar values = require('../../../../base/values');\n/* jshint ignore:line */\n\n\nvar ExportCustomJobList;\nvar ExportCustomJobPage;\nvar ExportCustomJobInstance;\n/* jshint ignore:start */\n\n/**\n * Initialize the ExportCustomJobList\n *\n * @constructor Twilio.Bulkexports.V1.ExportContext.ExportCustomJobList\n *\n * @param {Twilio.Bulkexports.V1} version - Version of the resource\n * @param {string} resourceType -\n *          The type of communication â€“ Messages, Calls, Conferences, and Participants\n */\n\n/* jshint ignore:end */\n\nExportCustomJobList = function ExportCustomJobList(version, resourceType) {\n  /* jshint ignore:start */\n\n  /**\n   * @function exportCustomJobs\n   * @memberof Twilio.Bulkexports.V1.ExportContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Bulkexports.V1.ExportContext.ExportCustomJobContext}\n   */\n\n  /* jshint ignore:end */\n  function ExportCustomJobListInstance(sid) {\n    return ExportCustomJobListInstance.get(sid);\n  }\n\n  ExportCustomJobListInstance._version = version; // Path Solution\n\n  ExportCustomJobListInstance._solution = {\n    resourceType: resourceType\n  };\n  ExportCustomJobListInstance._uri = `/Exports/${resourceType}/Jobs`;\n  /* jshint ignore:start */\n\n  /**\n   * Streams ExportCustomJobInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Bulkexports.V1.ExportContext.ExportCustomJobList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n\n  /* jshint ignore:end */\n\n  ExportCustomJobListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Lists ExportCustomJobInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Bulkexports.V1.ExportContext.ExportCustomJobList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  ExportCustomJobListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single page of ExportCustomJobInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Bulkexports.V1.ExportContext.ExportCustomJobList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  ExportCustomJobListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new ExportCustomJobPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single target page of ExportCustomJobInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Bulkexports.V1.ExportContext.ExportCustomJobList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  ExportCustomJobListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new ExportCustomJobPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * create a ExportCustomJobInstance\n   *\n   * @function create\n   * @memberof Twilio.Bulkexports.V1.ExportContext.ExportCustomJobList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.startDay -\n   *          The start day for the custom export specified as a string in the format of yyyy-mm-dd\n   * @param {string} opts.endDay -\n   *          The end day for the custom export specified as a string in the format of yyyy-mm-dd. End day is inclusive and must be 2 days earlier than the current UTC day.\n   * @param {string} opts.friendlyName -\n   *          The friendly name specified when creating the job\n   * @param {string} [opts.webhookUrl] -\n   *          The optional webhook url called on completion of the job. If this is supplied, `WebhookMethod` must also be supplied.\n   * @param {string} [opts.webhookMethod] -\n   *          This is the method used to call the webhook on completion of the job. If this is supplied, `WebhookUrl` must also be supplied.\n   * @param {string} [opts.email] -\n   *          The optional email to send the completion notification to\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed ExportCustomJobInstance\n   */\n\n  /* jshint ignore:end */\n\n\n  ExportCustomJobListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n\n    if (_.isUndefined(opts.startDay)) {\n      throw new Error('Required parameter \"opts.startDay\" missing.');\n    }\n\n    if (_.isUndefined(opts.endDay)) {\n      throw new Error('Required parameter \"opts.endDay\" missing.');\n    }\n\n    if (_.isUndefined(opts.friendlyName)) {\n      throw new Error('Required parameter \"opts.friendlyName\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'StartDay': _.get(opts, 'startDay'),\n      'EndDay': _.get(opts, 'endDay'),\n      'FriendlyName': _.get(opts, 'friendlyName'),\n      'WebhookUrl': _.get(opts, 'webhookUrl'),\n      'WebhookMethod': _.get(opts, 'webhookMethod'),\n      'Email': _.get(opts, 'email')\n    });\n\n    var promise = this._version.create({\n      uri: this._uri,\n      method: 'POST',\n      data: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new ExportCustomJobInstance(this._version, payload));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Bulkexports.V1.ExportContext.ExportCustomJobList#\n   *\n   * @returns Object\n   */\n\n  /* jshint ignore:end */\n\n\n  ExportCustomJobListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  ExportCustomJobListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return ExportCustomJobListInstance;\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the ExportCustomJobPage\n *\n * @constructor Twilio.Bulkexports.V1.ExportContext.ExportCustomJobPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {ExportCustomJobSolution} solution - Path solution\n *\n * @returns ExportCustomJobPage\n */\n\n/* jshint ignore:end */\n\n\nExportCustomJobPage = function ExportCustomJobPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(ExportCustomJobPage.prototype, Page.prototype);\n\nExportCustomJobPage.prototype.constructor = ExportCustomJobPage;\n/* jshint ignore:start */\n\n/**\n * Build an instance of ExportCustomJobInstance\n *\n * @function getInstance\n * @memberof Twilio.Bulkexports.V1.ExportContext.ExportCustomJobPage#\n *\n * @param {ExportCustomJobPayload} payload - Payload response from the API\n *\n * @returns ExportCustomJobInstance\n */\n\n/* jshint ignore:end */\n\nExportCustomJobPage.prototype.getInstance = function getInstance(payload) {\n  return new ExportCustomJobInstance(this._version, payload, this._solution.resourceType);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Bulkexports.V1.ExportContext.ExportCustomJobPage#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nExportCustomJobPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nExportCustomJobPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the ExportCustomJobContext\n *\n * @constructor Twilio.Bulkexports.V1.ExportContext.ExportCustomJobInstance\n *\n * @property {string} friendlyName -\n *          The friendly name specified when creating the job\n * @property {string} resourceType -\n *          The type of communication â€“ Messages, Calls, Conferences, and Participants\n * @property {string} startDay -\n *          The start day for the custom export specified as a string in the format of yyyy-MM-dd\n * @property {string} endDay -\n *          The end day for the custom export specified as a string in the format of yyyy-MM-dd. This will be the last day exported. For instance, to export a single day, choose the same day for start and end day. To export the first 4 days of July, you would set the start date to 2020-07-01 and the end date to 2020-07-04. The end date must be the UTC day before yesterday.\n * @property {string} webhookUrl - The optional webhook url called on completion\n * @property {string} webhookMethod - This is the method used to call the webhook\n * @property {string} email -\n *          The optional email to send the completion notification to\n * @property {string} jobSid -\n *          The unique job_sid returned when the custom export was created. This can be used to look up the status of the job.\n * @property {object} details -\n *          The details of a job state which is an object that contains a `status` string, a day count integer, and list of days in the job\n * @property {string} jobQueuePosition -\n *          This is the job position from the 1st in line. Your queue position will never increase. As jobs ahead of yours in the queue are processed, the queue position number will decrease\n * @property {string} estimatedCompletionTime -\n *          this is the time estimated until your job is complete. This is calculated each time you request the job list. The time is calculated based on the current rate of job completion (which may vary) and your job queue position\n *\n * @param {V1} version - Version of the resource\n * @param {ExportCustomJobPayload} payload - The instance payload\n * @param {string} resourceType -\n *          The type of communication â€“ Messages, Calls, Conferences, and Participants\n */\n\n/* jshint ignore:end */\n\n\nExportCustomJobInstance = function ExportCustomJobInstance(version, payload, resourceType) {\n  this._version = version; // Marshaled Properties\n\n  this.friendlyName = payload.friendly_name; // jshint ignore:line\n\n  this.resourceType = payload.resource_type; // jshint ignore:line\n\n  this.startDay = payload.start_day; // jshint ignore:line\n\n  this.endDay = payload.end_day; // jshint ignore:line\n\n  this.webhookUrl = payload.webhook_url; // jshint ignore:line\n\n  this.webhookMethod = payload.webhook_method; // jshint ignore:line\n\n  this.email = payload.email; // jshint ignore:line\n\n  this.jobSid = payload.job_sid; // jshint ignore:line\n\n  this.details = payload.details; // jshint ignore:line\n\n  this.jobQueuePosition = payload.job_queue_position; // jshint ignore:line\n\n  this.estimatedCompletionTime = payload.estimated_completion_time; // jshint ignore:line\n  // Context\n\n  this._context = undefined;\n  this._solution = {\n    resourceType: resourceType\n  };\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Bulkexports.V1.ExportContext.ExportCustomJobInstance#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nExportCustomJobInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nExportCustomJobInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  ExportCustomJobList: ExportCustomJobList,\n  ExportCustomJobPage: ExportCustomJobPage,\n  ExportCustomJobInstance: ExportCustomJobInstance\n};","map":{"version":3,"sources":["/Users/tony_niu/Visual Studio/Twilio/twilio-video-starter-kit/node_modules/twilio/lib/rest/bulkexports/v1/export/exportCustomJob.js"],"names":["Q","require","_","util","Page","values","ExportCustomJobList","ExportCustomJobPage","ExportCustomJobInstance","version","resourceType","ExportCustomJobListInstance","sid","get","_version","_solution","_uri","each","opts","callback","isFunction","isUndefined","Error","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","error","fetchNextPage","fn","promise","then","page","instances","instance","bind","nextPage","catch","merge","list","deferred","defer","allResources","resource","push","length","resolve","reject","nodeify","data","of","pageToken","pageNumber","uri","method","params","payload","getPage","targetUrl","_domain","twilio","request","create","startDay","endDay","friendlyName","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","friendly_name","resource_type","start_day","end_day","webhookUrl","webhook_url","webhookMethod","webhook_method","email","jobSid","job_sid","details","jobQueuePosition","job_queue_position","estimatedCompletionTime","estimated_completion_time","_context","undefined","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar Page = require('../../../../base/Page');  /* jshint ignore:line */\nvar values = require('../../../../base/values');  /* jshint ignore:line */\n\nvar ExportCustomJobList;\nvar ExportCustomJobPage;\nvar ExportCustomJobInstance;\n\n/* jshint ignore:start */\n/**\n * Initialize the ExportCustomJobList\n *\n * @constructor Twilio.Bulkexports.V1.ExportContext.ExportCustomJobList\n *\n * @param {Twilio.Bulkexports.V1} version - Version of the resource\n * @param {string} resourceType -\n *          The type of communication â€“ Messages, Calls, Conferences, and Participants\n */\n/* jshint ignore:end */\nExportCustomJobList = function ExportCustomJobList(version, resourceType) {\n  /* jshint ignore:start */\n  /**\n   * @function exportCustomJobs\n   * @memberof Twilio.Bulkexports.V1.ExportContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Bulkexports.V1.ExportContext.ExportCustomJobContext}\n   */\n  /* jshint ignore:end */\n  function ExportCustomJobListInstance(sid) {\n    return ExportCustomJobListInstance.get(sid);\n  }\n\n  ExportCustomJobListInstance._version = version;\n  // Path Solution\n  ExportCustomJobListInstance._solution = {resourceType: resourceType};\n  ExportCustomJobListInstance._uri = `/Exports/${resourceType}/Jobs`;\n  /* jshint ignore:start */\n  /**\n   * Streams ExportCustomJobInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Bulkexports.V1.ExportContext.ExportCustomJobList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  ExportCustomJobListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists ExportCustomJobInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Bulkexports.V1.ExportContext.ExportCustomJobList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  ExportCustomJobListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of ExportCustomJobInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Bulkexports.V1.ExportContext.ExportCustomJobList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  ExportCustomJobListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new ExportCustomJobPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of ExportCustomJobInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Bulkexports.V1.ExportContext.ExportCustomJobList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  ExportCustomJobListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new ExportCustomJobPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * create a ExportCustomJobInstance\n   *\n   * @function create\n   * @memberof Twilio.Bulkexports.V1.ExportContext.ExportCustomJobList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.startDay -\n   *          The start day for the custom export specified as a string in the format of yyyy-mm-dd\n   * @param {string} opts.endDay -\n   *          The end day for the custom export specified as a string in the format of yyyy-mm-dd. End day is inclusive and must be 2 days earlier than the current UTC day.\n   * @param {string} opts.friendlyName -\n   *          The friendly name specified when creating the job\n   * @param {string} [opts.webhookUrl] -\n   *          The optional webhook url called on completion of the job. If this is supplied, `WebhookMethod` must also be supplied.\n   * @param {string} [opts.webhookMethod] -\n   *          This is the method used to call the webhook on completion of the job. If this is supplied, `WebhookUrl` must also be supplied.\n   * @param {string} [opts.email] -\n   *          The optional email to send the completion notification to\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed ExportCustomJobInstance\n   */\n  /* jshint ignore:end */\n  ExportCustomJobListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n    if (_.isUndefined(opts.startDay)) {\n      throw new Error('Required parameter \"opts.startDay\" missing.');\n    }\n    if (_.isUndefined(opts.endDay)) {\n      throw new Error('Required parameter \"opts.endDay\" missing.');\n    }\n    if (_.isUndefined(opts.friendlyName)) {\n      throw new Error('Required parameter \"opts.friendlyName\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'StartDay': _.get(opts, 'startDay'),\n      'EndDay': _.get(opts, 'endDay'),\n      'FriendlyName': _.get(opts, 'friendlyName'),\n      'WebhookUrl': _.get(opts, 'webhookUrl'),\n      'WebhookMethod': _.get(opts, 'webhookMethod'),\n      'Email': _.get(opts, 'email')\n    });\n\n    var promise = this._version.create({uri: this._uri, method: 'POST', data: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new ExportCustomJobInstance(this._version, payload));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Bulkexports.V1.ExportContext.ExportCustomJobList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  ExportCustomJobListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  ExportCustomJobListInstance[util.inspect.custom] = function inspect(depth,\n      options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return ExportCustomJobListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the ExportCustomJobPage\n *\n * @constructor Twilio.Bulkexports.V1.ExportContext.ExportCustomJobPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {ExportCustomJobSolution} solution - Path solution\n *\n * @returns ExportCustomJobPage\n */\n/* jshint ignore:end */\nExportCustomJobPage = function ExportCustomJobPage(version, response, solution)\n                                                    {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(ExportCustomJobPage.prototype, Page.prototype);\nExportCustomJobPage.prototype.constructor = ExportCustomJobPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of ExportCustomJobInstance\n *\n * @function getInstance\n * @memberof Twilio.Bulkexports.V1.ExportContext.ExportCustomJobPage#\n *\n * @param {ExportCustomJobPayload} payload - Payload response from the API\n *\n * @returns ExportCustomJobInstance\n */\n/* jshint ignore:end */\nExportCustomJobPage.prototype.getInstance = function getInstance(payload) {\n  return new ExportCustomJobInstance(this._version, payload, this._solution.resourceType);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Bulkexports.V1.ExportContext.ExportCustomJobPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nExportCustomJobPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nExportCustomJobPage.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the ExportCustomJobContext\n *\n * @constructor Twilio.Bulkexports.V1.ExportContext.ExportCustomJobInstance\n *\n * @property {string} friendlyName -\n *          The friendly name specified when creating the job\n * @property {string} resourceType -\n *          The type of communication â€“ Messages, Calls, Conferences, and Participants\n * @property {string} startDay -\n *          The start day for the custom export specified as a string in the format of yyyy-MM-dd\n * @property {string} endDay -\n *          The end day for the custom export specified as a string in the format of yyyy-MM-dd. This will be the last day exported. For instance, to export a single day, choose the same day for start and end day. To export the first 4 days of July, you would set the start date to 2020-07-01 and the end date to 2020-07-04. The end date must be the UTC day before yesterday.\n * @property {string} webhookUrl - The optional webhook url called on completion\n * @property {string} webhookMethod - This is the method used to call the webhook\n * @property {string} email -\n *          The optional email to send the completion notification to\n * @property {string} jobSid -\n *          The unique job_sid returned when the custom export was created. This can be used to look up the status of the job.\n * @property {object} details -\n *          The details of a job state which is an object that contains a `status` string, a day count integer, and list of days in the job\n * @property {string} jobQueuePosition -\n *          This is the job position from the 1st in line. Your queue position will never increase. As jobs ahead of yours in the queue are processed, the queue position number will decrease\n * @property {string} estimatedCompletionTime -\n *          this is the time estimated until your job is complete. This is calculated each time you request the job list. The time is calculated based on the current rate of job completion (which may vary) and your job queue position\n *\n * @param {V1} version - Version of the resource\n * @param {ExportCustomJobPayload} payload - The instance payload\n * @param {string} resourceType -\n *          The type of communication â€“ Messages, Calls, Conferences, and Participants\n */\n/* jshint ignore:end */\nExportCustomJobInstance = function ExportCustomJobInstance(version, payload,\n                                                            resourceType) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.friendlyName = payload.friendly_name; // jshint ignore:line\n  this.resourceType = payload.resource_type; // jshint ignore:line\n  this.startDay = payload.start_day; // jshint ignore:line\n  this.endDay = payload.end_day; // jshint ignore:line\n  this.webhookUrl = payload.webhook_url; // jshint ignore:line\n  this.webhookMethod = payload.webhook_method; // jshint ignore:line\n  this.email = payload.email; // jshint ignore:line\n  this.jobSid = payload.job_sid; // jshint ignore:line\n  this.details = payload.details; // jshint ignore:line\n  this.jobQueuePosition = payload.job_queue_position; // jshint ignore:line\n  this.estimatedCompletionTime = payload.estimated_completion_time; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {resourceType: resourceType, };\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Bulkexports.V1.ExportContext.ExportCustomJobInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nExportCustomJobInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nExportCustomJobInstance.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  ExportCustomJobList: ExportCustomJobList,\n  ExportCustomJobPage: ExportCustomJobPage,\n  ExportCustomJobInstance: ExportCustomJobInstance\n};\n"]},"metadata":{},"sourceType":"script"}