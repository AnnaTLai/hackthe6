{"ast":null,"code":"'use strict';\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nvar _require = require('./'),\n    defer = _require.defer;\n/**\n * This is a pair of Deferreds that are set whenever local media is muted and\n * resolved whenever local media is unmuted/ended and restarted if necessary.\n */\n\n\nvar LocalMediaRestartDeferreds = function () {\n  /**\n   * Constructor.\n   */\n  function LocalMediaRestartDeferreds() {\n    _classCallCheck(this, LocalMediaRestartDeferreds);\n\n    Object.defineProperties(this, {\n      _audio: {\n        value: defer(),\n        writable: true\n      },\n      _video: {\n        value: defer(),\n        writable: true\n      }\n    }); // Initially, resolve both the Deferreds.\n\n    this._audio.resolve();\n\n    this._video.resolve();\n  }\n  /**\n   * Resolve the Deferred for audio or video.\n   * @param {'audio'|'video'} kind\n   */\n\n\n  _createClass(LocalMediaRestartDeferreds, [{\n    key: 'resolveDeferred',\n    value: function resolveDeferred(kind) {\n      if (kind === 'audio') {\n        this._audio.resolve();\n      } else {\n        this._video.resolve();\n      }\n    }\n    /**\n     * Start the Deferred for audio or video.\n     * @param {'audio' | 'video'} kind\n     */\n\n  }, {\n    key: 'startDeferred',\n    value: function startDeferred(kind) {\n      if (kind === 'audio') {\n        this._audio = defer();\n      } else {\n        this._video = defer();\n      }\n    }\n    /**\n     * Wait until the Deferred for audio or video is resolved.\n     * @param {'audio'|'video'} kind\n     * @returns {Promise<void>}\n     */\n\n  }, {\n    key: 'whenResolved',\n    value: function whenResolved(kind) {\n      return kind === 'audio' ? this._audio.promise : this._video.promise;\n    }\n  }]);\n\n  return LocalMediaRestartDeferreds;\n}();\n\nmodule.exports = new LocalMediaRestartDeferreds();","map":{"version":3,"sources":["/Users/tony_niu/Visual Studio/Twilio/twilio-video-starter-kit/node_modules/twilio-video/es5/util/localmediarestartdeferreds.js"],"names":["_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","Constructor","protoProps","staticProps","prototype","_classCallCheck","instance","TypeError","_require","require","defer","LocalMediaRestartDeferreds","_audio","value","_video","resolve","resolveDeferred","kind","startDeferred","whenResolved","promise","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar _require = require('./'),\n    defer = _require.defer;\n\n/**\n * This is a pair of Deferreds that are set whenever local media is muted and\n * resolved whenever local media is unmuted/ended and restarted if necessary.\n */\n\n\nvar LocalMediaRestartDeferreds = function () {\n  /**\n   * Constructor.\n   */\n  function LocalMediaRestartDeferreds() {\n    _classCallCheck(this, LocalMediaRestartDeferreds);\n\n    Object.defineProperties(this, {\n      _audio: {\n        value: defer(),\n        writable: true\n      },\n      _video: {\n        value: defer(),\n        writable: true\n      }\n    });\n\n    // Initially, resolve both the Deferreds.\n    this._audio.resolve();\n    this._video.resolve();\n  }\n\n  /**\n   * Resolve the Deferred for audio or video.\n   * @param {'audio'|'video'} kind\n   */\n\n\n  _createClass(LocalMediaRestartDeferreds, [{\n    key: 'resolveDeferred',\n    value: function resolveDeferred(kind) {\n      if (kind === 'audio') {\n        this._audio.resolve();\n      } else {\n        this._video.resolve();\n      }\n    }\n\n    /**\n     * Start the Deferred for audio or video.\n     * @param {'audio' | 'video'} kind\n     */\n\n  }, {\n    key: 'startDeferred',\n    value: function startDeferred(kind) {\n      if (kind === 'audio') {\n        this._audio = defer();\n      } else {\n        this._video = defer();\n      }\n    }\n\n    /**\n     * Wait until the Deferred for audio or video is resolved.\n     * @param {'audio'|'video'} kind\n     * @returns {Promise<void>}\n     */\n\n  }, {\n    key: 'whenResolved',\n    value: function whenResolved(kind) {\n      return kind === 'audio' ? this._audio.promise : this._video.promise;\n    }\n  }]);\n\n  return LocalMediaRestartDeferreds;\n}();\n\nmodule.exports = new LocalMediaRestartDeferreds();"]},"metadata":{},"sourceType":"script"}