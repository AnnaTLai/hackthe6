{"ast":null,"code":"'use strict';\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nvar _require = require('../../util/constants'),\n    ICE_ACTIVITY_CHECK_PERIOD_MS = _require.ICE_ACTIVITY_CHECK_PERIOD_MS,\n    ICE_INACTIVITY_THRESHOLD_MS = _require.ICE_INACTIVITY_THRESHOLD_MS;\n/**\n * Monitors a {@link RTCPeerConnection}'s stats and notifies\n * caller when inactivity is detected.\n */\n\n\nvar IceConnectionMonitor = function () {\n  /**\n   * Construct an {@link IceConnectionMonitor}.\n   * @param {RTCPeerConnection} peerConnection\n   * @param {object} [options]\n   */\n  function IceConnectionMonitor(peerConnection, options) {\n    _classCallCheck(this, IceConnectionMonitor);\n\n    options = Object.assign({\n      activityCheckPeriodMs: ICE_ACTIVITY_CHECK_PERIOD_MS,\n      inactivityThresholdMs: ICE_INACTIVITY_THRESHOLD_MS\n    }, options);\n    Object.defineProperties(this, {\n      _activityCheckPeriodMs: {\n        value: options.activityCheckPeriodMs\n      },\n      _inactivityThresholdMs: {\n        value: options.inactivityThresholdMs\n      },\n      _lastActivity: {\n        value: null,\n        writable: true\n      },\n      _peerConnection: {\n        value: peerConnection\n      },\n      _timer: {\n        value: null,\n        writable: true\n      },\n      _onIceConnectionStateChanged: {\n        value: null,\n        writable: true\n      }\n    });\n  }\n\n  _createClass(IceConnectionMonitor, [{\n    key: '_getActivePairStat',\n    value: function _getActivePairStat(stats) {\n      var statsArray = Array.from(stats.values());\n      var hasInBoundTracks = statsArray.find(function (stat) {\n        return stat.type === 'inbound-rtp';\n      });\n\n      if (!hasInBoundTracks) {\n        // NOTE(mpatwardhan): when there are no tracks shared on a peerConnection\n        // we may see inactivity on bytesReceived - but that is not real inactivity,\n        // ignore it.\n        return null;\n      }\n\n      var activePairStats = statsArray.find(function (stat) {\n        return stat.type === 'candidate-pair' && stat.nominated;\n      }); // NOTE(mpatwardhan): sometimes (JSDK-2667) after getting disconnected while switching network\n      // we may not find active pair. Treat this as 0 bytesReceived so that we count it towards inactivity.\n\n      return activePairStats || {\n        bytesReceived: 0,\n        timestamp: Math.round(new Date().getTime())\n      };\n    }\n    /**\n     * Get ICE connection stats, and extract received and send bytes.\n     * @returns Promise<?RTCIceCandidatePairStats>\n     */\n\n  }, {\n    key: '_getIceConnectionStats',\n    value: function _getIceConnectionStats() {\n      var _this = this;\n\n      return this._peerConnection.getStats().then(function (stats) {\n        return _this._getActivePairStat(stats);\n      }).catch(function () {\n        return null;\n      });\n    }\n    /**\n     * schedules/un-schedules inactivity callback.\n     */\n\n  }, {\n    key: '_scheduleInactivityCallback',\n    value: function _scheduleInactivityCallback(callback) {\n      var _this2 = this;\n\n      if (callback && this._onIceConnectionStateChanged === null) {\n        // schedule callback\n        this._onIceConnectionStateChanged = function () {\n          if (_this2._peerConnection.iceConnectionState === 'disconnected') {\n            // eslint-disable-next-line callback-return\n            callback();\n          }\n        };\n\n        this._peerConnection.addEventListener('iceconnectionstatechange', this._onIceConnectionStateChanged);\n      } else if (!callback && this._onIceConnectionStateChanged) {\n        // unschedule callback\n        this._peerConnection.removeEventListener('iceconnectionstatechange', this._onIceConnectionStateChanged);\n\n        this._onIceConnectionStateChanged = null;\n      }\n    }\n    /**\n     * Start monitoring the ICE connection.\n     * Monitors bytes received on active ice connection pair,\n     * invokes onIceConnectionInactive when inactivity is detected.\n     * @param {function} onIceConnectionInactive\n     */\n\n  }, {\n    key: 'start',\n    value: function start(onIceConnectionInactive) {\n      var _this3 = this;\n\n      this.stop();\n      this._timer = setInterval(function () {\n        _this3._getIceConnectionStats().then(function (iceStats) {\n          if (!iceStats) {\n            return;\n          }\n\n          if (!_this3._lastActivity || _this3._lastActivity.bytesReceived !== iceStats.bytesReceived) {\n            _this3._lastActivity = iceStats; // detected activity, cancel scheduled callback if any.\n\n            _this3._scheduleInactivityCallback(null);\n          }\n\n          if (iceStats.timestamp - _this3._lastActivity.timestamp >= _this3._inactivityThresholdMs) {\n            // detected inactivity.\n            if (_this3._peerConnection.iceConnectionState === 'disconnected') {\n              onIceConnectionInactive();\n            } else if (_this3._onIceConnectionStateChanged === null) {\n              _this3._scheduleInactivityCallback(onIceConnectionInactive);\n            }\n          }\n        });\n      }, this._activityCheckPeriodMs);\n    }\n    /**\n     * Stop monitoring the ICE connection state.\n     * @returns {void}\n     */\n\n  }, {\n    key: 'stop',\n    value: function stop() {\n      this._scheduleInactivityCallback(null);\n\n      if (this._timer !== null) {\n        clearInterval(this._timer);\n        this._timer = null;\n        this._lastActivity = null;\n      }\n    }\n  }]);\n\n  return IceConnectionMonitor;\n}();\n\nmodule.exports = IceConnectionMonitor;","map":{"version":3,"sources":["/Users/tony_niu/Visual Studio/Twilio/twilio-video-starter-kit/node_modules/twilio-video/es5/signaling/v2/iceconnectionmonitor.js"],"names":["_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","Constructor","protoProps","staticProps","prototype","_classCallCheck","instance","TypeError","_require","require","ICE_ACTIVITY_CHECK_PERIOD_MS","ICE_INACTIVITY_THRESHOLD_MS","IceConnectionMonitor","peerConnection","options","assign","activityCheckPeriodMs","inactivityThresholdMs","_activityCheckPeriodMs","value","_inactivityThresholdMs","_lastActivity","_peerConnection","_timer","_onIceConnectionStateChanged","_getActivePairStat","stats","statsArray","Array","from","values","hasInBoundTracks","find","stat","type","activePairStats","nominated","bytesReceived","timestamp","Math","round","Date","getTime","_getIceConnectionStats","_this","getStats","then","catch","_scheduleInactivityCallback","callback","_this2","iceConnectionState","addEventListener","removeEventListener","start","onIceConnectionInactive","_this3","stop","setInterval","iceStats","clearInterval","module","exports"],"mappings":"AAAA;;AAEA,IAAIA,YAAY,GAAG,YAAY;AAAE,WAASC,gBAAT,CAA0BC,MAA1B,EAAkCC,KAAlC,EAAyC;AAAE,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,KAAK,CAACE,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AAAE,UAAIE,UAAU,GAAGH,KAAK,CAACC,CAAD,CAAtB;AAA2BE,MAAAA,UAAU,CAACC,UAAX,GAAwBD,UAAU,CAACC,UAAX,IAAyB,KAAjD;AAAwDD,MAAAA,UAAU,CAACE,YAAX,GAA0B,IAA1B;AAAgC,UAAI,WAAWF,UAAf,EAA2BA,UAAU,CAACG,QAAX,GAAsB,IAAtB;AAA4BC,MAAAA,MAAM,CAACC,cAAP,CAAsBT,MAAtB,EAA8BI,UAAU,CAACM,GAAzC,EAA8CN,UAA9C;AAA4D;AAAE;;AAAC,SAAO,UAAUO,WAAV,EAAuBC,UAAvB,EAAmCC,WAAnC,EAAgD;AAAE,QAAID,UAAJ,EAAgBb,gBAAgB,CAACY,WAAW,CAACG,SAAb,EAAwBF,UAAxB,CAAhB;AAAqD,QAAIC,WAAJ,EAAiBd,gBAAgB,CAACY,WAAD,EAAcE,WAAd,CAAhB;AAA4C,WAAOF,WAAP;AAAqB,GAAhN;AAAmN,CAA9hB,EAAnB;;AAEA,SAASI,eAAT,CAAyBC,QAAzB,EAAmCL,WAAnC,EAAgD;AAAE,MAAI,EAAEK,QAAQ,YAAYL,WAAtB,CAAJ,EAAwC;AAAE,UAAM,IAAIM,SAAJ,CAAc,mCAAd,CAAN;AAA2D;AAAE;;AAEzJ,IAAIC,QAAQ,GAAGC,OAAO,CAAC,sBAAD,CAAtB;AAAA,IACIC,4BAA4B,GAAGF,QAAQ,CAACE,4BAD5C;AAAA,IAEIC,2BAA2B,GAAGH,QAAQ,CAACG,2BAF3C;AAIA;AACA;AACA;AACA;;;AAGA,IAAIC,oBAAoB,GAAG,YAAY;AACrC;AACF;AACA;AACA;AACA;AACE,WAASA,oBAAT,CAA8BC,cAA9B,EAA8CC,OAA9C,EAAuD;AACrDT,IAAAA,eAAe,CAAC,IAAD,EAAOO,oBAAP,CAAf;;AAEAE,IAAAA,OAAO,GAAGhB,MAAM,CAACiB,MAAP,CAAc;AACtBC,MAAAA,qBAAqB,EAAEN,4BADD;AAEtBO,MAAAA,qBAAqB,EAAEN;AAFD,KAAd,EAGPG,OAHO,CAAV;AAKAhB,IAAAA,MAAM,CAACT,gBAAP,CAAwB,IAAxB,EAA8B;AAC5B6B,MAAAA,sBAAsB,EAAE;AACtBC,QAAAA,KAAK,EAAEL,OAAO,CAACE;AADO,OADI;AAI5BI,MAAAA,sBAAsB,EAAE;AACtBD,QAAAA,KAAK,EAAEL,OAAO,CAACG;AADO,OAJI;AAO5BI,MAAAA,aAAa,EAAE;AACbF,QAAAA,KAAK,EAAE,IADM;AAEbtB,QAAAA,QAAQ,EAAE;AAFG,OAPa;AAW5ByB,MAAAA,eAAe,EAAE;AACfH,QAAAA,KAAK,EAAEN;AADQ,OAXW;AAc5BU,MAAAA,MAAM,EAAE;AACNJ,QAAAA,KAAK,EAAE,IADD;AAENtB,QAAAA,QAAQ,EAAE;AAFJ,OAdoB;AAkB5B2B,MAAAA,4BAA4B,EAAE;AAC5BL,QAAAA,KAAK,EAAE,IADqB;AAE5BtB,QAAAA,QAAQ,EAAE;AAFkB;AAlBF,KAA9B;AAuBD;;AAEDT,EAAAA,YAAY,CAACwB,oBAAD,EAAuB,CAAC;AAClCZ,IAAAA,GAAG,EAAE,oBAD6B;AAElCmB,IAAAA,KAAK,EAAE,SAASM,kBAAT,CAA4BC,KAA5B,EAAmC;AACxC,UAAIC,UAAU,GAAGC,KAAK,CAACC,IAAN,CAAWH,KAAK,CAACI,MAAN,EAAX,CAAjB;AACA,UAAIC,gBAAgB,GAAGJ,UAAU,CAACK,IAAX,CAAgB,UAAUC,IAAV,EAAgB;AACrD,eAAOA,IAAI,CAACC,IAAL,KAAc,aAArB;AACD,OAFsB,CAAvB;;AAGA,UAAI,CAACH,gBAAL,EAAuB;AACrB;AACA;AACA;AACA,eAAO,IAAP;AACD;;AAED,UAAII,eAAe,GAAGR,UAAU,CAACK,IAAX,CAAgB,UAAUC,IAAV,EAAgB;AACpD,eAAOA,IAAI,CAACC,IAAL,KAAc,gBAAd,IAAkCD,IAAI,CAACG,SAA9C;AACD,OAFqB,CAAtB,CAZwC,CAexC;AACA;;AACA,aAAOD,eAAe,IAAI;AACxBE,QAAAA,aAAa,EAAE,CADS;AAExBC,QAAAA,SAAS,EAAEC,IAAI,CAACC,KAAL,CAAW,IAAIC,IAAJ,GAAWC,OAAX,EAAX;AAFa,OAA1B;AAID;AAED;AACJ;AACA;AACA;;AA5BsC,GAAD,EA8BhC;AACD1C,IAAAA,GAAG,EAAE,wBADJ;AAEDmB,IAAAA,KAAK,EAAE,SAASwB,sBAAT,GAAkC;AACvC,UAAIC,KAAK,GAAG,IAAZ;;AAEA,aAAO,KAAKtB,eAAL,CAAqBuB,QAArB,GAAgCC,IAAhC,CAAqC,UAAUpB,KAAV,EAAiB;AAC3D,eAAOkB,KAAK,CAACnB,kBAAN,CAAyBC,KAAzB,CAAP;AACD,OAFM,EAEJqB,KAFI,CAEE,YAAY;AACnB,eAAO,IAAP;AACD,OAJM,CAAP;AAKD;AAED;AACJ;AACA;;AAdK,GA9BgC,EA8ChC;AACD/C,IAAAA,GAAG,EAAE,6BADJ;AAEDmB,IAAAA,KAAK,EAAE,SAAS6B,2BAAT,CAAqCC,QAArC,EAA+C;AACpD,UAAIC,MAAM,GAAG,IAAb;;AAEA,UAAID,QAAQ,IAAI,KAAKzB,4BAAL,KAAsC,IAAtD,EAA4D;AAC1D;AACA,aAAKA,4BAAL,GAAoC,YAAY;AAC9C,cAAI0B,MAAM,CAAC5B,eAAP,CAAuB6B,kBAAvB,KAA8C,cAAlD,EAAkE;AAChE;AACAF,YAAAA,QAAQ;AACT;AACF,SALD;;AAMA,aAAK3B,eAAL,CAAqB8B,gBAArB,CAAsC,0BAAtC,EAAkE,KAAK5B,4BAAvE;AACD,OATD,MASO,IAAI,CAACyB,QAAD,IAAa,KAAKzB,4BAAtB,EAAoD;AACzD;AACA,aAAKF,eAAL,CAAqB+B,mBAArB,CAAyC,0BAAzC,EAAqE,KAAK7B,4BAA1E;;AACA,aAAKA,4BAAL,GAAoC,IAApC;AACD;AACF;AAED;AACJ;AACA;AACA;AACA;AACA;;AA1BK,GA9CgC,EA0EhC;AACDxB,IAAAA,GAAG,EAAE,OADJ;AAEDmB,IAAAA,KAAK,EAAE,SAASmC,KAAT,CAAeC,uBAAf,EAAwC;AAC7C,UAAIC,MAAM,GAAG,IAAb;;AAEA,WAAKC,IAAL;AAEA,WAAKlC,MAAL,GAAcmC,WAAW,CAAC,YAAY;AACpCF,QAAAA,MAAM,CAACb,sBAAP,GAAgCG,IAAhC,CAAqC,UAAUa,QAAV,EAAoB;AACvD,cAAI,CAACA,QAAL,EAAe;AACb;AACD;;AAED,cAAI,CAACH,MAAM,CAACnC,aAAR,IAAyBmC,MAAM,CAACnC,aAAP,CAAqBgB,aAArB,KAAuCsB,QAAQ,CAACtB,aAA7E,EAA4F;AAC1FmB,YAAAA,MAAM,CAACnC,aAAP,GAAuBsC,QAAvB,CAD0F,CAE1F;;AACAH,YAAAA,MAAM,CAACR,2BAAP,CAAmC,IAAnC;AACD;;AAED,cAAIW,QAAQ,CAACrB,SAAT,GAAqBkB,MAAM,CAACnC,aAAP,CAAqBiB,SAA1C,IAAuDkB,MAAM,CAACpC,sBAAlE,EAA0F;AACxF;AACA,gBAAIoC,MAAM,CAAClC,eAAP,CAAuB6B,kBAAvB,KAA8C,cAAlD,EAAkE;AAChEI,cAAAA,uBAAuB;AACxB,aAFD,MAEO,IAAIC,MAAM,CAAChC,4BAAP,KAAwC,IAA5C,EAAkD;AACvDgC,cAAAA,MAAM,CAACR,2BAAP,CAAmCO,uBAAnC;AACD;AACF;AACF,SAnBD;AAoBD,OArBwB,EAqBtB,KAAKrC,sBArBiB,CAAzB;AAsBD;AAED;AACJ;AACA;AACA;;AAlCK,GA1EgC,EA8GhC;AACDlB,IAAAA,GAAG,EAAE,MADJ;AAEDmB,IAAAA,KAAK,EAAE,SAASsC,IAAT,GAAgB;AACrB,WAAKT,2BAAL,CAAiC,IAAjC;;AACA,UAAI,KAAKzB,MAAL,KAAgB,IAApB,EAA0B;AACxBqC,QAAAA,aAAa,CAAC,KAAKrC,MAAN,CAAb;AACA,aAAKA,MAAL,GAAc,IAAd;AACA,aAAKF,aAAL,GAAqB,IAArB;AACD;AACF;AATA,GA9GgC,CAAvB,CAAZ;;AA0HA,SAAOT,oBAAP;AACD,CAlK0B,EAA3B;;AAoKAiD,MAAM,CAACC,OAAP,GAAiBlD,oBAAjB","sourcesContent":["'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar _require = require('../../util/constants'),\n    ICE_ACTIVITY_CHECK_PERIOD_MS = _require.ICE_ACTIVITY_CHECK_PERIOD_MS,\n    ICE_INACTIVITY_THRESHOLD_MS = _require.ICE_INACTIVITY_THRESHOLD_MS;\n\n/**\n * Monitors a {@link RTCPeerConnection}'s stats and notifies\n * caller when inactivity is detected.\n */\n\n\nvar IceConnectionMonitor = function () {\n  /**\n   * Construct an {@link IceConnectionMonitor}.\n   * @param {RTCPeerConnection} peerConnection\n   * @param {object} [options]\n   */\n  function IceConnectionMonitor(peerConnection, options) {\n    _classCallCheck(this, IceConnectionMonitor);\n\n    options = Object.assign({\n      activityCheckPeriodMs: ICE_ACTIVITY_CHECK_PERIOD_MS,\n      inactivityThresholdMs: ICE_INACTIVITY_THRESHOLD_MS\n    }, options);\n\n    Object.defineProperties(this, {\n      _activityCheckPeriodMs: {\n        value: options.activityCheckPeriodMs\n      },\n      _inactivityThresholdMs: {\n        value: options.inactivityThresholdMs\n      },\n      _lastActivity: {\n        value: null,\n        writable: true\n      },\n      _peerConnection: {\n        value: peerConnection\n      },\n      _timer: {\n        value: null,\n        writable: true\n      },\n      _onIceConnectionStateChanged: {\n        value: null,\n        writable: true\n      }\n    });\n  }\n\n  _createClass(IceConnectionMonitor, [{\n    key: '_getActivePairStat',\n    value: function _getActivePairStat(stats) {\n      var statsArray = Array.from(stats.values());\n      var hasInBoundTracks = statsArray.find(function (stat) {\n        return stat.type === 'inbound-rtp';\n      });\n      if (!hasInBoundTracks) {\n        // NOTE(mpatwardhan): when there are no tracks shared on a peerConnection\n        // we may see inactivity on bytesReceived - but that is not real inactivity,\n        // ignore it.\n        return null;\n      }\n\n      var activePairStats = statsArray.find(function (stat) {\n        return stat.type === 'candidate-pair' && stat.nominated;\n      });\n      // NOTE(mpatwardhan): sometimes (JSDK-2667) after getting disconnected while switching network\n      // we may not find active pair. Treat this as 0 bytesReceived so that we count it towards inactivity.\n      return activePairStats || {\n        bytesReceived: 0,\n        timestamp: Math.round(new Date().getTime())\n      };\n    }\n\n    /**\n     * Get ICE connection stats, and extract received and send bytes.\n     * @returns Promise<?RTCIceCandidatePairStats>\n     */\n\n  }, {\n    key: '_getIceConnectionStats',\n    value: function _getIceConnectionStats() {\n      var _this = this;\n\n      return this._peerConnection.getStats().then(function (stats) {\n        return _this._getActivePairStat(stats);\n      }).catch(function () {\n        return null;\n      });\n    }\n\n    /**\n     * schedules/un-schedules inactivity callback.\n     */\n\n  }, {\n    key: '_scheduleInactivityCallback',\n    value: function _scheduleInactivityCallback(callback) {\n      var _this2 = this;\n\n      if (callback && this._onIceConnectionStateChanged === null) {\n        // schedule callback\n        this._onIceConnectionStateChanged = function () {\n          if (_this2._peerConnection.iceConnectionState === 'disconnected') {\n            // eslint-disable-next-line callback-return\n            callback();\n          }\n        };\n        this._peerConnection.addEventListener('iceconnectionstatechange', this._onIceConnectionStateChanged);\n      } else if (!callback && this._onIceConnectionStateChanged) {\n        // unschedule callback\n        this._peerConnection.removeEventListener('iceconnectionstatechange', this._onIceConnectionStateChanged);\n        this._onIceConnectionStateChanged = null;\n      }\n    }\n\n    /**\n     * Start monitoring the ICE connection.\n     * Monitors bytes received on active ice connection pair,\n     * invokes onIceConnectionInactive when inactivity is detected.\n     * @param {function} onIceConnectionInactive\n     */\n\n  }, {\n    key: 'start',\n    value: function start(onIceConnectionInactive) {\n      var _this3 = this;\n\n      this.stop();\n\n      this._timer = setInterval(function () {\n        _this3._getIceConnectionStats().then(function (iceStats) {\n          if (!iceStats) {\n            return;\n          }\n\n          if (!_this3._lastActivity || _this3._lastActivity.bytesReceived !== iceStats.bytesReceived) {\n            _this3._lastActivity = iceStats;\n            // detected activity, cancel scheduled callback if any.\n            _this3._scheduleInactivityCallback(null);\n          }\n\n          if (iceStats.timestamp - _this3._lastActivity.timestamp >= _this3._inactivityThresholdMs) {\n            // detected inactivity.\n            if (_this3._peerConnection.iceConnectionState === 'disconnected') {\n              onIceConnectionInactive();\n            } else if (_this3._onIceConnectionStateChanged === null) {\n              _this3._scheduleInactivityCallback(onIceConnectionInactive);\n            }\n          }\n        });\n      }, this._activityCheckPeriodMs);\n    }\n\n    /**\n     * Stop monitoring the ICE connection state.\n     * @returns {void}\n     */\n\n  }, {\n    key: 'stop',\n    value: function stop() {\n      this._scheduleInactivityCallback(null);\n      if (this._timer !== null) {\n        clearInterval(this._timer);\n        this._timer = null;\n        this._lastActivity = null;\n      }\n    }\n  }]);\n\n  return IceConnectionMonitor;\n}();\n\nmodule.exports = IceConnectionMonitor;"]},"metadata":{},"sourceType":"script"}