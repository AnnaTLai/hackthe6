{"ast":null,"code":"// Generated by CoffeeScript 2.4.1\n(function () {\n  var NodeType,\n      XMLAttribute,\n      XMLElement,\n      XMLNamedNodeMap,\n      XMLNode,\n      getValue,\n      isFunction,\n      isObject,\n      hasProp = {}.hasOwnProperty;\n  ({\n    isObject,\n    isFunction,\n    getValue\n  } = require('./Utility'));\n  XMLNode = require('./XMLNode');\n  NodeType = require('./NodeType');\n  XMLAttribute = require('./XMLAttribute');\n  XMLNamedNodeMap = require('./XMLNamedNodeMap'); // Represents an element of the XML document\n\n  module.exports = XMLElement = function () {\n    class XMLElement extends XMLNode {\n      // Initializes a new instance of `XMLElement`\n      // `parent` the parent node\n      // `name` element name\n      // `attributes` an object containing name/value pairs of attributes\n      constructor(parent, name, attributes) {\n        var child, j, len, ref;\n        super(parent);\n\n        if (name == null) {\n          throw new Error(\"Missing element name. \" + this.debugInfo());\n        }\n\n        this.name = this.stringify.name(name);\n        this.type = NodeType.Element;\n        this.attribs = {};\n        this.schemaTypeInfo = null;\n\n        if (attributes != null) {\n          this.attribute(attributes);\n        } // set properties if this is the root node\n\n\n        if (parent.type === NodeType.Document) {\n          this.isRoot = true;\n          this.documentObject = parent;\n          parent.rootObject = this; // set dtd name\n\n          if (parent.children) {\n            ref = parent.children;\n\n            for (j = 0, len = ref.length; j < len; j++) {\n              child = ref[j];\n\n              if (child.type === NodeType.DocType) {\n                child.name = this.name;\n                break;\n              }\n            }\n          }\n        }\n      } // Creates and returns a deep clone of `this`\n\n\n      clone() {\n        var att, attName, clonedSelf, ref;\n        clonedSelf = Object.create(this); // remove document element\n\n        if (clonedSelf.isRoot) {\n          clonedSelf.documentObject = null;\n        } // clone attributes\n\n\n        clonedSelf.attribs = {};\n        ref = this.attribs;\n\n        for (attName in ref) {\n          if (!hasProp.call(ref, attName)) continue;\n          att = ref[attName];\n          clonedSelf.attribs[attName] = att.clone();\n        } // clone child nodes\n\n\n        clonedSelf.children = [];\n        this.children.forEach(function (child) {\n          var clonedChild;\n          clonedChild = child.clone();\n          clonedChild.parent = clonedSelf;\n          return clonedSelf.children.push(clonedChild);\n        });\n        return clonedSelf;\n      } // Adds or modifies an attribute\n      // `name` attribute name\n      // `value` attribute value\n\n\n      attribute(name, value) {\n        var attName, attValue;\n\n        if (name != null) {\n          name = getValue(name);\n        }\n\n        if (isObject(name)) {\n          // expand if object\n          for (attName in name) {\n            if (!hasProp.call(name, attName)) continue;\n            attValue = name[attName];\n            this.attribute(attName, attValue);\n          }\n        } else {\n          if (isFunction(value)) {\n            value = value.apply();\n          }\n\n          if (this.options.keepNullAttributes && value == null) {\n            this.attribs[name] = new XMLAttribute(this, name, \"\");\n          } else if (value != null) {\n            this.attribs[name] = new XMLAttribute(this, name, value);\n          }\n        }\n\n        return this;\n      } // Removes an attribute\n      // `name` attribute name\n\n\n      removeAttribute(name) {\n        var attName, j, len; // Also defined in DOM level 1\n        // removeAttribute(name) removes an attribute by name.\n\n        if (name == null) {\n          throw new Error(\"Missing attribute name. \" + this.debugInfo());\n        }\n\n        name = getValue(name);\n\n        if (Array.isArray(name)) {\n          // expand if array\n          for (j = 0, len = name.length; j < len; j++) {\n            attName = name[j];\n            delete this.attribs[attName];\n          }\n        } else {\n          delete this.attribs[name];\n        }\n\n        return this;\n      } // Converts the XML fragment to string\n      // `options.pretty` pretty prints the result\n      // `options.indent` indentation for pretty print\n      // `options.offset` how many indentations to add to every line for pretty print\n      // `options.newline` newline sequence for pretty print\n      // `options.allowEmpty` do not self close empty element tags\n\n\n      toString(options) {\n        return this.options.writer.element(this, this.options.writer.filterOptions(options));\n      } // Aliases\n\n\n      att(name, value) {\n        return this.attribute(name, value);\n      }\n\n      a(name, value) {\n        return this.attribute(name, value);\n      } // DOM Level 1\n\n\n      getAttribute(name) {\n        if (this.attribs.hasOwnProperty(name)) {\n          return this.attribs[name].value;\n        } else {\n          return null;\n        }\n      }\n\n      setAttribute(name, value) {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n\n      getAttributeNode(name) {\n        if (this.attribs.hasOwnProperty(name)) {\n          return this.attribs[name];\n        } else {\n          return null;\n        }\n      }\n\n      setAttributeNode(newAttr) {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n\n      removeAttributeNode(oldAttr) {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n\n      getElementsByTagName(name) {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      } // DOM Level 2\n\n\n      getAttributeNS(namespaceURI, localName) {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n\n      setAttributeNS(namespaceURI, qualifiedName, value) {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n\n      removeAttributeNS(namespaceURI, localName) {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n\n      getAttributeNodeNS(namespaceURI, localName) {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n\n      setAttributeNodeNS(newAttr) {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n\n      getElementsByTagNameNS(namespaceURI, localName) {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n\n      hasAttribute(name) {\n        return this.attribs.hasOwnProperty(name);\n      }\n\n      hasAttributeNS(namespaceURI, localName) {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      } // DOM Level 3\n\n\n      setIdAttribute(name, isId) {\n        if (this.attribs.hasOwnProperty(name)) {\n          return this.attribs[name].isId;\n        } else {\n          return isId;\n        }\n      }\n\n      setIdAttributeNS(namespaceURI, localName, isId) {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n\n      setIdAttributeNode(idAttr, isId) {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      } // DOM Level 4\n\n\n      getElementsByTagName(tagname) {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n\n      getElementsByTagNameNS(namespaceURI, localName) {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n\n      getElementsByClassName(classNames) {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n\n      isEqualNode(node) {\n        var i, j, ref;\n\n        if (!super.isEqualNode(node)) {\n          return false;\n        }\n\n        if (node.namespaceURI !== this.namespaceURI) {\n          return false;\n        }\n\n        if (node.prefix !== this.prefix) {\n          return false;\n        }\n\n        if (node.localName !== this.localName) {\n          return false;\n        }\n\n        if (node.attribs.length !== this.attribs.length) {\n          return false;\n        }\n\n        for (i = j = 0, ref = this.attribs.length - 1; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {\n          if (!this.attribs[i].isEqualNode(node.attribs[i])) {\n            return false;\n          }\n        }\n\n        return true;\n      }\n\n    }\n\n    ; // DOM level 1\n\n    Object.defineProperty(XMLElement.prototype, 'tagName', {\n      get: function () {\n        return this.name;\n      }\n    }); // DOM level 4\n\n    Object.defineProperty(XMLElement.prototype, 'namespaceURI', {\n      get: function () {\n        return '';\n      }\n    });\n    Object.defineProperty(XMLElement.prototype, 'prefix', {\n      get: function () {\n        return '';\n      }\n    });\n    Object.defineProperty(XMLElement.prototype, 'localName', {\n      get: function () {\n        return this.name;\n      }\n    });\n    Object.defineProperty(XMLElement.prototype, 'id', {\n      get: function () {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n    });\n    Object.defineProperty(XMLElement.prototype, 'className', {\n      get: function () {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n    });\n    Object.defineProperty(XMLElement.prototype, 'classList', {\n      get: function () {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n    });\n    Object.defineProperty(XMLElement.prototype, 'attributes', {\n      get: function () {\n        if (!this.attributeMap || !this.attributeMap.nodes) {\n          this.attributeMap = new XMLNamedNodeMap(this.attribs);\n        }\n\n        return this.attributeMap;\n      }\n    });\n    return XMLElement;\n  }.call(this);\n}).call(this);","map":{"version":3,"sources":["/Users/tony_niu/Visual Studio/Twilio/twilio-video-starter-kit/src/token-service/node_modules/xmlbuilder/lib/XMLElement.js"],"names":["NodeType","XMLAttribute","XMLElement","XMLNamedNodeMap","XMLNode","getValue","isFunction","isObject","hasProp","hasOwnProperty","require","module","exports","constructor","parent","name","attributes","child","j","len","ref","Error","debugInfo","stringify","type","Element","attribs","schemaTypeInfo","attribute","Document","isRoot","documentObject","rootObject","children","length","DocType","clone","att","attName","clonedSelf","Object","create","call","forEach","clonedChild","push","value","attValue","apply","options","keepNullAttributes","removeAttribute","Array","isArray","toString","writer","element","filterOptions","a","getAttribute","setAttribute","getAttributeNode","setAttributeNode","newAttr","removeAttributeNode","oldAttr","getElementsByTagName","getAttributeNS","namespaceURI","localName","setAttributeNS","qualifiedName","removeAttributeNS","getAttributeNodeNS","setAttributeNodeNS","getElementsByTagNameNS","hasAttribute","hasAttributeNS","setIdAttribute","isId","setIdAttributeNS","setIdAttributeNode","idAttr","tagname","getElementsByClassName","classNames","isEqualNode","node","i","prefix","defineProperty","prototype","get","attributeMap","nodes"],"mappings":"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","sourcesContent":["// Generated by CoffeeScript 2.4.1\n(function() {\n  var NodeType, XMLAttribute, XMLElement, XMLNamedNodeMap, XMLNode, getValue, isFunction, isObject,\n    hasProp = {}.hasOwnProperty;\n\n  ({isObject, isFunction, getValue} = require('./Utility'));\n\n  XMLNode = require('./XMLNode');\n\n  NodeType = require('./NodeType');\n\n  XMLAttribute = require('./XMLAttribute');\n\n  XMLNamedNodeMap = require('./XMLNamedNodeMap');\n\n  // Represents an element of the XML document\n  module.exports = XMLElement = (function() {\n    class XMLElement extends XMLNode {\n      // Initializes a new instance of `XMLElement`\n\n      // `parent` the parent node\n      // `name` element name\n      // `attributes` an object containing name/value pairs of attributes\n      constructor(parent, name, attributes) {\n        var child, j, len, ref;\n        super(parent);\n        if (name == null) {\n          throw new Error(\"Missing element name. \" + this.debugInfo());\n        }\n        this.name = this.stringify.name(name);\n        this.type = NodeType.Element;\n        this.attribs = {};\n        this.schemaTypeInfo = null;\n        if (attributes != null) {\n          this.attribute(attributes);\n        }\n        // set properties if this is the root node\n        if (parent.type === NodeType.Document) {\n          this.isRoot = true;\n          this.documentObject = parent;\n          parent.rootObject = this;\n          // set dtd name\n          if (parent.children) {\n            ref = parent.children;\n            for (j = 0, len = ref.length; j < len; j++) {\n              child = ref[j];\n              if (child.type === NodeType.DocType) {\n                child.name = this.name;\n                break;\n              }\n            }\n          }\n        }\n      }\n\n      // Creates and returns a deep clone of `this`\n\n      clone() {\n        var att, attName, clonedSelf, ref;\n        clonedSelf = Object.create(this);\n        // remove document element\n        if (clonedSelf.isRoot) {\n          clonedSelf.documentObject = null;\n        }\n        // clone attributes\n        clonedSelf.attribs = {};\n        ref = this.attribs;\n        for (attName in ref) {\n          if (!hasProp.call(ref, attName)) continue;\n          att = ref[attName];\n          clonedSelf.attribs[attName] = att.clone();\n        }\n        // clone child nodes\n        clonedSelf.children = [];\n        this.children.forEach(function(child) {\n          var clonedChild;\n          clonedChild = child.clone();\n          clonedChild.parent = clonedSelf;\n          return clonedSelf.children.push(clonedChild);\n        });\n        return clonedSelf;\n      }\n\n      // Adds or modifies an attribute\n\n      // `name` attribute name\n      // `value` attribute value\n      attribute(name, value) {\n        var attName, attValue;\n        if (name != null) {\n          name = getValue(name);\n        }\n        if (isObject(name)) { // expand if object\n          for (attName in name) {\n            if (!hasProp.call(name, attName)) continue;\n            attValue = name[attName];\n            this.attribute(attName, attValue);\n          }\n        } else {\n          if (isFunction(value)) {\n            value = value.apply();\n          }\n          if (this.options.keepNullAttributes && (value == null)) {\n            this.attribs[name] = new XMLAttribute(this, name, \"\");\n          } else if (value != null) {\n            this.attribs[name] = new XMLAttribute(this, name, value);\n          }\n        }\n        return this;\n      }\n\n      // Removes an attribute\n\n      // `name` attribute name\n      removeAttribute(name) {\n        var attName, j, len;\n        // Also defined in DOM level 1\n        // removeAttribute(name) removes an attribute by name.\n        if (name == null) {\n          throw new Error(\"Missing attribute name. \" + this.debugInfo());\n        }\n        name = getValue(name);\n        if (Array.isArray(name)) { // expand if array\n          for (j = 0, len = name.length; j < len; j++) {\n            attName = name[j];\n            delete this.attribs[attName];\n          }\n        } else {\n          delete this.attribs[name];\n        }\n        return this;\n      }\n\n      // Converts the XML fragment to string\n\n      // `options.pretty` pretty prints the result\n      // `options.indent` indentation for pretty print\n      // `options.offset` how many indentations to add to every line for pretty print\n      // `options.newline` newline sequence for pretty print\n      // `options.allowEmpty` do not self close empty element tags\n      toString(options) {\n        return this.options.writer.element(this, this.options.writer.filterOptions(options));\n      }\n\n      // Aliases\n      att(name, value) {\n        return this.attribute(name, value);\n      }\n\n      a(name, value) {\n        return this.attribute(name, value);\n      }\n\n      // DOM Level 1\n      getAttribute(name) {\n        if (this.attribs.hasOwnProperty(name)) {\n          return this.attribs[name].value;\n        } else {\n          return null;\n        }\n      }\n\n      setAttribute(name, value) {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n\n      getAttributeNode(name) {\n        if (this.attribs.hasOwnProperty(name)) {\n          return this.attribs[name];\n        } else {\n          return null;\n        }\n      }\n\n      setAttributeNode(newAttr) {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n\n      removeAttributeNode(oldAttr) {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n\n      getElementsByTagName(name) {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n\n      // DOM Level 2\n      getAttributeNS(namespaceURI, localName) {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n\n      setAttributeNS(namespaceURI, qualifiedName, value) {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n\n      removeAttributeNS(namespaceURI, localName) {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n\n      getAttributeNodeNS(namespaceURI, localName) {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n\n      setAttributeNodeNS(newAttr) {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n\n      getElementsByTagNameNS(namespaceURI, localName) {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n\n      hasAttribute(name) {\n        return this.attribs.hasOwnProperty(name);\n      }\n\n      hasAttributeNS(namespaceURI, localName) {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n\n      // DOM Level 3\n      setIdAttribute(name, isId) {\n        if (this.attribs.hasOwnProperty(name)) {\n          return this.attribs[name].isId;\n        } else {\n          return isId;\n        }\n      }\n\n      setIdAttributeNS(namespaceURI, localName, isId) {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n\n      setIdAttributeNode(idAttr, isId) {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n\n      // DOM Level 4\n      getElementsByTagName(tagname) {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n\n      getElementsByTagNameNS(namespaceURI, localName) {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n\n      getElementsByClassName(classNames) {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n\n      isEqualNode(node) {\n        var i, j, ref;\n        if (!super.isEqualNode(node)) {\n          return false;\n        }\n        if (node.namespaceURI !== this.namespaceURI) {\n          return false;\n        }\n        if (node.prefix !== this.prefix) {\n          return false;\n        }\n        if (node.localName !== this.localName) {\n          return false;\n        }\n        if (node.attribs.length !== this.attribs.length) {\n          return false;\n        }\n        for (i = j = 0, ref = this.attribs.length - 1; (0 <= ref ? j <= ref : j >= ref); i = 0 <= ref ? ++j : --j) {\n          if (!this.attribs[i].isEqualNode(node.attribs[i])) {\n            return false;\n          }\n        }\n        return true;\n      }\n\n    };\n\n    // DOM level 1\n    Object.defineProperty(XMLElement.prototype, 'tagName', {\n      get: function() {\n        return this.name;\n      }\n    });\n\n    // DOM level 4\n    Object.defineProperty(XMLElement.prototype, 'namespaceURI', {\n      get: function() {\n        return '';\n      }\n    });\n\n    Object.defineProperty(XMLElement.prototype, 'prefix', {\n      get: function() {\n        return '';\n      }\n    });\n\n    Object.defineProperty(XMLElement.prototype, 'localName', {\n      get: function() {\n        return this.name;\n      }\n    });\n\n    Object.defineProperty(XMLElement.prototype, 'id', {\n      get: function() {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n    });\n\n    Object.defineProperty(XMLElement.prototype, 'className', {\n      get: function() {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n    });\n\n    Object.defineProperty(XMLElement.prototype, 'classList', {\n      get: function() {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n    });\n\n    Object.defineProperty(XMLElement.prototype, 'attributes', {\n      get: function() {\n        if (!this.attributeMap || !this.attributeMap.nodes) {\n          this.attributeMap = new XMLNamedNodeMap(this.attribs);\n        }\n        return this.attributeMap;\n      }\n    });\n\n    return XMLElement;\n\n  }).call(this);\n\n}).call(this);\n"]},"metadata":{},"sourceType":"module"}