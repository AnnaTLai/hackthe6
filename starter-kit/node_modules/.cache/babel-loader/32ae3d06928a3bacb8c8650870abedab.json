{"ast":null,"code":"'use strict';\n/* jshint ignore:start */\n\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n\n/* jshint ignore:end */\n\nvar Q = require('q');\n/* jshint ignore:line */\n\n\nvar _ = require('lodash');\n/* jshint ignore:line */\n\n\nvar util = require('util');\n/* jshint ignore:line */\n\n\nvar Page = require('../../../base/Page');\n/* jshint ignore:line */\n\n\nvar deserialize = require('../../../base/deserialize');\n/* jshint ignore:line */\n\n\nvar values = require('../../../base/values');\n/* jshint ignore:line */\n\n\nvar SmsCommandList;\nvar SmsCommandPage;\nvar SmsCommandInstance;\nvar SmsCommandContext;\n/* jshint ignore:start */\n\n/**\n * Initialize the SmsCommandList\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Supersim.V1.SmsCommandList\n *\n * @param {Twilio.Supersim.V1} version - Version of the resource\n */\n\n/* jshint ignore:end */\n\nSmsCommandList = function SmsCommandList(version) {\n  /* jshint ignore:start */\n\n  /**\n   * @function smsCommands\n   * @memberof Twilio.Supersim.V1#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Supersim.V1.SmsCommandContext}\n   */\n\n  /* jshint ignore:end */\n  function SmsCommandListInstance(sid) {\n    return SmsCommandListInstance.get(sid);\n  }\n\n  SmsCommandListInstance._version = version; // Path Solution\n\n  SmsCommandListInstance._solution = {};\n  SmsCommandListInstance._uri = `/SmsCommands`;\n  /* jshint ignore:start */\n\n  /**\n   * create a SmsCommandInstance\n   *\n   * @function create\n   * @memberof Twilio.Supersim.V1.SmsCommandList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.sim -\n   *          The sid or unique_name of the SIM to send the SMS Command to\n   * @param {string} opts.payload - The message body of the SMS Command\n   * @param {string} [opts.callbackMethod] -\n   *          The HTTP method we should use to call callback_url\n   * @param {string} [opts.callbackUrl] -\n   *          The URL we should call after we have sent the command\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed SmsCommandInstance\n   */\n\n  /* jshint ignore:end */\n\n  SmsCommandListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n\n    if (_.isUndefined(opts.sim)) {\n      throw new Error('Required parameter \"opts.sim\" missing.');\n    }\n\n    if (_.isUndefined(opts.payload)) {\n      throw new Error('Required parameter \"opts.payload\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'Sim': _.get(opts, 'sim'),\n      'Payload': _.get(opts, 'payload'),\n      'CallbackMethod': _.get(opts, 'callbackMethod'),\n      'CallbackUrl': _.get(opts, 'callbackUrl')\n    });\n\n    var promise = this._version.create({\n      uri: this._uri,\n      method: 'POST',\n      data: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new SmsCommandInstance(this._version, payload, this._solution.sid));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Streams SmsCommandInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Supersim.V1.SmsCommandList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.sim] -\n   *          The SID or unique name of the Sim resource that SMS Command was sent to or from.\n   * @param {sms_command.status} [opts.status] - The status of the SMS Command\n   * @param {sms_command.direction} [opts.direction] -\n   *          The direction of the SMS Command\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n\n  /* jshint ignore:end */\n\n\n  SmsCommandListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Lists SmsCommandInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Supersim.V1.SmsCommandList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.sim] -\n   *          The SID or unique name of the Sim resource that SMS Command was sent to or from.\n   * @param {sms_command.status} [opts.status] - The status of the SMS Command\n   * @param {sms_command.direction} [opts.direction] -\n   *          The direction of the SMS Command\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  SmsCommandListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single page of SmsCommandInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Supersim.V1.SmsCommandList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.sim] -\n   *          The SID or unique name of the Sim resource that SMS Command was sent to or from.\n   * @param {sms_command.status} [opts.status] - The status of the SMS Command\n   * @param {sms_command.direction} [opts.direction] -\n   *          The direction of the SMS Command\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  SmsCommandListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'Sim': _.get(opts, 'sim'),\n      'Status': _.get(opts, 'status'),\n      'Direction': _.get(opts, 'direction'),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new SmsCommandPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single target page of SmsCommandInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Supersim.V1.SmsCommandList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  SmsCommandListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new SmsCommandPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Constructs a sms_command\n   *\n   * @function get\n   * @memberof Twilio.Supersim.V1.SmsCommandList#\n   *\n   * @param {string} sid - The SID that identifies the resource to fetch\n   *\n   * @returns {Twilio.Supersim.V1.SmsCommandContext}\n   */\n\n  /* jshint ignore:end */\n\n\n  SmsCommandListInstance.get = function get(sid) {\n    return new SmsCommandContext(this._version, sid);\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Supersim.V1.SmsCommandList#\n   *\n   * @returns Object\n   */\n\n  /* jshint ignore:end */\n\n\n  SmsCommandListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  SmsCommandListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return SmsCommandListInstance;\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the SmsCommandPage\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Supersim.V1.SmsCommandPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {SmsCommandSolution} solution - Path solution\n *\n * @returns SmsCommandPage\n */\n\n/* jshint ignore:end */\n\n\nSmsCommandPage = function SmsCommandPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(SmsCommandPage.prototype, Page.prototype);\n\nSmsCommandPage.prototype.constructor = SmsCommandPage;\n/* jshint ignore:start */\n\n/**\n * Build an instance of SmsCommandInstance\n *\n * @function getInstance\n * @memberof Twilio.Supersim.V1.SmsCommandPage#\n *\n * @param {SmsCommandPayload} payload - Payload response from the API\n *\n * @returns SmsCommandInstance\n */\n\n/* jshint ignore:end */\n\nSmsCommandPage.prototype.getInstance = function getInstance(payload) {\n  return new SmsCommandInstance(this._version, payload);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Supersim.V1.SmsCommandPage#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nSmsCommandPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nSmsCommandPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the SmsCommandContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Supersim.V1.SmsCommandInstance\n *\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {string} simSid -\n *          The SID of the SIM that this SMS Command was sent to or from\n * @property {string} payload -\n *          The message body of the SMS Command sent to or from the SIM\n * @property {sms_command.status} status - The status of the SMS Command\n * @property {sms_command.direction} direction - The direction of the SMS Command\n * @property {Date} dateCreated -\n *          The ISO 8601 date and time in GMT when the resource was created\n * @property {Date} dateUpdated -\n *          The ISO 8601 date and time in GMT when the resource was last updated\n * @property {string} url - The absolute URL of the SMS Command resource\n *\n * @param {V1} version - Version of the resource\n * @param {SmsCommandPayload} payload - The instance payload\n * @param {sid} sid - The SID that identifies the resource to fetch\n */\n\n/* jshint ignore:end */\n\n\nSmsCommandInstance = function SmsCommandInstance(version, payload, sid) {\n  this._version = version; // Marshaled Properties\n\n  this.sid = payload.sid; // jshint ignore:line\n\n  this.accountSid = payload.account_sid; // jshint ignore:line\n\n  this.simSid = payload.sim_sid; // jshint ignore:line\n\n  this.payload = payload.payload; // jshint ignore:line\n\n  this.status = payload.status; // jshint ignore:line\n\n  this.direction = payload.direction; // jshint ignore:line\n\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n\n  this.url = payload.url; // jshint ignore:line\n  // Context\n\n  this._context = undefined;\n  this._solution = {\n    sid: sid || this.sid\n  };\n};\n\nObject.defineProperty(SmsCommandInstance.prototype, '_proxy', {\n  get: function () {\n    if (!this._context) {\n      this._context = new SmsCommandContext(this._version, this._solution.sid);\n    }\n\n    return this._context;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * fetch a SmsCommandInstance\n *\n * @function fetch\n * @memberof Twilio.Supersim.V1.SmsCommandInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SmsCommandInstance\n */\n\n/* jshint ignore:end */\n\nSmsCommandInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Supersim.V1.SmsCommandInstance#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nSmsCommandInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nSmsCommandInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the SmsCommandContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Supersim.V1.SmsCommandContext\n *\n * @param {V1} version - Version of the resource\n * @param {sid} sid - The SID that identifies the resource to fetch\n */\n\n/* jshint ignore:end */\n\n\nSmsCommandContext = function SmsCommandContext(version, sid) {\n  this._version = version; // Path Solution\n\n  this._solution = {\n    sid: sid\n  };\n  this._uri = `/SmsCommands/${sid}`;\n};\n/* jshint ignore:start */\n\n/**\n * fetch a SmsCommandInstance\n *\n * @function fetch\n * @memberof Twilio.Supersim.V1.SmsCommandContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SmsCommandInstance\n */\n\n/* jshint ignore:end */\n\n\nSmsCommandContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new SmsCommandInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Supersim.V1.SmsCommandContext#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nSmsCommandContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nSmsCommandContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  SmsCommandList: SmsCommandList,\n  SmsCommandPage: SmsCommandPage,\n  SmsCommandInstance: SmsCommandInstance,\n  SmsCommandContext: SmsCommandContext\n};","map":{"version":3,"sources":["/Users/tony_niu/Visual Studio/Twilio/twilio-video-starter-kit/src/token-service/node_modules/twilio/lib/rest/supersim/v1/smsCommand.js"],"names":["Q","require","_","util","Page","deserialize","values","SmsCommandList","SmsCommandPage","SmsCommandInstance","SmsCommandContext","version","SmsCommandListInstance","sid","get","_version","_solution","_uri","create","opts","callback","isUndefined","Error","sim","payload","deferred","defer","data","of","promise","uri","method","then","resolve","bind","catch","error","reject","isFunction","nodeify","each","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","fetchNextPage","fn","page","instances","instance","nextPage","merge","list","allResources","resource","push","length","pageToken","pageNumber","params","getPage","targetUrl","_domain","twilio","request","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","accountSid","account_sid","simSid","sim_sid","status","direction","dateCreated","iso8601DateTime","date_created","dateUpdated","date_updated","url","_context","undefined","Object","defineProperty","fetch","_proxy","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar Page = require('../../../base/Page');  /* jshint ignore:line */\nvar deserialize = require(\n    '../../../base/deserialize');  /* jshint ignore:line */\nvar values = require('../../../base/values');  /* jshint ignore:line */\n\nvar SmsCommandList;\nvar SmsCommandPage;\nvar SmsCommandInstance;\nvar SmsCommandContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the SmsCommandList\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Supersim.V1.SmsCommandList\n *\n * @param {Twilio.Supersim.V1} version - Version of the resource\n */\n/* jshint ignore:end */\nSmsCommandList = function SmsCommandList(version) {\n  /* jshint ignore:start */\n  /**\n   * @function smsCommands\n   * @memberof Twilio.Supersim.V1#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Supersim.V1.SmsCommandContext}\n   */\n  /* jshint ignore:end */\n  function SmsCommandListInstance(sid) {\n    return SmsCommandListInstance.get(sid);\n  }\n\n  SmsCommandListInstance._version = version;\n  // Path Solution\n  SmsCommandListInstance._solution = {};\n  SmsCommandListInstance._uri = `/SmsCommands`;\n  /* jshint ignore:start */\n  /**\n   * create a SmsCommandInstance\n   *\n   * @function create\n   * @memberof Twilio.Supersim.V1.SmsCommandList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.sim -\n   *          The sid or unique_name of the SIM to send the SMS Command to\n   * @param {string} opts.payload - The message body of the SMS Command\n   * @param {string} [opts.callbackMethod] -\n   *          The HTTP method we should use to call callback_url\n   * @param {string} [opts.callbackUrl] -\n   *          The URL we should call after we have sent the command\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed SmsCommandInstance\n   */\n  /* jshint ignore:end */\n  SmsCommandListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n    if (_.isUndefined(opts.sim)) {\n      throw new Error('Required parameter \"opts.sim\" missing.');\n    }\n    if (_.isUndefined(opts.payload)) {\n      throw new Error('Required parameter \"opts.payload\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'Sim': _.get(opts, 'sim'),\n      'Payload': _.get(opts, 'payload'),\n      'CallbackMethod': _.get(opts, 'callbackMethod'),\n      'CallbackUrl': _.get(opts, 'callbackUrl')\n    });\n\n    var promise = this._version.create({uri: this._uri, method: 'POST', data: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new SmsCommandInstance(this._version, payload, this._solution.sid));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Streams SmsCommandInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Supersim.V1.SmsCommandList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.sim] -\n   *          The SID or unique name of the Sim resource that SMS Command was sent to or from.\n   * @param {sms_command.status} [opts.status] - The status of the SMS Command\n   * @param {sms_command.direction} [opts.direction] -\n   *          The direction of the SMS Command\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  SmsCommandListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists SmsCommandInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Supersim.V1.SmsCommandList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.sim] -\n   *          The SID or unique name of the Sim resource that SMS Command was sent to or from.\n   * @param {sms_command.status} [opts.status] - The status of the SMS Command\n   * @param {sms_command.direction} [opts.direction] -\n   *          The direction of the SMS Command\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  SmsCommandListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of SmsCommandInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Supersim.V1.SmsCommandList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.sim] -\n   *          The SID or unique name of the Sim resource that SMS Command was sent to or from.\n   * @param {sms_command.status} [opts.status] - The status of the SMS Command\n   * @param {sms_command.direction} [opts.direction] -\n   *          The direction of the SMS Command\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  SmsCommandListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'Sim': _.get(opts, 'sim'),\n      'Status': _.get(opts, 'status'),\n      'Direction': _.get(opts, 'direction'),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new SmsCommandPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of SmsCommandInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Supersim.V1.SmsCommandList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  SmsCommandListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new SmsCommandPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a sms_command\n   *\n   * @function get\n   * @memberof Twilio.Supersim.V1.SmsCommandList#\n   *\n   * @param {string} sid - The SID that identifies the resource to fetch\n   *\n   * @returns {Twilio.Supersim.V1.SmsCommandContext}\n   */\n  /* jshint ignore:end */\n  SmsCommandListInstance.get = function get(sid) {\n    return new SmsCommandContext(this._version, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Supersim.V1.SmsCommandList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  SmsCommandListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  SmsCommandListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return SmsCommandListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the SmsCommandPage\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Supersim.V1.SmsCommandPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {SmsCommandSolution} solution - Path solution\n *\n * @returns SmsCommandPage\n */\n/* jshint ignore:end */\nSmsCommandPage = function SmsCommandPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(SmsCommandPage.prototype, Page.prototype);\nSmsCommandPage.prototype.constructor = SmsCommandPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of SmsCommandInstance\n *\n * @function getInstance\n * @memberof Twilio.Supersim.V1.SmsCommandPage#\n *\n * @param {SmsCommandPayload} payload - Payload response from the API\n *\n * @returns SmsCommandInstance\n */\n/* jshint ignore:end */\nSmsCommandPage.prototype.getInstance = function getInstance(payload) {\n  return new SmsCommandInstance(this._version, payload);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Supersim.V1.SmsCommandPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nSmsCommandPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nSmsCommandPage.prototype[util.inspect.custom] = function inspect(depth, options)\n    {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the SmsCommandContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Supersim.V1.SmsCommandInstance\n *\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {string} simSid -\n *          The SID of the SIM that this SMS Command was sent to or from\n * @property {string} payload -\n *          The message body of the SMS Command sent to or from the SIM\n * @property {sms_command.status} status - The status of the SMS Command\n * @property {sms_command.direction} direction - The direction of the SMS Command\n * @property {Date} dateCreated -\n *          The ISO 8601 date and time in GMT when the resource was created\n * @property {Date} dateUpdated -\n *          The ISO 8601 date and time in GMT when the resource was last updated\n * @property {string} url - The absolute URL of the SMS Command resource\n *\n * @param {V1} version - Version of the resource\n * @param {SmsCommandPayload} payload - The instance payload\n * @param {sid} sid - The SID that identifies the resource to fetch\n */\n/* jshint ignore:end */\nSmsCommandInstance = function SmsCommandInstance(version, payload, sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.sid = payload.sid; // jshint ignore:line\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.simSid = payload.sim_sid; // jshint ignore:line\n  this.payload = payload.payload; // jshint ignore:line\n  this.status = payload.status; // jshint ignore:line\n  this.direction = payload.direction; // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {sid: sid || this.sid, };\n};\n\nObject.defineProperty(SmsCommandInstance.prototype,\n  '_proxy', {\n    get: function() {\n      if (!this._context) {\n        this._context = new SmsCommandContext(this._version, this._solution.sid);\n      }\n\n      return this._context;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a SmsCommandInstance\n *\n * @function fetch\n * @memberof Twilio.Supersim.V1.SmsCommandInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SmsCommandInstance\n */\n/* jshint ignore:end */\nSmsCommandInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Supersim.V1.SmsCommandInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nSmsCommandInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nSmsCommandInstance.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the SmsCommandContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Supersim.V1.SmsCommandContext\n *\n * @param {V1} version - Version of the resource\n * @param {sid} sid - The SID that identifies the resource to fetch\n */\n/* jshint ignore:end */\nSmsCommandContext = function SmsCommandContext(version, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {sid: sid, };\n  this._uri = `/SmsCommands/${sid}`;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a SmsCommandInstance\n *\n * @function fetch\n * @memberof Twilio.Supersim.V1.SmsCommandContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SmsCommandInstance\n */\n/* jshint ignore:end */\nSmsCommandContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({uri: this._uri, method: 'GET'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new SmsCommandInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Supersim.V1.SmsCommandContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nSmsCommandContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nSmsCommandContext.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  SmsCommandList: SmsCommandList,\n  SmsCommandPage: SmsCommandPage,\n  SmsCommandInstance: SmsCommandInstance,\n  SmsCommandContext: SmsCommandContext\n};\n"]},"metadata":{},"sourceType":"module"}