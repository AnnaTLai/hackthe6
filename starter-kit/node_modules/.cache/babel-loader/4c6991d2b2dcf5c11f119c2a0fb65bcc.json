{"ast":null,"code":"'use strict';\n/* jshint ignore:start */\n\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n\n/* jshint ignore:end */\n\nvar Q = require('q');\n/* jshint ignore:line */\n\n\nvar _ = require('lodash');\n/* jshint ignore:line */\n\n\nvar util = require('util');\n/* jshint ignore:line */\n\n\nvar AlphaSenderList = require('./service/alphaSender').AlphaSenderList;\n\nvar Page = require('../../../base/Page');\n/* jshint ignore:line */\n\n\nvar PhoneNumberList = require('./service/phoneNumber').PhoneNumberList;\n\nvar ShortCodeList = require('./service/shortCode').ShortCodeList;\n\nvar UsAppToPersonList = require('./service/usAppToPerson').UsAppToPersonList;\n\nvar UsAppToPersonUsecaseList = require('./service/usAppToPersonUsecase').UsAppToPersonUsecaseList;\n\nvar deserialize = require('../../../base/deserialize');\n/* jshint ignore:line */\n\n\nvar serialize = require('../../../base/serialize');\n/* jshint ignore:line */\n\n\nvar values = require('../../../base/values');\n/* jshint ignore:line */\n\n\nvar ServiceList;\nvar ServicePage;\nvar ServiceInstance;\nvar ServiceContext;\n/* jshint ignore:start */\n\n/**\n * Initialize the ServiceList\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Messaging.V1.ServiceList\n *\n * @param {Twilio.Messaging.V1} version - Version of the resource\n */\n\n/* jshint ignore:end */\n\nServiceList = function ServiceList(version) {\n  /* jshint ignore:start */\n\n  /**\n   * @function services\n   * @memberof Twilio.Messaging.V1#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Messaging.V1.ServiceContext}\n   */\n\n  /* jshint ignore:end */\n  function ServiceListInstance(sid) {\n    return ServiceListInstance.get(sid);\n  }\n\n  ServiceListInstance._version = version; // Path Solution\n\n  ServiceListInstance._solution = {};\n  ServiceListInstance._uri = `/Services`;\n  /* jshint ignore:start */\n\n  /**\n   * create a ServiceInstance\n   *\n   * @function create\n   * @memberof Twilio.Messaging.V1.ServiceList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.friendlyName - A string to describe the resource\n   * @param {string} [opts.inboundRequestUrl] -\n   *          The URL we call using inbound_method when a message is received by any phone number or short code in the Service. This field will be overridden if the `use_inbound_webhook_on_number` field is enabled.\n   * @param {string} [opts.inboundMethod] -\n   *          The HTTP method we should use to call inbound_request_url\n   * @param {string} [opts.fallbackUrl] -\n   *          The URL that we call using fallback_method if an error occurs while retrieving or executing the TwiML from the Inbound Request URL. This field will be overridden if the `use_inbound_webhook_on_number` field is enabled.\n   * @param {string} [opts.fallbackMethod] -\n   *          The HTTP method we should use to call fallback_url\n   * @param {string} [opts.statusCallback] -\n   *          The URL we should call to pass status updates about message delivery\n   * @param {boolean} [opts.stickySender] -\n   *          Whether to enable Sticky Sender on the Service instance\n   * @param {boolean} [opts.mmsConverter] -\n   *          Whether to enable the MMS Converter for messages sent through the Service instance\n   * @param {boolean} [opts.smartEncoding] -\n   *          Whether to enable Encoding for messages sent through the Service instance\n   * @param {service.scan_message_content} [opts.scanMessageContent] - Reserved\n   * @param {boolean} [opts.fallbackToLongCode] -\n   *          Whether to enable Fallback to Long Code for messages sent through the Service instance\n   * @param {boolean} [opts.areaCodeGeomatch] -\n   *          Whether to enable Area Code Geomatch on the Service Instance\n   * @param {number} [opts.validityPeriod] -\n   *          How long, in seconds, messages sent from the Service are valid\n   * @param {boolean} [opts.synchronousValidation] - Reserved\n   * @param {boolean} [opts.useInboundWebhookOnNumber] -\n   *          If enabled, the webhook url configured on the phone number will be used and will override the `inbound_request_url`/`fallback_url` url called when an inbound message is received.\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed ServiceInstance\n   */\n\n  /* jshint ignore:end */\n\n  ServiceListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n\n    if (_.isUndefined(opts.friendlyName)) {\n      throw new Error('Required parameter \"opts.friendlyName\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'FriendlyName': _.get(opts, 'friendlyName'),\n      'InboundRequestUrl': _.get(opts, 'inboundRequestUrl'),\n      'InboundMethod': _.get(opts, 'inboundMethod'),\n      'FallbackUrl': _.get(opts, 'fallbackUrl'),\n      'FallbackMethod': _.get(opts, 'fallbackMethod'),\n      'StatusCallback': _.get(opts, 'statusCallback'),\n      'StickySender': serialize.bool(_.get(opts, 'stickySender')),\n      'MmsConverter': serialize.bool(_.get(opts, 'mmsConverter')),\n      'SmartEncoding': serialize.bool(_.get(opts, 'smartEncoding')),\n      'ScanMessageContent': _.get(opts, 'scanMessageContent'),\n      'FallbackToLongCode': serialize.bool(_.get(opts, 'fallbackToLongCode')),\n      'AreaCodeGeomatch': serialize.bool(_.get(opts, 'areaCodeGeomatch')),\n      'ValidityPeriod': _.get(opts, 'validityPeriod'),\n      'SynchronousValidation': serialize.bool(_.get(opts, 'synchronousValidation')),\n      'UseInboundWebhookOnNumber': serialize.bool(_.get(opts, 'useInboundWebhookOnNumber'))\n    });\n\n    var promise = this._version.create({\n      uri: this._uri,\n      method: 'POST',\n      data: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new ServiceInstance(this._version, payload, this._solution.sid));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Streams ServiceInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Messaging.V1.ServiceList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n\n  /* jshint ignore:end */\n\n\n  ServiceListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Lists ServiceInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Messaging.V1.ServiceList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  ServiceListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single page of ServiceInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Messaging.V1.ServiceList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  ServiceListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new ServicePage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single target page of ServiceInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Messaging.V1.ServiceList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  ServiceListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new ServicePage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Constructs a service\n   *\n   * @function get\n   * @memberof Twilio.Messaging.V1.ServiceList#\n   *\n   * @param {string} sid - The SID that identifies the resource to fetch\n   *\n   * @returns {Twilio.Messaging.V1.ServiceContext}\n   */\n\n  /* jshint ignore:end */\n\n\n  ServiceListInstance.get = function get(sid) {\n    return new ServiceContext(this._version, sid);\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Messaging.V1.ServiceList#\n   *\n   * @returns Object\n   */\n\n  /* jshint ignore:end */\n\n\n  ServiceListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  ServiceListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return ServiceListInstance;\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the ServicePage\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Messaging.V1.ServicePage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {ServiceSolution} solution - Path solution\n *\n * @returns ServicePage\n */\n\n/* jshint ignore:end */\n\n\nServicePage = function ServicePage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(ServicePage.prototype, Page.prototype);\n\nServicePage.prototype.constructor = ServicePage;\n/* jshint ignore:start */\n\n/**\n * Build an instance of ServiceInstance\n *\n * @function getInstance\n * @memberof Twilio.Messaging.V1.ServicePage#\n *\n * @param {ServicePayload} payload - Payload response from the API\n *\n * @returns ServiceInstance\n */\n\n/* jshint ignore:end */\n\nServicePage.prototype.getInstance = function getInstance(payload) {\n  return new ServiceInstance(this._version, payload);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Messaging.V1.ServicePage#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nServicePage.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nServicePage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the ServiceContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Messaging.V1.ServiceInstance\n *\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {string} friendlyName -\n *          The string that you assigned to describe the resource\n * @property {Date} dateCreated -\n *          The ISO 8601 date and time in GMT when the resource was created\n * @property {Date} dateUpdated -\n *          The ISO 8601 date and time in GMT when the resource was last updated\n * @property {string} inboundRequestUrl -\n *          The URL we call using inbound_method when a message is received by any phone number or short code in the Service. This field will be overridden if the `use_inbound_webhook_on_number` field is enabled.\n * @property {string} inboundMethod -\n *          The HTTP method we use to call inbound_request_url\n * @property {string} fallbackUrl -\n *          The URL that we call using fallback_method if an error occurs while retrieving or executing the TwiML from the Inbound Request URL. This field will be overridden if the `use_inbound_webhook_on_number` field is enabled.\n * @property {string} fallbackMethod - The HTTP method we use to call fallback_url\n * @property {string} statusCallback -\n *          The URL we call to pass status updates about message delivery\n * @property {boolean} stickySender -\n *          Whether to enable Sticky Sender on the Service instance\n * @property {boolean} mmsConverter -\n *          Whether to enable the MMS Converter for messages sent through the Service instance\n * @property {boolean} smartEncoding -\n *          Whether to enable Encoding for messages sent through the Service instance\n * @property {service.scan_message_content} scanMessageContent - Reserved\n * @property {boolean} fallbackToLongCode -\n *          Whether to enable Fallback to Long Code for messages sent through the Service instance\n * @property {boolean} areaCodeGeomatch -\n *          Whether to enable Area Code Geomatch on the Service Instance\n * @property {boolean} synchronousValidation - Reserved\n * @property {number} validityPeriod -\n *          How long, in seconds, messages sent from the Service are valid\n * @property {string} url - The absolute URL of the Service resource\n * @property {string} links - The absolute URLs of related resources\n * @property {boolean} useInboundWebhookOnNumber -\n *          If enabled, the webhook url configured on the phone number will be used and will override the `inbound_request_url`/`fallback_url` url called when an inbound message is received.\n *\n * @param {V1} version - Version of the resource\n * @param {ServicePayload} payload - The instance payload\n * @param {sid} sid - The SID that identifies the resource to fetch\n */\n\n/* jshint ignore:end */\n\n\nServiceInstance = function ServiceInstance(version, payload, sid) {\n  this._version = version; // Marshaled Properties\n\n  this.sid = payload.sid; // jshint ignore:line\n\n  this.accountSid = payload.account_sid; // jshint ignore:line\n\n  this.friendlyName = payload.friendly_name; // jshint ignore:line\n\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n\n  this.inboundRequestUrl = payload.inbound_request_url; // jshint ignore:line\n\n  this.inboundMethod = payload.inbound_method; // jshint ignore:line\n\n  this.fallbackUrl = payload.fallback_url; // jshint ignore:line\n\n  this.fallbackMethod = payload.fallback_method; // jshint ignore:line\n\n  this.statusCallback = payload.status_callback; // jshint ignore:line\n\n  this.stickySender = payload.sticky_sender; // jshint ignore:line\n\n  this.mmsConverter = payload.mms_converter; // jshint ignore:line\n\n  this.smartEncoding = payload.smart_encoding; // jshint ignore:line\n\n  this.scanMessageContent = payload.scan_message_content; // jshint ignore:line\n\n  this.fallbackToLongCode = payload.fallback_to_long_code; // jshint ignore:line\n\n  this.areaCodeGeomatch = payload.area_code_geomatch; // jshint ignore:line\n\n  this.synchronousValidation = payload.synchronous_validation; // jshint ignore:line\n\n  this.validityPeriod = deserialize.integer(payload.validity_period); // jshint ignore:line\n\n  this.url = payload.url; // jshint ignore:line\n\n  this.links = payload.links; // jshint ignore:line\n\n  this.useInboundWebhookOnNumber = payload.use_inbound_webhook_on_number; // jshint ignore:line\n  // Context\n\n  this._context = undefined;\n  this._solution = {\n    sid: sid || this.sid\n  };\n};\n\nObject.defineProperty(ServiceInstance.prototype, '_proxy', {\n  get: function () {\n    if (!this._context) {\n      this._context = new ServiceContext(this._version, this._solution.sid);\n    }\n\n    return this._context;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * update a ServiceInstance\n *\n * @function update\n * @memberof Twilio.Messaging.V1.ServiceInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] - A string to describe the resource\n * @param {string} [opts.inboundRequestUrl] -\n *          The URL we call using inbound_method when a message is received by any phone number or short code in the Service. This field will be overridden if the `use_inbound_webhook_on_number` field is enabled.\n * @param {string} [opts.inboundMethod] -\n *          The HTTP method we should use to call inbound_request_url\n * @param {string} [opts.fallbackUrl] -\n *          The URL that we call using fallback_method if an error occurs while retrieving or executing the TwiML from the Inbound Request URL. This field will be overridden if the `use_inbound_webhook_on_number` field is enabled.\n * @param {string} [opts.fallbackMethod] -\n *          The HTTP method we should use to call fallback_url\n * @param {string} [opts.statusCallback] -\n *          The URL we should call to pass status updates about message delivery\n * @param {boolean} [opts.stickySender] -\n *          Whether to enable Sticky Sender on the Service instance\n * @param {boolean} [opts.mmsConverter] -\n *          Whether to enable the MMS Converter for messages sent through the Service instance\n * @param {boolean} [opts.smartEncoding] -\n *          Whether to enable Encoding for messages sent through the Service instance\n * @param {service.scan_message_content} [opts.scanMessageContent] - Reserved\n * @param {boolean} [opts.fallbackToLongCode] -\n *          Whether to enable Fallback to Long Code for messages sent through the Service instance\n * @param {boolean} [opts.areaCodeGeomatch] -\n *          Whether to enable Area Code Geomatch on the Service Instance\n * @param {number} [opts.validityPeriod] -\n *          How long, in seconds, messages sent from the Service are valid\n * @param {boolean} [opts.synchronousValidation] - Reserved\n * @param {boolean} [opts.useInboundWebhookOnNumber] -\n *          If enabled, the webhook url configured on the phone number will be used and will override the `inbound_request_url`/`fallback_url` url called when an inbound message is received.\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ServiceInstance\n */\n\n/* jshint ignore:end */\n\nServiceInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n/* jshint ignore:start */\n\n/**\n * fetch a ServiceInstance\n *\n * @function fetch\n * @memberof Twilio.Messaging.V1.ServiceInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ServiceInstance\n */\n\n/* jshint ignore:end */\n\n\nServiceInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n/* jshint ignore:start */\n\n/**\n * remove a ServiceInstance\n *\n * @function remove\n * @memberof Twilio.Messaging.V1.ServiceInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ServiceInstance\n */\n\n/* jshint ignore:end */\n\n\nServiceInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n/* jshint ignore:start */\n\n/**\n * Access the phoneNumbers\n *\n * @function phoneNumbers\n * @memberof Twilio.Messaging.V1.ServiceInstance#\n *\n * @returns {Twilio.Messaging.V1.ServiceContext.PhoneNumberList}\n */\n\n/* jshint ignore:end */\n\n\nServiceInstance.prototype.phoneNumbers = function phoneNumbers() {\n  return this._proxy.phoneNumbers;\n};\n/* jshint ignore:start */\n\n/**\n * Access the shortCodes\n *\n * @function shortCodes\n * @memberof Twilio.Messaging.V1.ServiceInstance#\n *\n * @returns {Twilio.Messaging.V1.ServiceContext.ShortCodeList}\n */\n\n/* jshint ignore:end */\n\n\nServiceInstance.prototype.shortCodes = function shortCodes() {\n  return this._proxy.shortCodes;\n};\n/* jshint ignore:start */\n\n/**\n * Access the alphaSenders\n *\n * @function alphaSenders\n * @memberof Twilio.Messaging.V1.ServiceInstance#\n *\n * @returns {Twilio.Messaging.V1.ServiceContext.AlphaSenderList}\n */\n\n/* jshint ignore:end */\n\n\nServiceInstance.prototype.alphaSenders = function alphaSenders() {\n  return this._proxy.alphaSenders;\n};\n/* jshint ignore:start */\n\n/**\n * Access the usAppToPerson\n *\n * @function usAppToPerson\n * @memberof Twilio.Messaging.V1.ServiceInstance#\n *\n * @returns {Twilio.Messaging.V1.ServiceContext.UsAppToPersonList}\n */\n\n/* jshint ignore:end */\n\n\nServiceInstance.prototype.usAppToPerson = function usAppToPerson() {\n  return this._proxy.usAppToPerson;\n};\n/* jshint ignore:start */\n\n/**\n * Access the usAppToPersonUsecases\n *\n * @function usAppToPersonUsecases\n * @memberof Twilio.Messaging.V1.ServiceInstance#\n *\n * @returns {Twilio.Messaging.V1.ServiceContext.UsAppToPersonUsecaseList}\n */\n\n/* jshint ignore:end */\n\n\nServiceInstance.prototype.usAppToPersonUsecases = function usAppToPersonUsecases() {\n  return this._proxy.usAppToPersonUsecases;\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Messaging.V1.ServiceInstance#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nServiceInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nServiceInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the ServiceContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Messaging.V1.ServiceContext\n *\n * @property {Twilio.Messaging.V1.ServiceContext.PhoneNumberList} phoneNumbers -\n *          phoneNumbers resource\n * @property {Twilio.Messaging.V1.ServiceContext.ShortCodeList} shortCodes -\n *          shortCodes resource\n * @property {Twilio.Messaging.V1.ServiceContext.AlphaSenderList} alphaSenders -\n *          alphaSenders resource\n * @property {Twilio.Messaging.V1.ServiceContext.UsAppToPersonList} usAppToPerson -\n *          usAppToPerson resource\n * @property {Twilio.Messaging.V1.ServiceContext.UsAppToPersonUsecaseList} usAppToPersonUsecases -\n *          usAppToPersonUsecases resource\n *\n * @param {V1} version - Version of the resource\n * @param {sid} sid - The SID that identifies the resource to fetch\n */\n\n/* jshint ignore:end */\n\n\nServiceContext = function ServiceContext(version, sid) {\n  this._version = version; // Path Solution\n\n  this._solution = {\n    sid: sid\n  };\n  this._uri = `/Services/${sid}`; // Dependents\n\n  this._phoneNumbers = undefined;\n  this._shortCodes = undefined;\n  this._alphaSenders = undefined;\n  this._usAppToPerson = undefined;\n  this._usAppToPersonUsecases = undefined;\n};\n/* jshint ignore:start */\n\n/**\n * update a ServiceInstance\n *\n * @function update\n * @memberof Twilio.Messaging.V1.ServiceContext#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] - A string to describe the resource\n * @param {string} [opts.inboundRequestUrl] -\n *          The URL we call using inbound_method when a message is received by any phone number or short code in the Service. This field will be overridden if the `use_inbound_webhook_on_number` field is enabled.\n * @param {string} [opts.inboundMethod] -\n *          The HTTP method we should use to call inbound_request_url\n * @param {string} [opts.fallbackUrl] -\n *          The URL that we call using fallback_method if an error occurs while retrieving or executing the TwiML from the Inbound Request URL. This field will be overridden if the `use_inbound_webhook_on_number` field is enabled.\n * @param {string} [opts.fallbackMethod] -\n *          The HTTP method we should use to call fallback_url\n * @param {string} [opts.statusCallback] -\n *          The URL we should call to pass status updates about message delivery\n * @param {boolean} [opts.stickySender] -\n *          Whether to enable Sticky Sender on the Service instance\n * @param {boolean} [opts.mmsConverter] -\n *          Whether to enable the MMS Converter for messages sent through the Service instance\n * @param {boolean} [opts.smartEncoding] -\n *          Whether to enable Encoding for messages sent through the Service instance\n * @param {service.scan_message_content} [opts.scanMessageContent] - Reserved\n * @param {boolean} [opts.fallbackToLongCode] -\n *          Whether to enable Fallback to Long Code for messages sent through the Service instance\n * @param {boolean} [opts.areaCodeGeomatch] -\n *          Whether to enable Area Code Geomatch on the Service Instance\n * @param {number} [opts.validityPeriod] -\n *          How long, in seconds, messages sent from the Service are valid\n * @param {boolean} [opts.synchronousValidation] - Reserved\n * @param {boolean} [opts.useInboundWebhookOnNumber] -\n *          If enabled, the webhook url configured on the phone number will be used and will override the `inbound_request_url`/`fallback_url` url called when an inbound message is received.\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ServiceInstance\n */\n\n/* jshint ignore:end */\n\n\nServiceContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n\n  opts = opts || {};\n  var deferred = Q.defer();\n  var data = values.of({\n    'FriendlyName': _.get(opts, 'friendlyName'),\n    'InboundRequestUrl': _.get(opts, 'inboundRequestUrl'),\n    'InboundMethod': _.get(opts, 'inboundMethod'),\n    'FallbackUrl': _.get(opts, 'fallbackUrl'),\n    'FallbackMethod': _.get(opts, 'fallbackMethod'),\n    'StatusCallback': _.get(opts, 'statusCallback'),\n    'StickySender': serialize.bool(_.get(opts, 'stickySender')),\n    'MmsConverter': serialize.bool(_.get(opts, 'mmsConverter')),\n    'SmartEncoding': serialize.bool(_.get(opts, 'smartEncoding')),\n    'ScanMessageContent': _.get(opts, 'scanMessageContent'),\n    'FallbackToLongCode': serialize.bool(_.get(opts, 'fallbackToLongCode')),\n    'AreaCodeGeomatch': serialize.bool(_.get(opts, 'areaCodeGeomatch')),\n    'ValidityPeriod': _.get(opts, 'validityPeriod'),\n    'SynchronousValidation': serialize.bool(_.get(opts, 'synchronousValidation')),\n    'UseInboundWebhookOnNumber': serialize.bool(_.get(opts, 'useInboundWebhookOnNumber'))\n  });\n\n  var promise = this._version.update({\n    uri: this._uri,\n    method: 'POST',\n    data: data\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new ServiceInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * fetch a ServiceInstance\n *\n * @function fetch\n * @memberof Twilio.Messaging.V1.ServiceContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ServiceInstance\n */\n\n/* jshint ignore:end */\n\n\nServiceContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new ServiceInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * remove a ServiceInstance\n *\n * @function remove\n * @memberof Twilio.Messaging.V1.ServiceContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ServiceInstance\n */\n\n/* jshint ignore:end */\n\n\nServiceContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.remove({\n    uri: this._uri,\n    method: 'DELETE'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\nObject.defineProperty(ServiceContext.prototype, 'phoneNumbers', {\n  get: function () {\n    if (!this._phoneNumbers) {\n      this._phoneNumbers = new PhoneNumberList(this._version, this._solution.sid);\n    }\n\n    return this._phoneNumbers;\n  }\n});\nObject.defineProperty(ServiceContext.prototype, 'shortCodes', {\n  get: function () {\n    if (!this._shortCodes) {\n      this._shortCodes = new ShortCodeList(this._version, this._solution.sid);\n    }\n\n    return this._shortCodes;\n  }\n});\nObject.defineProperty(ServiceContext.prototype, 'alphaSenders', {\n  get: function () {\n    if (!this._alphaSenders) {\n      this._alphaSenders = new AlphaSenderList(this._version, this._solution.sid);\n    }\n\n    return this._alphaSenders;\n  }\n});\nObject.defineProperty(ServiceContext.prototype, 'usAppToPerson', {\n  get: function () {\n    if (!this._usAppToPerson) {\n      this._usAppToPerson = new UsAppToPersonList(this._version, this._solution.sid);\n    }\n\n    return this._usAppToPerson;\n  }\n});\nObject.defineProperty(ServiceContext.prototype, 'usAppToPersonUsecases', {\n  get: function () {\n    if (!this._usAppToPersonUsecases) {\n      this._usAppToPersonUsecases = new UsAppToPersonUsecaseList(this._version, this._solution.sid);\n    }\n\n    return this._usAppToPersonUsecases;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Messaging.V1.ServiceContext#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\nServiceContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nServiceContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  ServiceList: ServiceList,\n  ServicePage: ServicePage,\n  ServiceInstance: ServiceInstance,\n  ServiceContext: ServiceContext\n};","map":{"version":3,"sources":["/Users/tony_niu/Visual Studio/Twilio/twilio-video-starter-kit/src/token-service/node_modules/twilio/lib/rest/messaging/v1/service.js"],"names":["Q","require","_","util","AlphaSenderList","Page","PhoneNumberList","ShortCodeList","UsAppToPersonList","UsAppToPersonUsecaseList","deserialize","serialize","values","ServiceList","ServicePage","ServiceInstance","ServiceContext","version","ServiceListInstance","sid","get","_version","_solution","_uri","create","opts","callback","isUndefined","Error","friendlyName","deferred","defer","data","of","bool","promise","uri","method","then","payload","resolve","bind","catch","error","reject","isFunction","nodeify","each","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","fetchNextPage","fn","page","instances","instance","nextPage","merge","list","allResources","resource","push","length","pageToken","pageNumber","params","getPage","targetUrl","_domain","twilio","request","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","accountSid","account_sid","friendly_name","dateCreated","iso8601DateTime","date_created","dateUpdated","date_updated","inboundRequestUrl","inbound_request_url","inboundMethod","inbound_method","fallbackUrl","fallback_url","fallbackMethod","fallback_method","statusCallback","status_callback","stickySender","sticky_sender","mmsConverter","mms_converter","smartEncoding","smart_encoding","scanMessageContent","scan_message_content","fallbackToLongCode","fallback_to_long_code","areaCodeGeomatch","area_code_geomatch","synchronousValidation","synchronous_validation","validityPeriod","integer","validity_period","url","links","useInboundWebhookOnNumber","use_inbound_webhook_on_number","_context","undefined","Object","defineProperty","update","_proxy","fetch","remove","phoneNumbers","shortCodes","alphaSenders","usAppToPerson","usAppToPersonUsecases","_phoneNumbers","_shortCodes","_alphaSenders","_usAppToPerson","_usAppToPersonUsecases","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar AlphaSenderList = require('./service/alphaSender').AlphaSenderList;\nvar Page = require('../../../base/Page');  /* jshint ignore:line */\nvar PhoneNumberList = require('./service/phoneNumber').PhoneNumberList;\nvar ShortCodeList = require('./service/shortCode').ShortCodeList;\nvar UsAppToPersonList = require('./service/usAppToPerson').UsAppToPersonList;\nvar UsAppToPersonUsecaseList = require(\n    './service/usAppToPersonUsecase').UsAppToPersonUsecaseList;\nvar deserialize = require(\n    '../../../base/deserialize');  /* jshint ignore:line */\nvar serialize = require('../../../base/serialize');  /* jshint ignore:line */\nvar values = require('../../../base/values');  /* jshint ignore:line */\n\nvar ServiceList;\nvar ServicePage;\nvar ServiceInstance;\nvar ServiceContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the ServiceList\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Messaging.V1.ServiceList\n *\n * @param {Twilio.Messaging.V1} version - Version of the resource\n */\n/* jshint ignore:end */\nServiceList = function ServiceList(version) {\n  /* jshint ignore:start */\n  /**\n   * @function services\n   * @memberof Twilio.Messaging.V1#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Messaging.V1.ServiceContext}\n   */\n  /* jshint ignore:end */\n  function ServiceListInstance(sid) {\n    return ServiceListInstance.get(sid);\n  }\n\n  ServiceListInstance._version = version;\n  // Path Solution\n  ServiceListInstance._solution = {};\n  ServiceListInstance._uri = `/Services`;\n  /* jshint ignore:start */\n  /**\n   * create a ServiceInstance\n   *\n   * @function create\n   * @memberof Twilio.Messaging.V1.ServiceList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.friendlyName - A string to describe the resource\n   * @param {string} [opts.inboundRequestUrl] -\n   *          The URL we call using inbound_method when a message is received by any phone number or short code in the Service. This field will be overridden if the `use_inbound_webhook_on_number` field is enabled.\n   * @param {string} [opts.inboundMethod] -\n   *          The HTTP method we should use to call inbound_request_url\n   * @param {string} [opts.fallbackUrl] -\n   *          The URL that we call using fallback_method if an error occurs while retrieving or executing the TwiML from the Inbound Request URL. This field will be overridden if the `use_inbound_webhook_on_number` field is enabled.\n   * @param {string} [opts.fallbackMethod] -\n   *          The HTTP method we should use to call fallback_url\n   * @param {string} [opts.statusCallback] -\n   *          The URL we should call to pass status updates about message delivery\n   * @param {boolean} [opts.stickySender] -\n   *          Whether to enable Sticky Sender on the Service instance\n   * @param {boolean} [opts.mmsConverter] -\n   *          Whether to enable the MMS Converter for messages sent through the Service instance\n   * @param {boolean} [opts.smartEncoding] -\n   *          Whether to enable Encoding for messages sent through the Service instance\n   * @param {service.scan_message_content} [opts.scanMessageContent] - Reserved\n   * @param {boolean} [opts.fallbackToLongCode] -\n   *          Whether to enable Fallback to Long Code for messages sent through the Service instance\n   * @param {boolean} [opts.areaCodeGeomatch] -\n   *          Whether to enable Area Code Geomatch on the Service Instance\n   * @param {number} [opts.validityPeriod] -\n   *          How long, in seconds, messages sent from the Service are valid\n   * @param {boolean} [opts.synchronousValidation] - Reserved\n   * @param {boolean} [opts.useInboundWebhookOnNumber] -\n   *          If enabled, the webhook url configured on the phone number will be used and will override the `inbound_request_url`/`fallback_url` url called when an inbound message is received.\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed ServiceInstance\n   */\n  /* jshint ignore:end */\n  ServiceListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n    if (_.isUndefined(opts.friendlyName)) {\n      throw new Error('Required parameter \"opts.friendlyName\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'FriendlyName': _.get(opts, 'friendlyName'),\n      'InboundRequestUrl': _.get(opts, 'inboundRequestUrl'),\n      'InboundMethod': _.get(opts, 'inboundMethod'),\n      'FallbackUrl': _.get(opts, 'fallbackUrl'),\n      'FallbackMethod': _.get(opts, 'fallbackMethod'),\n      'StatusCallback': _.get(opts, 'statusCallback'),\n      'StickySender': serialize.bool(_.get(opts, 'stickySender')),\n      'MmsConverter': serialize.bool(_.get(opts, 'mmsConverter')),\n      'SmartEncoding': serialize.bool(_.get(opts, 'smartEncoding')),\n      'ScanMessageContent': _.get(opts, 'scanMessageContent'),\n      'FallbackToLongCode': serialize.bool(_.get(opts, 'fallbackToLongCode')),\n      'AreaCodeGeomatch': serialize.bool(_.get(opts, 'areaCodeGeomatch')),\n      'ValidityPeriod': _.get(opts, 'validityPeriod'),\n      'SynchronousValidation': serialize.bool(_.get(opts, 'synchronousValidation')),\n      'UseInboundWebhookOnNumber': serialize.bool(_.get(opts, 'useInboundWebhookOnNumber'))\n    });\n\n    var promise = this._version.create({uri: this._uri, method: 'POST', data: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new ServiceInstance(this._version, payload, this._solution.sid));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Streams ServiceInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Messaging.V1.ServiceList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  ServiceListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists ServiceInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Messaging.V1.ServiceList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  ServiceListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of ServiceInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Messaging.V1.ServiceList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  ServiceListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new ServicePage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of ServiceInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Messaging.V1.ServiceList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  ServiceListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new ServicePage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a service\n   *\n   * @function get\n   * @memberof Twilio.Messaging.V1.ServiceList#\n   *\n   * @param {string} sid - The SID that identifies the resource to fetch\n   *\n   * @returns {Twilio.Messaging.V1.ServiceContext}\n   */\n  /* jshint ignore:end */\n  ServiceListInstance.get = function get(sid) {\n    return new ServiceContext(this._version, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Messaging.V1.ServiceList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  ServiceListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  ServiceListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return ServiceListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the ServicePage\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Messaging.V1.ServicePage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {ServiceSolution} solution - Path solution\n *\n * @returns ServicePage\n */\n/* jshint ignore:end */\nServicePage = function ServicePage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(ServicePage.prototype, Page.prototype);\nServicePage.prototype.constructor = ServicePage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of ServiceInstance\n *\n * @function getInstance\n * @memberof Twilio.Messaging.V1.ServicePage#\n *\n * @param {ServicePayload} payload - Payload response from the API\n *\n * @returns ServiceInstance\n */\n/* jshint ignore:end */\nServicePage.prototype.getInstance = function getInstance(payload) {\n  return new ServiceInstance(this._version, payload);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Messaging.V1.ServicePage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nServicePage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nServicePage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the ServiceContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Messaging.V1.ServiceInstance\n *\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {string} friendlyName -\n *          The string that you assigned to describe the resource\n * @property {Date} dateCreated -\n *          The ISO 8601 date and time in GMT when the resource was created\n * @property {Date} dateUpdated -\n *          The ISO 8601 date and time in GMT when the resource was last updated\n * @property {string} inboundRequestUrl -\n *          The URL we call using inbound_method when a message is received by any phone number or short code in the Service. This field will be overridden if the `use_inbound_webhook_on_number` field is enabled.\n * @property {string} inboundMethod -\n *          The HTTP method we use to call inbound_request_url\n * @property {string} fallbackUrl -\n *          The URL that we call using fallback_method if an error occurs while retrieving or executing the TwiML from the Inbound Request URL. This field will be overridden if the `use_inbound_webhook_on_number` field is enabled.\n * @property {string} fallbackMethod - The HTTP method we use to call fallback_url\n * @property {string} statusCallback -\n *          The URL we call to pass status updates about message delivery\n * @property {boolean} stickySender -\n *          Whether to enable Sticky Sender on the Service instance\n * @property {boolean} mmsConverter -\n *          Whether to enable the MMS Converter for messages sent through the Service instance\n * @property {boolean} smartEncoding -\n *          Whether to enable Encoding for messages sent through the Service instance\n * @property {service.scan_message_content} scanMessageContent - Reserved\n * @property {boolean} fallbackToLongCode -\n *          Whether to enable Fallback to Long Code for messages sent through the Service instance\n * @property {boolean} areaCodeGeomatch -\n *          Whether to enable Area Code Geomatch on the Service Instance\n * @property {boolean} synchronousValidation - Reserved\n * @property {number} validityPeriod -\n *          How long, in seconds, messages sent from the Service are valid\n * @property {string} url - The absolute URL of the Service resource\n * @property {string} links - The absolute URLs of related resources\n * @property {boolean} useInboundWebhookOnNumber -\n *          If enabled, the webhook url configured on the phone number will be used and will override the `inbound_request_url`/`fallback_url` url called when an inbound message is received.\n *\n * @param {V1} version - Version of the resource\n * @param {ServicePayload} payload - The instance payload\n * @param {sid} sid - The SID that identifies the resource to fetch\n */\n/* jshint ignore:end */\nServiceInstance = function ServiceInstance(version, payload, sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.sid = payload.sid; // jshint ignore:line\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.friendlyName = payload.friendly_name; // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n  this.inboundRequestUrl = payload.inbound_request_url; // jshint ignore:line\n  this.inboundMethod = payload.inbound_method; // jshint ignore:line\n  this.fallbackUrl = payload.fallback_url; // jshint ignore:line\n  this.fallbackMethod = payload.fallback_method; // jshint ignore:line\n  this.statusCallback = payload.status_callback; // jshint ignore:line\n  this.stickySender = payload.sticky_sender; // jshint ignore:line\n  this.mmsConverter = payload.mms_converter; // jshint ignore:line\n  this.smartEncoding = payload.smart_encoding; // jshint ignore:line\n  this.scanMessageContent = payload.scan_message_content; // jshint ignore:line\n  this.fallbackToLongCode = payload.fallback_to_long_code; // jshint ignore:line\n  this.areaCodeGeomatch = payload.area_code_geomatch; // jshint ignore:line\n  this.synchronousValidation = payload.synchronous_validation; // jshint ignore:line\n  this.validityPeriod = deserialize.integer(payload.validity_period); // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n  this.links = payload.links; // jshint ignore:line\n  this.useInboundWebhookOnNumber = payload.use_inbound_webhook_on_number; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {sid: sid || this.sid, };\n};\n\nObject.defineProperty(ServiceInstance.prototype,\n  '_proxy', {\n    get: function() {\n      if (!this._context) {\n        this._context = new ServiceContext(this._version, this._solution.sid);\n      }\n\n      return this._context;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * update a ServiceInstance\n *\n * @function update\n * @memberof Twilio.Messaging.V1.ServiceInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] - A string to describe the resource\n * @param {string} [opts.inboundRequestUrl] -\n *          The URL we call using inbound_method when a message is received by any phone number or short code in the Service. This field will be overridden if the `use_inbound_webhook_on_number` field is enabled.\n * @param {string} [opts.inboundMethod] -\n *          The HTTP method we should use to call inbound_request_url\n * @param {string} [opts.fallbackUrl] -\n *          The URL that we call using fallback_method if an error occurs while retrieving or executing the TwiML from the Inbound Request URL. This field will be overridden if the `use_inbound_webhook_on_number` field is enabled.\n * @param {string} [opts.fallbackMethod] -\n *          The HTTP method we should use to call fallback_url\n * @param {string} [opts.statusCallback] -\n *          The URL we should call to pass status updates about message delivery\n * @param {boolean} [opts.stickySender] -\n *          Whether to enable Sticky Sender on the Service instance\n * @param {boolean} [opts.mmsConverter] -\n *          Whether to enable the MMS Converter for messages sent through the Service instance\n * @param {boolean} [opts.smartEncoding] -\n *          Whether to enable Encoding for messages sent through the Service instance\n * @param {service.scan_message_content} [opts.scanMessageContent] - Reserved\n * @param {boolean} [opts.fallbackToLongCode] -\n *          Whether to enable Fallback to Long Code for messages sent through the Service instance\n * @param {boolean} [opts.areaCodeGeomatch] -\n *          Whether to enable Area Code Geomatch on the Service Instance\n * @param {number} [opts.validityPeriod] -\n *          How long, in seconds, messages sent from the Service are valid\n * @param {boolean} [opts.synchronousValidation] - Reserved\n * @param {boolean} [opts.useInboundWebhookOnNumber] -\n *          If enabled, the webhook url configured on the phone number will be used and will override the `inbound_request_url`/`fallback_url` url called when an inbound message is received.\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ServiceInstance\n */\n/* jshint ignore:end */\nServiceInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * fetch a ServiceInstance\n *\n * @function fetch\n * @memberof Twilio.Messaging.V1.ServiceInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ServiceInstance\n */\n/* jshint ignore:end */\nServiceInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * remove a ServiceInstance\n *\n * @function remove\n * @memberof Twilio.Messaging.V1.ServiceInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ServiceInstance\n */\n/* jshint ignore:end */\nServiceInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n\n/* jshint ignore:start */\n/**\n * Access the phoneNumbers\n *\n * @function phoneNumbers\n * @memberof Twilio.Messaging.V1.ServiceInstance#\n *\n * @returns {Twilio.Messaging.V1.ServiceContext.PhoneNumberList}\n */\n/* jshint ignore:end */\nServiceInstance.prototype.phoneNumbers = function phoneNumbers() {\n  return this._proxy.phoneNumbers;\n};\n\n/* jshint ignore:start */\n/**\n * Access the shortCodes\n *\n * @function shortCodes\n * @memberof Twilio.Messaging.V1.ServiceInstance#\n *\n * @returns {Twilio.Messaging.V1.ServiceContext.ShortCodeList}\n */\n/* jshint ignore:end */\nServiceInstance.prototype.shortCodes = function shortCodes() {\n  return this._proxy.shortCodes;\n};\n\n/* jshint ignore:start */\n/**\n * Access the alphaSenders\n *\n * @function alphaSenders\n * @memberof Twilio.Messaging.V1.ServiceInstance#\n *\n * @returns {Twilio.Messaging.V1.ServiceContext.AlphaSenderList}\n */\n/* jshint ignore:end */\nServiceInstance.prototype.alphaSenders = function alphaSenders() {\n  return this._proxy.alphaSenders;\n};\n\n/* jshint ignore:start */\n/**\n * Access the usAppToPerson\n *\n * @function usAppToPerson\n * @memberof Twilio.Messaging.V1.ServiceInstance#\n *\n * @returns {Twilio.Messaging.V1.ServiceContext.UsAppToPersonList}\n */\n/* jshint ignore:end */\nServiceInstance.prototype.usAppToPerson = function usAppToPerson() {\n  return this._proxy.usAppToPerson;\n};\n\n/* jshint ignore:start */\n/**\n * Access the usAppToPersonUsecases\n *\n * @function usAppToPersonUsecases\n * @memberof Twilio.Messaging.V1.ServiceInstance#\n *\n * @returns {Twilio.Messaging.V1.ServiceContext.UsAppToPersonUsecaseList}\n */\n/* jshint ignore:end */\nServiceInstance.prototype.usAppToPersonUsecases = function\n    usAppToPersonUsecases() {\n  return this._proxy.usAppToPersonUsecases;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Messaging.V1.ServiceInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nServiceInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nServiceInstance.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the ServiceContext\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @constructor Twilio.Messaging.V1.ServiceContext\n *\n * @property {Twilio.Messaging.V1.ServiceContext.PhoneNumberList} phoneNumbers -\n *          phoneNumbers resource\n * @property {Twilio.Messaging.V1.ServiceContext.ShortCodeList} shortCodes -\n *          shortCodes resource\n * @property {Twilio.Messaging.V1.ServiceContext.AlphaSenderList} alphaSenders -\n *          alphaSenders resource\n * @property {Twilio.Messaging.V1.ServiceContext.UsAppToPersonList} usAppToPerson -\n *          usAppToPerson resource\n * @property {Twilio.Messaging.V1.ServiceContext.UsAppToPersonUsecaseList} usAppToPersonUsecases -\n *          usAppToPersonUsecases resource\n *\n * @param {V1} version - Version of the resource\n * @param {sid} sid - The SID that identifies the resource to fetch\n */\n/* jshint ignore:end */\nServiceContext = function ServiceContext(version, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {sid: sid, };\n  this._uri = `/Services/${sid}`;\n\n  // Dependents\n  this._phoneNumbers = undefined;\n  this._shortCodes = undefined;\n  this._alphaSenders = undefined;\n  this._usAppToPerson = undefined;\n  this._usAppToPersonUsecases = undefined;\n};\n\n/* jshint ignore:start */\n/**\n * update a ServiceInstance\n *\n * @function update\n * @memberof Twilio.Messaging.V1.ServiceContext#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.friendlyName] - A string to describe the resource\n * @param {string} [opts.inboundRequestUrl] -\n *          The URL we call using inbound_method when a message is received by any phone number or short code in the Service. This field will be overridden if the `use_inbound_webhook_on_number` field is enabled.\n * @param {string} [opts.inboundMethod] -\n *          The HTTP method we should use to call inbound_request_url\n * @param {string} [opts.fallbackUrl] -\n *          The URL that we call using fallback_method if an error occurs while retrieving or executing the TwiML from the Inbound Request URL. This field will be overridden if the `use_inbound_webhook_on_number` field is enabled.\n * @param {string} [opts.fallbackMethod] -\n *          The HTTP method we should use to call fallback_url\n * @param {string} [opts.statusCallback] -\n *          The URL we should call to pass status updates about message delivery\n * @param {boolean} [opts.stickySender] -\n *          Whether to enable Sticky Sender on the Service instance\n * @param {boolean} [opts.mmsConverter] -\n *          Whether to enable the MMS Converter for messages sent through the Service instance\n * @param {boolean} [opts.smartEncoding] -\n *          Whether to enable Encoding for messages sent through the Service instance\n * @param {service.scan_message_content} [opts.scanMessageContent] - Reserved\n * @param {boolean} [opts.fallbackToLongCode] -\n *          Whether to enable Fallback to Long Code for messages sent through the Service instance\n * @param {boolean} [opts.areaCodeGeomatch] -\n *          Whether to enable Area Code Geomatch on the Service Instance\n * @param {number} [opts.validityPeriod] -\n *          How long, in seconds, messages sent from the Service are valid\n * @param {boolean} [opts.synchronousValidation] - Reserved\n * @param {boolean} [opts.useInboundWebhookOnNumber] -\n *          If enabled, the webhook url configured on the phone number will be used and will override the `inbound_request_url`/`fallback_url` url called when an inbound message is received.\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ServiceInstance\n */\n/* jshint ignore:end */\nServiceContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n  opts = opts || {};\n\n  var deferred = Q.defer();\n  var data = values.of({\n    'FriendlyName': _.get(opts, 'friendlyName'),\n    'InboundRequestUrl': _.get(opts, 'inboundRequestUrl'),\n    'InboundMethod': _.get(opts, 'inboundMethod'),\n    'FallbackUrl': _.get(opts, 'fallbackUrl'),\n    'FallbackMethod': _.get(opts, 'fallbackMethod'),\n    'StatusCallback': _.get(opts, 'statusCallback'),\n    'StickySender': serialize.bool(_.get(opts, 'stickySender')),\n    'MmsConverter': serialize.bool(_.get(opts, 'mmsConverter')),\n    'SmartEncoding': serialize.bool(_.get(opts, 'smartEncoding')),\n    'ScanMessageContent': _.get(opts, 'scanMessageContent'),\n    'FallbackToLongCode': serialize.bool(_.get(opts, 'fallbackToLongCode')),\n    'AreaCodeGeomatch': serialize.bool(_.get(opts, 'areaCodeGeomatch')),\n    'ValidityPeriod': _.get(opts, 'validityPeriod'),\n    'SynchronousValidation': serialize.bool(_.get(opts, 'synchronousValidation')),\n    'UseInboundWebhookOnNumber': serialize.bool(_.get(opts, 'useInboundWebhookOnNumber'))\n  });\n\n  var promise = this._version.update({uri: this._uri, method: 'POST', data: data});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new ServiceInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a ServiceInstance\n *\n * @function fetch\n * @memberof Twilio.Messaging.V1.ServiceContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ServiceInstance\n */\n/* jshint ignore:end */\nServiceContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({uri: this._uri, method: 'GET'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new ServiceInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * remove a ServiceInstance\n *\n * @function remove\n * @memberof Twilio.Messaging.V1.ServiceContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed ServiceInstance\n */\n/* jshint ignore:end */\nServiceContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.remove({uri: this._uri, method: 'DELETE'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\nObject.defineProperty(ServiceContext.prototype,\n  'phoneNumbers', {\n    get: function() {\n      if (!this._phoneNumbers) {\n        this._phoneNumbers = new PhoneNumberList(this._version, this._solution.sid);\n      }\n      return this._phoneNumbers;\n    }\n});\n\nObject.defineProperty(ServiceContext.prototype,\n  'shortCodes', {\n    get: function() {\n      if (!this._shortCodes) {\n        this._shortCodes = new ShortCodeList(this._version, this._solution.sid);\n      }\n      return this._shortCodes;\n    }\n});\n\nObject.defineProperty(ServiceContext.prototype,\n  'alphaSenders', {\n    get: function() {\n      if (!this._alphaSenders) {\n        this._alphaSenders = new AlphaSenderList(this._version, this._solution.sid);\n      }\n      return this._alphaSenders;\n    }\n});\n\nObject.defineProperty(ServiceContext.prototype,\n  'usAppToPerson', {\n    get: function() {\n      if (!this._usAppToPerson) {\n        this._usAppToPerson = new UsAppToPersonList(this._version, this._solution.sid);\n      }\n      return this._usAppToPerson;\n    }\n});\n\nObject.defineProperty(ServiceContext.prototype,\n  'usAppToPersonUsecases', {\n    get: function() {\n      if (!this._usAppToPersonUsecases) {\n        this._usAppToPersonUsecases = new UsAppToPersonUsecaseList(this._version, this._solution.sid);\n      }\n      return this._usAppToPersonUsecases;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Messaging.V1.ServiceContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nServiceContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nServiceContext.prototype[util.inspect.custom] = function inspect(depth, options)\n    {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  ServiceList: ServiceList,\n  ServicePage: ServicePage,\n  ServiceInstance: ServiceInstance,\n  ServiceContext: ServiceContext\n};\n"]},"metadata":{},"sourceType":"module"}