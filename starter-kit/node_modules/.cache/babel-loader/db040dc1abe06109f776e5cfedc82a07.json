{"ast":null,"code":"'use strict';\n/* jshint ignore:start */\n\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n\n/* jshint ignore:end */\n\nvar Q = require('q');\n/* jshint ignore:line */\n\n\nvar _ = require('lodash');\n/* jshint ignore:line */\n\n\nvar util = require('util');\n/* jshint ignore:line */\n\n\nvar EventList = require('./call/event').EventList;\n\nvar FeedbackList = require('./call/feedback').FeedbackList;\n\nvar FeedbackSummaryList = require('./call/feedbackSummary').FeedbackSummaryList;\n\nvar NotificationList = require('./call/notification').NotificationList;\n\nvar Page = require('../../../../base/Page');\n/* jshint ignore:line */\n\n\nvar PaymentList = require('./call/payment').PaymentList;\n\nvar RecordingList = require('./call/recording').RecordingList;\n\nvar deserialize = require('../../../../base/deserialize');\n/* jshint ignore:line */\n\n\nvar serialize = require('../../../../base/serialize');\n/* jshint ignore:line */\n\n\nvar values = require('../../../../base/values');\n/* jshint ignore:line */\n\n\nvar CallList;\nvar CallPage;\nvar CallInstance;\nvar CallContext;\n/* jshint ignore:start */\n\n/**\n * Initialize the CallList\n *\n * @constructor Twilio.Api.V2010.AccountContext.CallList\n *\n * @param {Twilio.Api.V2010} version - Version of the resource\n * @param {string} accountSid - The SID of the Account that created this resource\n */\n\n/* jshint ignore:end */\n\nCallList = function CallList(version, accountSid) {\n  /* jshint ignore:start */\n\n  /**\n   * @function calls\n   * @memberof Twilio.Api.V2010.AccountContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Api.V2010.AccountContext.CallContext}\n   */\n\n  /* jshint ignore:end */\n  function CallListInstance(sid) {\n    return CallListInstance.get(sid);\n  }\n\n  CallListInstance._version = version; // Path Solution\n\n  CallListInstance._solution = {\n    accountSid: accountSid\n  };\n  CallListInstance._uri = `/Accounts/${accountSid}/Calls.json`; // Components\n\n  CallListInstance._feedbackSummaries = undefined;\n  /* jshint ignore:start */\n\n  /**\n   * create a CallInstance\n   *\n   * @function create\n   * @memberof Twilio.Api.V2010.AccountContext.CallList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.to -\n   *          Phone number, SIP address, or client identifier to call\n   * @param {string} opts.from - Twilio number from which to originate the call\n   * @param {string} [opts.method] - HTTP method to use to fetch TwiML\n   * @param {string} [opts.fallbackUrl] - Fallback URL in case of error\n   * @param {string} [opts.fallbackMethod] - HTTP Method to use with fallback_url\n   * @param {string} [opts.statusCallback] -\n   *          The URL we should call to send status information to your application\n   * @param {string|list} [opts.statusCallbackEvent] -\n   *          The call progress events that we send to the `status_callback` URL.\n   * @param {string} [opts.statusCallbackMethod] -\n   *          HTTP Method to use with status_callback\n   * @param {string} [opts.sendDigits] -\n   *          The digits to dial after connecting to the number\n   * @param {number} [opts.timeout] - Number of seconds to wait for an answer\n   * @param {boolean} [opts.record] - Whether to record the call\n   * @param {string} [opts.recordingChannels] -\n   *          The number of channels in the final recording\n   * @param {string} [opts.recordingStatusCallback] -\n   *          The URL that we call when the recording is available to be accessed\n   * @param {string} [opts.recordingStatusCallbackMethod] -\n   *          The HTTP method we should use when calling the `recording_status_callback` URL\n   * @param {string} [opts.sipAuthUsername] -\n   *          The username used to authenticate the caller making a SIP call\n   * @param {string} [opts.sipAuthPassword] -\n   *          The password required to authenticate the user account specified in `sip_auth_username`.\n   * @param {string} [opts.machineDetection] -\n   *          Enable machine detection or end of greeting detection\n   * @param {number} [opts.machineDetectionTimeout] -\n   *          Number of seconds to wait for machine detection\n   * @param {string|list} [opts.recordingStatusCallbackEvent] -\n   *          The recording status events that will trigger calls to the URL specified in `recording_status_callback`\n   * @param {string} [opts.trim] -\n   *          Set this parameter to control trimming of silence on the recording.\n   * @param {string} [opts.callerId] -\n   *          The phone number, SIP address, or Client identifier that made this call. Phone numbers are in E.164 format (e.g., +16175551212). SIP addresses are formatted as `name@company.com`.\n   * @param {number} [opts.machineDetectionSpeechThreshold] -\n   *          Number of milliseconds for measuring stick for the length of the speech activity\n   * @param {number} [opts.machineDetectionSpeechEndThreshold] -\n   *          Number of milliseconds of silence after speech activity\n   * @param {number} [opts.machineDetectionSilenceTimeout] -\n   *          Number of milliseconds of initial silence\n   * @param {string} [opts.asyncAmd] - Enable asynchronous AMD\n   * @param {string} [opts.asyncAmdStatusCallback] -\n   *          The URL we should call to send amd status information to your application\n   * @param {string} [opts.asyncAmdStatusCallbackMethod] -\n   *          HTTP Method to use with async_amd_status_callback\n   * @param {string} [opts.byoc] - BYOC trunk SID (Beta)\n   * @param {string} [opts.callReason] - Reason for the call (Branded Calls Beta)\n   * @param {string} [opts.callToken] -\n   *          A token string needed to invoke a forwarded call with a caller-id recieved on a previous incoming call\n   * @param {string} [opts.recordingTrack] - Which track(s) to record\n   * @param {number} [opts.timeLimit] - The maximum duration of the call in seconds.\n   * @param {string} [opts.url] - The absolute URL that returns TwiML for this call\n   * @param {string} [opts.twiml] - TwiML instructions for the call\n   * @param {string} [opts.applicationSid] -\n   *          The SID of the Application resource that will handle the call\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed CallInstance\n   */\n\n  /* jshint ignore:end */\n\n  CallListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n\n    if (_.isUndefined(opts.to)) {\n      throw new Error('Required parameter \"opts.to\" missing.');\n    }\n\n    if (_.isUndefined(opts.from)) {\n      throw new Error('Required parameter \"opts.from\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'To': _.get(opts, 'to'),\n      'From': _.get(opts, 'from'),\n      'Url': _.get(opts, 'url'),\n      'Twiml': _.get(opts, 'twiml'),\n      'ApplicationSid': _.get(opts, 'applicationSid'),\n      'Method': _.get(opts, 'method'),\n      'FallbackUrl': _.get(opts, 'fallbackUrl'),\n      'FallbackMethod': _.get(opts, 'fallbackMethod'),\n      'StatusCallback': _.get(opts, 'statusCallback'),\n      'StatusCallbackEvent': serialize.map(_.get(opts, 'statusCallbackEvent'), function (e) {\n        return e;\n      }),\n      'StatusCallbackMethod': _.get(opts, 'statusCallbackMethod'),\n      'SendDigits': _.get(opts, 'sendDigits'),\n      'Timeout': _.get(opts, 'timeout'),\n      'Record': serialize.bool(_.get(opts, 'record')),\n      'RecordingChannels': _.get(opts, 'recordingChannels'),\n      'RecordingStatusCallback': _.get(opts, 'recordingStatusCallback'),\n      'RecordingStatusCallbackMethod': _.get(opts, 'recordingStatusCallbackMethod'),\n      'SipAuthUsername': _.get(opts, 'sipAuthUsername'),\n      'SipAuthPassword': _.get(opts, 'sipAuthPassword'),\n      'MachineDetection': _.get(opts, 'machineDetection'),\n      'MachineDetectionTimeout': _.get(opts, 'machineDetectionTimeout'),\n      'RecordingStatusCallbackEvent': serialize.map(_.get(opts, 'recordingStatusCallbackEvent'), function (e) {\n        return e;\n      }),\n      'Trim': _.get(opts, 'trim'),\n      'CallerId': _.get(opts, 'callerId'),\n      'MachineDetectionSpeechThreshold': _.get(opts, 'machineDetectionSpeechThreshold'),\n      'MachineDetectionSpeechEndThreshold': _.get(opts, 'machineDetectionSpeechEndThreshold'),\n      'MachineDetectionSilenceTimeout': _.get(opts, 'machineDetectionSilenceTimeout'),\n      'AsyncAmd': _.get(opts, 'asyncAmd'),\n      'AsyncAmdStatusCallback': _.get(opts, 'asyncAmdStatusCallback'),\n      'AsyncAmdStatusCallbackMethod': _.get(opts, 'asyncAmdStatusCallbackMethod'),\n      'Byoc': _.get(opts, 'byoc'),\n      'CallReason': _.get(opts, 'callReason'),\n      'CallToken': _.get(opts, 'callToken'),\n      'RecordingTrack': _.get(opts, 'recordingTrack'),\n      'TimeLimit': _.get(opts, 'timeLimit')\n    });\n\n    var promise = this._version.create({\n      uri: this._uri,\n      method: 'POST',\n      data: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new CallInstance(this._version, payload, this._solution.accountSid, this._solution.sid));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Streams CallInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Api.V2010.AccountContext.CallList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.to] -\n   *          Phone number or Client identifier of calls to include\n   * @param {string} [opts.from] -\n   *          Phone number or Client identifier to filter `from` on\n   * @param {string} [opts.parentCallSid] - Parent call SID to filter on\n   * @param {call.status} [opts.status] - The status of the resources to read\n   * @param {Date} [opts.startTimeBefore] -\n   *          Only include calls that started on this date\n   * @param {Date} [opts.startTime] - Only include calls that started on this date\n   * @param {Date} [opts.startTimeAfter] -\n   *          Only include calls that started on this date\n   * @param {Date} [opts.endTimeBefore] - Only include calls that ended on this date\n   * @param {Date} [opts.endTime] - Only include calls that ended on this date\n   * @param {Date} [opts.endTimeAfter] - Only include calls that ended on this date\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n\n  /* jshint ignore:end */\n\n\n  CallListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Lists CallInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Api.V2010.AccountContext.CallList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.to] -\n   *          Phone number or Client identifier of calls to include\n   * @param {string} [opts.from] -\n   *          Phone number or Client identifier to filter `from` on\n   * @param {string} [opts.parentCallSid] - Parent call SID to filter on\n   * @param {call.status} [opts.status] - The status of the resources to read\n   * @param {Date} [opts.startTimeBefore] -\n   *          Only include calls that started on this date\n   * @param {Date} [opts.startTime] - Only include calls that started on this date\n   * @param {Date} [opts.startTimeAfter] -\n   *          Only include calls that started on this date\n   * @param {Date} [opts.endTimeBefore] - Only include calls that ended on this date\n   * @param {Date} [opts.endTime] - Only include calls that ended on this date\n   * @param {Date} [opts.endTimeAfter] - Only include calls that ended on this date\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  CallListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single page of CallInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Api.V2010.AccountContext.CallList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.to] -\n   *          Phone number or Client identifier of calls to include\n   * @param {string} [opts.from] -\n   *          Phone number or Client identifier to filter `from` on\n   * @param {string} [opts.parentCallSid] - Parent call SID to filter on\n   * @param {call.status} [opts.status] - The status of the resources to read\n   * @param {Date} [opts.startTimeBefore] -\n   *          Only include calls that started on this date\n   * @param {Date} [opts.startTime] - Only include calls that started on this date\n   * @param {Date} [opts.startTimeAfter] -\n   *          Only include calls that started on this date\n   * @param {Date} [opts.endTimeBefore] - Only include calls that ended on this date\n   * @param {Date} [opts.endTime] - Only include calls that ended on this date\n   * @param {Date} [opts.endTimeAfter] - Only include calls that ended on this date\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  CallListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'To': _.get(opts, 'to'),\n      'From': _.get(opts, 'from'),\n      'ParentCallSid': _.get(opts, 'parentCallSid'),\n      'Status': _.get(opts, 'status'),\n      'StartTime<': serialize.iso8601DateTime(_.get(opts, 'startTimeBefore')),\n      'StartTime': serialize.iso8601DateTime(_.get(opts, 'startTime')),\n      'StartTime>': serialize.iso8601DateTime(_.get(opts, 'startTimeAfter')),\n      'EndTime<': serialize.iso8601DateTime(_.get(opts, 'endTimeBefore')),\n      'EndTime': serialize.iso8601DateTime(_.get(opts, 'endTime')),\n      'EndTime>': serialize.iso8601DateTime(_.get(opts, 'endTimeAfter')),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new CallPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single target page of CallInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Api.V2010.AccountContext.CallList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  CallListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new CallPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Constructs a call\n   *\n   * @function get\n   * @memberof Twilio.Api.V2010.AccountContext.CallList#\n   *\n   * @param {string} sid - The SID of the Call resource to fetch\n   *\n   * @returns {Twilio.Api.V2010.AccountContext.CallContext}\n   */\n\n  /* jshint ignore:end */\n\n\n  CallListInstance.get = function get(sid) {\n    return new CallContext(this._version, this._solution.accountSid, sid);\n  };\n\n  Object.defineProperty(CallListInstance, 'feedbackSummaries', {\n    get: function feedbackSummaries() {\n      if (!this._feedbackSummaries) {\n        this._feedbackSummaries = new FeedbackSummaryList(this._version, this._solution.accountSid);\n      }\n\n      return this._feedbackSummaries;\n    }\n  });\n  /* jshint ignore:start */\n\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Api.V2010.AccountContext.CallList#\n   *\n   * @returns Object\n   */\n\n  /* jshint ignore:end */\n\n  CallListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  CallListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return CallListInstance;\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the CallPage\n *\n * @constructor Twilio.Api.V2010.AccountContext.CallPage\n *\n * @param {V2010} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {CallSolution} solution - Path solution\n *\n * @returns CallPage\n */\n\n/* jshint ignore:end */\n\n\nCallPage = function CallPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(CallPage.prototype, Page.prototype);\n\nCallPage.prototype.constructor = CallPage;\n/* jshint ignore:start */\n\n/**\n * Build an instance of CallInstance\n *\n * @function getInstance\n * @memberof Twilio.Api.V2010.AccountContext.CallPage#\n *\n * @param {CallPayload} payload - Payload response from the API\n *\n * @returns CallInstance\n */\n\n/* jshint ignore:end */\n\nCallPage.prototype.getInstance = function getInstance(payload) {\n  return new CallInstance(this._version, payload, this._solution.accountSid);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.CallPage#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nCallPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nCallPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the CallContext\n *\n * @constructor Twilio.Api.V2010.AccountContext.CallInstance\n *\n * @property {string} sid - The unique string that identifies this resource\n * @property {Date} dateCreated -\n *          The RFC 2822 date and time in GMT that this resource was created\n * @property {Date} dateUpdated -\n *          The RFC 2822 date and time in GMT that this resource was last updated\n * @property {string} parentCallSid -\n *          The SID that identifies the call that created this leg.\n * @property {string} accountSid -\n *          The SID of the Account that created this resource\n * @property {string} to -\n *          The phone number, SIP address or Client identifier that received this call. Phone numbers are in E.164 format (e.g., +16175551212). SIP addresses are formatted as `name@company.com`. Client identifiers are formatted `client:name`.\n * @property {string} toFormatted -\n *          The phone number, SIP address or Client identifier that received this call. Formatted for display.\n * @property {string} from -\n *          The phone number, SIP address or Client identifier that made this call. Phone numbers are in E.164 format (e.g., +16175551212). SIP addresses are formatted as `name@company.com`. Client identifiers are formatted `client:name`.\n * @property {string} fromFormatted -\n *          The calling phone number, SIP address, or Client identifier formatted for display.\n * @property {string} phoneNumberSid -\n *          If the call was inbound, this is the SID of the IncomingPhoneNumber resource that received the call. If the call was outbound, it is the SID of the OutgoingCallerId resource from which the call was placed.\n * @property {call.status} status - The status of this call.\n * @property {Date} startTime -\n *          The start time of the call. Null if the call has not yet been dialed.\n * @property {Date} endTime -\n *          The end time of the call. Null if the call did not complete successfully.\n * @property {string} duration - The length of the call in seconds.\n * @property {string} price -\n *          The charge for this call, in the currency associated with the account. Populated after the call is completed. May not be immediately available.\n * @property {string} priceUnit - The currency in which `Price` is measured.\n * @property {string} direction -\n *          A string describing the direction of the call. `inbound` for inbound calls, `outbound-api` for calls initiated via the REST API or `outbound-dial` for calls initiated by a `Dial` verb.\n * @property {string} answeredBy -\n *          Either `human` or `machine` if this call was initiated with answering machine detection. Empty otherwise.\n * @property {string} annotation - The annotation provided for the call\n * @property {string} apiVersion - The API Version used to create the call\n * @property {string} forwardedFrom -\n *          The forwarding phone number if this call was an incoming call forwarded from another number (depends on carrier supporting forwarding). Otherwise, empty.\n * @property {string} groupSid -\n *          The Group SID associated with this call. If no Group is associated with the call, the field is empty.\n * @property {string} callerName -\n *          The caller's name if this call was an incoming call to a phone number with caller ID Lookup enabled. Otherwise, empty.\n * @property {string} queueTime -\n *          The wait time in milliseconds before the call is placed.\n * @property {string} trunkSid -\n *          The (optional) unique identifier of the trunk resource that was used for this call.\n * @property {string} uri -\n *          The URI of this resource, relative to `https://api.twilio.com`\n * @property {string} subresourceUris -\n *          A list of related subresources identified by their relative URIs\n *\n * @param {V2010} version - Version of the resource\n * @param {CallPayload} payload - The instance payload\n * @param {sid} accountSid - The SID of the Account that created this resource\n * @param {sid} sid - The SID of the Call resource to fetch\n */\n\n/* jshint ignore:end */\n\n\nCallInstance = function CallInstance(version, payload, accountSid, sid) {\n  this._version = version; // Marshaled Properties\n\n  this.sid = payload.sid; // jshint ignore:line\n\n  this.dateCreated = deserialize.rfc2822DateTime(payload.date_created); // jshint ignore:line\n\n  this.dateUpdated = deserialize.rfc2822DateTime(payload.date_updated); // jshint ignore:line\n\n  this.parentCallSid = payload.parent_call_sid; // jshint ignore:line\n\n  this.accountSid = payload.account_sid; // jshint ignore:line\n\n  this.to = payload.to; // jshint ignore:line\n\n  this.toFormatted = payload.to_formatted; // jshint ignore:line\n\n  this.from = payload.from; // jshint ignore:line\n\n  this.fromFormatted = payload.from_formatted; // jshint ignore:line\n\n  this.phoneNumberSid = payload.phone_number_sid; // jshint ignore:line\n\n  this.status = payload.status; // jshint ignore:line\n\n  this.startTime = deserialize.rfc2822DateTime(payload.start_time); // jshint ignore:line\n\n  this.endTime = deserialize.rfc2822DateTime(payload.end_time); // jshint ignore:line\n\n  this.duration = payload.duration; // jshint ignore:line\n\n  this.price = payload.price; // jshint ignore:line\n\n  this.priceUnit = payload.price_unit; // jshint ignore:line\n\n  this.direction = payload.direction; // jshint ignore:line\n\n  this.answeredBy = payload.answered_by; // jshint ignore:line\n\n  this.annotation = payload.annotation; // jshint ignore:line\n\n  this.apiVersion = payload.api_version; // jshint ignore:line\n\n  this.forwardedFrom = payload.forwarded_from; // jshint ignore:line\n\n  this.groupSid = payload.group_sid; // jshint ignore:line\n\n  this.callerName = payload.caller_name; // jshint ignore:line\n\n  this.queueTime = payload.queue_time; // jshint ignore:line\n\n  this.trunkSid = payload.trunk_sid; // jshint ignore:line\n\n  this.uri = payload.uri; // jshint ignore:line\n\n  this.subresourceUris = payload.subresource_uris; // jshint ignore:line\n  // Context\n\n  this._context = undefined;\n  this._solution = {\n    accountSid: accountSid,\n    sid: sid || this.sid\n  };\n};\n\nObject.defineProperty(CallInstance.prototype, '_proxy', {\n  get: function () {\n    if (!this._context) {\n      this._context = new CallContext(this._version, this._solution.accountSid, this._solution.sid);\n    }\n\n    return this._context;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * remove a CallInstance\n *\n * @function remove\n * @memberof Twilio.Api.V2010.AccountContext.CallInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed CallInstance\n */\n\n/* jshint ignore:end */\n\nCallInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n/* jshint ignore:start */\n\n/**\n * fetch a CallInstance\n *\n * @function fetch\n * @memberof Twilio.Api.V2010.AccountContext.CallInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed CallInstance\n */\n\n/* jshint ignore:end */\n\n\nCallInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n/* jshint ignore:start */\n\n/**\n * update a CallInstance\n *\n * @function update\n * @memberof Twilio.Api.V2010.AccountContext.CallInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.url] - The absolute URL that returns TwiML for this call\n * @param {string} [opts.method] - HTTP method to use to fetch TwiML\n * @param {call.update_status} [opts.status] -\n *          The new status to update the call with.\n * @param {string} [opts.fallbackUrl] - Fallback URL in case of error\n * @param {string} [opts.fallbackMethod] - HTTP Method to use with fallback_url\n * @param {string} [opts.statusCallback] -\n *          The URL we should call to send status information to your application\n * @param {string} [opts.statusCallbackMethod] -\n *          HTTP Method to use to call status_callback\n * @param {string} [opts.twiml] - TwiML instructions for the call\n * @param {number} [opts.timeLimit] - The maximum duration of the call in seconds.\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed CallInstance\n */\n\n/* jshint ignore:end */\n\n\nCallInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n/* jshint ignore:start */\n\n/**\n * Access the recordings\n *\n * @function recordings\n * @memberof Twilio.Api.V2010.AccountContext.CallInstance#\n *\n * @returns {Twilio.Api.V2010.AccountContext.CallContext.RecordingList}\n */\n\n/* jshint ignore:end */\n\n\nCallInstance.prototype.recordings = function recordings() {\n  return this._proxy.recordings;\n};\n/* jshint ignore:start */\n\n/**\n * Access the notifications\n *\n * @function notifications\n * @memberof Twilio.Api.V2010.AccountContext.CallInstance#\n *\n * @returns {Twilio.Api.V2010.AccountContext.CallContext.NotificationList}\n */\n\n/* jshint ignore:end */\n\n\nCallInstance.prototype.notifications = function notifications() {\n  return this._proxy.notifications;\n};\n/* jshint ignore:start */\n\n/**\n * Access the feedback\n *\n * @function feedback\n * @memberof Twilio.Api.V2010.AccountContext.CallInstance#\n *\n * @returns {Twilio.Api.V2010.AccountContext.CallContext.FeedbackList}\n */\n\n/* jshint ignore:end */\n\n\nCallInstance.prototype.feedback = function feedback() {\n  return this._proxy.feedback;\n};\n/* jshint ignore:start */\n\n/**\n * Access the events\n *\n * @function events\n * @memberof Twilio.Api.V2010.AccountContext.CallInstance#\n *\n * @returns {Twilio.Api.V2010.AccountContext.CallContext.EventList}\n */\n\n/* jshint ignore:end */\n\n\nCallInstance.prototype.events = function events() {\n  return this._proxy.events;\n};\n/* jshint ignore:start */\n\n/**\n * Access the payments\n *\n * @function payments\n * @memberof Twilio.Api.V2010.AccountContext.CallInstance#\n *\n * @returns {Twilio.Api.V2010.AccountContext.CallContext.PaymentList}\n */\n\n/* jshint ignore:end */\n\n\nCallInstance.prototype.payments = function payments() {\n  return this._proxy.payments;\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.CallInstance#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nCallInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nCallInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the CallContext\n *\n * @constructor Twilio.Api.V2010.AccountContext.CallContext\n *\n * @property {Twilio.Api.V2010.AccountContext.CallContext.RecordingList} recordings -\n *          recordings resource\n * @property {Twilio.Api.V2010.AccountContext.CallContext.NotificationList} notifications -\n *          notifications resource\n * @property {Twilio.Api.V2010.AccountContext.CallContext.FeedbackList} feedback -\n *          feedback resource\n * @property {Twilio.Api.V2010.AccountContext.CallContext.EventList} events -\n *          events resource\n * @property {Twilio.Api.V2010.AccountContext.CallContext.PaymentList} payments -\n *          payments resource\n *\n * @param {V2010} version - Version of the resource\n * @param {sid} accountSid -\n *          The SID of the Account that created the resource(s) to fetch\n * @param {sid} sid - The SID of the Call resource to fetch\n */\n\n/* jshint ignore:end */\n\n\nCallContext = function CallContext(version, accountSid, sid) {\n  this._version = version; // Path Solution\n\n  this._solution = {\n    accountSid: accountSid,\n    sid: sid\n  };\n  this._uri = `/Accounts/${accountSid}/Calls/${sid}.json`; // Dependents\n\n  this._recordings = undefined;\n  this._notifications = undefined;\n  this._feedback = undefined;\n  this._events = undefined;\n  this._payments = undefined;\n};\n/* jshint ignore:start */\n\n/**\n * remove a CallInstance\n *\n * @function remove\n * @memberof Twilio.Api.V2010.AccountContext.CallContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed CallInstance\n */\n\n/* jshint ignore:end */\n\n\nCallContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.remove({\n    uri: this._uri,\n    method: 'DELETE'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * fetch a CallInstance\n *\n * @function fetch\n * @memberof Twilio.Api.V2010.AccountContext.CallContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed CallInstance\n */\n\n/* jshint ignore:end */\n\n\nCallContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new CallInstance(this._version, payload, this._solution.accountSid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * update a CallInstance\n *\n * @function update\n * @memberof Twilio.Api.V2010.AccountContext.CallContext#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.url] - The absolute URL that returns TwiML for this call\n * @param {string} [opts.method] - HTTP method to use to fetch TwiML\n * @param {call.update_status} [opts.status] -\n *          The new status to update the call with.\n * @param {string} [opts.fallbackUrl] - Fallback URL in case of error\n * @param {string} [opts.fallbackMethod] - HTTP Method to use with fallback_url\n * @param {string} [opts.statusCallback] -\n *          The URL we should call to send status information to your application\n * @param {string} [opts.statusCallbackMethod] -\n *          HTTP Method to use to call status_callback\n * @param {string} [opts.twiml] - TwiML instructions for the call\n * @param {number} [opts.timeLimit] - The maximum duration of the call in seconds.\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed CallInstance\n */\n\n/* jshint ignore:end */\n\n\nCallContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n\n  opts = opts || {};\n  var deferred = Q.defer();\n  var data = values.of({\n    'Url': _.get(opts, 'url'),\n    'Method': _.get(opts, 'method'),\n    'Status': _.get(opts, 'status'),\n    'FallbackUrl': _.get(opts, 'fallbackUrl'),\n    'FallbackMethod': _.get(opts, 'fallbackMethod'),\n    'StatusCallback': _.get(opts, 'statusCallback'),\n    'StatusCallbackMethod': _.get(opts, 'statusCallbackMethod'),\n    'Twiml': _.get(opts, 'twiml'),\n    'TimeLimit': _.get(opts, 'timeLimit')\n  });\n\n  var promise = this._version.update({\n    uri: this._uri,\n    method: 'POST',\n    data: data\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new CallInstance(this._version, payload, this._solution.accountSid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\nObject.defineProperty(CallContext.prototype, 'recordings', {\n  get: function () {\n    if (!this._recordings) {\n      this._recordings = new RecordingList(this._version, this._solution.accountSid, this._solution.sid);\n    }\n\n    return this._recordings;\n  }\n});\nObject.defineProperty(CallContext.prototype, 'notifications', {\n  get: function () {\n    if (!this._notifications) {\n      this._notifications = new NotificationList(this._version, this._solution.accountSid, this._solution.sid);\n    }\n\n    return this._notifications;\n  }\n});\nObject.defineProperty(CallContext.prototype, 'feedback', {\n  get: function () {\n    if (!this._feedback) {\n      this._feedback = new FeedbackList(this._version, this._solution.accountSid, this._solution.sid);\n    }\n\n    return this._feedback;\n  }\n});\nObject.defineProperty(CallContext.prototype, 'events', {\n  get: function () {\n    if (!this._events) {\n      this._events = new EventList(this._version, this._solution.accountSid, this._solution.sid);\n    }\n\n    return this._events;\n  }\n});\nObject.defineProperty(CallContext.prototype, 'payments', {\n  get: function () {\n    if (!this._payments) {\n      this._payments = new PaymentList(this._version, this._solution.accountSid, this._solution.sid);\n    }\n\n    return this._payments;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.CallContext#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\nCallContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nCallContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  CallList: CallList,\n  CallPage: CallPage,\n  CallInstance: CallInstance,\n  CallContext: CallContext\n};","map":{"version":3,"sources":["/Users/tony_niu/Visual Studio/Twilio/twilio-video-starter-kit/src/token-service/node_modules/twilio/lib/rest/api/v2010/account/call.js"],"names":["Q","require","_","util","EventList","FeedbackList","FeedbackSummaryList","NotificationList","Page","PaymentList","RecordingList","deserialize","serialize","values","CallList","CallPage","CallInstance","CallContext","version","accountSid","CallListInstance","sid","get","_version","_solution","_uri","_feedbackSummaries","undefined","create","opts","callback","isUndefined","Error","to","from","deferred","defer","data","of","map","e","bool","promise","uri","method","then","payload","resolve","bind","catch","error","reject","isFunction","nodeify","each","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","fetchNextPage","fn","page","instances","instance","nextPage","merge","list","allResources","resource","push","length","iso8601DateTime","pageToken","pageNumber","params","getPage","targetUrl","_domain","twilio","request","Object","defineProperty","feedbackSummaries","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","dateCreated","rfc2822DateTime","date_created","dateUpdated","date_updated","parentCallSid","parent_call_sid","account_sid","toFormatted","to_formatted","fromFormatted","from_formatted","phoneNumberSid","phone_number_sid","status","startTime","start_time","endTime","end_time","duration","price","priceUnit","price_unit","direction","answeredBy","answered_by","annotation","apiVersion","api_version","forwardedFrom","forwarded_from","groupSid","group_sid","callerName","caller_name","queueTime","queue_time","trunkSid","trunk_sid","subresourceUris","subresource_uris","_context","remove","_proxy","fetch","update","recordings","notifications","feedback","events","payments","_recordings","_notifications","_feedback","_events","_payments","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar EventList = require('./call/event').EventList;\nvar FeedbackList = require('./call/feedback').FeedbackList;\nvar FeedbackSummaryList = require('./call/feedbackSummary').FeedbackSummaryList;\nvar NotificationList = require('./call/notification').NotificationList;\nvar Page = require('../../../../base/Page');  /* jshint ignore:line */\nvar PaymentList = require('./call/payment').PaymentList;\nvar RecordingList = require('./call/recording').RecordingList;\nvar deserialize = require(\n    '../../../../base/deserialize');  /* jshint ignore:line */\nvar serialize = require('../../../../base/serialize');  /* jshint ignore:line */\nvar values = require('../../../../base/values');  /* jshint ignore:line */\n\nvar CallList;\nvar CallPage;\nvar CallInstance;\nvar CallContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the CallList\n *\n * @constructor Twilio.Api.V2010.AccountContext.CallList\n *\n * @param {Twilio.Api.V2010} version - Version of the resource\n * @param {string} accountSid - The SID of the Account that created this resource\n */\n/* jshint ignore:end */\nCallList = function CallList(version, accountSid) {\n  /* jshint ignore:start */\n  /**\n   * @function calls\n   * @memberof Twilio.Api.V2010.AccountContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Api.V2010.AccountContext.CallContext}\n   */\n  /* jshint ignore:end */\n  function CallListInstance(sid) {\n    return CallListInstance.get(sid);\n  }\n\n  CallListInstance._version = version;\n  // Path Solution\n  CallListInstance._solution = {accountSid: accountSid};\n  CallListInstance._uri = `/Accounts/${accountSid}/Calls.json`;\n\n  // Components\n  CallListInstance._feedbackSummaries = undefined;\n\n  /* jshint ignore:start */\n  /**\n   * create a CallInstance\n   *\n   * @function create\n   * @memberof Twilio.Api.V2010.AccountContext.CallList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.to -\n   *          Phone number, SIP address, or client identifier to call\n   * @param {string} opts.from - Twilio number from which to originate the call\n   * @param {string} [opts.method] - HTTP method to use to fetch TwiML\n   * @param {string} [opts.fallbackUrl] - Fallback URL in case of error\n   * @param {string} [opts.fallbackMethod] - HTTP Method to use with fallback_url\n   * @param {string} [opts.statusCallback] -\n   *          The URL we should call to send status information to your application\n   * @param {string|list} [opts.statusCallbackEvent] -\n   *          The call progress events that we send to the `status_callback` URL.\n   * @param {string} [opts.statusCallbackMethod] -\n   *          HTTP Method to use with status_callback\n   * @param {string} [opts.sendDigits] -\n   *          The digits to dial after connecting to the number\n   * @param {number} [opts.timeout] - Number of seconds to wait for an answer\n   * @param {boolean} [opts.record] - Whether to record the call\n   * @param {string} [opts.recordingChannels] -\n   *          The number of channels in the final recording\n   * @param {string} [opts.recordingStatusCallback] -\n   *          The URL that we call when the recording is available to be accessed\n   * @param {string} [opts.recordingStatusCallbackMethod] -\n   *          The HTTP method we should use when calling the `recording_status_callback` URL\n   * @param {string} [opts.sipAuthUsername] -\n   *          The username used to authenticate the caller making a SIP call\n   * @param {string} [opts.sipAuthPassword] -\n   *          The password required to authenticate the user account specified in `sip_auth_username`.\n   * @param {string} [opts.machineDetection] -\n   *          Enable machine detection or end of greeting detection\n   * @param {number} [opts.machineDetectionTimeout] -\n   *          Number of seconds to wait for machine detection\n   * @param {string|list} [opts.recordingStatusCallbackEvent] -\n   *          The recording status events that will trigger calls to the URL specified in `recording_status_callback`\n   * @param {string} [opts.trim] -\n   *          Set this parameter to control trimming of silence on the recording.\n   * @param {string} [opts.callerId] -\n   *          The phone number, SIP address, or Client identifier that made this call. Phone numbers are in E.164 format (e.g., +16175551212). SIP addresses are formatted as `name@company.com`.\n   * @param {number} [opts.machineDetectionSpeechThreshold] -\n   *          Number of milliseconds for measuring stick for the length of the speech activity\n   * @param {number} [opts.machineDetectionSpeechEndThreshold] -\n   *          Number of milliseconds of silence after speech activity\n   * @param {number} [opts.machineDetectionSilenceTimeout] -\n   *          Number of milliseconds of initial silence\n   * @param {string} [opts.asyncAmd] - Enable asynchronous AMD\n   * @param {string} [opts.asyncAmdStatusCallback] -\n   *          The URL we should call to send amd status information to your application\n   * @param {string} [opts.asyncAmdStatusCallbackMethod] -\n   *          HTTP Method to use with async_amd_status_callback\n   * @param {string} [opts.byoc] - BYOC trunk SID (Beta)\n   * @param {string} [opts.callReason] - Reason for the call (Branded Calls Beta)\n   * @param {string} [opts.callToken] -\n   *          A token string needed to invoke a forwarded call with a caller-id recieved on a previous incoming call\n   * @param {string} [opts.recordingTrack] - Which track(s) to record\n   * @param {number} [opts.timeLimit] - The maximum duration of the call in seconds.\n   * @param {string} [opts.url] - The absolute URL that returns TwiML for this call\n   * @param {string} [opts.twiml] - TwiML instructions for the call\n   * @param {string} [opts.applicationSid] -\n   *          The SID of the Application resource that will handle the call\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed CallInstance\n   */\n  /* jshint ignore:end */\n  CallListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n    if (_.isUndefined(opts.to)) {\n      throw new Error('Required parameter \"opts.to\" missing.');\n    }\n    if (_.isUndefined(opts.from)) {\n      throw new Error('Required parameter \"opts.from\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'To': _.get(opts, 'to'),\n      'From': _.get(opts, 'from'),\n      'Url': _.get(opts, 'url'),\n      'Twiml': _.get(opts, 'twiml'),\n      'ApplicationSid': _.get(opts, 'applicationSid'),\n      'Method': _.get(opts, 'method'),\n      'FallbackUrl': _.get(opts, 'fallbackUrl'),\n      'FallbackMethod': _.get(opts, 'fallbackMethod'),\n      'StatusCallback': _.get(opts, 'statusCallback'),\n      'StatusCallbackEvent': serialize.map(_.get(opts, 'statusCallbackEvent'), function(e) { return e; }),\n      'StatusCallbackMethod': _.get(opts, 'statusCallbackMethod'),\n      'SendDigits': _.get(opts, 'sendDigits'),\n      'Timeout': _.get(opts, 'timeout'),\n      'Record': serialize.bool(_.get(opts, 'record')),\n      'RecordingChannels': _.get(opts, 'recordingChannels'),\n      'RecordingStatusCallback': _.get(opts, 'recordingStatusCallback'),\n      'RecordingStatusCallbackMethod': _.get(opts, 'recordingStatusCallbackMethod'),\n      'SipAuthUsername': _.get(opts, 'sipAuthUsername'),\n      'SipAuthPassword': _.get(opts, 'sipAuthPassword'),\n      'MachineDetection': _.get(opts, 'machineDetection'),\n      'MachineDetectionTimeout': _.get(opts, 'machineDetectionTimeout'),\n      'RecordingStatusCallbackEvent': serialize.map(_.get(opts, 'recordingStatusCallbackEvent'), function(e) { return e; }),\n      'Trim': _.get(opts, 'trim'),\n      'CallerId': _.get(opts, 'callerId'),\n      'MachineDetectionSpeechThreshold': _.get(opts, 'machineDetectionSpeechThreshold'),\n      'MachineDetectionSpeechEndThreshold': _.get(opts, 'machineDetectionSpeechEndThreshold'),\n      'MachineDetectionSilenceTimeout': _.get(opts, 'machineDetectionSilenceTimeout'),\n      'AsyncAmd': _.get(opts, 'asyncAmd'),\n      'AsyncAmdStatusCallback': _.get(opts, 'asyncAmdStatusCallback'),\n      'AsyncAmdStatusCallbackMethod': _.get(opts, 'asyncAmdStatusCallbackMethod'),\n      'Byoc': _.get(opts, 'byoc'),\n      'CallReason': _.get(opts, 'callReason'),\n      'CallToken': _.get(opts, 'callToken'),\n      'RecordingTrack': _.get(opts, 'recordingTrack'),\n      'TimeLimit': _.get(opts, 'timeLimit')\n    });\n\n    var promise = this._version.create({uri: this._uri, method: 'POST', data: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new CallInstance(\n        this._version,\n        payload,\n        this._solution.accountSid,\n        this._solution.sid\n      ));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Streams CallInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Api.V2010.AccountContext.CallList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.to] -\n   *          Phone number or Client identifier of calls to include\n   * @param {string} [opts.from] -\n   *          Phone number or Client identifier to filter `from` on\n   * @param {string} [opts.parentCallSid] - Parent call SID to filter on\n   * @param {call.status} [opts.status] - The status of the resources to read\n   * @param {Date} [opts.startTimeBefore] -\n   *          Only include calls that started on this date\n   * @param {Date} [opts.startTime] - Only include calls that started on this date\n   * @param {Date} [opts.startTimeAfter] -\n   *          Only include calls that started on this date\n   * @param {Date} [opts.endTimeBefore] - Only include calls that ended on this date\n   * @param {Date} [opts.endTime] - Only include calls that ended on this date\n   * @param {Date} [opts.endTimeAfter] - Only include calls that ended on this date\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  CallListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists CallInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Api.V2010.AccountContext.CallList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.to] -\n   *          Phone number or Client identifier of calls to include\n   * @param {string} [opts.from] -\n   *          Phone number or Client identifier to filter `from` on\n   * @param {string} [opts.parentCallSid] - Parent call SID to filter on\n   * @param {call.status} [opts.status] - The status of the resources to read\n   * @param {Date} [opts.startTimeBefore] -\n   *          Only include calls that started on this date\n   * @param {Date} [opts.startTime] - Only include calls that started on this date\n   * @param {Date} [opts.startTimeAfter] -\n   *          Only include calls that started on this date\n   * @param {Date} [opts.endTimeBefore] - Only include calls that ended on this date\n   * @param {Date} [opts.endTime] - Only include calls that ended on this date\n   * @param {Date} [opts.endTimeAfter] - Only include calls that ended on this date\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  CallListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of CallInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Api.V2010.AccountContext.CallList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.to] -\n   *          Phone number or Client identifier of calls to include\n   * @param {string} [opts.from] -\n   *          Phone number or Client identifier to filter `from` on\n   * @param {string} [opts.parentCallSid] - Parent call SID to filter on\n   * @param {call.status} [opts.status] - The status of the resources to read\n   * @param {Date} [opts.startTimeBefore] -\n   *          Only include calls that started on this date\n   * @param {Date} [opts.startTime] - Only include calls that started on this date\n   * @param {Date} [opts.startTimeAfter] -\n   *          Only include calls that started on this date\n   * @param {Date} [opts.endTimeBefore] - Only include calls that ended on this date\n   * @param {Date} [opts.endTime] - Only include calls that ended on this date\n   * @param {Date} [opts.endTimeAfter] - Only include calls that ended on this date\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  CallListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'To': _.get(opts, 'to'),\n      'From': _.get(opts, 'from'),\n      'ParentCallSid': _.get(opts, 'parentCallSid'),\n      'Status': _.get(opts, 'status'),\n      'StartTime<': serialize.iso8601DateTime(_.get(opts, 'startTimeBefore')),\n      'StartTime': serialize.iso8601DateTime(_.get(opts, 'startTime')),\n      'StartTime>': serialize.iso8601DateTime(_.get(opts, 'startTimeAfter')),\n      'EndTime<': serialize.iso8601DateTime(_.get(opts, 'endTimeBefore')),\n      'EndTime': serialize.iso8601DateTime(_.get(opts, 'endTime')),\n      'EndTime>': serialize.iso8601DateTime(_.get(opts, 'endTimeAfter')),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new CallPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of CallInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Api.V2010.AccountContext.CallList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  CallListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new CallPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a call\n   *\n   * @function get\n   * @memberof Twilio.Api.V2010.AccountContext.CallList#\n   *\n   * @param {string} sid - The SID of the Call resource to fetch\n   *\n   * @returns {Twilio.Api.V2010.AccountContext.CallContext}\n   */\n  /* jshint ignore:end */\n  CallListInstance.get = function get(sid) {\n    return new CallContext(this._version, this._solution.accountSid, sid);\n  };\n\n  Object.defineProperty(CallListInstance,\n    'feedbackSummaries', {\n      get: function feedbackSummaries() {\n        if (!this._feedbackSummaries) {\n          this._feedbackSummaries = new FeedbackSummaryList(this._version, this._solution.accountSid);\n        }\n\n        return this._feedbackSummaries;\n      }\n  });\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Api.V2010.AccountContext.CallList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  CallListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  CallListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return CallListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the CallPage\n *\n * @constructor Twilio.Api.V2010.AccountContext.CallPage\n *\n * @param {V2010} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {CallSolution} solution - Path solution\n *\n * @returns CallPage\n */\n/* jshint ignore:end */\nCallPage = function CallPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(CallPage.prototype, Page.prototype);\nCallPage.prototype.constructor = CallPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of CallInstance\n *\n * @function getInstance\n * @memberof Twilio.Api.V2010.AccountContext.CallPage#\n *\n * @param {CallPayload} payload - Payload response from the API\n *\n * @returns CallInstance\n */\n/* jshint ignore:end */\nCallPage.prototype.getInstance = function getInstance(payload) {\n  return new CallInstance(this._version, payload, this._solution.accountSid);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.CallPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nCallPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nCallPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the CallContext\n *\n * @constructor Twilio.Api.V2010.AccountContext.CallInstance\n *\n * @property {string} sid - The unique string that identifies this resource\n * @property {Date} dateCreated -\n *          The RFC 2822 date and time in GMT that this resource was created\n * @property {Date} dateUpdated -\n *          The RFC 2822 date and time in GMT that this resource was last updated\n * @property {string} parentCallSid -\n *          The SID that identifies the call that created this leg.\n * @property {string} accountSid -\n *          The SID of the Account that created this resource\n * @property {string} to -\n *          The phone number, SIP address or Client identifier that received this call. Phone numbers are in E.164 format (e.g., +16175551212). SIP addresses are formatted as `name@company.com`. Client identifiers are formatted `client:name`.\n * @property {string} toFormatted -\n *          The phone number, SIP address or Client identifier that received this call. Formatted for display.\n * @property {string} from -\n *          The phone number, SIP address or Client identifier that made this call. Phone numbers are in E.164 format (e.g., +16175551212). SIP addresses are formatted as `name@company.com`. Client identifiers are formatted `client:name`.\n * @property {string} fromFormatted -\n *          The calling phone number, SIP address, or Client identifier formatted for display.\n * @property {string} phoneNumberSid -\n *          If the call was inbound, this is the SID of the IncomingPhoneNumber resource that received the call. If the call was outbound, it is the SID of the OutgoingCallerId resource from which the call was placed.\n * @property {call.status} status - The status of this call.\n * @property {Date} startTime -\n *          The start time of the call. Null if the call has not yet been dialed.\n * @property {Date} endTime -\n *          The end time of the call. Null if the call did not complete successfully.\n * @property {string} duration - The length of the call in seconds.\n * @property {string} price -\n *          The charge for this call, in the currency associated with the account. Populated after the call is completed. May not be immediately available.\n * @property {string} priceUnit - The currency in which `Price` is measured.\n * @property {string} direction -\n *          A string describing the direction of the call. `inbound` for inbound calls, `outbound-api` for calls initiated via the REST API or `outbound-dial` for calls initiated by a `Dial` verb.\n * @property {string} answeredBy -\n *          Either `human` or `machine` if this call was initiated with answering machine detection. Empty otherwise.\n * @property {string} annotation - The annotation provided for the call\n * @property {string} apiVersion - The API Version used to create the call\n * @property {string} forwardedFrom -\n *          The forwarding phone number if this call was an incoming call forwarded from another number (depends on carrier supporting forwarding). Otherwise, empty.\n * @property {string} groupSid -\n *          The Group SID associated with this call. If no Group is associated with the call, the field is empty.\n * @property {string} callerName -\n *          The caller's name if this call was an incoming call to a phone number with caller ID Lookup enabled. Otherwise, empty.\n * @property {string} queueTime -\n *          The wait time in milliseconds before the call is placed.\n * @property {string} trunkSid -\n *          The (optional) unique identifier of the trunk resource that was used for this call.\n * @property {string} uri -\n *          The URI of this resource, relative to `https://api.twilio.com`\n * @property {string} subresourceUris -\n *          A list of related subresources identified by their relative URIs\n *\n * @param {V2010} version - Version of the resource\n * @param {CallPayload} payload - The instance payload\n * @param {sid} accountSid - The SID of the Account that created this resource\n * @param {sid} sid - The SID of the Call resource to fetch\n */\n/* jshint ignore:end */\nCallInstance = function CallInstance(version, payload, accountSid, sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.sid = payload.sid; // jshint ignore:line\n  this.dateCreated = deserialize.rfc2822DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.rfc2822DateTime(payload.date_updated); // jshint ignore:line\n  this.parentCallSid = payload.parent_call_sid; // jshint ignore:line\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.to = payload.to; // jshint ignore:line\n  this.toFormatted = payload.to_formatted; // jshint ignore:line\n  this.from = payload.from; // jshint ignore:line\n  this.fromFormatted = payload.from_formatted; // jshint ignore:line\n  this.phoneNumberSid = payload.phone_number_sid; // jshint ignore:line\n  this.status = payload.status; // jshint ignore:line\n  this.startTime = deserialize.rfc2822DateTime(payload.start_time); // jshint ignore:line\n  this.endTime = deserialize.rfc2822DateTime(payload.end_time); // jshint ignore:line\n  this.duration = payload.duration; // jshint ignore:line\n  this.price = payload.price; // jshint ignore:line\n  this.priceUnit = payload.price_unit; // jshint ignore:line\n  this.direction = payload.direction; // jshint ignore:line\n  this.answeredBy = payload.answered_by; // jshint ignore:line\n  this.annotation = payload.annotation; // jshint ignore:line\n  this.apiVersion = payload.api_version; // jshint ignore:line\n  this.forwardedFrom = payload.forwarded_from; // jshint ignore:line\n  this.groupSid = payload.group_sid; // jshint ignore:line\n  this.callerName = payload.caller_name; // jshint ignore:line\n  this.queueTime = payload.queue_time; // jshint ignore:line\n  this.trunkSid = payload.trunk_sid; // jshint ignore:line\n  this.uri = payload.uri; // jshint ignore:line\n  this.subresourceUris = payload.subresource_uris; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {accountSid: accountSid, sid: sid || this.sid, };\n};\n\nObject.defineProperty(CallInstance.prototype,\n  '_proxy', {\n    get: function() {\n      if (!this._context) {\n        this._context = new CallContext(this._version, this._solution.accountSid, this._solution.sid);\n      }\n\n      return this._context;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * remove a CallInstance\n *\n * @function remove\n * @memberof Twilio.Api.V2010.AccountContext.CallInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed CallInstance\n */\n/* jshint ignore:end */\nCallInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n\n/* jshint ignore:start */\n/**\n * fetch a CallInstance\n *\n * @function fetch\n * @memberof Twilio.Api.V2010.AccountContext.CallInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed CallInstance\n */\n/* jshint ignore:end */\nCallInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * update a CallInstance\n *\n * @function update\n * @memberof Twilio.Api.V2010.AccountContext.CallInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.url] - The absolute URL that returns TwiML for this call\n * @param {string} [opts.method] - HTTP method to use to fetch TwiML\n * @param {call.update_status} [opts.status] -\n *          The new status to update the call with.\n * @param {string} [opts.fallbackUrl] - Fallback URL in case of error\n * @param {string} [opts.fallbackMethod] - HTTP Method to use with fallback_url\n * @param {string} [opts.statusCallback] -\n *          The URL we should call to send status information to your application\n * @param {string} [opts.statusCallbackMethod] -\n *          HTTP Method to use to call status_callback\n * @param {string} [opts.twiml] - TwiML instructions for the call\n * @param {number} [opts.timeLimit] - The maximum duration of the call in seconds.\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed CallInstance\n */\n/* jshint ignore:end */\nCallInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * Access the recordings\n *\n * @function recordings\n * @memberof Twilio.Api.V2010.AccountContext.CallInstance#\n *\n * @returns {Twilio.Api.V2010.AccountContext.CallContext.RecordingList}\n */\n/* jshint ignore:end */\nCallInstance.prototype.recordings = function recordings() {\n  return this._proxy.recordings;\n};\n\n/* jshint ignore:start */\n/**\n * Access the notifications\n *\n * @function notifications\n * @memberof Twilio.Api.V2010.AccountContext.CallInstance#\n *\n * @returns {Twilio.Api.V2010.AccountContext.CallContext.NotificationList}\n */\n/* jshint ignore:end */\nCallInstance.prototype.notifications = function notifications() {\n  return this._proxy.notifications;\n};\n\n/* jshint ignore:start */\n/**\n * Access the feedback\n *\n * @function feedback\n * @memberof Twilio.Api.V2010.AccountContext.CallInstance#\n *\n * @returns {Twilio.Api.V2010.AccountContext.CallContext.FeedbackList}\n */\n/* jshint ignore:end */\nCallInstance.prototype.feedback = function feedback() {\n  return this._proxy.feedback;\n};\n\n/* jshint ignore:start */\n/**\n * Access the events\n *\n * @function events\n * @memberof Twilio.Api.V2010.AccountContext.CallInstance#\n *\n * @returns {Twilio.Api.V2010.AccountContext.CallContext.EventList}\n */\n/* jshint ignore:end */\nCallInstance.prototype.events = function events() {\n  return this._proxy.events;\n};\n\n/* jshint ignore:start */\n/**\n * Access the payments\n *\n * @function payments\n * @memberof Twilio.Api.V2010.AccountContext.CallInstance#\n *\n * @returns {Twilio.Api.V2010.AccountContext.CallContext.PaymentList}\n */\n/* jshint ignore:end */\nCallInstance.prototype.payments = function payments() {\n  return this._proxy.payments;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.CallInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nCallInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nCallInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the CallContext\n *\n * @constructor Twilio.Api.V2010.AccountContext.CallContext\n *\n * @property {Twilio.Api.V2010.AccountContext.CallContext.RecordingList} recordings -\n *          recordings resource\n * @property {Twilio.Api.V2010.AccountContext.CallContext.NotificationList} notifications -\n *          notifications resource\n * @property {Twilio.Api.V2010.AccountContext.CallContext.FeedbackList} feedback -\n *          feedback resource\n * @property {Twilio.Api.V2010.AccountContext.CallContext.EventList} events -\n *          events resource\n * @property {Twilio.Api.V2010.AccountContext.CallContext.PaymentList} payments -\n *          payments resource\n *\n * @param {V2010} version - Version of the resource\n * @param {sid} accountSid -\n *          The SID of the Account that created the resource(s) to fetch\n * @param {sid} sid - The SID of the Call resource to fetch\n */\n/* jshint ignore:end */\nCallContext = function CallContext(version, accountSid, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {accountSid: accountSid, sid: sid, };\n  this._uri = `/Accounts/${accountSid}/Calls/${sid}.json`;\n\n  // Dependents\n  this._recordings = undefined;\n  this._notifications = undefined;\n  this._feedback = undefined;\n  this._events = undefined;\n  this._payments = undefined;\n};\n\n/* jshint ignore:start */\n/**\n * remove a CallInstance\n *\n * @function remove\n * @memberof Twilio.Api.V2010.AccountContext.CallContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed CallInstance\n */\n/* jshint ignore:end */\nCallContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.remove({uri: this._uri, method: 'DELETE'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a CallInstance\n *\n * @function fetch\n * @memberof Twilio.Api.V2010.AccountContext.CallContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed CallInstance\n */\n/* jshint ignore:end */\nCallContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({uri: this._uri, method: 'GET'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new CallInstance(\n      this._version,\n      payload,\n      this._solution.accountSid,\n      this._solution.sid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * update a CallInstance\n *\n * @function update\n * @memberof Twilio.Api.V2010.AccountContext.CallContext#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.url] - The absolute URL that returns TwiML for this call\n * @param {string} [opts.method] - HTTP method to use to fetch TwiML\n * @param {call.update_status} [opts.status] -\n *          The new status to update the call with.\n * @param {string} [opts.fallbackUrl] - Fallback URL in case of error\n * @param {string} [opts.fallbackMethod] - HTTP Method to use with fallback_url\n * @param {string} [opts.statusCallback] -\n *          The URL we should call to send status information to your application\n * @param {string} [opts.statusCallbackMethod] -\n *          HTTP Method to use to call status_callback\n * @param {string} [opts.twiml] - TwiML instructions for the call\n * @param {number} [opts.timeLimit] - The maximum duration of the call in seconds.\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed CallInstance\n */\n/* jshint ignore:end */\nCallContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n  opts = opts || {};\n\n  var deferred = Q.defer();\n  var data = values.of({\n    'Url': _.get(opts, 'url'),\n    'Method': _.get(opts, 'method'),\n    'Status': _.get(opts, 'status'),\n    'FallbackUrl': _.get(opts, 'fallbackUrl'),\n    'FallbackMethod': _.get(opts, 'fallbackMethod'),\n    'StatusCallback': _.get(opts, 'statusCallback'),\n    'StatusCallbackMethod': _.get(opts, 'statusCallbackMethod'),\n    'Twiml': _.get(opts, 'twiml'),\n    'TimeLimit': _.get(opts, 'timeLimit')\n  });\n\n  var promise = this._version.update({uri: this._uri, method: 'POST', data: data});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new CallInstance(\n      this._version,\n      payload,\n      this._solution.accountSid,\n      this._solution.sid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\nObject.defineProperty(CallContext.prototype,\n  'recordings', {\n    get: function() {\n      if (!this._recordings) {\n        this._recordings = new RecordingList(this._version, this._solution.accountSid, this._solution.sid);\n      }\n      return this._recordings;\n    }\n});\n\nObject.defineProperty(CallContext.prototype,\n  'notifications', {\n    get: function() {\n      if (!this._notifications) {\n        this._notifications = new NotificationList(\n          this._version,\n          this._solution.accountSid,\n          this._solution.sid\n        );\n      }\n      return this._notifications;\n    }\n});\n\nObject.defineProperty(CallContext.prototype,\n  'feedback', {\n    get: function() {\n      if (!this._feedback) {\n        this._feedback = new FeedbackList(this._version, this._solution.accountSid, this._solution.sid);\n      }\n      return this._feedback;\n    }\n});\n\nObject.defineProperty(CallContext.prototype,\n  'events', {\n    get: function() {\n      if (!this._events) {\n        this._events = new EventList(this._version, this._solution.accountSid, this._solution.sid);\n      }\n      return this._events;\n    }\n});\n\nObject.defineProperty(CallContext.prototype,\n  'payments', {\n    get: function() {\n      if (!this._payments) {\n        this._payments = new PaymentList(this._version, this._solution.accountSid, this._solution.sid);\n      }\n      return this._payments;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.CallContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nCallContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nCallContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  CallList: CallList,\n  CallPage: CallPage,\n  CallInstance: CallInstance,\n  CallContext: CallContext\n};\n"]},"metadata":{},"sourceType":"module"}