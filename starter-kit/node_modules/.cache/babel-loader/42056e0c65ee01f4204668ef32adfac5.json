{"ast":null,"code":"// Generated by CoffeeScript 2.4.1\n(function () {\n  // Converts values to strings\n  var XMLStringifier,\n      hasProp = {}.hasOwnProperty;\n\n  module.exports = XMLStringifier = function () {\n    class XMLStringifier {\n      // Initializes a new instance of `XMLStringifier`\n      // `options.version` The version number string of the XML spec to validate against, e.g. 1.0\n      // `options.noDoubleEncoding` whether existing html entities are encoded: true or false\n      // `options.stringify` a set of functions to use for converting values to strings\n      // `options.noValidation` whether values will be validated and escaped or returned as is\n      constructor(options) {\n        var key, ref, value; // Checks whether the given string contains legal characters\n        // Fails with an exception on error\n        // `str` the string to check\n\n        this.assertLegalChar = this.assertLegalChar.bind(this); // Checks whether the given string contains legal characters for a name\n        // Fails with an exception on error\n        // `str` the string to check\n\n        this.assertLegalName = this.assertLegalName.bind(this);\n        options || (options = {});\n        this.options = options;\n\n        if (!this.options.version) {\n          this.options.version = '1.0';\n        }\n\n        ref = options.stringify || {};\n\n        for (key in ref) {\n          if (!hasProp.call(ref, key)) continue;\n          value = ref[key];\n          this[key] = value;\n        }\n      } // Defaults\n\n\n      name(val) {\n        if (this.options.noValidation) {\n          return val;\n        }\n\n        return this.assertLegalName('' + val || '');\n      }\n\n      text(val) {\n        if (this.options.noValidation) {\n          return val;\n        }\n\n        return this.assertLegalChar(this.textEscape('' + val || ''));\n      }\n\n      cdata(val) {\n        if (this.options.noValidation) {\n          return val;\n        }\n\n        val = '' + val || '';\n        val = val.replace(']]>', ']]]]><![CDATA[>');\n        return this.assertLegalChar(val);\n      }\n\n      comment(val) {\n        if (this.options.noValidation) {\n          return val;\n        }\n\n        val = '' + val || '';\n\n        if (val.match(/--/)) {\n          throw new Error(\"Comment text cannot contain double-hypen: \" + val);\n        }\n\n        return this.assertLegalChar(val);\n      }\n\n      raw(val) {\n        if (this.options.noValidation) {\n          return val;\n        }\n\n        return '' + val || '';\n      }\n\n      attValue(val) {\n        if (this.options.noValidation) {\n          return val;\n        }\n\n        return this.assertLegalChar(this.attEscape(val = '' + val || ''));\n      }\n\n      insTarget(val) {\n        if (this.options.noValidation) {\n          return val;\n        }\n\n        return this.assertLegalChar('' + val || '');\n      }\n\n      insValue(val) {\n        if (this.options.noValidation) {\n          return val;\n        }\n\n        val = '' + val || '';\n\n        if (val.match(/\\?>/)) {\n          throw new Error(\"Invalid processing instruction value: \" + val);\n        }\n\n        return this.assertLegalChar(val);\n      }\n\n      xmlVersion(val) {\n        if (this.options.noValidation) {\n          return val;\n        }\n\n        val = '' + val || '';\n\n        if (!val.match(/1\\.[0-9]+/)) {\n          throw new Error(\"Invalid version number: \" + val);\n        }\n\n        return val;\n      }\n\n      xmlEncoding(val) {\n        if (this.options.noValidation) {\n          return val;\n        }\n\n        val = '' + val || '';\n\n        if (!val.match(/^[A-Za-z](?:[A-Za-z0-9._-])*$/)) {\n          throw new Error(\"Invalid encoding: \" + val);\n        }\n\n        return this.assertLegalChar(val);\n      }\n\n      xmlStandalone(val) {\n        if (this.options.noValidation) {\n          return val;\n        }\n\n        if (val) {\n          return \"yes\";\n        } else {\n          return \"no\";\n        }\n      }\n\n      dtdPubID(val) {\n        if (this.options.noValidation) {\n          return val;\n        }\n\n        return this.assertLegalChar('' + val || '');\n      }\n\n      dtdSysID(val) {\n        if (this.options.noValidation) {\n          return val;\n        }\n\n        return this.assertLegalChar('' + val || '');\n      }\n\n      dtdElementValue(val) {\n        if (this.options.noValidation) {\n          return val;\n        }\n\n        return this.assertLegalChar('' + val || '');\n      }\n\n      dtdAttType(val) {\n        if (this.options.noValidation) {\n          return val;\n        }\n\n        return this.assertLegalChar('' + val || '');\n      }\n\n      dtdAttDefault(val) {\n        if (this.options.noValidation) {\n          return val;\n        }\n\n        return this.assertLegalChar('' + val || '');\n      }\n\n      dtdEntityValue(val) {\n        if (this.options.noValidation) {\n          return val;\n        }\n\n        return this.assertLegalChar('' + val || '');\n      }\n\n      dtdNData(val) {\n        if (this.options.noValidation) {\n          return val;\n        }\n\n        return this.assertLegalChar('' + val || '');\n      }\n\n      assertLegalChar(str) {\n        var regex, res;\n\n        if (this.options.noValidation) {\n          return str;\n        }\n\n        regex = '';\n\n        if (this.options.version === '1.0') {\n          // Valid characters from https://www.w3.org/TR/xml/#charsets\n          // any Unicode character, excluding the surrogate blocks, FFFE, and FFFF.\n          // #x9 | #xA | #xD | [#x20-#xD7FF] | [#xE000-#xFFFD] | [#x10000-#x10FFFF]\n          // This ES5 compatible Regexp has been generated using the \"regenerate\" NPM module:\n          //   let xml_10_InvalidChars = regenerate()\n          //     .addRange(0x0000, 0x0008)\n          //     .add(0x000B, 0x000C)\n          //     .addRange(0x000E, 0x001F)\n          //     .addRange(0xD800, 0xDFFF)\n          //     .addRange(0xFFFE, 0xFFFF)\n          regex = /[\\0-\\x08\\x0B\\f\\x0E-\\x1F\\uFFFE\\uFFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF]/;\n\n          if (res = str.match(regex)) {\n            throw new Error(`Invalid character in string: ${str} at index ${res.index}`);\n          }\n        } else if (this.options.version === '1.1') {\n          // Valid characters from https://www.w3.org/TR/xml11/#charsets\n          // any Unicode character, excluding the surrogate blocks, FFFE, and FFFF.\n          // [#x1-#xD7FF] | [#xE000-#xFFFD] | [#x10000-#x10FFFF]\n          // This ES5 compatible Regexp has been generated using the \"regenerate\" NPM module:\n          //   let xml_11_InvalidChars = regenerate()\n          //     .add(0x0000)\n          //     .addRange(0xD800, 0xDFFF)\n          //     .addRange(0xFFFE, 0xFFFF)\n          regex = /[\\0\\uFFFE\\uFFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF]/;\n\n          if (res = str.match(regex)) {\n            throw new Error(`Invalid character in string: ${str} at index ${res.index}`);\n          }\n        }\n\n        return str;\n      }\n\n      assertLegalName(str) {\n        var regex;\n\n        if (this.options.noValidation) {\n          return str;\n        }\n\n        this.assertLegalChar(str);\n        regex = /^([:A-Z_a-z\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD]|[\\uD800-\\uDB7F][\\uDC00-\\uDFFF])([\\x2D\\.0-:A-Z_a-z\\xB7\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u037D\\u037F-\\u1FFF\\u200C\\u200D\\u203F\\u2040\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD]|[\\uD800-\\uDB7F][\\uDC00-\\uDFFF])*$/;\n\n        if (!str.match(regex)) {\n          throw new Error(\"Invalid character in name\");\n        }\n\n        return str;\n      } // Escapes special characters in text\n      // See http://www.w3.org/TR/2000/WD-xml-c14n-20000119.html#charescaping\n      // `str` the string to escape\n\n\n      textEscape(str) {\n        var ampregex;\n\n        if (this.options.noValidation) {\n          return str;\n        }\n\n        ampregex = this.options.noDoubleEncoding ? /(?!&\\S+;)&/g : /&/g;\n        return str.replace(ampregex, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\\r/g, '&#xD;');\n      } // Escapes special characters in attribute values\n      // See http://www.w3.org/TR/2000/WD-xml-c14n-20000119.html#charescaping\n      // `str` the string to escape\n\n\n      attEscape(str) {\n        var ampregex;\n\n        if (this.options.noValidation) {\n          return str;\n        }\n\n        ampregex = this.options.noDoubleEncoding ? /(?!&\\S+;)&/g : /&/g;\n        return str.replace(ampregex, '&amp;').replace(/</g, '&lt;').replace(/\"/g, '&quot;').replace(/\\t/g, '&#x9;').replace(/\\n/g, '&#xA;').replace(/\\r/g, '&#xD;');\n      }\n\n    }\n\n    ; // strings to match while converting from JS objects\n\n    XMLStringifier.prototype.convertAttKey = '@';\n    XMLStringifier.prototype.convertPIKey = '?';\n    XMLStringifier.prototype.convertTextKey = '#text';\n    XMLStringifier.prototype.convertCDataKey = '#cdata';\n    XMLStringifier.prototype.convertCommentKey = '#comment';\n    XMLStringifier.prototype.convertRawKey = '#raw';\n    return XMLStringifier;\n  }.call(this);\n}).call(this);","map":{"version":3,"sources":["/Users/tony_niu/Visual Studio/Twilio/twilio-video-starter-kit/node_modules/xmlbuilder/lib/XMLStringifier.js"],"names":["XMLStringifier","hasProp","hasOwnProperty","module","exports","constructor","options","key","ref","value","assertLegalChar","bind","assertLegalName","version","stringify","call","name","val","noValidation","text","textEscape","cdata","replace","comment","match","Error","raw","attValue","attEscape","insTarget","insValue","xmlVersion","xmlEncoding","xmlStandalone","dtdPubID","dtdSysID","dtdElementValue","dtdAttType","dtdAttDefault","dtdEntityValue","dtdNData","str","regex","res","index","ampregex","noDoubleEncoding","prototype","convertAttKey","convertPIKey","convertTextKey","convertCDataKey","convertCommentKey","convertRawKey"],"mappings":"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","sourcesContent":["// Generated by CoffeeScript 2.4.1\n(function() {\n  // Converts values to strings\n  var XMLStringifier,\n    hasProp = {}.hasOwnProperty;\n\n  module.exports = XMLStringifier = (function() {\n    class XMLStringifier {\n      // Initializes a new instance of `XMLStringifier`\n\n      // `options.version` The version number string of the XML spec to validate against, e.g. 1.0\n      // `options.noDoubleEncoding` whether existing html entities are encoded: true or false\n      // `options.stringify` a set of functions to use for converting values to strings\n      // `options.noValidation` whether values will be validated and escaped or returned as is\n      constructor(options) {\n        var key, ref, value;\n        // Checks whether the given string contains legal characters\n        // Fails with an exception on error\n\n        // `str` the string to check\n        this.assertLegalChar = this.assertLegalChar.bind(this);\n        // Checks whether the given string contains legal characters for a name\n        // Fails with an exception on error\n\n        // `str` the string to check\n        this.assertLegalName = this.assertLegalName.bind(this);\n        options || (options = {});\n        this.options = options;\n        if (!this.options.version) {\n          this.options.version = '1.0';\n        }\n        ref = options.stringify || {};\n        for (key in ref) {\n          if (!hasProp.call(ref, key)) continue;\n          value = ref[key];\n          this[key] = value;\n        }\n      }\n\n      // Defaults\n      name(val) {\n        if (this.options.noValidation) {\n          return val;\n        }\n        return this.assertLegalName('' + val || '');\n      }\n\n      text(val) {\n        if (this.options.noValidation) {\n          return val;\n        }\n        return this.assertLegalChar(this.textEscape('' + val || ''));\n      }\n\n      cdata(val) {\n        if (this.options.noValidation) {\n          return val;\n        }\n        val = '' + val || '';\n        val = val.replace(']]>', ']]]]><![CDATA[>');\n        return this.assertLegalChar(val);\n      }\n\n      comment(val) {\n        if (this.options.noValidation) {\n          return val;\n        }\n        val = '' + val || '';\n        if (val.match(/--/)) {\n          throw new Error(\"Comment text cannot contain double-hypen: \" + val);\n        }\n        return this.assertLegalChar(val);\n      }\n\n      raw(val) {\n        if (this.options.noValidation) {\n          return val;\n        }\n        return '' + val || '';\n      }\n\n      attValue(val) {\n        if (this.options.noValidation) {\n          return val;\n        }\n        return this.assertLegalChar(this.attEscape(val = '' + val || ''));\n      }\n\n      insTarget(val) {\n        if (this.options.noValidation) {\n          return val;\n        }\n        return this.assertLegalChar('' + val || '');\n      }\n\n      insValue(val) {\n        if (this.options.noValidation) {\n          return val;\n        }\n        val = '' + val || '';\n        if (val.match(/\\?>/)) {\n          throw new Error(\"Invalid processing instruction value: \" + val);\n        }\n        return this.assertLegalChar(val);\n      }\n\n      xmlVersion(val) {\n        if (this.options.noValidation) {\n          return val;\n        }\n        val = '' + val || '';\n        if (!val.match(/1\\.[0-9]+/)) {\n          throw new Error(\"Invalid version number: \" + val);\n        }\n        return val;\n      }\n\n      xmlEncoding(val) {\n        if (this.options.noValidation) {\n          return val;\n        }\n        val = '' + val || '';\n        if (!val.match(/^[A-Za-z](?:[A-Za-z0-9._-])*$/)) {\n          throw new Error(\"Invalid encoding: \" + val);\n        }\n        return this.assertLegalChar(val);\n      }\n\n      xmlStandalone(val) {\n        if (this.options.noValidation) {\n          return val;\n        }\n        if (val) {\n          return \"yes\";\n        } else {\n          return \"no\";\n        }\n      }\n\n      dtdPubID(val) {\n        if (this.options.noValidation) {\n          return val;\n        }\n        return this.assertLegalChar('' + val || '');\n      }\n\n      dtdSysID(val) {\n        if (this.options.noValidation) {\n          return val;\n        }\n        return this.assertLegalChar('' + val || '');\n      }\n\n      dtdElementValue(val) {\n        if (this.options.noValidation) {\n          return val;\n        }\n        return this.assertLegalChar('' + val || '');\n      }\n\n      dtdAttType(val) {\n        if (this.options.noValidation) {\n          return val;\n        }\n        return this.assertLegalChar('' + val || '');\n      }\n\n      dtdAttDefault(val) {\n        if (this.options.noValidation) {\n          return val;\n        }\n        return this.assertLegalChar('' + val || '');\n      }\n\n      dtdEntityValue(val) {\n        if (this.options.noValidation) {\n          return val;\n        }\n        return this.assertLegalChar('' + val || '');\n      }\n\n      dtdNData(val) {\n        if (this.options.noValidation) {\n          return val;\n        }\n        return this.assertLegalChar('' + val || '');\n      }\n\n      assertLegalChar(str) {\n        var regex, res;\n        if (this.options.noValidation) {\n          return str;\n        }\n        regex = '';\n        if (this.options.version === '1.0') {\n          // Valid characters from https://www.w3.org/TR/xml/#charsets\n          // any Unicode character, excluding the surrogate blocks, FFFE, and FFFF.\n          // #x9 | #xA | #xD | [#x20-#xD7FF] | [#xE000-#xFFFD] | [#x10000-#x10FFFF]\n          // This ES5 compatible Regexp has been generated using the \"regenerate\" NPM module:\n          //   let xml_10_InvalidChars = regenerate()\n          //     .addRange(0x0000, 0x0008)\n          //     .add(0x000B, 0x000C)\n          //     .addRange(0x000E, 0x001F)\n          //     .addRange(0xD800, 0xDFFF)\n          //     .addRange(0xFFFE, 0xFFFF)\n          regex = /[\\0-\\x08\\x0B\\f\\x0E-\\x1F\\uFFFE\\uFFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF]/;\n          if (res = str.match(regex)) {\n            throw new Error(`Invalid character in string: ${str} at index ${res.index}`);\n          }\n        } else if (this.options.version === '1.1') {\n          // Valid characters from https://www.w3.org/TR/xml11/#charsets\n          // any Unicode character, excluding the surrogate blocks, FFFE, and FFFF.\n          // [#x1-#xD7FF] | [#xE000-#xFFFD] | [#x10000-#x10FFFF]\n          // This ES5 compatible Regexp has been generated using the \"regenerate\" NPM module:\n          //   let xml_11_InvalidChars = regenerate()\n          //     .add(0x0000)\n          //     .addRange(0xD800, 0xDFFF)\n          //     .addRange(0xFFFE, 0xFFFF)\n          regex = /[\\0\\uFFFE\\uFFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF]/;\n          if (res = str.match(regex)) {\n            throw new Error(`Invalid character in string: ${str} at index ${res.index}`);\n          }\n        }\n        return str;\n      }\n\n      assertLegalName(str) {\n        var regex;\n        if (this.options.noValidation) {\n          return str;\n        }\n        this.assertLegalChar(str);\n        regex = /^([:A-Z_a-z\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD]|[\\uD800-\\uDB7F][\\uDC00-\\uDFFF])([\\x2D\\.0-:A-Z_a-z\\xB7\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u037D\\u037F-\\u1FFF\\u200C\\u200D\\u203F\\u2040\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD]|[\\uD800-\\uDB7F][\\uDC00-\\uDFFF])*$/;\n        if (!str.match(regex)) {\n          throw new Error(\"Invalid character in name\");\n        }\n        return str;\n      }\n\n      // Escapes special characters in text\n\n      // See http://www.w3.org/TR/2000/WD-xml-c14n-20000119.html#charescaping\n\n      // `str` the string to escape\n      textEscape(str) {\n        var ampregex;\n        if (this.options.noValidation) {\n          return str;\n        }\n        ampregex = this.options.noDoubleEncoding ? /(?!&\\S+;)&/g : /&/g;\n        return str.replace(ampregex, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\\r/g, '&#xD;');\n      }\n\n      // Escapes special characters in attribute values\n\n      // See http://www.w3.org/TR/2000/WD-xml-c14n-20000119.html#charescaping\n\n      // `str` the string to escape\n      attEscape(str) {\n        var ampregex;\n        if (this.options.noValidation) {\n          return str;\n        }\n        ampregex = this.options.noDoubleEncoding ? /(?!&\\S+;)&/g : /&/g;\n        return str.replace(ampregex, '&amp;').replace(/</g, '&lt;').replace(/\"/g, '&quot;').replace(/\\t/g, '&#x9;').replace(/\\n/g, '&#xA;').replace(/\\r/g, '&#xD;');\n      }\n\n    };\n\n    // strings to match while converting from JS objects\n    XMLStringifier.prototype.convertAttKey = '@';\n\n    XMLStringifier.prototype.convertPIKey = '?';\n\n    XMLStringifier.prototype.convertTextKey = '#text';\n\n    XMLStringifier.prototype.convertCDataKey = '#cdata';\n\n    XMLStringifier.prototype.convertCommentKey = '#comment';\n\n    XMLStringifier.prototype.convertRawKey = '#raw';\n\n    return XMLStringifier;\n\n  }).call(this);\n\n}).call(this);\n"]},"metadata":{},"sourceType":"script"}