{"ast":null,"code":"'use strict';\n\nvar _ = require('lodash');\n\nvar dayjs = require('dayjs');\n\nvar utc = require('dayjs/plugin/utc');\n\ndayjs.extend(utc);\nmodule.exports = {};\n/**\n * @namespace serialize\n */\n\n/**\n * @function iso8601Date\n * @memberOf serialize\n * @description turns a Date object into a string if parameter is a Date\n * otherwise returns the parameter\n *\n * @param  {Date} d date object to format\n * @return {string|object} date formatted in YYYY-MM-DD form\n */\n\nmodule.exports.iso8601Date = function (d) {\n  if (_.isUndefined(d) || _.isString(d) || !_.isDate(d)) {\n    return d;\n  } else {\n    return dayjs.utc(d).format('YYYY-MM-DD');\n  }\n};\n/**\n * @function iso8601DateTime\n * @memberOf serialize\n * @description turns a Date object into a string if parameter is a Date\n * otherwise returns the parameter\n *\n * @param  {Date} d date object to format\n * @return {string|object} date formatted in YYYY-MM-DD[T]HH:mm:ss[Z] form\n */\n\n\nmodule.exports.iso8601DateTime = function (d) {\n  if (_.isUndefined(d) || _.isString(d) || !(d instanceof Date)) {\n    return d;\n  } else {\n    return dayjs.utc(d).format('YYYY-MM-DD[T]HH:mm:ss[Z]');\n  }\n};\n/**\n * @function prefixedCollapsibleMap\n * @memberOf serialize\n * @description turns a map of params int oa flattened map separated by dots\n * if the parameter is an object, otherwise returns an empty map\n *\n * @param {object} m map to transform\n * @param {string|undefined} prefix to append to each flattened value\n * @return {object} flattened map\n */\n\n\nmodule.exports.prefixedCollapsibleMap = function (m, prefix) {\n  if (_.isUndefined(m) || !_.isPlainObject(m)) {\n    return {};\n  }\n\n  function flatten(m, result, previous) {\n    result = result || {};\n    previous = previous || [];\n\n    _.each(_.keys(m), function (key) {\n      if (_.isPlainObject(m[key])) {\n        flatten(m[key], result, _.union(previous, [key]));\n      } else {\n        result[_.join(_.union(previous, [key]), '.')] = m[key];\n      }\n    });\n\n    return result;\n  }\n\n  var flattened = flatten(m);\n  var result = flattened;\n\n  if (prefix) {\n    result = {};\n\n    _.each(_.keys(flattened), function (key) {\n      result[prefix + '.' + key] = flattened[key];\n    });\n  }\n\n  return result;\n};\n/**\n * @function object\n * @memberOf serialize\n * @description turns an object into a JSON string if the parameter\n * is an object, otherwise returns the passed in object\n *\n * @param {object|array} o json object or array\n * @returns {string|object} stringified object\n */\n\n\nmodule.exports.object = function (o) {\n  if (_.isObject(o) || _.isArray(o)) {\n    return JSON.stringify(o);\n  }\n\n  return o;\n};\n/**\n * @function bool\n * @memberOf serialize\n * @description coerces a boolean literal into a string\n *\n * @param {boolean|string} input boolean or string to be coerced\n * @returns {string} a string \"true\" or \"false\"\n */\n\n\nmodule.exports.bool = function (input) {\n  if (_.isString(input)) {\n    return input;\n  }\n\n  if (_.isBoolean(input)) {\n    return input.toString();\n  }\n\n  return input;\n};\n/**\n * @function map\n * @memberOf serialize\n * @description maps transform over each element in input if input is an array\n *\n * @param {array} input array to map transform over, if not an array then it is\n * returned as is.\n * @returns {array} new array with transform applied to each element.\n */\n\n\nmodule.exports.map = function (input, transform) {\n  if (_.isArray(input)) {\n    return _.map(input, transform);\n  }\n\n  return input;\n};","map":{"version":3,"sources":["/Users/tony_niu/Visual Studio/Twilio/twilio-video-starter-kit/src/token-service/node_modules/twilio/lib/base/serialize.js"],"names":["_","require","dayjs","utc","extend","module","exports","iso8601Date","d","isUndefined","isString","isDate","format","iso8601DateTime","Date","prefixedCollapsibleMap","m","prefix","isPlainObject","flatten","result","previous","each","keys","key","union","join","flattened","object","o","isObject","isArray","JSON","stringify","bool","input","isBoolean","toString","map","transform"],"mappings":"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","sourcesContent":["'use strict';\n\nvar _ = require('lodash');\nvar dayjs = require('dayjs');\nvar utc = require('dayjs/plugin/utc');\n\ndayjs.extend(utc);\n\nmodule.exports = {};\n\n/**\n * @namespace serialize\n */\n\n/**\n * @function iso8601Date\n * @memberOf serialize\n * @description turns a Date object into a string if parameter is a Date\n * otherwise returns the parameter\n *\n * @param  {Date} d date object to format\n * @return {string|object} date formatted in YYYY-MM-DD form\n */\nmodule.exports.iso8601Date = function(d) {\n  if (_.isUndefined(d) || _.isString(d) || !(_.isDate(d))) {\n    return d;\n  } else {\n    return dayjs.utc(d).format('YYYY-MM-DD');\n  }\n};\n\n/**\n * @function iso8601DateTime\n * @memberOf serialize\n * @description turns a Date object into a string if parameter is a Date\n * otherwise returns the parameter\n *\n * @param  {Date} d date object to format\n * @return {string|object} date formatted in YYYY-MM-DD[T]HH:mm:ss[Z] form\n */\nmodule.exports.iso8601DateTime = function(d) {\n  if (_.isUndefined(d) || _.isString(d) || !(d instanceof Date)) {\n    return d;\n  } else {\n    return dayjs.utc(d).format('YYYY-MM-DD[T]HH:mm:ss[Z]');\n  }\n};\n\n/**\n * @function prefixedCollapsibleMap\n * @memberOf serialize\n * @description turns a map of params int oa flattened map separated by dots\n * if the parameter is an object, otherwise returns an empty map\n *\n * @param {object} m map to transform\n * @param {string|undefined} prefix to append to each flattened value\n * @return {object} flattened map\n */\nmodule.exports.prefixedCollapsibleMap = function(m, prefix) {\n  if (_.isUndefined(m) || !_.isPlainObject(m)) {\n    return {};\n  }\n\n  function flatten(m, result, previous) {\n    result = result || {};\n    previous = previous || [];\n\n    _.each(_.keys(m), function(key) {\n      if (_.isPlainObject(m[key])) {\n        flatten(m[key], result, _.union(previous, [key]));\n      } else {\n        result[_.join(_.union(previous, [key]), '.')] = m[key];\n      }\n    });\n\n    return result;\n  }\n\n  var flattened = flatten(m);\n  var result = flattened;\n  if (prefix) {\n    result = {};\n    _.each(_.keys(flattened), function(key) {\n      result[prefix + '.' + key] = flattened[key];\n    });\n  }\n\n  return result;\n};\n\n/**\n * @function object\n * @memberOf serialize\n * @description turns an object into a JSON string if the parameter\n * is an object, otherwise returns the passed in object\n *\n * @param {object|array} o json object or array\n * @returns {string|object} stringified object\n */\nmodule.exports.object = function(o) {\n  if (_.isObject(o) || _.isArray(o)) {\n    return JSON.stringify(o);\n  }\n\n  return o;\n};\n\n/**\n * @function bool\n * @memberOf serialize\n * @description coerces a boolean literal into a string\n *\n * @param {boolean|string} input boolean or string to be coerced\n * @returns {string} a string \"true\" or \"false\"\n */\nmodule.exports.bool = function(input) {\n  if (_.isString(input)) {\n    return input;\n  }\n  if (_.isBoolean(input)) {\n    return input.toString();\n  }\n\n  return input;\n};\n\n\n/**\n * @function map\n * @memberOf serialize\n * @description maps transform over each element in input if input is an array\n *\n * @param {array} input array to map transform over, if not an array then it is\n * returned as is.\n * @returns {array} new array with transform applied to each element.\n */\nmodule.exports.map = function(input, transform) {\n  if (_.isArray(input)) {\n    return _.map(input, transform);\n  }\n  return input;\n};\n"]},"metadata":{},"sourceType":"module"}