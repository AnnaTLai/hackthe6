{"ast":null,"code":"'use strict';\n/* jshint ignore:start */\n\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n\n/* jshint ignore:end */\n\nvar Q = require('q');\n/* jshint ignore:line */\n\n\nvar _ = require('lodash');\n/* jshint ignore:line */\n\n\nvar util = require('util');\n/* jshint ignore:line */\n\n\nvar Page = require('../../../../../base/Page');\n/* jshint ignore:line */\n\n\nvar StepContextList = require('./step/stepContext').StepContextList;\n\nvar deserialize = require('../../../../../base/deserialize');\n/* jshint ignore:line */\n\n\nvar values = require('../../../../../base/values');\n/* jshint ignore:line */\n\n\nvar StepList;\nvar StepPage;\nvar StepInstance;\nvar StepContext;\n/* jshint ignore:start */\n\n/**\n * Initialize the StepList\n *\n * @constructor Twilio.Studio.V1.FlowContext.EngagementContext.StepList\n *\n * @param {Twilio.Studio.V1} version - Version of the resource\n * @param {string} flowSid - The SID of the Flow\n * @param {string} engagementSid - The SID of the Engagement\n */\n\n/* jshint ignore:end */\n\nStepList = function StepList(version, flowSid, engagementSid) {\n  /* jshint ignore:start */\n\n  /**\n   * @function steps\n   * @memberof Twilio.Studio.V1.FlowContext.EngagementContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Studio.V1.FlowContext.EngagementContext.StepContext}\n   */\n\n  /* jshint ignore:end */\n  function StepListInstance(sid) {\n    return StepListInstance.get(sid);\n  }\n\n  StepListInstance._version = version; // Path Solution\n\n  StepListInstance._solution = {\n    flowSid: flowSid,\n    engagementSid: engagementSid\n  };\n  StepListInstance._uri = `/Flows/${flowSid}/Engagements/${engagementSid}/Steps`;\n  /* jshint ignore:start */\n\n  /**\n   * Streams StepInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Studio.V1.FlowContext.EngagementContext.StepList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n\n  /* jshint ignore:end */\n\n  StepListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Lists StepInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Studio.V1.FlowContext.EngagementContext.StepList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  StepListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single page of StepInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Studio.V1.FlowContext.EngagementContext.StepList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  StepListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new StepPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single target page of StepInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Studio.V1.FlowContext.EngagementContext.StepList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  StepListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new StepPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Constructs a step\n   *\n   * @function get\n   * @memberof Twilio.Studio.V1.FlowContext.EngagementContext.StepList#\n   *\n   * @param {string} sid - The SID that identifies the resource to fetch\n   *\n   * @returns {Twilio.Studio.V1.FlowContext.EngagementContext.StepContext}\n   */\n\n  /* jshint ignore:end */\n\n\n  StepListInstance.get = function get(sid) {\n    return new StepContext(this._version, this._solution.flowSid, this._solution.engagementSid, sid);\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Studio.V1.FlowContext.EngagementContext.StepList#\n   *\n   * @returns Object\n   */\n\n  /* jshint ignore:end */\n\n\n  StepListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  StepListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return StepListInstance;\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the StepPage\n *\n * @constructor Twilio.Studio.V1.FlowContext.EngagementContext.StepPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {StepSolution} solution - Path solution\n *\n * @returns StepPage\n */\n\n/* jshint ignore:end */\n\n\nStepPage = function StepPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(StepPage.prototype, Page.prototype);\n\nStepPage.prototype.constructor = StepPage;\n/* jshint ignore:start */\n\n/**\n * Build an instance of StepInstance\n *\n * @function getInstance\n * @memberof Twilio.Studio.V1.FlowContext.EngagementContext.StepPage#\n *\n * @param {StepPayload} payload - Payload response from the API\n *\n * @returns StepInstance\n */\n\n/* jshint ignore:end */\n\nStepPage.prototype.getInstance = function getInstance(payload) {\n  return new StepInstance(this._version, payload, this._solution.flowSid, this._solution.engagementSid);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Studio.V1.FlowContext.EngagementContext.StepPage#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nStepPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nStepPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the StepContext\n *\n * @constructor Twilio.Studio.V1.FlowContext.EngagementContext.StepInstance\n *\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {string} flowSid - The SID of the Flow\n * @property {string} engagementSid - The SID of the Engagement\n * @property {string} name -\n *          The event that caused the Flow to transition to the Step\n * @property {object} context - The current state of the flow\n * @property {string} transitionedFrom -\n *          The Widget that preceded the Widget for the Step\n * @property {string} transitionedTo -\n *          The Widget that will follow the Widget for the Step\n * @property {Date} dateCreated -\n *          The ISO 8601 date and time in GMT when the resource was created\n * @property {Date} dateUpdated -\n *          The ISO 8601 date and time in GMT when the resource was last updated\n * @property {string} url - The absolute URL of the resource\n * @property {string} links - The URLs of related resources\n *\n * @param {V1} version - Version of the resource\n * @param {StepPayload} payload - The instance payload\n * @param {sid} flowSid - The SID of the Flow\n * @param {sid} engagementSid - The SID of the Engagement\n * @param {sid} sid - The SID that identifies the resource to fetch\n */\n\n/* jshint ignore:end */\n\n\nStepInstance = function StepInstance(version, payload, flowSid, engagementSid, sid) {\n  this._version = version; // Marshaled Properties\n\n  this.sid = payload.sid; // jshint ignore:line\n\n  this.accountSid = payload.account_sid; // jshint ignore:line\n\n  this.flowSid = payload.flow_sid; // jshint ignore:line\n\n  this.engagementSid = payload.engagement_sid; // jshint ignore:line\n\n  this.name = payload.name; // jshint ignore:line\n\n  this.context = payload.context; // jshint ignore:line\n\n  this.transitionedFrom = payload.transitioned_from; // jshint ignore:line\n\n  this.transitionedTo = payload.transitioned_to; // jshint ignore:line\n\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n\n  this.url = payload.url; // jshint ignore:line\n\n  this.links = payload.links; // jshint ignore:line\n  // Context\n\n  this._context = undefined;\n  this._solution = {\n    flowSid: flowSid,\n    engagementSid: engagementSid,\n    sid: sid || this.sid\n  };\n};\n\nObject.defineProperty(StepInstance.prototype, '_proxy', {\n  get: function () {\n    if (!this._context) {\n      this._context = new StepContext(this._version, this._solution.flowSid, this._solution.engagementSid, this._solution.sid);\n    }\n\n    return this._context;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * fetch a StepInstance\n *\n * @function fetch\n * @memberof Twilio.Studio.V1.FlowContext.EngagementContext.StepInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed StepInstance\n */\n\n/* jshint ignore:end */\n\nStepInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n/* jshint ignore:start */\n\n/**\n * Access the stepContext\n *\n * @function stepContext\n * @memberof Twilio.Studio.V1.FlowContext.EngagementContext.StepInstance#\n *\n * @returns {Twilio.Studio.V1.FlowContext.EngagementContext.StepContext.StepContextList}\n */\n\n/* jshint ignore:end */\n\n\nStepInstance.prototype.stepContext = function stepContext() {\n  return this._proxy.stepContext;\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Studio.V1.FlowContext.EngagementContext.StepInstance#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nStepInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nStepInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the StepContext\n *\n * @constructor Twilio.Studio.V1.FlowContext.EngagementContext.StepContext\n *\n * @property {Twilio.Studio.V1.FlowContext.EngagementContext.StepContext.StepContextList} stepContext -\n *          stepContext resource\n *\n * @param {V1} version - Version of the resource\n * @param {sid} flowSid - The SID of the Flow\n * @param {sid} engagementSid - The SID of the Engagement\n * @param {sid} sid - The SID that identifies the resource to fetch\n */\n\n/* jshint ignore:end */\n\n\nStepContext = function StepContext(version, flowSid, engagementSid, sid) {\n  this._version = version; // Path Solution\n\n  this._solution = {\n    flowSid: flowSid,\n    engagementSid: engagementSid,\n    sid: sid\n  };\n  this._uri = `/Flows/${flowSid}/Engagements/${engagementSid}/Steps/${sid}`; // Dependents\n\n  this._stepContext = undefined;\n};\n/* jshint ignore:start */\n\n/**\n * fetch a StepInstance\n *\n * @function fetch\n * @memberof Twilio.Studio.V1.FlowContext.EngagementContext.StepContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed StepInstance\n */\n\n/* jshint ignore:end */\n\n\nStepContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new StepInstance(this._version, payload, this._solution.flowSid, this._solution.engagementSid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\nObject.defineProperty(StepContext.prototype, 'stepContext', {\n  get: function () {\n    if (!this._stepContext) {\n      this._stepContext = new StepContextList(this._version, this._solution.flowSid, this._solution.engagementSid, this._solution.sid);\n    }\n\n    return this._stepContext;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Studio.V1.FlowContext.EngagementContext.StepContext#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\nStepContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nStepContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  StepList: StepList,\n  StepPage: StepPage,\n  StepInstance: StepInstance,\n  StepContext: StepContext\n};","map":{"version":3,"sources":["/Users/tony_niu/Visual Studio/Twilio/twilio-video-starter-kit/src/token-service/node_modules/twilio/lib/rest/studio/v1/flow/engagement/step.js"],"names":["Q","require","_","util","Page","StepContextList","deserialize","values","StepList","StepPage","StepInstance","StepContext","version","flowSid","engagementSid","StepListInstance","sid","get","_version","_solution","_uri","each","opts","callback","isFunction","isUndefined","Error","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","error","fetchNextPage","fn","promise","then","page","instances","instance","bind","nextPage","catch","merge","list","deferred","defer","allResources","resource","push","length","resolve","reject","nodeify","data","of","pageToken","pageNumber","uri","method","params","payload","getPage","targetUrl","_domain","twilio","request","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","accountSid","account_sid","flow_sid","engagement_sid","name","context","transitionedFrom","transitioned_from","transitionedTo","transitioned_to","dateCreated","iso8601DateTime","date_created","dateUpdated","date_updated","url","links","_context","undefined","Object","defineProperty","fetch","_proxy","stepContext","_stepContext","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar Page = require('../../../../../base/Page');  /* jshint ignore:line */\nvar StepContextList = require('./step/stepContext').StepContextList;\nvar deserialize = require(\n    '../../../../../base/deserialize');  /* jshint ignore:line */\nvar values = require('../../../../../base/values');  /* jshint ignore:line */\n\nvar StepList;\nvar StepPage;\nvar StepInstance;\nvar StepContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the StepList\n *\n * @constructor Twilio.Studio.V1.FlowContext.EngagementContext.StepList\n *\n * @param {Twilio.Studio.V1} version - Version of the resource\n * @param {string} flowSid - The SID of the Flow\n * @param {string} engagementSid - The SID of the Engagement\n */\n/* jshint ignore:end */\nStepList = function StepList(version, flowSid, engagementSid) {\n  /* jshint ignore:start */\n  /**\n   * @function steps\n   * @memberof Twilio.Studio.V1.FlowContext.EngagementContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Studio.V1.FlowContext.EngagementContext.StepContext}\n   */\n  /* jshint ignore:end */\n  function StepListInstance(sid) {\n    return StepListInstance.get(sid);\n  }\n\n  StepListInstance._version = version;\n  // Path Solution\n  StepListInstance._solution = {flowSid: flowSid, engagementSid: engagementSid};\n  StepListInstance._uri = `/Flows/${flowSid}/Engagements/${engagementSid}/Steps`;\n  /* jshint ignore:start */\n  /**\n   * Streams StepInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Studio.V1.FlowContext.EngagementContext.StepList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  StepListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists StepInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Studio.V1.FlowContext.EngagementContext.StepList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  StepListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of StepInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Studio.V1.FlowContext.EngagementContext.StepList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  StepListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new StepPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of StepInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Studio.V1.FlowContext.EngagementContext.StepList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  StepListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new StepPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a step\n   *\n   * @function get\n   * @memberof Twilio.Studio.V1.FlowContext.EngagementContext.StepList#\n   *\n   * @param {string} sid - The SID that identifies the resource to fetch\n   *\n   * @returns {Twilio.Studio.V1.FlowContext.EngagementContext.StepContext}\n   */\n  /* jshint ignore:end */\n  StepListInstance.get = function get(sid) {\n    return new StepContext(this._version, this._solution.flowSid, this._solution.engagementSid, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Studio.V1.FlowContext.EngagementContext.StepList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  StepListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  StepListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return StepListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the StepPage\n *\n * @constructor Twilio.Studio.V1.FlowContext.EngagementContext.StepPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {StepSolution} solution - Path solution\n *\n * @returns StepPage\n */\n/* jshint ignore:end */\nStepPage = function StepPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(StepPage.prototype, Page.prototype);\nStepPage.prototype.constructor = StepPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of StepInstance\n *\n * @function getInstance\n * @memberof Twilio.Studio.V1.FlowContext.EngagementContext.StepPage#\n *\n * @param {StepPayload} payload - Payload response from the API\n *\n * @returns StepInstance\n */\n/* jshint ignore:end */\nStepPage.prototype.getInstance = function getInstance(payload) {\n  return new StepInstance(\n    this._version,\n    payload,\n    this._solution.flowSid,\n    this._solution.engagementSid\n  );\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Studio.V1.FlowContext.EngagementContext.StepPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nStepPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nStepPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the StepContext\n *\n * @constructor Twilio.Studio.V1.FlowContext.EngagementContext.StepInstance\n *\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {string} flowSid - The SID of the Flow\n * @property {string} engagementSid - The SID of the Engagement\n * @property {string} name -\n *          The event that caused the Flow to transition to the Step\n * @property {object} context - The current state of the flow\n * @property {string} transitionedFrom -\n *          The Widget that preceded the Widget for the Step\n * @property {string} transitionedTo -\n *          The Widget that will follow the Widget for the Step\n * @property {Date} dateCreated -\n *          The ISO 8601 date and time in GMT when the resource was created\n * @property {Date} dateUpdated -\n *          The ISO 8601 date and time in GMT when the resource was last updated\n * @property {string} url - The absolute URL of the resource\n * @property {string} links - The URLs of related resources\n *\n * @param {V1} version - Version of the resource\n * @param {StepPayload} payload - The instance payload\n * @param {sid} flowSid - The SID of the Flow\n * @param {sid} engagementSid - The SID of the Engagement\n * @param {sid} sid - The SID that identifies the resource to fetch\n */\n/* jshint ignore:end */\nStepInstance = function StepInstance(version, payload, flowSid, engagementSid,\n                                      sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.sid = payload.sid; // jshint ignore:line\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.flowSid = payload.flow_sid; // jshint ignore:line\n  this.engagementSid = payload.engagement_sid; // jshint ignore:line\n  this.name = payload.name; // jshint ignore:line\n  this.context = payload.context; // jshint ignore:line\n  this.transitionedFrom = payload.transitioned_from; // jshint ignore:line\n  this.transitionedTo = payload.transitioned_to; // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n  this.links = payload.links; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {flowSid: flowSid, engagementSid: engagementSid, sid: sid || this.sid, };\n};\n\nObject.defineProperty(StepInstance.prototype,\n  '_proxy', {\n    get: function() {\n      if (!this._context) {\n        this._context = new StepContext(\n          this._version,\n          this._solution.flowSid,\n          this._solution.engagementSid,\n          this._solution.sid\n        );\n      }\n\n      return this._context;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a StepInstance\n *\n * @function fetch\n * @memberof Twilio.Studio.V1.FlowContext.EngagementContext.StepInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed StepInstance\n */\n/* jshint ignore:end */\nStepInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * Access the stepContext\n *\n * @function stepContext\n * @memberof Twilio.Studio.V1.FlowContext.EngagementContext.StepInstance#\n *\n * @returns {Twilio.Studio.V1.FlowContext.EngagementContext.StepContext.StepContextList}\n */\n/* jshint ignore:end */\nStepInstance.prototype.stepContext = function stepContext() {\n  return this._proxy.stepContext;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Studio.V1.FlowContext.EngagementContext.StepInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nStepInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nStepInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the StepContext\n *\n * @constructor Twilio.Studio.V1.FlowContext.EngagementContext.StepContext\n *\n * @property {Twilio.Studio.V1.FlowContext.EngagementContext.StepContext.StepContextList} stepContext -\n *          stepContext resource\n *\n * @param {V1} version - Version of the resource\n * @param {sid} flowSid - The SID of the Flow\n * @param {sid} engagementSid - The SID of the Engagement\n * @param {sid} sid - The SID that identifies the resource to fetch\n */\n/* jshint ignore:end */\nStepContext = function StepContext(version, flowSid, engagementSid, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {flowSid: flowSid, engagementSid: engagementSid, sid: sid, };\n  this._uri = `/Flows/${flowSid}/Engagements/${engagementSid}/Steps/${sid}`;\n\n  // Dependents\n  this._stepContext = undefined;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a StepInstance\n *\n * @function fetch\n * @memberof Twilio.Studio.V1.FlowContext.EngagementContext.StepContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed StepInstance\n */\n/* jshint ignore:end */\nStepContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({uri: this._uri, method: 'GET'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new StepInstance(\n      this._version,\n      payload,\n      this._solution.flowSid,\n      this._solution.engagementSid,\n      this._solution.sid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\nObject.defineProperty(StepContext.prototype,\n  'stepContext', {\n    get: function() {\n      if (!this._stepContext) {\n        this._stepContext = new StepContextList(\n          this._version,\n          this._solution.flowSid,\n          this._solution.engagementSid,\n          this._solution.sid\n        );\n      }\n      return this._stepContext;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Studio.V1.FlowContext.EngagementContext.StepContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nStepContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nStepContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  StepList: StepList,\n  StepPage: StepPage,\n  StepInstance: StepInstance,\n  StepContext: StepContext\n};\n"]},"metadata":{},"sourceType":"module"}