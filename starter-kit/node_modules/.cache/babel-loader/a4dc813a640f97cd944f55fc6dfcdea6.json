{"ast":null,"code":"'use strict';\n/* jshint ignore:start */\n\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n\n/* jshint ignore:end */\n\nvar Q = require('q');\n/* jshint ignore:line */\n\n\nvar _ = require('lodash');\n/* jshint ignore:line */\n\n\nvar util = require('util');\n/* jshint ignore:line */\n\n\nvar FeedbackList = require('./message/feedback').FeedbackList;\n\nvar MediaList = require('./message/media').MediaList;\n\nvar Page = require('../../../../base/Page');\n/* jshint ignore:line */\n\n\nvar deserialize = require('../../../../base/deserialize');\n/* jshint ignore:line */\n\n\nvar serialize = require('../../../../base/serialize');\n/* jshint ignore:line */\n\n\nvar values = require('../../../../base/values');\n/* jshint ignore:line */\n\n\nvar MessageList;\nvar MessagePage;\nvar MessageInstance;\nvar MessageContext;\n/* jshint ignore:start */\n\n/**\n * Initialize the MessageList\n *\n * @constructor Twilio.Api.V2010.AccountContext.MessageList\n *\n * @param {Twilio.Api.V2010} version - Version of the resource\n * @param {string} accountSid - The SID of the Account that created the resource\n */\n\n/* jshint ignore:end */\n\nMessageList = function MessageList(version, accountSid) {\n  /* jshint ignore:start */\n\n  /**\n   * @function messages\n   * @memberof Twilio.Api.V2010.AccountContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Api.V2010.AccountContext.MessageContext}\n   */\n\n  /* jshint ignore:end */\n  function MessageListInstance(sid) {\n    return MessageListInstance.get(sid);\n  }\n\n  MessageListInstance._version = version; // Path Solution\n\n  MessageListInstance._solution = {\n    accountSid: accountSid\n  };\n  MessageListInstance._uri = `/Accounts/${accountSid}/Messages.json`;\n  /* jshint ignore:start */\n\n  /**\n   * create a MessageInstance\n   *\n   * @function create\n   * @memberof Twilio.Api.V2010.AccountContext.MessageList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.to - The destination phone number\n   * @param {string} [opts.statusCallback] -\n   *          The URL we should call to send status information to your application\n   * @param {string} [opts.applicationSid] - The application to use for callbacks\n   * @param {number} [opts.maxPrice] -\n   *          The total maximum price up to 4 decimal places in US dollars acceptable for the message to be delivered.\n   * @param {boolean} [opts.provideFeedback] -\n   *          Whether to confirm delivery of the message\n   * @param {number} [opts.attempt] -\n   *          Total numer of attempts made , this inclusive to send out the message\n   * @param {number} [opts.validityPeriod] -\n   *          The number of seconds that the message can remain in our outgoing queue.\n   * @param {boolean} [opts.forceDelivery] - Reserved\n   * @param {message.content_retention} [opts.contentRetention] -\n   *          Determines if the message content can be stored or redacted based on privacy settings\n   * @param {message.address_retention} [opts.addressRetention] -\n   *          Determines if the address can be stored or obfuscated based on privacy settings\n   * @param {boolean} [opts.smartEncoded] -\n   *          Whether to detect Unicode characters that have a similar GSM-7 character and replace them\n   * @param {string|list} [opts.persistentAction] -\n   *          Rich actions for Channels Messages.\n   * @param {string} [opts.from] - The phone number that initiated the message\n   * @param {string} [opts.messagingServiceSid] -\n   *          The SID of the Messaging Service you want to associate with the message.\n   * @param {string} [opts.body] -\n   *          The text of the message you want to send. Can be up to 1,600 characters in length.\n   * @param {string|list} [opts.mediaUrl] -\n   *          The URL of the media to send with the message\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed MessageInstance\n   */\n\n  /* jshint ignore:end */\n\n  MessageListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n\n    if (_.isUndefined(opts.to)) {\n      throw new Error('Required parameter \"opts.to\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'To': _.get(opts, 'to'),\n      'From': _.get(opts, 'from'),\n      'MessagingServiceSid': _.get(opts, 'messagingServiceSid'),\n      'Body': _.get(opts, 'body'),\n      'MediaUrl': serialize.map(_.get(opts, 'mediaUrl'), function (e) {\n        return e;\n      }),\n      'StatusCallback': _.get(opts, 'statusCallback'),\n      'ApplicationSid': _.get(opts, 'applicationSid'),\n      'MaxPrice': _.get(opts, 'maxPrice'),\n      'ProvideFeedback': serialize.bool(_.get(opts, 'provideFeedback')),\n      'Attempt': _.get(opts, 'attempt'),\n      'ValidityPeriod': _.get(opts, 'validityPeriod'),\n      'ForceDelivery': serialize.bool(_.get(opts, 'forceDelivery')),\n      'ContentRetention': _.get(opts, 'contentRetention'),\n      'AddressRetention': _.get(opts, 'addressRetention'),\n      'SmartEncoded': serialize.bool(_.get(opts, 'smartEncoded')),\n      'PersistentAction': serialize.map(_.get(opts, 'persistentAction'), function (e) {\n        return e;\n      })\n    });\n\n    var promise = this._version.create({\n      uri: this._uri,\n      method: 'POST',\n      data: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new MessageInstance(this._version, payload, this._solution.accountSid, this._solution.sid));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Streams MessageInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Api.V2010.AccountContext.MessageList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.to] - Filter by messages sent to this number\n   * @param {string} [opts.from] - Filter by from number\n   * @param {Date} [opts.dateSentBefore] - Filter by date sent\n   * @param {Date} [opts.dateSent] - Filter by date sent\n   * @param {Date} [opts.dateSentAfter] - Filter by date sent\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n\n  /* jshint ignore:end */\n\n\n  MessageListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Lists MessageInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Api.V2010.AccountContext.MessageList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.to] - Filter by messages sent to this number\n   * @param {string} [opts.from] - Filter by from number\n   * @param {Date} [opts.dateSentBefore] - Filter by date sent\n   * @param {Date} [opts.dateSent] - Filter by date sent\n   * @param {Date} [opts.dateSentAfter] - Filter by date sent\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  MessageListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single page of MessageInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Api.V2010.AccountContext.MessageList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.to] - Filter by messages sent to this number\n   * @param {string} [opts.from] - Filter by from number\n   * @param {Date} [opts.dateSentBefore] - Filter by date sent\n   * @param {Date} [opts.dateSent] - Filter by date sent\n   * @param {Date} [opts.dateSentAfter] - Filter by date sent\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  MessageListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'To': _.get(opts, 'to'),\n      'From': _.get(opts, 'from'),\n      'DateSent<': serialize.iso8601DateTime(_.get(opts, 'dateSentBefore')),\n      'DateSent': serialize.iso8601DateTime(_.get(opts, 'dateSent')),\n      'DateSent>': serialize.iso8601DateTime(_.get(opts, 'dateSentAfter')),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new MessagePage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single target page of MessageInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Api.V2010.AccountContext.MessageList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  MessageListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new MessagePage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Constructs a message\n   *\n   * @function get\n   * @memberof Twilio.Api.V2010.AccountContext.MessageList#\n   *\n   * @param {string} sid - The unique string that identifies the resource\n   *\n   * @returns {Twilio.Api.V2010.AccountContext.MessageContext}\n   */\n\n  /* jshint ignore:end */\n\n\n  MessageListInstance.get = function get(sid) {\n    return new MessageContext(this._version, this._solution.accountSid, sid);\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Api.V2010.AccountContext.MessageList#\n   *\n   * @returns Object\n   */\n\n  /* jshint ignore:end */\n\n\n  MessageListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  MessageListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return MessageListInstance;\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the MessagePage\n *\n * @constructor Twilio.Api.V2010.AccountContext.MessagePage\n *\n * @param {V2010} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {MessageSolution} solution - Path solution\n *\n * @returns MessagePage\n */\n\n/* jshint ignore:end */\n\n\nMessagePage = function MessagePage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(MessagePage.prototype, Page.prototype);\n\nMessagePage.prototype.constructor = MessagePage;\n/* jshint ignore:start */\n\n/**\n * Build an instance of MessageInstance\n *\n * @function getInstance\n * @memberof Twilio.Api.V2010.AccountContext.MessagePage#\n *\n * @param {MessagePayload} payload - Payload response from the API\n *\n * @returns MessageInstance\n */\n\n/* jshint ignore:end */\n\nMessagePage.prototype.getInstance = function getInstance(payload) {\n  return new MessageInstance(this._version, payload, this._solution.accountSid);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.MessagePage#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nMessagePage.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nMessagePage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the MessageContext\n *\n * @constructor Twilio.Api.V2010.AccountContext.MessageInstance\n *\n * @property {string} body - The message text\n * @property {string} numSegments -\n *          The number of messages used to deliver the message body\n * @property {message.direction} direction - The direction of the message\n * @property {string} from - The phone number that initiated the message\n * @property {string} to - The phone number that received the message\n * @property {Date} dateUpdated -\n *          The RFC 2822 date and time in GMT that the resource was last updated\n * @property {string} price - The amount billed for the message\n * @property {string} errorMessage - The description of the error_code\n * @property {string} uri -\n *          The URI of the resource, relative to `https://api.twilio.com`\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {string} numMedia -\n *          The number of media files associated with the message\n * @property {message.status} status - The status of the message\n * @property {string} messagingServiceSid -\n *          The SID of the Messaging Service used with the message.\n * @property {string} sid - The unique string that identifies the resource\n * @property {Date} dateSent -\n *          The RFC 2822 date and time in GMT when the message was sent\n * @property {Date} dateCreated -\n *          The RFC 2822 date and time in GMT that the resource was created\n * @property {number} errorCode - The error code associated with the message\n * @property {string} priceUnit - The currency in which price is measured\n * @property {string} apiVersion - The API version used to process the message\n * @property {string} subresourceUris -\n *          A list of related resources identified by their relative URIs\n *\n * @param {V2010} version - Version of the resource\n * @param {MessagePayload} payload - The instance payload\n * @param {sid} accountSid - The SID of the Account that created the resource\n * @param {sid} sid - The unique string that identifies the resource\n */\n\n/* jshint ignore:end */\n\n\nMessageInstance = function MessageInstance(version, payload, accountSid, sid) {\n  this._version = version; // Marshaled Properties\n\n  this.body = payload.body; // jshint ignore:line\n\n  this.numSegments = payload.num_segments; // jshint ignore:line\n\n  this.direction = payload.direction; // jshint ignore:line\n\n  this.from = payload.from; // jshint ignore:line\n\n  this.to = payload.to; // jshint ignore:line\n\n  this.dateUpdated = deserialize.rfc2822DateTime(payload.date_updated); // jshint ignore:line\n\n  this.price = payload.price; // jshint ignore:line\n\n  this.errorMessage = payload.error_message; // jshint ignore:line\n\n  this.uri = payload.uri; // jshint ignore:line\n\n  this.accountSid = payload.account_sid; // jshint ignore:line\n\n  this.numMedia = payload.num_media; // jshint ignore:line\n\n  this.status = payload.status; // jshint ignore:line\n\n  this.messagingServiceSid = payload.messaging_service_sid; // jshint ignore:line\n\n  this.sid = payload.sid; // jshint ignore:line\n\n  this.dateSent = deserialize.rfc2822DateTime(payload.date_sent); // jshint ignore:line\n\n  this.dateCreated = deserialize.rfc2822DateTime(payload.date_created); // jshint ignore:line\n\n  this.errorCode = deserialize.integer(payload.error_code); // jshint ignore:line\n\n  this.priceUnit = payload.price_unit; // jshint ignore:line\n\n  this.apiVersion = payload.api_version; // jshint ignore:line\n\n  this.subresourceUris = payload.subresource_uris; // jshint ignore:line\n  // Context\n\n  this._context = undefined;\n  this._solution = {\n    accountSid: accountSid,\n    sid: sid || this.sid\n  };\n};\n\nObject.defineProperty(MessageInstance.prototype, '_proxy', {\n  get: function () {\n    if (!this._context) {\n      this._context = new MessageContext(this._version, this._solution.accountSid, this._solution.sid);\n    }\n\n    return this._context;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * remove a MessageInstance\n *\n * @function remove\n * @memberof Twilio.Api.V2010.AccountContext.MessageInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed MessageInstance\n */\n\n/* jshint ignore:end */\n\nMessageInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n/* jshint ignore:start */\n\n/**\n * fetch a MessageInstance\n *\n * @function fetch\n * @memberof Twilio.Api.V2010.AccountContext.MessageInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed MessageInstance\n */\n\n/* jshint ignore:end */\n\n\nMessageInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n/* jshint ignore:start */\n\n/**\n * update a MessageInstance\n *\n * @function update\n * @memberof Twilio.Api.V2010.AccountContext.MessageInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.body] - The text of the message you want to send\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed MessageInstance\n */\n\n/* jshint ignore:end */\n\n\nMessageInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n/* jshint ignore:start */\n\n/**\n * Access the media\n *\n * @function media\n * @memberof Twilio.Api.V2010.AccountContext.MessageInstance#\n *\n * @returns {Twilio.Api.V2010.AccountContext.MessageContext.MediaList}\n */\n\n/* jshint ignore:end */\n\n\nMessageInstance.prototype.media = function media() {\n  return this._proxy.media;\n};\n/* jshint ignore:start */\n\n/**\n * Access the feedback\n *\n * @function feedback\n * @memberof Twilio.Api.V2010.AccountContext.MessageInstance#\n *\n * @returns {Twilio.Api.V2010.AccountContext.MessageContext.FeedbackList}\n */\n\n/* jshint ignore:end */\n\n\nMessageInstance.prototype.feedback = function feedback() {\n  return this._proxy.feedback;\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.MessageInstance#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nMessageInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nMessageInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the MessageContext\n *\n * @constructor Twilio.Api.V2010.AccountContext.MessageContext\n *\n * @property {Twilio.Api.V2010.AccountContext.MessageContext.MediaList} media -\n *          media resource\n * @property {Twilio.Api.V2010.AccountContext.MessageContext.FeedbackList} feedback -\n *          feedback resource\n *\n * @param {V2010} version - Version of the resource\n * @param {sid} accountSid -\n *          The SID of the Account that created the resource to fetch\n * @param {sid} sid - The unique string that identifies the resource\n */\n\n/* jshint ignore:end */\n\n\nMessageContext = function MessageContext(version, accountSid, sid) {\n  this._version = version; // Path Solution\n\n  this._solution = {\n    accountSid: accountSid,\n    sid: sid\n  };\n  this._uri = `/Accounts/${accountSid}/Messages/${sid}.json`; // Dependents\n\n  this._media = undefined;\n  this._feedback = undefined;\n};\n/* jshint ignore:start */\n\n/**\n * remove a MessageInstance\n *\n * @function remove\n * @memberof Twilio.Api.V2010.AccountContext.MessageContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed MessageInstance\n */\n\n/* jshint ignore:end */\n\n\nMessageContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.remove({\n    uri: this._uri,\n    method: 'DELETE'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * fetch a MessageInstance\n *\n * @function fetch\n * @memberof Twilio.Api.V2010.AccountContext.MessageContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed MessageInstance\n */\n\n/* jshint ignore:end */\n\n\nMessageContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new MessageInstance(this._version, payload, this._solution.accountSid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * update a MessageInstance\n *\n * @function update\n * @memberof Twilio.Api.V2010.AccountContext.MessageContext#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.body] - The text of the message you want to send\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed MessageInstance\n */\n\n/* jshint ignore:end */\n\n\nMessageContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n\n  opts = opts || {};\n  var deferred = Q.defer();\n  var data = values.of({\n    'Body': _.get(opts, 'body')\n  });\n\n  var promise = this._version.update({\n    uri: this._uri,\n    method: 'POST',\n    data: data\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new MessageInstance(this._version, payload, this._solution.accountSid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\nObject.defineProperty(MessageContext.prototype, 'media', {\n  get: function () {\n    if (!this._media) {\n      this._media = new MediaList(this._version, this._solution.accountSid, this._solution.sid);\n    }\n\n    return this._media;\n  }\n});\nObject.defineProperty(MessageContext.prototype, 'feedback', {\n  get: function () {\n    if (!this._feedback) {\n      this._feedback = new FeedbackList(this._version, this._solution.accountSid, this._solution.sid);\n    }\n\n    return this._feedback;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.MessageContext#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\nMessageContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nMessageContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  MessageList: MessageList,\n  MessagePage: MessagePage,\n  MessageInstance: MessageInstance,\n  MessageContext: MessageContext\n};","map":{"version":3,"sources":["/Users/tony_niu/Visual Studio/Twilio/twilio-video-starter-kit/src/token-service/node_modules/twilio/lib/rest/api/v2010/account/message.js"],"names":["Q","require","_","util","FeedbackList","MediaList","Page","deserialize","serialize","values","MessageList","MessagePage","MessageInstance","MessageContext","version","accountSid","MessageListInstance","sid","get","_version","_solution","_uri","create","opts","callback","isUndefined","Error","to","deferred","defer","data","of","map","e","bool","promise","uri","method","then","payload","resolve","bind","catch","error","reject","isFunction","nodeify","each","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","fetchNextPage","fn","page","instances","instance","nextPage","merge","list","allResources","resource","push","length","iso8601DateTime","pageToken","pageNumber","params","getPage","targetUrl","_domain","twilio","request","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","body","numSegments","num_segments","direction","from","dateUpdated","rfc2822DateTime","date_updated","price","errorMessage","error_message","account_sid","numMedia","num_media","status","messagingServiceSid","messaging_service_sid","dateSent","date_sent","dateCreated","date_created","errorCode","integer","error_code","priceUnit","price_unit","apiVersion","api_version","subresourceUris","subresource_uris","_context","undefined","Object","defineProperty","remove","_proxy","fetch","update","media","feedback","_media","_feedback","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar FeedbackList = require('./message/feedback').FeedbackList;\nvar MediaList = require('./message/media').MediaList;\nvar Page = require('../../../../base/Page');  /* jshint ignore:line */\nvar deserialize = require(\n    '../../../../base/deserialize');  /* jshint ignore:line */\nvar serialize = require('../../../../base/serialize');  /* jshint ignore:line */\nvar values = require('../../../../base/values');  /* jshint ignore:line */\n\nvar MessageList;\nvar MessagePage;\nvar MessageInstance;\nvar MessageContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the MessageList\n *\n * @constructor Twilio.Api.V2010.AccountContext.MessageList\n *\n * @param {Twilio.Api.V2010} version - Version of the resource\n * @param {string} accountSid - The SID of the Account that created the resource\n */\n/* jshint ignore:end */\nMessageList = function MessageList(version, accountSid) {\n  /* jshint ignore:start */\n  /**\n   * @function messages\n   * @memberof Twilio.Api.V2010.AccountContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Api.V2010.AccountContext.MessageContext}\n   */\n  /* jshint ignore:end */\n  function MessageListInstance(sid) {\n    return MessageListInstance.get(sid);\n  }\n\n  MessageListInstance._version = version;\n  // Path Solution\n  MessageListInstance._solution = {accountSid: accountSid};\n  MessageListInstance._uri = `/Accounts/${accountSid}/Messages.json`;\n  /* jshint ignore:start */\n  /**\n   * create a MessageInstance\n   *\n   * @function create\n   * @memberof Twilio.Api.V2010.AccountContext.MessageList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.to - The destination phone number\n   * @param {string} [opts.statusCallback] -\n   *          The URL we should call to send status information to your application\n   * @param {string} [opts.applicationSid] - The application to use for callbacks\n   * @param {number} [opts.maxPrice] -\n   *          The total maximum price up to 4 decimal places in US dollars acceptable for the message to be delivered.\n   * @param {boolean} [opts.provideFeedback] -\n   *          Whether to confirm delivery of the message\n   * @param {number} [opts.attempt] -\n   *          Total numer of attempts made , this inclusive to send out the message\n   * @param {number} [opts.validityPeriod] -\n   *          The number of seconds that the message can remain in our outgoing queue.\n   * @param {boolean} [opts.forceDelivery] - Reserved\n   * @param {message.content_retention} [opts.contentRetention] -\n   *          Determines if the message content can be stored or redacted based on privacy settings\n   * @param {message.address_retention} [opts.addressRetention] -\n   *          Determines if the address can be stored or obfuscated based on privacy settings\n   * @param {boolean} [opts.smartEncoded] -\n   *          Whether to detect Unicode characters that have a similar GSM-7 character and replace them\n   * @param {string|list} [opts.persistentAction] -\n   *          Rich actions for Channels Messages.\n   * @param {string} [opts.from] - The phone number that initiated the message\n   * @param {string} [opts.messagingServiceSid] -\n   *          The SID of the Messaging Service you want to associate with the message.\n   * @param {string} [opts.body] -\n   *          The text of the message you want to send. Can be up to 1,600 characters in length.\n   * @param {string|list} [opts.mediaUrl] -\n   *          The URL of the media to send with the message\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed MessageInstance\n   */\n  /* jshint ignore:end */\n  MessageListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n    if (_.isUndefined(opts.to)) {\n      throw new Error('Required parameter \"opts.to\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'To': _.get(opts, 'to'),\n      'From': _.get(opts, 'from'),\n      'MessagingServiceSid': _.get(opts, 'messagingServiceSid'),\n      'Body': _.get(opts, 'body'),\n      'MediaUrl': serialize.map(_.get(opts, 'mediaUrl'), function(e) { return e; }),\n      'StatusCallback': _.get(opts, 'statusCallback'),\n      'ApplicationSid': _.get(opts, 'applicationSid'),\n      'MaxPrice': _.get(opts, 'maxPrice'),\n      'ProvideFeedback': serialize.bool(_.get(opts, 'provideFeedback')),\n      'Attempt': _.get(opts, 'attempt'),\n      'ValidityPeriod': _.get(opts, 'validityPeriod'),\n      'ForceDelivery': serialize.bool(_.get(opts, 'forceDelivery')),\n      'ContentRetention': _.get(opts, 'contentRetention'),\n      'AddressRetention': _.get(opts, 'addressRetention'),\n      'SmartEncoded': serialize.bool(_.get(opts, 'smartEncoded')),\n      'PersistentAction': serialize.map(_.get(opts, 'persistentAction'), function(e) { return e; })\n    });\n\n    var promise = this._version.create({uri: this._uri, method: 'POST', data: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new MessageInstance(\n        this._version,\n        payload,\n        this._solution.accountSid,\n        this._solution.sid\n      ));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Streams MessageInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Api.V2010.AccountContext.MessageList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.to] - Filter by messages sent to this number\n   * @param {string} [opts.from] - Filter by from number\n   * @param {Date} [opts.dateSentBefore] - Filter by date sent\n   * @param {Date} [opts.dateSent] - Filter by date sent\n   * @param {Date} [opts.dateSentAfter] - Filter by date sent\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  MessageListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists MessageInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Api.V2010.AccountContext.MessageList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.to] - Filter by messages sent to this number\n   * @param {string} [opts.from] - Filter by from number\n   * @param {Date} [opts.dateSentBefore] - Filter by date sent\n   * @param {Date} [opts.dateSent] - Filter by date sent\n   * @param {Date} [opts.dateSentAfter] - Filter by date sent\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  MessageListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of MessageInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Api.V2010.AccountContext.MessageList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.to] - Filter by messages sent to this number\n   * @param {string} [opts.from] - Filter by from number\n   * @param {Date} [opts.dateSentBefore] - Filter by date sent\n   * @param {Date} [opts.dateSent] - Filter by date sent\n   * @param {Date} [opts.dateSentAfter] - Filter by date sent\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  MessageListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'To': _.get(opts, 'to'),\n      'From': _.get(opts, 'from'),\n      'DateSent<': serialize.iso8601DateTime(_.get(opts, 'dateSentBefore')),\n      'DateSent': serialize.iso8601DateTime(_.get(opts, 'dateSent')),\n      'DateSent>': serialize.iso8601DateTime(_.get(opts, 'dateSentAfter')),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new MessagePage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of MessageInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Api.V2010.AccountContext.MessageList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  MessageListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new MessagePage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a message\n   *\n   * @function get\n   * @memberof Twilio.Api.V2010.AccountContext.MessageList#\n   *\n   * @param {string} sid - The unique string that identifies the resource\n   *\n   * @returns {Twilio.Api.V2010.AccountContext.MessageContext}\n   */\n  /* jshint ignore:end */\n  MessageListInstance.get = function get(sid) {\n    return new MessageContext(this._version, this._solution.accountSid, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Api.V2010.AccountContext.MessageList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  MessageListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  MessageListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return MessageListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the MessagePage\n *\n * @constructor Twilio.Api.V2010.AccountContext.MessagePage\n *\n * @param {V2010} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {MessageSolution} solution - Path solution\n *\n * @returns MessagePage\n */\n/* jshint ignore:end */\nMessagePage = function MessagePage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(MessagePage.prototype, Page.prototype);\nMessagePage.prototype.constructor = MessagePage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of MessageInstance\n *\n * @function getInstance\n * @memberof Twilio.Api.V2010.AccountContext.MessagePage#\n *\n * @param {MessagePayload} payload - Payload response from the API\n *\n * @returns MessageInstance\n */\n/* jshint ignore:end */\nMessagePage.prototype.getInstance = function getInstance(payload) {\n  return new MessageInstance(this._version, payload, this._solution.accountSid);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.MessagePage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nMessagePage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nMessagePage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the MessageContext\n *\n * @constructor Twilio.Api.V2010.AccountContext.MessageInstance\n *\n * @property {string} body - The message text\n * @property {string} numSegments -\n *          The number of messages used to deliver the message body\n * @property {message.direction} direction - The direction of the message\n * @property {string} from - The phone number that initiated the message\n * @property {string} to - The phone number that received the message\n * @property {Date} dateUpdated -\n *          The RFC 2822 date and time in GMT that the resource was last updated\n * @property {string} price - The amount billed for the message\n * @property {string} errorMessage - The description of the error_code\n * @property {string} uri -\n *          The URI of the resource, relative to `https://api.twilio.com`\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {string} numMedia -\n *          The number of media files associated with the message\n * @property {message.status} status - The status of the message\n * @property {string} messagingServiceSid -\n *          The SID of the Messaging Service used with the message.\n * @property {string} sid - The unique string that identifies the resource\n * @property {Date} dateSent -\n *          The RFC 2822 date and time in GMT when the message was sent\n * @property {Date} dateCreated -\n *          The RFC 2822 date and time in GMT that the resource was created\n * @property {number} errorCode - The error code associated with the message\n * @property {string} priceUnit - The currency in which price is measured\n * @property {string} apiVersion - The API version used to process the message\n * @property {string} subresourceUris -\n *          A list of related resources identified by their relative URIs\n *\n * @param {V2010} version - Version of the resource\n * @param {MessagePayload} payload - The instance payload\n * @param {sid} accountSid - The SID of the Account that created the resource\n * @param {sid} sid - The unique string that identifies the resource\n */\n/* jshint ignore:end */\nMessageInstance = function MessageInstance(version, payload, accountSid, sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.body = payload.body; // jshint ignore:line\n  this.numSegments = payload.num_segments; // jshint ignore:line\n  this.direction = payload.direction; // jshint ignore:line\n  this.from = payload.from; // jshint ignore:line\n  this.to = payload.to; // jshint ignore:line\n  this.dateUpdated = deserialize.rfc2822DateTime(payload.date_updated); // jshint ignore:line\n  this.price = payload.price; // jshint ignore:line\n  this.errorMessage = payload.error_message; // jshint ignore:line\n  this.uri = payload.uri; // jshint ignore:line\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.numMedia = payload.num_media; // jshint ignore:line\n  this.status = payload.status; // jshint ignore:line\n  this.messagingServiceSid = payload.messaging_service_sid; // jshint ignore:line\n  this.sid = payload.sid; // jshint ignore:line\n  this.dateSent = deserialize.rfc2822DateTime(payload.date_sent); // jshint ignore:line\n  this.dateCreated = deserialize.rfc2822DateTime(payload.date_created); // jshint ignore:line\n  this.errorCode = deserialize.integer(payload.error_code); // jshint ignore:line\n  this.priceUnit = payload.price_unit; // jshint ignore:line\n  this.apiVersion = payload.api_version; // jshint ignore:line\n  this.subresourceUris = payload.subresource_uris; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {accountSid: accountSid, sid: sid || this.sid, };\n};\n\nObject.defineProperty(MessageInstance.prototype,\n  '_proxy', {\n    get: function() {\n      if (!this._context) {\n        this._context = new MessageContext(this._version, this._solution.accountSid, this._solution.sid);\n      }\n\n      return this._context;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * remove a MessageInstance\n *\n * @function remove\n * @memberof Twilio.Api.V2010.AccountContext.MessageInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed MessageInstance\n */\n/* jshint ignore:end */\nMessageInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n\n/* jshint ignore:start */\n/**\n * fetch a MessageInstance\n *\n * @function fetch\n * @memberof Twilio.Api.V2010.AccountContext.MessageInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed MessageInstance\n */\n/* jshint ignore:end */\nMessageInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * update a MessageInstance\n *\n * @function update\n * @memberof Twilio.Api.V2010.AccountContext.MessageInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.body] - The text of the message you want to send\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed MessageInstance\n */\n/* jshint ignore:end */\nMessageInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * Access the media\n *\n * @function media\n * @memberof Twilio.Api.V2010.AccountContext.MessageInstance#\n *\n * @returns {Twilio.Api.V2010.AccountContext.MessageContext.MediaList}\n */\n/* jshint ignore:end */\nMessageInstance.prototype.media = function media() {\n  return this._proxy.media;\n};\n\n/* jshint ignore:start */\n/**\n * Access the feedback\n *\n * @function feedback\n * @memberof Twilio.Api.V2010.AccountContext.MessageInstance#\n *\n * @returns {Twilio.Api.V2010.AccountContext.MessageContext.FeedbackList}\n */\n/* jshint ignore:end */\nMessageInstance.prototype.feedback = function feedback() {\n  return this._proxy.feedback;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.MessageInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nMessageInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nMessageInstance.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the MessageContext\n *\n * @constructor Twilio.Api.V2010.AccountContext.MessageContext\n *\n * @property {Twilio.Api.V2010.AccountContext.MessageContext.MediaList} media -\n *          media resource\n * @property {Twilio.Api.V2010.AccountContext.MessageContext.FeedbackList} feedback -\n *          feedback resource\n *\n * @param {V2010} version - Version of the resource\n * @param {sid} accountSid -\n *          The SID of the Account that created the resource to fetch\n * @param {sid} sid - The unique string that identifies the resource\n */\n/* jshint ignore:end */\nMessageContext = function MessageContext(version, accountSid, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {accountSid: accountSid, sid: sid, };\n  this._uri = `/Accounts/${accountSid}/Messages/${sid}.json`;\n\n  // Dependents\n  this._media = undefined;\n  this._feedback = undefined;\n};\n\n/* jshint ignore:start */\n/**\n * remove a MessageInstance\n *\n * @function remove\n * @memberof Twilio.Api.V2010.AccountContext.MessageContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed MessageInstance\n */\n/* jshint ignore:end */\nMessageContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.remove({uri: this._uri, method: 'DELETE'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a MessageInstance\n *\n * @function fetch\n * @memberof Twilio.Api.V2010.AccountContext.MessageContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed MessageInstance\n */\n/* jshint ignore:end */\nMessageContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({uri: this._uri, method: 'GET'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new MessageInstance(\n      this._version,\n      payload,\n      this._solution.accountSid,\n      this._solution.sid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * update a MessageInstance\n *\n * @function update\n * @memberof Twilio.Api.V2010.AccountContext.MessageContext#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.body] - The text of the message you want to send\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed MessageInstance\n */\n/* jshint ignore:end */\nMessageContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n  opts = opts || {};\n\n  var deferred = Q.defer();\n  var data = values.of({'Body': _.get(opts, 'body')});\n\n  var promise = this._version.update({uri: this._uri, method: 'POST', data: data});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new MessageInstance(\n      this._version,\n      payload,\n      this._solution.accountSid,\n      this._solution.sid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\nObject.defineProperty(MessageContext.prototype,\n  'media', {\n    get: function() {\n      if (!this._media) {\n        this._media = new MediaList(this._version, this._solution.accountSid, this._solution.sid);\n      }\n      return this._media;\n    }\n});\n\nObject.defineProperty(MessageContext.prototype,\n  'feedback', {\n    get: function() {\n      if (!this._feedback) {\n        this._feedback = new FeedbackList(this._version, this._solution.accountSid, this._solution.sid);\n      }\n      return this._feedback;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Api.V2010.AccountContext.MessageContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nMessageContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nMessageContext.prototype[util.inspect.custom] = function inspect(depth, options)\n    {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  MessageList: MessageList,\n  MessagePage: MessagePage,\n  MessageInstance: MessageInstance,\n  MessageContext: MessageContext\n};\n"]},"metadata":{},"sourceType":"module"}