{"ast":null,"code":"'use strict';\n/* jshint ignore:start */\n\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n\n/* jshint ignore:end */\n\nvar Q = require('q');\n/* jshint ignore:line */\n\n\nvar _ = require('lodash');\n/* jshint ignore:line */\n\n\nvar util = require('util');\n/* jshint ignore:line */\n\n\nvar Page = require('../../../../base/Page');\n/* jshint ignore:line */\n\n\nvar deserialize = require('../../../../base/deserialize');\n/* jshint ignore:line */\n\n\nvar serialize = require('../../../../base/serialize');\n/* jshint ignore:line */\n\n\nvar values = require('../../../../base/values');\n/* jshint ignore:line */\n\n\nvar UserConversationList;\nvar UserConversationPage;\nvar UserConversationInstance;\nvar UserConversationContext;\n/* jshint ignore:start */\n\n/**\n * Initialize the UserConversationList\n *\n * @constructor Twilio.Conversations.V1.UserContext.UserConversationList\n *\n * @param {Twilio.Conversations.V1} version - Version of the resource\n * @param {string} userSid - The unique ID for the User.\n */\n\n/* jshint ignore:end */\n\nUserConversationList = function UserConversationList(version, userSid) {\n  /* jshint ignore:start */\n\n  /**\n   * @function userConversations\n   * @memberof Twilio.Conversations.V1.UserContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Conversations.V1.UserContext.UserConversationContext}\n   */\n\n  /* jshint ignore:end */\n  function UserConversationListInstance(sid) {\n    return UserConversationListInstance.get(sid);\n  }\n\n  UserConversationListInstance._version = version; // Path Solution\n\n  UserConversationListInstance._solution = {\n    userSid: userSid\n  };\n  UserConversationListInstance._uri = `/Users/${userSid}/Conversations`;\n  /* jshint ignore:start */\n\n  /**\n   * Streams UserConversationInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Conversations.V1.UserContext.UserConversationList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n\n  /* jshint ignore:end */\n\n  UserConversationListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Lists UserConversationInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Conversations.V1.UserContext.UserConversationList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  UserConversationListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single page of UserConversationInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Conversations.V1.UserContext.UserConversationList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  UserConversationListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new UserConversationPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single target page of UserConversationInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Conversations.V1.UserContext.UserConversationList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  UserConversationListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new UserConversationPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Constructs a user_conversation\n   *\n   * @function get\n   * @memberof Twilio.Conversations.V1.UserContext.UserConversationList#\n   *\n   * @param {string} conversationSid - The unique SID identifier of the Conversation.\n   *\n   * @returns {Twilio.Conversations.V1.UserContext.UserConversationContext}\n   */\n\n  /* jshint ignore:end */\n\n\n  UserConversationListInstance.get = function get(conversationSid) {\n    return new UserConversationContext(this._version, this._solution.userSid, conversationSid);\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Conversations.V1.UserContext.UserConversationList#\n   *\n   * @returns Object\n   */\n\n  /* jshint ignore:end */\n\n\n  UserConversationListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  UserConversationListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return UserConversationListInstance;\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the UserConversationPage\n *\n * @constructor Twilio.Conversations.V1.UserContext.UserConversationPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {UserConversationSolution} solution - Path solution\n *\n * @returns UserConversationPage\n */\n\n/* jshint ignore:end */\n\n\nUserConversationPage = function UserConversationPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(UserConversationPage.prototype, Page.prototype);\n\nUserConversationPage.prototype.constructor = UserConversationPage;\n/* jshint ignore:start */\n\n/**\n * Build an instance of UserConversationInstance\n *\n * @function getInstance\n * @memberof Twilio.Conversations.V1.UserContext.UserConversationPage#\n *\n * @param {UserConversationPayload} payload - Payload response from the API\n *\n * @returns UserConversationInstance\n */\n\n/* jshint ignore:end */\n\nUserConversationPage.prototype.getInstance = function getInstance(payload) {\n  return new UserConversationInstance(this._version, payload, this._solution.userSid);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Conversations.V1.UserContext.UserConversationPage#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nUserConversationPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nUserConversationPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the UserConversationContext\n *\n * @constructor Twilio.Conversations.V1.UserContext.UserConversationInstance\n *\n * @property {string} accountSid -\n *          The unique ID of the Account responsible for this conversation.\n * @property {string} chatServiceSid -\n *          The unique ID of the Conversation Service this conversation belongs to.\n * @property {string} conversationSid -\n *          The unique ID of the Conversation for this User Conversation.\n * @property {number} unreadMessagesCount -\n *          The number of unread Messages in the Conversation.\n * @property {number} lastReadMessageIndex - The index of the last read Message .\n * @property {string} participantSid - Participant Sid.\n * @property {string} userSid - The unique ID for the User.\n * @property {string} friendlyName - The human-readable name of this conversation.\n * @property {user_conversation.state} conversationState -\n *          The current state of this User Conversation\n * @property {object} timers - Timer date values for this conversation.\n * @property {string} attributes -\n *          An optional string metadata field you can use to store any data you wish.\n * @property {Date} dateCreated - The date that this conversation was created.\n * @property {Date} dateUpdated - The date that this conversation was last updated.\n * @property {string} createdBy - Creator of this conversation.\n * @property {user_conversation.notification_level} notificationLevel -\n *          The Notification Level of this User Conversation.\n * @property {string} uniqueName -\n *          An application-defined string that uniquely identifies the Conversation resource.\n * @property {string} url - The url\n * @property {string} links -\n *          Absolute URLs to access the participant and conversation of this user conversation.\n *\n * @param {V1} version - Version of the resource\n * @param {UserConversationPayload} payload - The instance payload\n * @param {sid} userSid - The unique ID for the User.\n * @param {sid_like} conversationSid -\n *          The unique SID identifier of the Conversation.\n */\n\n/* jshint ignore:end */\n\n\nUserConversationInstance = function UserConversationInstance(version, payload, userSid, conversationSid) {\n  this._version = version; // Marshaled Properties\n\n  this.accountSid = payload.account_sid; // jshint ignore:line\n\n  this.chatServiceSid = payload.chat_service_sid; // jshint ignore:line\n\n  this.conversationSid = payload.conversation_sid; // jshint ignore:line\n\n  this.unreadMessagesCount = deserialize.integer(payload.unread_messages_count); // jshint ignore:line\n\n  this.lastReadMessageIndex = deserialize.integer(payload.last_read_message_index); // jshint ignore:line\n\n  this.participantSid = payload.participant_sid; // jshint ignore:line\n\n  this.userSid = payload.user_sid; // jshint ignore:line\n\n  this.friendlyName = payload.friendly_name; // jshint ignore:line\n\n  this.conversationState = payload.conversation_state; // jshint ignore:line\n\n  this.timers = payload.timers; // jshint ignore:line\n\n  this.attributes = payload.attributes; // jshint ignore:line\n\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n\n  this.createdBy = payload.created_by; // jshint ignore:line\n\n  this.notificationLevel = payload.notification_level; // jshint ignore:line\n\n  this.uniqueName = payload.unique_name; // jshint ignore:line\n\n  this.url = payload.url; // jshint ignore:line\n\n  this.links = payload.links; // jshint ignore:line\n  // Context\n\n  this._context = undefined;\n  this._solution = {\n    userSid: userSid,\n    conversationSid: conversationSid || this.conversationSid\n  };\n};\n\nObject.defineProperty(UserConversationInstance.prototype, '_proxy', {\n  get: function () {\n    if (!this._context) {\n      this._context = new UserConversationContext(this._version, this._solution.userSid, this._solution.conversationSid);\n    }\n\n    return this._context;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * update a UserConversationInstance\n *\n * @function update\n * @memberof Twilio.Conversations.V1.UserContext.UserConversationInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {user_conversation.notification_level} [opts.notificationLevel] -\n *          The Notification Level of this User Conversation.\n * @param {Date} [opts.lastReadTimestamp] -\n *          The date of the last message read in conversation by the user.\n * @param {number} [opts.lastReadMessageIndex] -\n *          The index of the last read Message.\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed UserConversationInstance\n */\n\n/* jshint ignore:end */\n\nUserConversationInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n/* jshint ignore:start */\n\n/**\n * remove a UserConversationInstance\n *\n * @function remove\n * @memberof Twilio.Conversations.V1.UserContext.UserConversationInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed UserConversationInstance\n */\n\n/* jshint ignore:end */\n\n\nUserConversationInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n/* jshint ignore:start */\n\n/**\n * fetch a UserConversationInstance\n *\n * @function fetch\n * @memberof Twilio.Conversations.V1.UserContext.UserConversationInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed UserConversationInstance\n */\n\n/* jshint ignore:end */\n\n\nUserConversationInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Conversations.V1.UserContext.UserConversationInstance#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nUserConversationInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nUserConversationInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the UserConversationContext\n *\n * @constructor Twilio.Conversations.V1.UserContext.UserConversationContext\n *\n * @param {V1} version - Version of the resource\n * @param {sid_like} userSid - The unique SID identifier of the User.\n * @param {sid_like} conversationSid -\n *          The unique SID identifier of the Conversation.\n */\n\n/* jshint ignore:end */\n\n\nUserConversationContext = function UserConversationContext(version, userSid, conversationSid) {\n  this._version = version; // Path Solution\n\n  this._solution = {\n    userSid: userSid,\n    conversationSid: conversationSid\n  };\n  this._uri = `/Users/${userSid}/Conversations/${conversationSid}`;\n};\n/* jshint ignore:start */\n\n/**\n * update a UserConversationInstance\n *\n * @function update\n * @memberof Twilio.Conversations.V1.UserContext.UserConversationContext#\n *\n * @param {object} [opts] - Options for request\n * @param {user_conversation.notification_level} [opts.notificationLevel] -\n *          The Notification Level of this User Conversation.\n * @param {Date} [opts.lastReadTimestamp] -\n *          The date of the last message read in conversation by the user.\n * @param {number} [opts.lastReadMessageIndex] -\n *          The index of the last read Message.\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed UserConversationInstance\n */\n\n/* jshint ignore:end */\n\n\nUserConversationContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n\n  opts = opts || {};\n  var deferred = Q.defer();\n  var data = values.of({\n    'NotificationLevel': _.get(opts, 'notificationLevel'),\n    'LastReadTimestamp': serialize.iso8601DateTime(_.get(opts, 'lastReadTimestamp')),\n    'LastReadMessageIndex': _.get(opts, 'lastReadMessageIndex')\n  });\n\n  var promise = this._version.update({\n    uri: this._uri,\n    method: 'POST',\n    data: data\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new UserConversationInstance(this._version, payload, this._solution.userSid, this._solution.conversationSid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * remove a UserConversationInstance\n *\n * @function remove\n * @memberof Twilio.Conversations.V1.UserContext.UserConversationContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed UserConversationInstance\n */\n\n/* jshint ignore:end */\n\n\nUserConversationContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.remove({\n    uri: this._uri,\n    method: 'DELETE'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * fetch a UserConversationInstance\n *\n * @function fetch\n * @memberof Twilio.Conversations.V1.UserContext.UserConversationContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed UserConversationInstance\n */\n\n/* jshint ignore:end */\n\n\nUserConversationContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new UserConversationInstance(this._version, payload, this._solution.userSid, this._solution.conversationSid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Conversations.V1.UserContext.UserConversationContext#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nUserConversationContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nUserConversationContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  UserConversationList: UserConversationList,\n  UserConversationPage: UserConversationPage,\n  UserConversationInstance: UserConversationInstance,\n  UserConversationContext: UserConversationContext\n};","map":{"version":3,"sources":["/Users/tony_niu/Visual Studio/Twilio/twilio-video-starter-kit/src/token-service/node_modules/twilio/lib/rest/conversations/v1/user/userConversation.js"],"names":["Q","require","_","util","Page","deserialize","serialize","values","UserConversationList","UserConversationPage","UserConversationInstance","UserConversationContext","version","userSid","UserConversationListInstance","sid","get","_version","_solution","_uri","each","opts","callback","isFunction","isUndefined","Error","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","error","fetchNextPage","fn","promise","then","page","instances","instance","bind","nextPage","catch","merge","list","deferred","defer","allResources","resource","push","length","resolve","reject","nodeify","data","of","pageToken","pageNumber","uri","method","params","payload","getPage","targetUrl","_domain","twilio","request","conversationSid","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","accountSid","account_sid","chatServiceSid","chat_service_sid","conversation_sid","unreadMessagesCount","integer","unread_messages_count","lastReadMessageIndex","last_read_message_index","participantSid","participant_sid","user_sid","friendlyName","friendly_name","conversationState","conversation_state","timers","attributes","dateCreated","iso8601DateTime","date_created","dateUpdated","date_updated","createdBy","created_by","notificationLevel","notification_level","uniqueName","unique_name","url","links","_context","undefined","Object","defineProperty","update","_proxy","remove","fetch","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar Page = require('../../../../base/Page');  /* jshint ignore:line */\nvar deserialize = require(\n    '../../../../base/deserialize');  /* jshint ignore:line */\nvar serialize = require('../../../../base/serialize');  /* jshint ignore:line */\nvar values = require('../../../../base/values');  /* jshint ignore:line */\n\nvar UserConversationList;\nvar UserConversationPage;\nvar UserConversationInstance;\nvar UserConversationContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the UserConversationList\n *\n * @constructor Twilio.Conversations.V1.UserContext.UserConversationList\n *\n * @param {Twilio.Conversations.V1} version - Version of the resource\n * @param {string} userSid - The unique ID for the User.\n */\n/* jshint ignore:end */\nUserConversationList = function UserConversationList(version, userSid) {\n  /* jshint ignore:start */\n  /**\n   * @function userConversations\n   * @memberof Twilio.Conversations.V1.UserContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Conversations.V1.UserContext.UserConversationContext}\n   */\n  /* jshint ignore:end */\n  function UserConversationListInstance(sid) {\n    return UserConversationListInstance.get(sid);\n  }\n\n  UserConversationListInstance._version = version;\n  // Path Solution\n  UserConversationListInstance._solution = {userSid: userSid};\n  UserConversationListInstance._uri = `/Users/${userSid}/Conversations`;\n  /* jshint ignore:start */\n  /**\n   * Streams UserConversationInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Conversations.V1.UserContext.UserConversationList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  UserConversationListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists UserConversationInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Conversations.V1.UserContext.UserConversationList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  UserConversationListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of UserConversationInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Conversations.V1.UserContext.UserConversationList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  UserConversationListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new UserConversationPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of UserConversationInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Conversations.V1.UserContext.UserConversationList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  UserConversationListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new UserConversationPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a user_conversation\n   *\n   * @function get\n   * @memberof Twilio.Conversations.V1.UserContext.UserConversationList#\n   *\n   * @param {string} conversationSid - The unique SID identifier of the Conversation.\n   *\n   * @returns {Twilio.Conversations.V1.UserContext.UserConversationContext}\n   */\n  /* jshint ignore:end */\n  UserConversationListInstance.get = function get(conversationSid) {\n    return new UserConversationContext(this._version, this._solution.userSid, conversationSid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Conversations.V1.UserContext.UserConversationList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  UserConversationListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  UserConversationListInstance[util.inspect.custom] = function inspect(depth,\n      options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return UserConversationListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the UserConversationPage\n *\n * @constructor Twilio.Conversations.V1.UserContext.UserConversationPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {UserConversationSolution} solution - Path solution\n *\n * @returns UserConversationPage\n */\n/* jshint ignore:end */\nUserConversationPage = function UserConversationPage(version, response,\n                                                      solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(UserConversationPage.prototype, Page.prototype);\nUserConversationPage.prototype.constructor = UserConversationPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of UserConversationInstance\n *\n * @function getInstance\n * @memberof Twilio.Conversations.V1.UserContext.UserConversationPage#\n *\n * @param {UserConversationPayload} payload - Payload response from the API\n *\n * @returns UserConversationInstance\n */\n/* jshint ignore:end */\nUserConversationPage.prototype.getInstance = function getInstance(payload) {\n  return new UserConversationInstance(this._version, payload, this._solution.userSid);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Conversations.V1.UserContext.UserConversationPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nUserConversationPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nUserConversationPage.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the UserConversationContext\n *\n * @constructor Twilio.Conversations.V1.UserContext.UserConversationInstance\n *\n * @property {string} accountSid -\n *          The unique ID of the Account responsible for this conversation.\n * @property {string} chatServiceSid -\n *          The unique ID of the Conversation Service this conversation belongs to.\n * @property {string} conversationSid -\n *          The unique ID of the Conversation for this User Conversation.\n * @property {number} unreadMessagesCount -\n *          The number of unread Messages in the Conversation.\n * @property {number} lastReadMessageIndex - The index of the last read Message .\n * @property {string} participantSid - Participant Sid.\n * @property {string} userSid - The unique ID for the User.\n * @property {string} friendlyName - The human-readable name of this conversation.\n * @property {user_conversation.state} conversationState -\n *          The current state of this User Conversation\n * @property {object} timers - Timer date values for this conversation.\n * @property {string} attributes -\n *          An optional string metadata field you can use to store any data you wish.\n * @property {Date} dateCreated - The date that this conversation was created.\n * @property {Date} dateUpdated - The date that this conversation was last updated.\n * @property {string} createdBy - Creator of this conversation.\n * @property {user_conversation.notification_level} notificationLevel -\n *          The Notification Level of this User Conversation.\n * @property {string} uniqueName -\n *          An application-defined string that uniquely identifies the Conversation resource.\n * @property {string} url - The url\n * @property {string} links -\n *          Absolute URLs to access the participant and conversation of this user conversation.\n *\n * @param {V1} version - Version of the resource\n * @param {UserConversationPayload} payload - The instance payload\n * @param {sid} userSid - The unique ID for the User.\n * @param {sid_like} conversationSid -\n *          The unique SID identifier of the Conversation.\n */\n/* jshint ignore:end */\nUserConversationInstance = function UserConversationInstance(version, payload,\n    userSid, conversationSid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.chatServiceSid = payload.chat_service_sid; // jshint ignore:line\n  this.conversationSid = payload.conversation_sid; // jshint ignore:line\n  this.unreadMessagesCount = deserialize.integer(payload.unread_messages_count); // jshint ignore:line\n  this.lastReadMessageIndex = deserialize.integer(payload.last_read_message_index); // jshint ignore:line\n  this.participantSid = payload.participant_sid; // jshint ignore:line\n  this.userSid = payload.user_sid; // jshint ignore:line\n  this.friendlyName = payload.friendly_name; // jshint ignore:line\n  this.conversationState = payload.conversation_state; // jshint ignore:line\n  this.timers = payload.timers; // jshint ignore:line\n  this.attributes = payload.attributes; // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n  this.createdBy = payload.created_by; // jshint ignore:line\n  this.notificationLevel = payload.notification_level; // jshint ignore:line\n  this.uniqueName = payload.unique_name; // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n  this.links = payload.links; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {userSid: userSid, conversationSid: conversationSid || this.conversationSid, };\n};\n\nObject.defineProperty(UserConversationInstance.prototype,\n  '_proxy', {\n    get: function() {\n      if (!this._context) {\n        this._context = new UserConversationContext(\n          this._version,\n          this._solution.userSid,\n          this._solution.conversationSid\n        );\n      }\n\n      return this._context;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * update a UserConversationInstance\n *\n * @function update\n * @memberof Twilio.Conversations.V1.UserContext.UserConversationInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {user_conversation.notification_level} [opts.notificationLevel] -\n *          The Notification Level of this User Conversation.\n * @param {Date} [opts.lastReadTimestamp] -\n *          The date of the last message read in conversation by the user.\n * @param {number} [opts.lastReadMessageIndex] -\n *          The index of the last read Message.\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed UserConversationInstance\n */\n/* jshint ignore:end */\nUserConversationInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * remove a UserConversationInstance\n *\n * @function remove\n * @memberof Twilio.Conversations.V1.UserContext.UserConversationInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed UserConversationInstance\n */\n/* jshint ignore:end */\nUserConversationInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n\n/* jshint ignore:start */\n/**\n * fetch a UserConversationInstance\n *\n * @function fetch\n * @memberof Twilio.Conversations.V1.UserContext.UserConversationInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed UserConversationInstance\n */\n/* jshint ignore:end */\nUserConversationInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Conversations.V1.UserContext.UserConversationInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nUserConversationInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nUserConversationInstance.prototype[util.inspect.custom] = function\n    inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the UserConversationContext\n *\n * @constructor Twilio.Conversations.V1.UserContext.UserConversationContext\n *\n * @param {V1} version - Version of the resource\n * @param {sid_like} userSid - The unique SID identifier of the User.\n * @param {sid_like} conversationSid -\n *          The unique SID identifier of the Conversation.\n */\n/* jshint ignore:end */\nUserConversationContext = function UserConversationContext(version, userSid,\n                                                            conversationSid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {userSid: userSid, conversationSid: conversationSid, };\n  this._uri = `/Users/${userSid}/Conversations/${conversationSid}`;\n};\n\n/* jshint ignore:start */\n/**\n * update a UserConversationInstance\n *\n * @function update\n * @memberof Twilio.Conversations.V1.UserContext.UserConversationContext#\n *\n * @param {object} [opts] - Options for request\n * @param {user_conversation.notification_level} [opts.notificationLevel] -\n *          The Notification Level of this User Conversation.\n * @param {Date} [opts.lastReadTimestamp] -\n *          The date of the last message read in conversation by the user.\n * @param {number} [opts.lastReadMessageIndex] -\n *          The index of the last read Message.\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed UserConversationInstance\n */\n/* jshint ignore:end */\nUserConversationContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n  opts = opts || {};\n\n  var deferred = Q.defer();\n  var data = values.of({\n    'NotificationLevel': _.get(opts, 'notificationLevel'),\n    'LastReadTimestamp': serialize.iso8601DateTime(_.get(opts, 'lastReadTimestamp')),\n    'LastReadMessageIndex': _.get(opts, 'lastReadMessageIndex')\n  });\n\n  var promise = this._version.update({uri: this._uri, method: 'POST', data: data});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new UserConversationInstance(\n      this._version,\n      payload,\n      this._solution.userSid,\n      this._solution.conversationSid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * remove a UserConversationInstance\n *\n * @function remove\n * @memberof Twilio.Conversations.V1.UserContext.UserConversationContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed UserConversationInstance\n */\n/* jshint ignore:end */\nUserConversationContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.remove({uri: this._uri, method: 'DELETE'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a UserConversationInstance\n *\n * @function fetch\n * @memberof Twilio.Conversations.V1.UserContext.UserConversationContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed UserConversationInstance\n */\n/* jshint ignore:end */\nUserConversationContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({uri: this._uri, method: 'GET'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new UserConversationInstance(\n      this._version,\n      payload,\n      this._solution.userSid,\n      this._solution.conversationSid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Conversations.V1.UserContext.UserConversationContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nUserConversationContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nUserConversationContext.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  UserConversationList: UserConversationList,\n  UserConversationPage: UserConversationPage,\n  UserConversationInstance: UserConversationInstance,\n  UserConversationContext: UserConversationContext\n};\n"]},"metadata":{},"sourceType":"module"}