{"ast":null,"code":"'use strict';\n/* jshint ignore:start */\n\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n\n/* jshint ignore:end */\n\nvar Q = require('q');\n/* jshint ignore:line */\n\n\nvar _ = require('lodash');\n/* jshint ignore:line */\n\n\nvar util = require('util');\n/* jshint ignore:line */\n\n\nvar Page = require('../../../../base/Page');\n/* jshint ignore:line */\n\n\nvar SyncMapItemList = require('./syncMap/syncMapItem').SyncMapItemList;\n\nvar SyncMapPermissionList = require('./syncMap/syncMapPermission').SyncMapPermissionList;\n\nvar deserialize = require('../../../../base/deserialize');\n/* jshint ignore:line */\n\n\nvar values = require('../../../../base/values');\n/* jshint ignore:line */\n\n\nvar SyncMapList;\nvar SyncMapPage;\nvar SyncMapInstance;\nvar SyncMapContext;\n/* jshint ignore:start */\n\n/**\n * Initialize the SyncMapList\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Preview.Sync.ServiceContext.SyncMapList\n *\n * @param {Twilio.Preview.Sync} version - Version of the resource\n * @param {string} serviceSid - The service_sid\n */\n\n/* jshint ignore:end */\n\nSyncMapList = function SyncMapList(version, serviceSid) {\n  /* jshint ignore:start */\n\n  /**\n   * @function syncMaps\n   * @memberof Twilio.Preview.Sync.ServiceContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Preview.Sync.ServiceContext.SyncMapContext}\n   */\n\n  /* jshint ignore:end */\n  function SyncMapListInstance(sid) {\n    return SyncMapListInstance.get(sid);\n  }\n\n  SyncMapListInstance._version = version; // Path Solution\n\n  SyncMapListInstance._solution = {\n    serviceSid: serviceSid\n  };\n  SyncMapListInstance._uri = `/Services/${serviceSid}/Maps`;\n  /* jshint ignore:start */\n\n  /**\n   * create a SyncMapInstance\n   *\n   * @function create\n   * @memberof Twilio.Preview.Sync.ServiceContext.SyncMapList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.uniqueName] - The unique_name\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed SyncMapInstance\n   */\n\n  /* jshint ignore:end */\n\n  SyncMapListInstance.create = function create(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'UniqueName': _.get(opts, 'uniqueName')\n    });\n\n    var promise = this._version.create({\n      uri: this._uri,\n      method: 'POST',\n      data: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new SyncMapInstance(this._version, payload, this._solution.serviceSid, this._solution.sid));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Streams SyncMapInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Preview.Sync.ServiceContext.SyncMapList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n\n  /* jshint ignore:end */\n\n\n  SyncMapListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Lists SyncMapInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Preview.Sync.ServiceContext.SyncMapList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  SyncMapListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single page of SyncMapInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Preview.Sync.ServiceContext.SyncMapList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  SyncMapListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new SyncMapPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single target page of SyncMapInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Preview.Sync.ServiceContext.SyncMapList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  SyncMapListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new SyncMapPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Constructs a sync_map\n   *\n   * @function get\n   * @memberof Twilio.Preview.Sync.ServiceContext.SyncMapList#\n   *\n   * @param {string} sid - The sid\n   *\n   * @returns {Twilio.Preview.Sync.ServiceContext.SyncMapContext}\n   */\n\n  /* jshint ignore:end */\n\n\n  SyncMapListInstance.get = function get(sid) {\n    return new SyncMapContext(this._version, this._solution.serviceSid, sid);\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Preview.Sync.ServiceContext.SyncMapList#\n   *\n   * @returns Object\n   */\n\n  /* jshint ignore:end */\n\n\n  SyncMapListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  SyncMapListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return SyncMapListInstance;\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the SyncMapPage\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Preview.Sync.ServiceContext.SyncMapPage\n *\n * @param {Sync} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {SyncMapSolution} solution - Path solution\n *\n * @returns SyncMapPage\n */\n\n/* jshint ignore:end */\n\n\nSyncMapPage = function SyncMapPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(SyncMapPage.prototype, Page.prototype);\n\nSyncMapPage.prototype.constructor = SyncMapPage;\n/* jshint ignore:start */\n\n/**\n * Build an instance of SyncMapInstance\n *\n * @function getInstance\n * @memberof Twilio.Preview.Sync.ServiceContext.SyncMapPage#\n *\n * @param {SyncMapPayload} payload - Payload response from the API\n *\n * @returns SyncMapInstance\n */\n\n/* jshint ignore:end */\n\nSyncMapPage.prototype.getInstance = function getInstance(payload) {\n  return new SyncMapInstance(this._version, payload, this._solution.serviceSid);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Preview.Sync.ServiceContext.SyncMapPage#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nSyncMapPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nSyncMapPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the SyncMapContext\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Preview.Sync.ServiceContext.SyncMapInstance\n *\n * @property {string} sid - The sid\n * @property {string} uniqueName - The unique_name\n * @property {string} accountSid - The account_sid\n * @property {string} serviceSid - The service_sid\n * @property {string} url - The url\n * @property {string} links - The links\n * @property {string} revision - The revision\n * @property {Date} dateCreated - The date_created\n * @property {Date} dateUpdated - The date_updated\n * @property {string} createdBy - The created_by\n *\n * @param {Sync} version - Version of the resource\n * @param {SyncMapPayload} payload - The instance payload\n * @param {sid} serviceSid - The service_sid\n * @param {sid_like} sid - The sid\n */\n\n/* jshint ignore:end */\n\n\nSyncMapInstance = function SyncMapInstance(version, payload, serviceSid, sid) {\n  this._version = version; // Marshaled Properties\n\n  this.sid = payload.sid; // jshint ignore:line\n\n  this.uniqueName = payload.unique_name; // jshint ignore:line\n\n  this.accountSid = payload.account_sid; // jshint ignore:line\n\n  this.serviceSid = payload.service_sid; // jshint ignore:line\n\n  this.url = payload.url; // jshint ignore:line\n\n  this.links = payload.links; // jshint ignore:line\n\n  this.revision = payload.revision; // jshint ignore:line\n\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n\n  this.createdBy = payload.created_by; // jshint ignore:line\n  // Context\n\n  this._context = undefined;\n  this._solution = {\n    serviceSid: serviceSid,\n    sid: sid || this.sid\n  };\n};\n\nObject.defineProperty(SyncMapInstance.prototype, '_proxy', {\n  get: function () {\n    if (!this._context) {\n      this._context = new SyncMapContext(this._version, this._solution.serviceSid, this._solution.sid);\n    }\n\n    return this._context;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * fetch a SyncMapInstance\n *\n * @function fetch\n * @memberof Twilio.Preview.Sync.ServiceContext.SyncMapInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SyncMapInstance\n */\n\n/* jshint ignore:end */\n\nSyncMapInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n/* jshint ignore:start */\n\n/**\n * remove a SyncMapInstance\n *\n * @function remove\n * @memberof Twilio.Preview.Sync.ServiceContext.SyncMapInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SyncMapInstance\n */\n\n/* jshint ignore:end */\n\n\nSyncMapInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n/* jshint ignore:start */\n\n/**\n * Access the syncMapItems\n *\n * @function syncMapItems\n * @memberof Twilio.Preview.Sync.ServiceContext.SyncMapInstance#\n *\n * @returns {Twilio.Preview.Sync.ServiceContext.SyncMapContext.SyncMapItemList}\n */\n\n/* jshint ignore:end */\n\n\nSyncMapInstance.prototype.syncMapItems = function syncMapItems() {\n  return this._proxy.syncMapItems;\n};\n/* jshint ignore:start */\n\n/**\n * Access the syncMapPermissions\n *\n * @function syncMapPermissions\n * @memberof Twilio.Preview.Sync.ServiceContext.SyncMapInstance#\n *\n * @returns {Twilio.Preview.Sync.ServiceContext.SyncMapContext.SyncMapPermissionList}\n */\n\n/* jshint ignore:end */\n\n\nSyncMapInstance.prototype.syncMapPermissions = function syncMapPermissions() {\n  return this._proxy.syncMapPermissions;\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Preview.Sync.ServiceContext.SyncMapInstance#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nSyncMapInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nSyncMapInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the SyncMapContext\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Preview.Sync.ServiceContext.SyncMapContext\n *\n * @property {Twilio.Preview.Sync.ServiceContext.SyncMapContext.SyncMapItemList} syncMapItems -\n *          syncMapItems resource\n * @property {Twilio.Preview.Sync.ServiceContext.SyncMapContext.SyncMapPermissionList} syncMapPermissions -\n *          syncMapPermissions resource\n *\n * @param {Sync} version - Version of the resource\n * @param {sid} serviceSid - The service_sid\n * @param {sid_like} sid - The sid\n */\n\n/* jshint ignore:end */\n\n\nSyncMapContext = function SyncMapContext(version, serviceSid, sid) {\n  this._version = version; // Path Solution\n\n  this._solution = {\n    serviceSid: serviceSid,\n    sid: sid\n  };\n  this._uri = `/Services/${serviceSid}/Maps/${sid}`; // Dependents\n\n  this._syncMapItems = undefined;\n  this._syncMapPermissions = undefined;\n};\n/* jshint ignore:start */\n\n/**\n * fetch a SyncMapInstance\n *\n * @function fetch\n * @memberof Twilio.Preview.Sync.ServiceContext.SyncMapContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SyncMapInstance\n */\n\n/* jshint ignore:end */\n\n\nSyncMapContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new SyncMapInstance(this._version, payload, this._solution.serviceSid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * remove a SyncMapInstance\n *\n * @function remove\n * @memberof Twilio.Preview.Sync.ServiceContext.SyncMapContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SyncMapInstance\n */\n\n/* jshint ignore:end */\n\n\nSyncMapContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.remove({\n    uri: this._uri,\n    method: 'DELETE'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\nObject.defineProperty(SyncMapContext.prototype, 'syncMapItems', {\n  get: function () {\n    if (!this._syncMapItems) {\n      this._syncMapItems = new SyncMapItemList(this._version, this._solution.serviceSid, this._solution.sid);\n    }\n\n    return this._syncMapItems;\n  }\n});\nObject.defineProperty(SyncMapContext.prototype, 'syncMapPermissions', {\n  get: function () {\n    if (!this._syncMapPermissions) {\n      this._syncMapPermissions = new SyncMapPermissionList(this._version, this._solution.serviceSid, this._solution.sid);\n    }\n\n    return this._syncMapPermissions;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Preview.Sync.ServiceContext.SyncMapContext#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\nSyncMapContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nSyncMapContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  SyncMapList: SyncMapList,\n  SyncMapPage: SyncMapPage,\n  SyncMapInstance: SyncMapInstance,\n  SyncMapContext: SyncMapContext\n};","map":{"version":3,"sources":["/Users/tony_niu/Visual Studio/Twilio/twilio-video-starter-kit/src/token-service/node_modules/twilio/lib/rest/preview/sync/service/syncMap.js"],"names":["Q","require","_","util","Page","SyncMapItemList","SyncMapPermissionList","deserialize","values","SyncMapList","SyncMapPage","SyncMapInstance","SyncMapContext","version","serviceSid","SyncMapListInstance","sid","get","_version","_solution","_uri","create","opts","callback","isFunction","deferred","defer","data","of","promise","uri","method","then","payload","resolve","bind","catch","error","reject","nodeify","each","isUndefined","Error","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","fetchNextPage","fn","page","instances","instance","nextPage","merge","list","allResources","resource","push","length","pageToken","pageNumber","params","getPage","targetUrl","_domain","twilio","request","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","uniqueName","unique_name","accountSid","account_sid","service_sid","url","links","revision","dateCreated","iso8601DateTime","date_created","dateUpdated","date_updated","createdBy","created_by","_context","undefined","Object","defineProperty","fetch","_proxy","remove","syncMapItems","syncMapPermissions","_syncMapItems","_syncMapPermissions","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar Page = require('../../../../base/Page');  /* jshint ignore:line */\nvar SyncMapItemList = require('./syncMap/syncMapItem').SyncMapItemList;\nvar SyncMapPermissionList = require(\n    './syncMap/syncMapPermission').SyncMapPermissionList;\nvar deserialize = require(\n    '../../../../base/deserialize');  /* jshint ignore:line */\nvar values = require('../../../../base/values');  /* jshint ignore:line */\n\nvar SyncMapList;\nvar SyncMapPage;\nvar SyncMapInstance;\nvar SyncMapContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the SyncMapList\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Preview.Sync.ServiceContext.SyncMapList\n *\n * @param {Twilio.Preview.Sync} version - Version of the resource\n * @param {string} serviceSid - The service_sid\n */\n/* jshint ignore:end */\nSyncMapList = function SyncMapList(version, serviceSid) {\n  /* jshint ignore:start */\n  /**\n   * @function syncMaps\n   * @memberof Twilio.Preview.Sync.ServiceContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Preview.Sync.ServiceContext.SyncMapContext}\n   */\n  /* jshint ignore:end */\n  function SyncMapListInstance(sid) {\n    return SyncMapListInstance.get(sid);\n  }\n\n  SyncMapListInstance._version = version;\n  // Path Solution\n  SyncMapListInstance._solution = {serviceSid: serviceSid};\n  SyncMapListInstance._uri = `/Services/${serviceSid}/Maps`;\n  /* jshint ignore:start */\n  /**\n   * create a SyncMapInstance\n   *\n   * @function create\n   * @memberof Twilio.Preview.Sync.ServiceContext.SyncMapList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.uniqueName] - The unique_name\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed SyncMapInstance\n   */\n  /* jshint ignore:end */\n  SyncMapListInstance.create = function create(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({'UniqueName': _.get(opts, 'uniqueName')});\n\n    var promise = this._version.create({uri: this._uri, method: 'POST', data: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new SyncMapInstance(\n        this._version,\n        payload,\n        this._solution.serviceSid,\n        this._solution.sid\n      ));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Streams SyncMapInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Preview.Sync.ServiceContext.SyncMapList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  SyncMapListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists SyncMapInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Preview.Sync.ServiceContext.SyncMapList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  SyncMapListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of SyncMapInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Preview.Sync.ServiceContext.SyncMapList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  SyncMapListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new SyncMapPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of SyncMapInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Preview.Sync.ServiceContext.SyncMapList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  SyncMapListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new SyncMapPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a sync_map\n   *\n   * @function get\n   * @memberof Twilio.Preview.Sync.ServiceContext.SyncMapList#\n   *\n   * @param {string} sid - The sid\n   *\n   * @returns {Twilio.Preview.Sync.ServiceContext.SyncMapContext}\n   */\n  /* jshint ignore:end */\n  SyncMapListInstance.get = function get(sid) {\n    return new SyncMapContext(this._version, this._solution.serviceSid, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Preview.Sync.ServiceContext.SyncMapList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  SyncMapListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  SyncMapListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return SyncMapListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the SyncMapPage\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Preview.Sync.ServiceContext.SyncMapPage\n *\n * @param {Sync} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {SyncMapSolution} solution - Path solution\n *\n * @returns SyncMapPage\n */\n/* jshint ignore:end */\nSyncMapPage = function SyncMapPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(SyncMapPage.prototype, Page.prototype);\nSyncMapPage.prototype.constructor = SyncMapPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of SyncMapInstance\n *\n * @function getInstance\n * @memberof Twilio.Preview.Sync.ServiceContext.SyncMapPage#\n *\n * @param {SyncMapPayload} payload - Payload response from the API\n *\n * @returns SyncMapInstance\n */\n/* jshint ignore:end */\nSyncMapPage.prototype.getInstance = function getInstance(payload) {\n  return new SyncMapInstance(this._version, payload, this._solution.serviceSid);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Preview.Sync.ServiceContext.SyncMapPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nSyncMapPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nSyncMapPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the SyncMapContext\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Preview.Sync.ServiceContext.SyncMapInstance\n *\n * @property {string} sid - The sid\n * @property {string} uniqueName - The unique_name\n * @property {string} accountSid - The account_sid\n * @property {string} serviceSid - The service_sid\n * @property {string} url - The url\n * @property {string} links - The links\n * @property {string} revision - The revision\n * @property {Date} dateCreated - The date_created\n * @property {Date} dateUpdated - The date_updated\n * @property {string} createdBy - The created_by\n *\n * @param {Sync} version - Version of the resource\n * @param {SyncMapPayload} payload - The instance payload\n * @param {sid} serviceSid - The service_sid\n * @param {sid_like} sid - The sid\n */\n/* jshint ignore:end */\nSyncMapInstance = function SyncMapInstance(version, payload, serviceSid, sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.sid = payload.sid; // jshint ignore:line\n  this.uniqueName = payload.unique_name; // jshint ignore:line\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.serviceSid = payload.service_sid; // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n  this.links = payload.links; // jshint ignore:line\n  this.revision = payload.revision; // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n  this.createdBy = payload.created_by; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {serviceSid: serviceSid, sid: sid || this.sid, };\n};\n\nObject.defineProperty(SyncMapInstance.prototype,\n  '_proxy', {\n    get: function() {\n      if (!this._context) {\n        this._context = new SyncMapContext(this._version, this._solution.serviceSid, this._solution.sid);\n      }\n\n      return this._context;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a SyncMapInstance\n *\n * @function fetch\n * @memberof Twilio.Preview.Sync.ServiceContext.SyncMapInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SyncMapInstance\n */\n/* jshint ignore:end */\nSyncMapInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * remove a SyncMapInstance\n *\n * @function remove\n * @memberof Twilio.Preview.Sync.ServiceContext.SyncMapInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SyncMapInstance\n */\n/* jshint ignore:end */\nSyncMapInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n\n/* jshint ignore:start */\n/**\n * Access the syncMapItems\n *\n * @function syncMapItems\n * @memberof Twilio.Preview.Sync.ServiceContext.SyncMapInstance#\n *\n * @returns {Twilio.Preview.Sync.ServiceContext.SyncMapContext.SyncMapItemList}\n */\n/* jshint ignore:end */\nSyncMapInstance.prototype.syncMapItems = function syncMapItems() {\n  return this._proxy.syncMapItems;\n};\n\n/* jshint ignore:start */\n/**\n * Access the syncMapPermissions\n *\n * @function syncMapPermissions\n * @memberof Twilio.Preview.Sync.ServiceContext.SyncMapInstance#\n *\n * @returns {Twilio.Preview.Sync.ServiceContext.SyncMapContext.SyncMapPermissionList}\n */\n/* jshint ignore:end */\nSyncMapInstance.prototype.syncMapPermissions = function syncMapPermissions() {\n  return this._proxy.syncMapPermissions;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Preview.Sync.ServiceContext.SyncMapInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nSyncMapInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nSyncMapInstance.prototype[util.inspect.custom] = function inspect(depth,\n    options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the SyncMapContext\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Preview.Sync.ServiceContext.SyncMapContext\n *\n * @property {Twilio.Preview.Sync.ServiceContext.SyncMapContext.SyncMapItemList} syncMapItems -\n *          syncMapItems resource\n * @property {Twilio.Preview.Sync.ServiceContext.SyncMapContext.SyncMapPermissionList} syncMapPermissions -\n *          syncMapPermissions resource\n *\n * @param {Sync} version - Version of the resource\n * @param {sid} serviceSid - The service_sid\n * @param {sid_like} sid - The sid\n */\n/* jshint ignore:end */\nSyncMapContext = function SyncMapContext(version, serviceSid, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {serviceSid: serviceSid, sid: sid, };\n  this._uri = `/Services/${serviceSid}/Maps/${sid}`;\n\n  // Dependents\n  this._syncMapItems = undefined;\n  this._syncMapPermissions = undefined;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a SyncMapInstance\n *\n * @function fetch\n * @memberof Twilio.Preview.Sync.ServiceContext.SyncMapContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SyncMapInstance\n */\n/* jshint ignore:end */\nSyncMapContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({uri: this._uri, method: 'GET'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new SyncMapInstance(\n      this._version,\n      payload,\n      this._solution.serviceSid,\n      this._solution.sid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * remove a SyncMapInstance\n *\n * @function remove\n * @memberof Twilio.Preview.Sync.ServiceContext.SyncMapContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed SyncMapInstance\n */\n/* jshint ignore:end */\nSyncMapContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.remove({uri: this._uri, method: 'DELETE'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\nObject.defineProperty(SyncMapContext.prototype,\n  'syncMapItems', {\n    get: function() {\n      if (!this._syncMapItems) {\n        this._syncMapItems = new SyncMapItemList(\n          this._version,\n          this._solution.serviceSid,\n          this._solution.sid\n        );\n      }\n      return this._syncMapItems;\n    }\n});\n\nObject.defineProperty(SyncMapContext.prototype,\n  'syncMapPermissions', {\n    get: function() {\n      if (!this._syncMapPermissions) {\n        this._syncMapPermissions = new SyncMapPermissionList(\n          this._version,\n          this._solution.serviceSid,\n          this._solution.sid\n        );\n      }\n      return this._syncMapPermissions;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Preview.Sync.ServiceContext.SyncMapContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nSyncMapContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nSyncMapContext.prototype[util.inspect.custom] = function inspect(depth, options)\n    {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  SyncMapList: SyncMapList,\n  SyncMapPage: SyncMapPage,\n  SyncMapInstance: SyncMapInstance,\n  SyncMapContext: SyncMapContext\n};\n"]},"metadata":{},"sourceType":"module"}