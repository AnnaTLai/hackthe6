{"ast":null,"code":"'use strict';\n/* jshint ignore:start */\n\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n\n/* jshint ignore:end */\n\nvar Q = require('q');\n/* jshint ignore:line */\n\n\nvar _ = require('lodash');\n/* jshint ignore:line */\n\n\nvar util = require('util');\n/* jshint ignore:line */\n\n\nvar Page = require('../../../../base/Page');\n/* jshint ignore:line */\n\n\nvar serialize = require('../../../../base/serialize');\n/* jshint ignore:line */\n\n\nvar values = require('../../../../base/values');\n/* jshint ignore:line */\n\n\nvar InstalledAddOnExtensionList;\nvar InstalledAddOnExtensionPage;\nvar InstalledAddOnExtensionInstance;\nvar InstalledAddOnExtensionContext;\n/* jshint ignore:start */\n\n/**\n * Initialize the InstalledAddOnExtensionList\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Preview.Marketplace.InstalledAddOnContext.InstalledAddOnExtensionList\n *\n * @param {Twilio.Preview.Marketplace} version - Version of the resource\n * @param {string} installedAddOnSid -\n *          The SID of the InstalledAddOn resource to which this extension applies\n */\n\n/* jshint ignore:end */\n\nInstalledAddOnExtensionList = function InstalledAddOnExtensionList(version, installedAddOnSid) {\n  /* jshint ignore:start */\n\n  /**\n   * @function extensions\n   * @memberof Twilio.Preview.Marketplace.InstalledAddOnContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Preview.Marketplace.InstalledAddOnContext.InstalledAddOnExtensionContext}\n   */\n\n  /* jshint ignore:end */\n  function InstalledAddOnExtensionListInstance(sid) {\n    return InstalledAddOnExtensionListInstance.get(sid);\n  }\n\n  InstalledAddOnExtensionListInstance._version = version; // Path Solution\n\n  InstalledAddOnExtensionListInstance._solution = {\n    installedAddOnSid: installedAddOnSid\n  };\n  InstalledAddOnExtensionListInstance._uri = `/InstalledAddOns/${installedAddOnSid}/Extensions`;\n  /* jshint ignore:start */\n\n  /**\n   * Streams InstalledAddOnExtensionInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Preview.Marketplace.InstalledAddOnContext.InstalledAddOnExtensionList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n\n  /* jshint ignore:end */\n\n  InstalledAddOnExtensionListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Lists InstalledAddOnExtensionInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Preview.Marketplace.InstalledAddOnContext.InstalledAddOnExtensionList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  InstalledAddOnExtensionListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single page of InstalledAddOnExtensionInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Preview.Marketplace.InstalledAddOnContext.InstalledAddOnExtensionList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  InstalledAddOnExtensionListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new InstalledAddOnExtensionPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single target page of InstalledAddOnExtensionInstance records from\n   * the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Preview.Marketplace.InstalledAddOnContext.InstalledAddOnExtensionList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  InstalledAddOnExtensionListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new InstalledAddOnExtensionPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Constructs a installed_add_on_extension\n   *\n   * @function get\n   * @memberof Twilio.Preview.Marketplace.InstalledAddOnContext.InstalledAddOnExtensionList#\n   *\n   * @param {string} sid - The SID of the InstalledAddOn Extension resource to fetch\n   *\n   * @returns {Twilio.Preview.Marketplace.InstalledAddOnContext.InstalledAddOnExtensionContext}\n   */\n\n  /* jshint ignore:end */\n\n\n  InstalledAddOnExtensionListInstance.get = function get(sid) {\n    return new InstalledAddOnExtensionContext(this._version, this._solution.installedAddOnSid, sid);\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Preview.Marketplace.InstalledAddOnContext.InstalledAddOnExtensionList#\n   *\n   * @returns Object\n   */\n\n  /* jshint ignore:end */\n\n\n  InstalledAddOnExtensionListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  InstalledAddOnExtensionListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return InstalledAddOnExtensionListInstance;\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the InstalledAddOnExtensionPage\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Preview.Marketplace.InstalledAddOnContext.InstalledAddOnExtensionPage\n *\n * @param {Marketplace} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {InstalledAddOnExtensionSolution} solution - Path solution\n *\n * @returns InstalledAddOnExtensionPage\n */\n\n/* jshint ignore:end */\n\n\nInstalledAddOnExtensionPage = function InstalledAddOnExtensionPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(InstalledAddOnExtensionPage.prototype, Page.prototype);\n\nInstalledAddOnExtensionPage.prototype.constructor = InstalledAddOnExtensionPage;\n/* jshint ignore:start */\n\n/**\n * Build an instance of InstalledAddOnExtensionInstance\n *\n * @function getInstance\n * @memberof Twilio.Preview.Marketplace.InstalledAddOnContext.InstalledAddOnExtensionPage#\n *\n * @param {InstalledAddOnExtensionPayload} payload - Payload response from the API\n *\n * @returns InstalledAddOnExtensionInstance\n */\n\n/* jshint ignore:end */\n\nInstalledAddOnExtensionPage.prototype.getInstance = function getInstance(payload) {\n  return new InstalledAddOnExtensionInstance(this._version, payload, this._solution.installedAddOnSid);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Preview.Marketplace.InstalledAddOnContext.InstalledAddOnExtensionPage#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nInstalledAddOnExtensionPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nInstalledAddOnExtensionPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the InstalledAddOnExtensionContext\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Preview.Marketplace.InstalledAddOnContext.InstalledAddOnExtensionInstance\n *\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} installedAddOnSid -\n *          The SID of the InstalledAddOn resource to which this extension applies\n * @property {string} friendlyName -\n *          The string that you assigned to describe the resource\n * @property {string} productName - The name of the Extension's Product\n * @property {string} uniqueName -\n *          An application-defined string that uniquely identifies the resource\n * @property {boolean} enabled - Whether the Extension will be invoked\n * @property {string} url - The absolute URL of the resource\n *\n * @param {Marketplace} version - Version of the resource\n * @param {InstalledAddOnExtensionPayload} payload - The instance payload\n * @param {sid} installedAddOnSid -\n *          The SID of the InstalledAddOn resource to which this extension applies\n * @param {sid} sid - The SID of the InstalledAddOn Extension resource to fetch\n */\n\n/* jshint ignore:end */\n\n\nInstalledAddOnExtensionInstance = function InstalledAddOnExtensionInstance(version, payload, installedAddOnSid, sid) {\n  this._version = version; // Marshaled Properties\n\n  this.sid = payload.sid; // jshint ignore:line\n\n  this.installedAddOnSid = payload.installed_add_on_sid; // jshint ignore:line\n\n  this.friendlyName = payload.friendly_name; // jshint ignore:line\n\n  this.productName = payload.product_name; // jshint ignore:line\n\n  this.uniqueName = payload.unique_name; // jshint ignore:line\n\n  this.enabled = payload.enabled; // jshint ignore:line\n\n  this.url = payload.url; // jshint ignore:line\n  // Context\n\n  this._context = undefined;\n  this._solution = {\n    installedAddOnSid: installedAddOnSid,\n    sid: sid || this.sid\n  };\n};\n\nObject.defineProperty(InstalledAddOnExtensionInstance.prototype, '_proxy', {\n  get: function () {\n    if (!this._context) {\n      this._context = new InstalledAddOnExtensionContext(this._version, this._solution.installedAddOnSid, this._solution.sid);\n    }\n\n    return this._context;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * fetch a InstalledAddOnExtensionInstance\n *\n * @function fetch\n * @memberof Twilio.Preview.Marketplace.InstalledAddOnContext.InstalledAddOnExtensionInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed InstalledAddOnExtensionInstance\n */\n\n/* jshint ignore:end */\n\nInstalledAddOnExtensionInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n/* jshint ignore:start */\n\n/**\n * update a InstalledAddOnExtensionInstance\n *\n * @function update\n * @memberof Twilio.Preview.Marketplace.InstalledAddOnContext.InstalledAddOnExtensionInstance#\n *\n * @param {object} opts - Options for request\n * @param {boolean} opts.enabled - Whether the Extension should be invoked\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed InstalledAddOnExtensionInstance\n */\n\n/* jshint ignore:end */\n\n\nInstalledAddOnExtensionInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Preview.Marketplace.InstalledAddOnContext.InstalledAddOnExtensionInstance#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nInstalledAddOnExtensionInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nInstalledAddOnExtensionInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the InstalledAddOnExtensionContext\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Preview.Marketplace.InstalledAddOnContext.InstalledAddOnExtensionContext\n *\n * @param {Marketplace} version - Version of the resource\n * @param {sid} installedAddOnSid -\n *          The SID of the InstalledAddOn resource with the extension to fetch\n * @param {sid} sid - The SID of the InstalledAddOn Extension resource to fetch\n */\n\n/* jshint ignore:end */\n\n\nInstalledAddOnExtensionContext = function InstalledAddOnExtensionContext(version, installedAddOnSid, sid) {\n  this._version = version; // Path Solution\n\n  this._solution = {\n    installedAddOnSid: installedAddOnSid,\n    sid: sid\n  };\n  this._uri = `/InstalledAddOns/${installedAddOnSid}/Extensions/${sid}`;\n};\n/* jshint ignore:start */\n\n/**\n * fetch a InstalledAddOnExtensionInstance\n *\n * @function fetch\n * @memberof Twilio.Preview.Marketplace.InstalledAddOnContext.InstalledAddOnExtensionContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed InstalledAddOnExtensionInstance\n */\n\n/* jshint ignore:end */\n\n\nInstalledAddOnExtensionContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new InstalledAddOnExtensionInstance(this._version, payload, this._solution.installedAddOnSid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * update a InstalledAddOnExtensionInstance\n *\n * @function update\n * @memberof Twilio.Preview.Marketplace.InstalledAddOnContext.InstalledAddOnExtensionContext#\n *\n * @param {object} opts - Options for request\n * @param {boolean} opts.enabled - Whether the Extension should be invoked\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed InstalledAddOnExtensionInstance\n */\n\n/* jshint ignore:end */\n\n\nInstalledAddOnExtensionContext.prototype.update = function update(opts, callback) {\n  if (_.isUndefined(opts)) {\n    throw new Error('Required parameter \"opts\" missing.');\n  }\n\n  if (_.isUndefined(opts.enabled)) {\n    throw new Error('Required parameter \"opts.enabled\" missing.');\n  }\n\n  var deferred = Q.defer();\n  var data = values.of({\n    'Enabled': serialize.bool(_.get(opts, 'enabled'))\n  });\n\n  var promise = this._version.update({\n    uri: this._uri,\n    method: 'POST',\n    data: data\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new InstalledAddOnExtensionInstance(this._version, payload, this._solution.installedAddOnSid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Preview.Marketplace.InstalledAddOnContext.InstalledAddOnExtensionContext#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nInstalledAddOnExtensionContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nInstalledAddOnExtensionContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  InstalledAddOnExtensionList: InstalledAddOnExtensionList,\n  InstalledAddOnExtensionPage: InstalledAddOnExtensionPage,\n  InstalledAddOnExtensionInstance: InstalledAddOnExtensionInstance,\n  InstalledAddOnExtensionContext: InstalledAddOnExtensionContext\n};","map":{"version":3,"sources":["/Users/tony_niu/Visual Studio/Twilio/twilio-video-starter-kit/node_modules/twilio/lib/rest/preview/marketplace/installedAddOn/installedAddOnExtension.js"],"names":["Q","require","_","util","Page","serialize","values","InstalledAddOnExtensionList","InstalledAddOnExtensionPage","InstalledAddOnExtensionInstance","InstalledAddOnExtensionContext","version","installedAddOnSid","InstalledAddOnExtensionListInstance","sid","get","_version","_solution","_uri","each","opts","callback","isFunction","isUndefined","Error","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","error","fetchNextPage","fn","promise","then","page","instances","instance","bind","nextPage","catch","merge","list","deferred","defer","allResources","resource","push","length","resolve","reject","nodeify","data","of","pageToken","pageNumber","uri","method","params","payload","getPage","targetUrl","_domain","twilio","request","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","installed_add_on_sid","friendlyName","friendly_name","productName","product_name","uniqueName","unique_name","enabled","url","_context","undefined","Object","defineProperty","fetch","_proxy","update","bool","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar Page = require('../../../../base/Page');  /* jshint ignore:line */\nvar serialize = require('../../../../base/serialize');  /* jshint ignore:line */\nvar values = require('../../../../base/values');  /* jshint ignore:line */\n\nvar InstalledAddOnExtensionList;\nvar InstalledAddOnExtensionPage;\nvar InstalledAddOnExtensionInstance;\nvar InstalledAddOnExtensionContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the InstalledAddOnExtensionList\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Preview.Marketplace.InstalledAddOnContext.InstalledAddOnExtensionList\n *\n * @param {Twilio.Preview.Marketplace} version - Version of the resource\n * @param {string} installedAddOnSid -\n *          The SID of the InstalledAddOn resource to which this extension applies\n */\n/* jshint ignore:end */\nInstalledAddOnExtensionList = function InstalledAddOnExtensionList(version,\n    installedAddOnSid) {\n  /* jshint ignore:start */\n  /**\n   * @function extensions\n   * @memberof Twilio.Preview.Marketplace.InstalledAddOnContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Preview.Marketplace.InstalledAddOnContext.InstalledAddOnExtensionContext}\n   */\n  /* jshint ignore:end */\n  function InstalledAddOnExtensionListInstance(sid) {\n    return InstalledAddOnExtensionListInstance.get(sid);\n  }\n\n  InstalledAddOnExtensionListInstance._version = version;\n  // Path Solution\n  InstalledAddOnExtensionListInstance._solution = {installedAddOnSid: installedAddOnSid};\n  InstalledAddOnExtensionListInstance._uri = `/InstalledAddOns/${installedAddOnSid}/Extensions`;\n  /* jshint ignore:start */\n  /**\n   * Streams InstalledAddOnExtensionInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Preview.Marketplace.InstalledAddOnContext.InstalledAddOnExtensionList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  InstalledAddOnExtensionListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists InstalledAddOnExtensionInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Preview.Marketplace.InstalledAddOnContext.InstalledAddOnExtensionList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  InstalledAddOnExtensionListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of InstalledAddOnExtensionInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Preview.Marketplace.InstalledAddOnContext.InstalledAddOnExtensionList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  InstalledAddOnExtensionListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new InstalledAddOnExtensionPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of InstalledAddOnExtensionInstance records from\n   * the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Preview.Marketplace.InstalledAddOnContext.InstalledAddOnExtensionList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  InstalledAddOnExtensionListInstance.getPage = function getPage(targetUrl,\n      callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new InstalledAddOnExtensionPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a installed_add_on_extension\n   *\n   * @function get\n   * @memberof Twilio.Preview.Marketplace.InstalledAddOnContext.InstalledAddOnExtensionList#\n   *\n   * @param {string} sid - The SID of the InstalledAddOn Extension resource to fetch\n   *\n   * @returns {Twilio.Preview.Marketplace.InstalledAddOnContext.InstalledAddOnExtensionContext}\n   */\n  /* jshint ignore:end */\n  InstalledAddOnExtensionListInstance.get = function get(sid) {\n    return new InstalledAddOnExtensionContext(this._version, this._solution.installedAddOnSid, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Preview.Marketplace.InstalledAddOnContext.InstalledAddOnExtensionList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  InstalledAddOnExtensionListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  InstalledAddOnExtensionListInstance[util.inspect.custom] = function\n      inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return InstalledAddOnExtensionListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the InstalledAddOnExtensionPage\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Preview.Marketplace.InstalledAddOnContext.InstalledAddOnExtensionPage\n *\n * @param {Marketplace} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {InstalledAddOnExtensionSolution} solution - Path solution\n *\n * @returns InstalledAddOnExtensionPage\n */\n/* jshint ignore:end */\nInstalledAddOnExtensionPage = function InstalledAddOnExtensionPage(version,\n    response, solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(InstalledAddOnExtensionPage.prototype, Page.prototype);\nInstalledAddOnExtensionPage.prototype.constructor = InstalledAddOnExtensionPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of InstalledAddOnExtensionInstance\n *\n * @function getInstance\n * @memberof Twilio.Preview.Marketplace.InstalledAddOnContext.InstalledAddOnExtensionPage#\n *\n * @param {InstalledAddOnExtensionPayload} payload - Payload response from the API\n *\n * @returns InstalledAddOnExtensionInstance\n */\n/* jshint ignore:end */\nInstalledAddOnExtensionPage.prototype.getInstance = function\n    getInstance(payload) {\n  return new InstalledAddOnExtensionInstance(\n    this._version,\n    payload,\n    this._solution.installedAddOnSid\n  );\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Preview.Marketplace.InstalledAddOnContext.InstalledAddOnExtensionPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nInstalledAddOnExtensionPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nInstalledAddOnExtensionPage.prototype[util.inspect.custom] = function\n    inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the InstalledAddOnExtensionContext\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Preview.Marketplace.InstalledAddOnContext.InstalledAddOnExtensionInstance\n *\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} installedAddOnSid -\n *          The SID of the InstalledAddOn resource to which this extension applies\n * @property {string} friendlyName -\n *          The string that you assigned to describe the resource\n * @property {string} productName - The name of the Extension's Product\n * @property {string} uniqueName -\n *          An application-defined string that uniquely identifies the resource\n * @property {boolean} enabled - Whether the Extension will be invoked\n * @property {string} url - The absolute URL of the resource\n *\n * @param {Marketplace} version - Version of the resource\n * @param {InstalledAddOnExtensionPayload} payload - The instance payload\n * @param {sid} installedAddOnSid -\n *          The SID of the InstalledAddOn resource to which this extension applies\n * @param {sid} sid - The SID of the InstalledAddOn Extension resource to fetch\n */\n/* jshint ignore:end */\nInstalledAddOnExtensionInstance = function\n    InstalledAddOnExtensionInstance(version, payload, installedAddOnSid, sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.sid = payload.sid; // jshint ignore:line\n  this.installedAddOnSid = payload.installed_add_on_sid; // jshint ignore:line\n  this.friendlyName = payload.friendly_name; // jshint ignore:line\n  this.productName = payload.product_name; // jshint ignore:line\n  this.uniqueName = payload.unique_name; // jshint ignore:line\n  this.enabled = payload.enabled; // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {installedAddOnSid: installedAddOnSid, sid: sid || this.sid, };\n};\n\nObject.defineProperty(InstalledAddOnExtensionInstance.prototype,\n  '_proxy', {\n    get: function() {\n      if (!this._context) {\n        this._context = new InstalledAddOnExtensionContext(\n          this._version,\n          this._solution.installedAddOnSid,\n          this._solution.sid\n        );\n      }\n\n      return this._context;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a InstalledAddOnExtensionInstance\n *\n * @function fetch\n * @memberof Twilio.Preview.Marketplace.InstalledAddOnContext.InstalledAddOnExtensionInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed InstalledAddOnExtensionInstance\n */\n/* jshint ignore:end */\nInstalledAddOnExtensionInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * update a InstalledAddOnExtensionInstance\n *\n * @function update\n * @memberof Twilio.Preview.Marketplace.InstalledAddOnContext.InstalledAddOnExtensionInstance#\n *\n * @param {object} opts - Options for request\n * @param {boolean} opts.enabled - Whether the Extension should be invoked\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed InstalledAddOnExtensionInstance\n */\n/* jshint ignore:end */\nInstalledAddOnExtensionInstance.prototype.update = function update(opts,\n    callback) {\n  return this._proxy.update(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Preview.Marketplace.InstalledAddOnContext.InstalledAddOnExtensionInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nInstalledAddOnExtensionInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nInstalledAddOnExtensionInstance.prototype[util.inspect.custom] = function\n    inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the InstalledAddOnExtensionContext\n *\n * PLEASE NOTE that this class contains preview products that are subject to\n * change. Use them with caution. If you currently do not have developer preview\n * access, please contact help@twilio.com.\n *\n * @constructor Twilio.Preview.Marketplace.InstalledAddOnContext.InstalledAddOnExtensionContext\n *\n * @param {Marketplace} version - Version of the resource\n * @param {sid} installedAddOnSid -\n *          The SID of the InstalledAddOn resource with the extension to fetch\n * @param {sid} sid - The SID of the InstalledAddOn Extension resource to fetch\n */\n/* jshint ignore:end */\nInstalledAddOnExtensionContext = function\n    InstalledAddOnExtensionContext(version, installedAddOnSid, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {installedAddOnSid: installedAddOnSid, sid: sid, };\n  this._uri = `/InstalledAddOns/${installedAddOnSid}/Extensions/${sid}`;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a InstalledAddOnExtensionInstance\n *\n * @function fetch\n * @memberof Twilio.Preview.Marketplace.InstalledAddOnContext.InstalledAddOnExtensionContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed InstalledAddOnExtensionInstance\n */\n/* jshint ignore:end */\nInstalledAddOnExtensionContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({uri: this._uri, method: 'GET'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new InstalledAddOnExtensionInstance(\n      this._version,\n      payload,\n      this._solution.installedAddOnSid,\n      this._solution.sid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * update a InstalledAddOnExtensionInstance\n *\n * @function update\n * @memberof Twilio.Preview.Marketplace.InstalledAddOnContext.InstalledAddOnExtensionContext#\n *\n * @param {object} opts - Options for request\n * @param {boolean} opts.enabled - Whether the Extension should be invoked\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed InstalledAddOnExtensionInstance\n */\n/* jshint ignore:end */\nInstalledAddOnExtensionContext.prototype.update = function update(opts,\n    callback) {\n  if (_.isUndefined(opts)) {\n    throw new Error('Required parameter \"opts\" missing.');\n  }\n  if (_.isUndefined(opts.enabled)) {\n    throw new Error('Required parameter \"opts.enabled\" missing.');\n  }\n\n  var deferred = Q.defer();\n  var data = values.of({'Enabled': serialize.bool(_.get(opts, 'enabled'))});\n\n  var promise = this._version.update({uri: this._uri, method: 'POST', data: data});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new InstalledAddOnExtensionInstance(\n      this._version,\n      payload,\n      this._solution.installedAddOnSid,\n      this._solution.sid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Preview.Marketplace.InstalledAddOnContext.InstalledAddOnExtensionContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nInstalledAddOnExtensionContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nInstalledAddOnExtensionContext.prototype[util.inspect.custom] = function\n    inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  InstalledAddOnExtensionList: InstalledAddOnExtensionList,\n  InstalledAddOnExtensionPage: InstalledAddOnExtensionPage,\n  InstalledAddOnExtensionInstance: InstalledAddOnExtensionInstance,\n  InstalledAddOnExtensionContext: InstalledAddOnExtensionContext\n};\n"]},"metadata":{},"sourceType":"script"}