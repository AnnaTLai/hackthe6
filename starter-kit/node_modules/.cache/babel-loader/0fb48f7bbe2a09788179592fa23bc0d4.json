{"ast":null,"code":"'use strict';\n/* jshint ignore:start */\n\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n\n/* jshint ignore:end */\n\nvar Q = require('q');\n/* jshint ignore:line */\n\n\nvar _ = require('lodash');\n/* jshint ignore:line */\n\n\nvar util = require('util');\n/* jshint ignore:line */\n\n\nvar Page = require('../../../../base/Page');\n/* jshint ignore:line */\n\n\nvar ReservationList = require('./worker/reservation').ReservationList;\n\nvar WorkerChannelList = require('./worker/workerChannel').WorkerChannelList;\n\nvar WorkerStatisticsList = require('./worker/workerStatistics').WorkerStatisticsList;\n\nvar WorkersCumulativeStatisticsList = require('./worker/workersCumulativeStatistics').WorkersCumulativeStatisticsList;\n\nvar WorkersRealTimeStatisticsList = require('./worker/workersRealTimeStatistics').WorkersRealTimeStatisticsList;\n\nvar WorkersStatisticsList = require('./worker/workersStatistics').WorkersStatisticsList;\n\nvar deserialize = require('../../../../base/deserialize');\n/* jshint ignore:line */\n\n\nvar serialize = require('../../../../base/serialize');\n/* jshint ignore:line */\n\n\nvar values = require('../../../../base/values');\n/* jshint ignore:line */\n\n\nvar WorkerList;\nvar WorkerPage;\nvar WorkerInstance;\nvar WorkerContext;\n/* jshint ignore:start */\n\n/**\n * Initialize the WorkerList\n *\n * @constructor Twilio.Taskrouter.V1.WorkspaceContext.WorkerList\n *\n * @param {Twilio.Taskrouter.V1} version - Version of the resource\n * @param {string} workspaceSid - The SID of the Workspace that contains the Worker\n */\n\n/* jshint ignore:end */\n\nWorkerList = function WorkerList(version, workspaceSid) {\n  /* jshint ignore:start */\n\n  /**\n   * @function workers\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext}\n   */\n\n  /* jshint ignore:end */\n  function WorkerListInstance(sid) {\n    return WorkerListInstance.get(sid);\n  }\n\n  WorkerListInstance._version = version; // Path Solution\n\n  WorkerListInstance._solution = {\n    workspaceSid: workspaceSid\n  };\n  WorkerListInstance._uri = `/Workspaces/${workspaceSid}/Workers`; // Components\n\n  WorkerListInstance._statistics = undefined;\n  /* jshint ignore:start */\n\n  /**\n   * Streams WorkerInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.activityName] -\n   *          The activity_name of the Worker resources to read\n   * @param {string} [opts.activitySid] -\n   *          The activity_sid of the Worker resources to read\n   * @param {string} [opts.available] -\n   *          Whether to return Worker resources that are available or unavailable\n   * @param {string} [opts.friendlyName] -\n   *          The friendly_name of the Worker resources to read\n   * @param {string} [opts.targetWorkersExpression] -\n   *          Filter by Workers that would match an expression on a TaskQueue\n   * @param {string} [opts.taskQueueName] -\n   *          The friendly_name of the TaskQueue that the Workers to read are eligible for\n   * @param {string} [opts.taskQueueSid] -\n   *          The SID of the TaskQueue that the Workers to read are eligible for\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n\n  /* jshint ignore:end */\n\n  WorkerListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Lists WorkerInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.activityName] -\n   *          The activity_name of the Worker resources to read\n   * @param {string} [opts.activitySid] -\n   *          The activity_sid of the Worker resources to read\n   * @param {string} [opts.available] -\n   *          Whether to return Worker resources that are available or unavailable\n   * @param {string} [opts.friendlyName] -\n   *          The friendly_name of the Worker resources to read\n   * @param {string} [opts.targetWorkersExpression] -\n   *          Filter by Workers that would match an expression on a TaskQueue\n   * @param {string} [opts.taskQueueName] -\n   *          The friendly_name of the TaskQueue that the Workers to read are eligible for\n   * @param {string} [opts.taskQueueSid] -\n   *          The SID of the TaskQueue that the Workers to read are eligible for\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  WorkerListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single page of WorkerInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.activityName] -\n   *          The activity_name of the Worker resources to read\n   * @param {string} [opts.activitySid] -\n   *          The activity_sid of the Worker resources to read\n   * @param {string} [opts.available] -\n   *          Whether to return Worker resources that are available or unavailable\n   * @param {string} [opts.friendlyName] -\n   *          The friendly_name of the Worker resources to read\n   * @param {string} [opts.targetWorkersExpression] -\n   *          Filter by Workers that would match an expression on a TaskQueue\n   * @param {string} [opts.taskQueueName] -\n   *          The friendly_name of the TaskQueue that the Workers to read are eligible for\n   * @param {string} [opts.taskQueueSid] -\n   *          The SID of the TaskQueue that the Workers to read are eligible for\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  WorkerListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'ActivityName': _.get(opts, 'activityName'),\n      'ActivitySid': _.get(opts, 'activitySid'),\n      'Available': _.get(opts, 'available'),\n      'FriendlyName': _.get(opts, 'friendlyName'),\n      'TargetWorkersExpression': _.get(opts, 'targetWorkersExpression'),\n      'TaskQueueName': _.get(opts, 'taskQueueName'),\n      'TaskQueueSid': _.get(opts, 'taskQueueSid'),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new WorkerPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single target page of WorkerInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  WorkerListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new WorkerPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * create a WorkerInstance\n   *\n   * @function create\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.friendlyName - A string to describe the resource\n   * @param {string} [opts.activitySid] -\n   *          The SID of a valid Activity that describes the new Worker's initial state\n   * @param {string} [opts.attributes] -\n   *          A valid JSON string that describes the new Worker\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed WorkerInstance\n   */\n\n  /* jshint ignore:end */\n\n\n  WorkerListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n\n    if (_.isUndefined(opts.friendlyName)) {\n      throw new Error('Required parameter \"opts.friendlyName\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'FriendlyName': _.get(opts, 'friendlyName'),\n      'ActivitySid': _.get(opts, 'activitySid'),\n      'Attributes': _.get(opts, 'attributes')\n    });\n\n    var promise = this._version.create({\n      uri: this._uri,\n      method: 'POST',\n      data: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new WorkerInstance(this._version, payload, this._solution.workspaceSid, this._solution.sid));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Constructs a worker\n   *\n   * @function get\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerList#\n   *\n   * @param {string} sid - The SID of the resource to fetch\n   *\n   * @returns {Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext}\n   */\n\n  /* jshint ignore:end */\n\n\n  WorkerListInstance.get = function get(sid) {\n    return new WorkerContext(this._version, this._solution.workspaceSid, sid);\n  };\n\n  Object.defineProperty(WorkerListInstance, 'statistics', {\n    get: function statistics() {\n      if (!this._statistics) {\n        this._statistics = new WorkersStatisticsList(this._version, this._solution.workspaceSid);\n      }\n\n      return this._statistics;\n    }\n  });\n  /* jshint ignore:start */\n\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerList#\n   *\n   * @returns Object\n   */\n\n  /* jshint ignore:end */\n\n  WorkerListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  WorkerListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return WorkerListInstance;\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the WorkerPage\n *\n * @constructor Twilio.Taskrouter.V1.WorkspaceContext.WorkerPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {WorkerSolution} solution - Path solution\n *\n * @returns WorkerPage\n */\n\n/* jshint ignore:end */\n\n\nWorkerPage = function WorkerPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(WorkerPage.prototype, Page.prototype);\n\nWorkerPage.prototype.constructor = WorkerPage;\n/* jshint ignore:start */\n\n/**\n * Build an instance of WorkerInstance\n *\n * @function getInstance\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerPage#\n *\n * @param {WorkerPayload} payload - Payload response from the API\n *\n * @returns WorkerInstance\n */\n\n/* jshint ignore:end */\n\nWorkerPage.prototype.getInstance = function getInstance(payload) {\n  return new WorkerInstance(this._version, payload, this._solution.workspaceSid);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerPage#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nWorkerPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nWorkerPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the WorkerContext\n *\n * @constructor Twilio.Taskrouter.V1.WorkspaceContext.WorkerInstance\n *\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {string} activityName -\n *          The friendly_name of the Worker's current Activity\n * @property {string} activitySid - The SID of the Worker's current Activity\n * @property {string} attributes - The JSON string that describes the Worker\n * @property {boolean} available - Whether the Worker is available to perform tasks\n * @property {Date} dateCreated -\n *          The ISO 8601 date and time in GMT when the resource was created\n * @property {Date} dateStatusChanged -\n *          The date and time in GMT of the last change to the Worker's activity\n * @property {Date} dateUpdated -\n *          The ISO 8601 date and time in GMT when the resource was last updated\n * @property {string} friendlyName -\n *          The string that you assigned to describe the resource\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} workspaceSid -\n *          The SID of the Workspace that contains the Worker\n * @property {string} url - The absolute URL of the Worker resource\n * @property {string} links - The URLs of related resources\n *\n * @param {V1} version - Version of the resource\n * @param {WorkerPayload} payload - The instance payload\n * @param {sid} workspaceSid - The SID of the Workspace that contains the Worker\n * @param {sid} sid - The SID of the resource to fetch\n */\n\n/* jshint ignore:end */\n\n\nWorkerInstance = function WorkerInstance(version, payload, workspaceSid, sid) {\n  this._version = version; // Marshaled Properties\n\n  this.accountSid = payload.account_sid; // jshint ignore:line\n\n  this.activityName = payload.activity_name; // jshint ignore:line\n\n  this.activitySid = payload.activity_sid; // jshint ignore:line\n\n  this.attributes = payload.attributes; // jshint ignore:line\n\n  this.available = payload.available; // jshint ignore:line\n\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n\n  this.dateStatusChanged = deserialize.iso8601DateTime(payload.date_status_changed); // jshint ignore:line\n\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n\n  this.friendlyName = payload.friendly_name; // jshint ignore:line\n\n  this.sid = payload.sid; // jshint ignore:line\n\n  this.workspaceSid = payload.workspace_sid; // jshint ignore:line\n\n  this.url = payload.url; // jshint ignore:line\n\n  this.links = payload.links; // jshint ignore:line\n  // Context\n\n  this._context = undefined;\n  this._solution = {\n    workspaceSid: workspaceSid,\n    sid: sid || this.sid\n  };\n};\n\nObject.defineProperty(WorkerInstance.prototype, '_proxy', {\n  get: function () {\n    if (!this._context) {\n      this._context = new WorkerContext(this._version, this._solution.workspaceSid, this._solution.sid);\n    }\n\n    return this._context;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * fetch a WorkerInstance\n *\n * @function fetch\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed WorkerInstance\n */\n\n/* jshint ignore:end */\n\nWorkerInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n/* jshint ignore:start */\n\n/**\n * update a WorkerInstance\n *\n * @function update\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.activitySid] -\n *          The SID of the Activity that describes the Worker's initial state\n * @param {string} [opts.attributes] - The JSON string that describes the Worker\n * @param {string} [opts.friendlyName] - A string to describe the Worker\n * @param {boolean} [opts.rejectPendingReservations] -\n *          Whether to reject pending reservations\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed WorkerInstance\n */\n\n/* jshint ignore:end */\n\n\nWorkerInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n/* jshint ignore:start */\n\n/**\n * remove a WorkerInstance\n *\n * @function remove\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed WorkerInstance\n */\n\n/* jshint ignore:end */\n\n\nWorkerInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n/* jshint ignore:start */\n\n/**\n * Access the realTimeStatistics\n *\n * @function realTimeStatistics\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerInstance#\n *\n * @returns {Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.WorkersRealTimeStatisticsList}\n */\n\n/* jshint ignore:end */\n\n\nWorkerInstance.prototype.realTimeStatistics = function realTimeStatistics() {\n  return this._proxy.realTimeStatistics;\n};\n/* jshint ignore:start */\n\n/**\n * Access the cumulativeStatistics\n *\n * @function cumulativeStatistics\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerInstance#\n *\n * @returns {Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.WorkersCumulativeStatisticsList}\n */\n\n/* jshint ignore:end */\n\n\nWorkerInstance.prototype.cumulativeStatistics = function cumulativeStatistics() {\n  return this._proxy.cumulativeStatistics;\n};\n/* jshint ignore:start */\n\n/**\n * Access the statistics\n *\n * @function statistics\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerInstance#\n *\n * @returns {Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.WorkerStatisticsList}\n */\n\n/* jshint ignore:end */\n\n\nWorkerInstance.prototype.statistics = function statistics() {\n  return this._proxy.statistics;\n};\n/* jshint ignore:start */\n\n/**\n * Access the reservations\n *\n * @function reservations\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerInstance#\n *\n * @returns {Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.ReservationList}\n */\n\n/* jshint ignore:end */\n\n\nWorkerInstance.prototype.reservations = function reservations() {\n  return this._proxy.reservations;\n};\n/* jshint ignore:start */\n\n/**\n * Access the workerChannels\n *\n * @function workerChannels\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerInstance#\n *\n * @returns {Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.WorkerChannelList}\n */\n\n/* jshint ignore:end */\n\n\nWorkerInstance.prototype.workerChannels = function workerChannels() {\n  return this._proxy.workerChannels;\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerInstance#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nWorkerInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nWorkerInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the WorkerContext\n *\n * @constructor Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext\n *\n * @property {Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.WorkersRealTimeStatisticsList} realTimeStatistics -\n *          realTimeStatistics resource\n * @property {Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.WorkersCumulativeStatisticsList} cumulativeStatistics -\n *          cumulativeStatistics resource\n * @property {Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.WorkerStatisticsList} statistics -\n *          statistics resource\n * @property {Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.ReservationList} reservations -\n *          reservations resource\n * @property {Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.WorkerChannelList} workerChannels -\n *          workerChannels resource\n *\n * @param {V1} version - Version of the resource\n * @param {sid} workspaceSid - The SID of the Workspace with the Worker to fetch\n * @param {sid} sid - The SID of the resource to fetch\n */\n\n/* jshint ignore:end */\n\n\nWorkerContext = function WorkerContext(version, workspaceSid, sid) {\n  this._version = version; // Path Solution\n\n  this._solution = {\n    workspaceSid: workspaceSid,\n    sid: sid\n  };\n  this._uri = `/Workspaces/${workspaceSid}/Workers/${sid}`; // Dependents\n\n  this._realTimeStatistics = undefined;\n  this._cumulativeStatistics = undefined;\n  this._statistics = undefined;\n  this._reservations = undefined;\n  this._workerChannels = undefined;\n};\n/* jshint ignore:start */\n\n/**\n * fetch a WorkerInstance\n *\n * @function fetch\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed WorkerInstance\n */\n\n/* jshint ignore:end */\n\n\nWorkerContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new WorkerInstance(this._version, payload, this._solution.workspaceSid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * update a WorkerInstance\n *\n * @function update\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.activitySid] -\n *          The SID of the Activity that describes the Worker's initial state\n * @param {string} [opts.attributes] - The JSON string that describes the Worker\n * @param {string} [opts.friendlyName] - A string to describe the Worker\n * @param {boolean} [opts.rejectPendingReservations] -\n *          Whether to reject pending reservations\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed WorkerInstance\n */\n\n/* jshint ignore:end */\n\n\nWorkerContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n\n  opts = opts || {};\n  var deferred = Q.defer();\n  var data = values.of({\n    'ActivitySid': _.get(opts, 'activitySid'),\n    'Attributes': _.get(opts, 'attributes'),\n    'FriendlyName': _.get(opts, 'friendlyName'),\n    'RejectPendingReservations': serialize.bool(_.get(opts, 'rejectPendingReservations'))\n  });\n\n  var promise = this._version.update({\n    uri: this._uri,\n    method: 'POST',\n    data: data\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new WorkerInstance(this._version, payload, this._solution.workspaceSid, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * remove a WorkerInstance\n *\n * @function remove\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed WorkerInstance\n */\n\n/* jshint ignore:end */\n\n\nWorkerContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.remove({\n    uri: this._uri,\n    method: 'DELETE'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\nObject.defineProperty(WorkerContext.prototype, 'realTimeStatistics', {\n  get: function () {\n    if (!this._realTimeStatistics) {\n      this._realTimeStatistics = new WorkersRealTimeStatisticsList(this._version, this._solution.workspaceSid);\n    }\n\n    return this._realTimeStatistics;\n  }\n});\nObject.defineProperty(WorkerContext.prototype, 'cumulativeStatistics', {\n  get: function () {\n    if (!this._cumulativeStatistics) {\n      this._cumulativeStatistics = new WorkersCumulativeStatisticsList(this._version, this._solution.workspaceSid);\n    }\n\n    return this._cumulativeStatistics;\n  }\n});\nObject.defineProperty(WorkerContext.prototype, 'statistics', {\n  get: function () {\n    if (!this._statistics) {\n      this._statistics = new WorkerStatisticsList(this._version, this._solution.workspaceSid, this._solution.sid);\n    }\n\n    return this._statistics;\n  }\n});\nObject.defineProperty(WorkerContext.prototype, 'reservations', {\n  get: function () {\n    if (!this._reservations) {\n      this._reservations = new ReservationList(this._version, this._solution.workspaceSid, this._solution.sid);\n    }\n\n    return this._reservations;\n  }\n});\nObject.defineProperty(WorkerContext.prototype, 'workerChannels', {\n  get: function () {\n    if (!this._workerChannels) {\n      this._workerChannels = new WorkerChannelList(this._version, this._solution.workspaceSid, this._solution.sid);\n    }\n\n    return this._workerChannels;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\nWorkerContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nWorkerContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  WorkerList: WorkerList,\n  WorkerPage: WorkerPage,\n  WorkerInstance: WorkerInstance,\n  WorkerContext: WorkerContext\n};","map":{"version":3,"sources":["/Users/tony_niu/Visual Studio/Twilio/twilio-video-starter-kit/src/token-service/node_modules/twilio/lib/rest/taskrouter/v1/workspace/worker.js"],"names":["Q","require","_","util","Page","ReservationList","WorkerChannelList","WorkerStatisticsList","WorkersCumulativeStatisticsList","WorkersRealTimeStatisticsList","WorkersStatisticsList","deserialize","serialize","values","WorkerList","WorkerPage","WorkerInstance","WorkerContext","version","workspaceSid","WorkerListInstance","sid","get","_version","_solution","_uri","_statistics","undefined","each","opts","callback","isFunction","isUndefined","Error","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","error","fetchNextPage","fn","promise","then","page","instances","instance","bind","nextPage","catch","merge","list","deferred","defer","allResources","resource","push","length","resolve","reject","nodeify","data","of","pageToken","pageNumber","uri","method","params","payload","getPage","targetUrl","_domain","twilio","request","create","friendlyName","Object","defineProperty","statistics","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","accountSid","account_sid","activityName","activity_name","activitySid","activity_sid","attributes","available","dateCreated","iso8601DateTime","date_created","dateStatusChanged","date_status_changed","dateUpdated","date_updated","friendly_name","workspace_sid","url","links","_context","fetch","_proxy","update","remove","realTimeStatistics","cumulativeStatistics","reservations","workerChannels","_realTimeStatistics","_cumulativeStatistics","_reservations","_workerChannels","bool","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar Page = require('../../../../base/Page');  /* jshint ignore:line */\nvar ReservationList = require('./worker/reservation').ReservationList;\nvar WorkerChannelList = require('./worker/workerChannel').WorkerChannelList;\nvar WorkerStatisticsList = require(\n    './worker/workerStatistics').WorkerStatisticsList;\nvar WorkersCumulativeStatisticsList = require(\n    './worker/workersCumulativeStatistics').WorkersCumulativeStatisticsList;\nvar WorkersRealTimeStatisticsList = require(\n    './worker/workersRealTimeStatistics').WorkersRealTimeStatisticsList;\nvar WorkersStatisticsList = require(\n    './worker/workersStatistics').WorkersStatisticsList;\nvar deserialize = require(\n    '../../../../base/deserialize');  /* jshint ignore:line */\nvar serialize = require('../../../../base/serialize');  /* jshint ignore:line */\nvar values = require('../../../../base/values');  /* jshint ignore:line */\n\nvar WorkerList;\nvar WorkerPage;\nvar WorkerInstance;\nvar WorkerContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the WorkerList\n *\n * @constructor Twilio.Taskrouter.V1.WorkspaceContext.WorkerList\n *\n * @param {Twilio.Taskrouter.V1} version - Version of the resource\n * @param {string} workspaceSid - The SID of the Workspace that contains the Worker\n */\n/* jshint ignore:end */\nWorkerList = function WorkerList(version, workspaceSid) {\n  /* jshint ignore:start */\n  /**\n   * @function workers\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext}\n   */\n  /* jshint ignore:end */\n  function WorkerListInstance(sid) {\n    return WorkerListInstance.get(sid);\n  }\n\n  WorkerListInstance._version = version;\n  // Path Solution\n  WorkerListInstance._solution = {workspaceSid: workspaceSid};\n  WorkerListInstance._uri = `/Workspaces/${workspaceSid}/Workers`;\n\n  // Components\n  WorkerListInstance._statistics = undefined;\n\n  /* jshint ignore:start */\n  /**\n   * Streams WorkerInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.activityName] -\n   *          The activity_name of the Worker resources to read\n   * @param {string} [opts.activitySid] -\n   *          The activity_sid of the Worker resources to read\n   * @param {string} [opts.available] -\n   *          Whether to return Worker resources that are available or unavailable\n   * @param {string} [opts.friendlyName] -\n   *          The friendly_name of the Worker resources to read\n   * @param {string} [opts.targetWorkersExpression] -\n   *          Filter by Workers that would match an expression on a TaskQueue\n   * @param {string} [opts.taskQueueName] -\n   *          The friendly_name of the TaskQueue that the Workers to read are eligible for\n   * @param {string} [opts.taskQueueSid] -\n   *          The SID of the TaskQueue that the Workers to read are eligible for\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  WorkerListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists WorkerInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.activityName] -\n   *          The activity_name of the Worker resources to read\n   * @param {string} [opts.activitySid] -\n   *          The activity_sid of the Worker resources to read\n   * @param {string} [opts.available] -\n   *          Whether to return Worker resources that are available or unavailable\n   * @param {string} [opts.friendlyName] -\n   *          The friendly_name of the Worker resources to read\n   * @param {string} [opts.targetWorkersExpression] -\n   *          Filter by Workers that would match an expression on a TaskQueue\n   * @param {string} [opts.taskQueueName] -\n   *          The friendly_name of the TaskQueue that the Workers to read are eligible for\n   * @param {string} [opts.taskQueueSid] -\n   *          The SID of the TaskQueue that the Workers to read are eligible for\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  WorkerListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of WorkerInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.activityName] -\n   *          The activity_name of the Worker resources to read\n   * @param {string} [opts.activitySid] -\n   *          The activity_sid of the Worker resources to read\n   * @param {string} [opts.available] -\n   *          Whether to return Worker resources that are available or unavailable\n   * @param {string} [opts.friendlyName] -\n   *          The friendly_name of the Worker resources to read\n   * @param {string} [opts.targetWorkersExpression] -\n   *          Filter by Workers that would match an expression on a TaskQueue\n   * @param {string} [opts.taskQueueName] -\n   *          The friendly_name of the TaskQueue that the Workers to read are eligible for\n   * @param {string} [opts.taskQueueSid] -\n   *          The SID of the TaskQueue that the Workers to read are eligible for\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  WorkerListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'ActivityName': _.get(opts, 'activityName'),\n      'ActivitySid': _.get(opts, 'activitySid'),\n      'Available': _.get(opts, 'available'),\n      'FriendlyName': _.get(opts, 'friendlyName'),\n      'TargetWorkersExpression': _.get(opts, 'targetWorkersExpression'),\n      'TaskQueueName': _.get(opts, 'taskQueueName'),\n      'TaskQueueSid': _.get(opts, 'taskQueueSid'),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new WorkerPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of WorkerInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  WorkerListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new WorkerPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * create a WorkerInstance\n   *\n   * @function create\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerList#\n   *\n   * @param {object} opts - Options for request\n   * @param {string} opts.friendlyName - A string to describe the resource\n   * @param {string} [opts.activitySid] -\n   *          The SID of a valid Activity that describes the new Worker's initial state\n   * @param {string} [opts.attributes] -\n   *          A valid JSON string that describes the new Worker\n   * @param {function} [callback] - Callback to handle processed record\n   *\n   * @returns {Promise} Resolves to processed WorkerInstance\n   */\n  /* jshint ignore:end */\n  WorkerListInstance.create = function create(opts, callback) {\n    if (_.isUndefined(opts)) {\n      throw new Error('Required parameter \"opts\" missing.');\n    }\n    if (_.isUndefined(opts.friendlyName)) {\n      throw new Error('Required parameter \"opts.friendlyName\" missing.');\n    }\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'FriendlyName': _.get(opts, 'friendlyName'),\n      'ActivitySid': _.get(opts, 'activitySid'),\n      'Attributes': _.get(opts, 'attributes')\n    });\n\n    var promise = this._version.create({uri: this._uri, method: 'POST', data: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new WorkerInstance(\n        this._version,\n        payload,\n        this._solution.workspaceSid,\n        this._solution.sid\n      ));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a worker\n   *\n   * @function get\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerList#\n   *\n   * @param {string} sid - The SID of the resource to fetch\n   *\n   * @returns {Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext}\n   */\n  /* jshint ignore:end */\n  WorkerListInstance.get = function get(sid) {\n    return new WorkerContext(this._version, this._solution.workspaceSid, sid);\n  };\n\n  Object.defineProperty(WorkerListInstance,\n    'statistics', {\n      get: function statistics() {\n        if (!this._statistics) {\n          this._statistics = new WorkersStatisticsList(this._version, this._solution.workspaceSid);\n        }\n\n        return this._statistics;\n      }\n  });\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  WorkerListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  WorkerListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return WorkerListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the WorkerPage\n *\n * @constructor Twilio.Taskrouter.V1.WorkspaceContext.WorkerPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {WorkerSolution} solution - Path solution\n *\n * @returns WorkerPage\n */\n/* jshint ignore:end */\nWorkerPage = function WorkerPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(WorkerPage.prototype, Page.prototype);\nWorkerPage.prototype.constructor = WorkerPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of WorkerInstance\n *\n * @function getInstance\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerPage#\n *\n * @param {WorkerPayload} payload - Payload response from the API\n *\n * @returns WorkerInstance\n */\n/* jshint ignore:end */\nWorkerPage.prototype.getInstance = function getInstance(payload) {\n  return new WorkerInstance(this._version, payload, this._solution.workspaceSid);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nWorkerPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nWorkerPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the WorkerContext\n *\n * @constructor Twilio.Taskrouter.V1.WorkspaceContext.WorkerInstance\n *\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {string} activityName -\n *          The friendly_name of the Worker's current Activity\n * @property {string} activitySid - The SID of the Worker's current Activity\n * @property {string} attributes - The JSON string that describes the Worker\n * @property {boolean} available - Whether the Worker is available to perform tasks\n * @property {Date} dateCreated -\n *          The ISO 8601 date and time in GMT when the resource was created\n * @property {Date} dateStatusChanged -\n *          The date and time in GMT of the last change to the Worker's activity\n * @property {Date} dateUpdated -\n *          The ISO 8601 date and time in GMT when the resource was last updated\n * @property {string} friendlyName -\n *          The string that you assigned to describe the resource\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} workspaceSid -\n *          The SID of the Workspace that contains the Worker\n * @property {string} url - The absolute URL of the Worker resource\n * @property {string} links - The URLs of related resources\n *\n * @param {V1} version - Version of the resource\n * @param {WorkerPayload} payload - The instance payload\n * @param {sid} workspaceSid - The SID of the Workspace that contains the Worker\n * @param {sid} sid - The SID of the resource to fetch\n */\n/* jshint ignore:end */\nWorkerInstance = function WorkerInstance(version, payload, workspaceSid, sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.activityName = payload.activity_name; // jshint ignore:line\n  this.activitySid = payload.activity_sid; // jshint ignore:line\n  this.attributes = payload.attributes; // jshint ignore:line\n  this.available = payload.available; // jshint ignore:line\n  this.dateCreated = deserialize.iso8601DateTime(payload.date_created); // jshint ignore:line\n  this.dateStatusChanged = deserialize.iso8601DateTime(payload.date_status_changed); // jshint ignore:line\n  this.dateUpdated = deserialize.iso8601DateTime(payload.date_updated); // jshint ignore:line\n  this.friendlyName = payload.friendly_name; // jshint ignore:line\n  this.sid = payload.sid; // jshint ignore:line\n  this.workspaceSid = payload.workspace_sid; // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n  this.links = payload.links; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {workspaceSid: workspaceSid, sid: sid || this.sid, };\n};\n\nObject.defineProperty(WorkerInstance.prototype,\n  '_proxy', {\n    get: function() {\n      if (!this._context) {\n        this._context = new WorkerContext(this._version, this._solution.workspaceSid, this._solution.sid);\n      }\n\n      return this._context;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a WorkerInstance\n *\n * @function fetch\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed WorkerInstance\n */\n/* jshint ignore:end */\nWorkerInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * update a WorkerInstance\n *\n * @function update\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerInstance#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.activitySid] -\n *          The SID of the Activity that describes the Worker's initial state\n * @param {string} [opts.attributes] - The JSON string that describes the Worker\n * @param {string} [opts.friendlyName] - A string to describe the Worker\n * @param {boolean} [opts.rejectPendingReservations] -\n *          Whether to reject pending reservations\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed WorkerInstance\n */\n/* jshint ignore:end */\nWorkerInstance.prototype.update = function update(opts, callback) {\n  return this._proxy.update(opts, callback);\n};\n\n/* jshint ignore:start */\n/**\n * remove a WorkerInstance\n *\n * @function remove\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed WorkerInstance\n */\n/* jshint ignore:end */\nWorkerInstance.prototype.remove = function remove(callback) {\n  return this._proxy.remove(callback);\n};\n\n/* jshint ignore:start */\n/**\n * Access the realTimeStatistics\n *\n * @function realTimeStatistics\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerInstance#\n *\n * @returns {Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.WorkersRealTimeStatisticsList}\n */\n/* jshint ignore:end */\nWorkerInstance.prototype.realTimeStatistics = function realTimeStatistics() {\n  return this._proxy.realTimeStatistics;\n};\n\n/* jshint ignore:start */\n/**\n * Access the cumulativeStatistics\n *\n * @function cumulativeStatistics\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerInstance#\n *\n * @returns {Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.WorkersCumulativeStatisticsList}\n */\n/* jshint ignore:end */\nWorkerInstance.prototype.cumulativeStatistics = function cumulativeStatistics()\n    {\n  return this._proxy.cumulativeStatistics;\n};\n\n/* jshint ignore:start */\n/**\n * Access the statistics\n *\n * @function statistics\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerInstance#\n *\n * @returns {Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.WorkerStatisticsList}\n */\n/* jshint ignore:end */\nWorkerInstance.prototype.statistics = function statistics() {\n  return this._proxy.statistics;\n};\n\n/* jshint ignore:start */\n/**\n * Access the reservations\n *\n * @function reservations\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerInstance#\n *\n * @returns {Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.ReservationList}\n */\n/* jshint ignore:end */\nWorkerInstance.prototype.reservations = function reservations() {\n  return this._proxy.reservations;\n};\n\n/* jshint ignore:start */\n/**\n * Access the workerChannels\n *\n * @function workerChannels\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerInstance#\n *\n * @returns {Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.WorkerChannelList}\n */\n/* jshint ignore:end */\nWorkerInstance.prototype.workerChannels = function workerChannels() {\n  return this._proxy.workerChannels;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nWorkerInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nWorkerInstance.prototype[util.inspect.custom] = function inspect(depth, options)\n    {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the WorkerContext\n *\n * @constructor Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext\n *\n * @property {Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.WorkersRealTimeStatisticsList} realTimeStatistics -\n *          realTimeStatistics resource\n * @property {Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.WorkersCumulativeStatisticsList} cumulativeStatistics -\n *          cumulativeStatistics resource\n * @property {Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.WorkerStatisticsList} statistics -\n *          statistics resource\n * @property {Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.ReservationList} reservations -\n *          reservations resource\n * @property {Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext.WorkerChannelList} workerChannels -\n *          workerChannels resource\n *\n * @param {V1} version - Version of the resource\n * @param {sid} workspaceSid - The SID of the Workspace with the Worker to fetch\n * @param {sid} sid - The SID of the resource to fetch\n */\n/* jshint ignore:end */\nWorkerContext = function WorkerContext(version, workspaceSid, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {workspaceSid: workspaceSid, sid: sid, };\n  this._uri = `/Workspaces/${workspaceSid}/Workers/${sid}`;\n\n  // Dependents\n  this._realTimeStatistics = undefined;\n  this._cumulativeStatistics = undefined;\n  this._statistics = undefined;\n  this._reservations = undefined;\n  this._workerChannels = undefined;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a WorkerInstance\n *\n * @function fetch\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed WorkerInstance\n */\n/* jshint ignore:end */\nWorkerContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({uri: this._uri, method: 'GET'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new WorkerInstance(\n      this._version,\n      payload,\n      this._solution.workspaceSid,\n      this._solution.sid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * update a WorkerInstance\n *\n * @function update\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext#\n *\n * @param {object} [opts] - Options for request\n * @param {string} [opts.activitySid] -\n *          The SID of the Activity that describes the Worker's initial state\n * @param {string} [opts.attributes] - The JSON string that describes the Worker\n * @param {string} [opts.friendlyName] - A string to describe the Worker\n * @param {boolean} [opts.rejectPendingReservations] -\n *          Whether to reject pending reservations\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed WorkerInstance\n */\n/* jshint ignore:end */\nWorkerContext.prototype.update = function update(opts, callback) {\n  if (_.isFunction(opts)) {\n    callback = opts;\n    opts = {};\n  }\n  opts = opts || {};\n\n  var deferred = Q.defer();\n  var data = values.of({\n    'ActivitySid': _.get(opts, 'activitySid'),\n    'Attributes': _.get(opts, 'attributes'),\n    'FriendlyName': _.get(opts, 'friendlyName'),\n    'RejectPendingReservations': serialize.bool(_.get(opts, 'rejectPendingReservations'))\n  });\n\n  var promise = this._version.update({uri: this._uri, method: 'POST', data: data});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new WorkerInstance(\n      this._version,\n      payload,\n      this._solution.workspaceSid,\n      this._solution.sid\n    ));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * remove a WorkerInstance\n *\n * @function remove\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed WorkerInstance\n */\n/* jshint ignore:end */\nWorkerContext.prototype.remove = function remove(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.remove({uri: this._uri, method: 'DELETE'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(payload);\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\nObject.defineProperty(WorkerContext.prototype,\n  'realTimeStatistics', {\n    get: function() {\n      if (!this._realTimeStatistics) {\n        this._realTimeStatistics = new WorkersRealTimeStatisticsList(\n          this._version,\n          this._solution.workspaceSid\n        );\n      }\n      return this._realTimeStatistics;\n    }\n});\n\nObject.defineProperty(WorkerContext.prototype,\n  'cumulativeStatistics', {\n    get: function() {\n      if (!this._cumulativeStatistics) {\n        this._cumulativeStatistics = new WorkersCumulativeStatisticsList(\n          this._version,\n          this._solution.workspaceSid\n        );\n      }\n      return this._cumulativeStatistics;\n    }\n});\n\nObject.defineProperty(WorkerContext.prototype,\n  'statistics', {\n    get: function() {\n      if (!this._statistics) {\n        this._statistics = new WorkerStatisticsList(\n          this._version,\n          this._solution.workspaceSid,\n          this._solution.sid\n        );\n      }\n      return this._statistics;\n    }\n});\n\nObject.defineProperty(WorkerContext.prototype,\n  'reservations', {\n    get: function() {\n      if (!this._reservations) {\n        this._reservations = new ReservationList(\n          this._version,\n          this._solution.workspaceSid,\n          this._solution.sid\n        );\n      }\n      return this._reservations;\n    }\n});\n\nObject.defineProperty(WorkerContext.prototype,\n  'workerChannels', {\n    get: function() {\n      if (!this._workerChannels) {\n        this._workerChannels = new WorkerChannelList(\n          this._version,\n          this._solution.workspaceSid,\n          this._solution.sid\n        );\n      }\n      return this._workerChannels;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Taskrouter.V1.WorkspaceContext.WorkerContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nWorkerContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nWorkerContext.prototype[util.inspect.custom] = function inspect(depth, options)\n    {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  WorkerList: WorkerList,\n  WorkerPage: WorkerPage,\n  WorkerInstance: WorkerInstance,\n  WorkerContext: WorkerContext\n};\n"]},"metadata":{},"sourceType":"module"}