{"ast":null,"code":"'use strict';\n/* jshint ignore:start */\n\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n\n/* jshint ignore:end */\n\nvar Q = require('q');\n/* jshint ignore:line */\n\n\nvar _ = require('lodash');\n/* jshint ignore:line */\n\n\nvar util = require('util');\n/* jshint ignore:line */\n\n\nvar Page = require('../../../base/Page');\n/* jshint ignore:line */\n\n\nvar deserialize = require('../../../base/deserialize');\n/* jshint ignore:line */\n\n\nvar serialize = require('../../../base/serialize');\n/* jshint ignore:line */\n\n\nvar values = require('../../../base/values');\n/* jshint ignore:line */\n\n\nvar EventList;\nvar EventPage;\nvar EventInstance;\nvar EventContext;\n/* jshint ignore:start */\n\n/**\n * Initialize the EventList\n *\n * @constructor Twilio.Monitor.V1.EventList\n *\n * @param {Twilio.Monitor.V1} version - Version of the resource\n */\n\n/* jshint ignore:end */\n\nEventList = function EventList(version) {\n  /* jshint ignore:start */\n\n  /**\n   * @function events\n   * @memberof Twilio.Monitor.V1#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Monitor.V1.EventContext}\n   */\n\n  /* jshint ignore:end */\n  function EventListInstance(sid) {\n    return EventListInstance.get(sid);\n  }\n\n  EventListInstance._version = version; // Path Solution\n\n  EventListInstance._solution = {};\n  EventListInstance._uri = `/Events`;\n  /* jshint ignore:start */\n\n  /**\n   * Streams EventInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Monitor.V1.EventList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.actorSid] - Only include events initiated by this Actor\n   * @param {string} [opts.eventType] - Only include events of this Event Type\n   * @param {string} [opts.resourceSid] -\n   *          Only include events that refer to this resource\n   * @param {string} [opts.sourceIpAddress] -\n   *          Only include events that originated from this IP address\n   * @param {Date} [opts.startDate] -\n   *          Only include events that occurred on or after this date\n   * @param {Date} [opts.endDate] -\n   *          Only include events that occurred on or before this date\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n\n  /* jshint ignore:end */\n\n  EventListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function (page) {\n        _.each(page.instances, function (instance) {\n          if (done || !_.isUndefined(opts.limit) && currentResource >= opts.limit) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Lists EventInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Monitor.V1.EventList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.actorSid] - Only include events initiated by this Actor\n   * @param {string} [opts.eventType] - Only include events of this Event Type\n   * @param {string} [opts.resourceSid] -\n   *          Only include events that refer to this resource\n   * @param {string} [opts.sourceIpAddress] -\n   *          Only include events that originated from this IP address\n   * @param {Date} [opts.startDate] -\n   *          Only include events that occurred on or after this date\n   * @param {Date} [opts.endDate] -\n   *          Only include events that occurred on or before this date\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  EventListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n\n    opts.callback = function (resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function (error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single page of EventInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Monitor.V1.EventList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.actorSid] - Only include events initiated by this Actor\n   * @param {string} [opts.eventType] - Only include events of this Event Type\n   * @param {string} [opts.resourceSid] -\n   *          Only include events that refer to this resource\n   * @param {string} [opts.sourceIpAddress] -\n   *          Only include events that originated from this IP address\n   * @param {Date} [opts.startDate] -\n   *          Only include events that occurred on or after this date\n   * @param {Date} [opts.endDate] -\n   *          Only include events that occurred on or before this date\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  EventListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n    var deferred = Q.defer();\n    var data = values.of({\n      'ActorSid': _.get(opts, 'actorSid'),\n      'EventType': _.get(opts, 'eventType'),\n      'ResourceSid': _.get(opts, 'resourceSid'),\n      'SourceIpAddress': _.get(opts, 'sourceIpAddress'),\n      'StartDate': serialize.iso8601DateTime(_.get(opts, 'startDate')),\n      'EndDate': serialize.iso8601DateTime(_.get(opts, 'endDate')),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({\n      uri: this._uri,\n      method: 'GET',\n      params: data\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new EventPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Retrieve a single target page of EventInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Monitor.V1.EventList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n\n  /* jshint ignore:end */\n\n\n  EventListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({\n      method: 'GET',\n      uri: targetUrl\n    });\n\n    promise = promise.then(function (payload) {\n      deferred.resolve(new EventPage(this._version, payload, this._solution));\n    }.bind(this));\n    promise.catch(function (error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Constructs a event\n   *\n   * @function get\n   * @memberof Twilio.Monitor.V1.EventList#\n   *\n   * @param {string} sid - The SID that identifies the resource to fetch\n   *\n   * @returns {Twilio.Monitor.V1.EventContext}\n   */\n\n  /* jshint ignore:end */\n\n\n  EventListInstance.get = function get(sid) {\n    return new EventContext(this._version, sid);\n  };\n  /* jshint ignore:start */\n\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Monitor.V1.EventList#\n   *\n   * @returns Object\n   */\n\n  /* jshint ignore:end */\n\n\n  EventListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  EventListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return EventListInstance;\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the EventPage\n *\n * @constructor Twilio.Monitor.V1.EventPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {EventSolution} solution - Path solution\n *\n * @returns EventPage\n */\n\n/* jshint ignore:end */\n\n\nEventPage = function EventPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(EventPage.prototype, Page.prototype);\n\nEventPage.prototype.constructor = EventPage;\n/* jshint ignore:start */\n\n/**\n * Build an instance of EventInstance\n *\n * @function getInstance\n * @memberof Twilio.Monitor.V1.EventPage#\n *\n * @param {EventPayload} payload - Payload response from the API\n *\n * @returns EventInstance\n */\n\n/* jshint ignore:end */\n\nEventPage.prototype.getInstance = function getInstance(payload) {\n  return new EventInstance(this._version, payload);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Monitor.V1.EventPage#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nEventPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nEventPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the EventContext\n *\n * @constructor Twilio.Monitor.V1.EventInstance\n *\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {string} actorSid -\n *          The SID of the actor that caused the event, if available\n * @property {string} actorType - The type of actor that caused the event\n * @property {string} description - A description of the event\n * @property {object} eventData -\n *          A JSON string that represents an object with additional data about the event\n * @property {Date} eventDate -\n *          The ISO 8601 date and time in GMT when the event was recorded\n * @property {string} eventType - The event's type\n * @property {string} resourceSid - The SID of the resource that was affected\n * @property {string} resourceType - The type of resource that was affected\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} source -\n *          The originating system or interface that caused the event\n * @property {string} sourceIpAddress - The IP address of the source\n * @property {string} url - The absolute URL of the resource that was affected\n * @property {string} links - The absolute URLs of related resources\n *\n * @param {V1} version - Version of the resource\n * @param {EventPayload} payload - The instance payload\n * @param {sid} sid - The SID that identifies the resource to fetch\n */\n\n/* jshint ignore:end */\n\n\nEventInstance = function EventInstance(version, payload, sid) {\n  this._version = version; // Marshaled Properties\n\n  this.accountSid = payload.account_sid; // jshint ignore:line\n\n  this.actorSid = payload.actor_sid; // jshint ignore:line\n\n  this.actorType = payload.actor_type; // jshint ignore:line\n\n  this.description = payload.description; // jshint ignore:line\n\n  this.eventData = payload.event_data; // jshint ignore:line\n\n  this.eventDate = deserialize.iso8601DateTime(payload.event_date); // jshint ignore:line\n\n  this.eventType = payload.event_type; // jshint ignore:line\n\n  this.resourceSid = payload.resource_sid; // jshint ignore:line\n\n  this.resourceType = payload.resource_type; // jshint ignore:line\n\n  this.sid = payload.sid; // jshint ignore:line\n\n  this.source = payload.source; // jshint ignore:line\n\n  this.sourceIpAddress = payload.source_ip_address; // jshint ignore:line\n\n  this.url = payload.url; // jshint ignore:line\n\n  this.links = payload.links; // jshint ignore:line\n  // Context\n\n  this._context = undefined;\n  this._solution = {\n    sid: sid || this.sid\n  };\n};\n\nObject.defineProperty(EventInstance.prototype, '_proxy', {\n  get: function () {\n    if (!this._context) {\n      this._context = new EventContext(this._version, this._solution.sid);\n    }\n\n    return this._context;\n  }\n});\n/* jshint ignore:start */\n\n/**\n * fetch a EventInstance\n *\n * @function fetch\n * @memberof Twilio.Monitor.V1.EventInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed EventInstance\n */\n\n/* jshint ignore:end */\n\nEventInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Monitor.V1.EventInstance#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nEventInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n\n  _.forOwn(this, function (value, key) {\n    if (!_.startsWith(key, '_') && !_.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n\n  return clone;\n};\n\nEventInstance.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n/* jshint ignore:start */\n\n/**\n * Initialize the EventContext\n *\n * @constructor Twilio.Monitor.V1.EventContext\n *\n * @param {V1} version - Version of the resource\n * @param {sid} sid - The SID that identifies the resource to fetch\n */\n\n/* jshint ignore:end */\n\n\nEventContext = function EventContext(version, sid) {\n  this._version = version; // Path Solution\n\n  this._solution = {\n    sid: sid\n  };\n  this._uri = `/Events/${sid}`;\n};\n/* jshint ignore:start */\n\n/**\n * fetch a EventInstance\n *\n * @function fetch\n * @memberof Twilio.Monitor.V1.EventContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed EventInstance\n */\n\n/* jshint ignore:end */\n\n\nEventContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n\n  var promise = this._version.fetch({\n    uri: this._uri,\n    method: 'GET'\n  });\n\n  promise = promise.then(function (payload) {\n    deferred.resolve(new EventInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n  promise.catch(function (error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n/* jshint ignore:start */\n\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Monitor.V1.EventContext#\n *\n * @returns Object\n */\n\n/* jshint ignore:end */\n\n\nEventContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nEventContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  EventList: EventList,\n  EventPage: EventPage,\n  EventInstance: EventInstance,\n  EventContext: EventContext\n};","map":{"version":3,"sources":["/Users/tony_niu/Visual Studio/Twilio/twilio-video-starter-kit/src/token-service/node_modules/twilio/lib/rest/monitor/v1/event.js"],"names":["Q","require","_","util","Page","deserialize","serialize","values","EventList","EventPage","EventInstance","EventContext","version","EventListInstance","sid","get","_version","_solution","_uri","each","opts","callback","isFunction","isUndefined","Error","done","currentPage","currentResource","limits","readLimits","limit","pageSize","onComplete","error","fetchNextPage","fn","promise","then","page","instances","instance","bind","nextPage","catch","merge","list","deferred","defer","allResources","resource","push","length","resolve","reject","nodeify","data","of","iso8601DateTime","pageToken","pageNumber","uri","method","params","payload","getPage","targetUrl","_domain","twilio","request","toJSON","inspect","custom","depth","options","response","solution","prototype","constructor","call","extend","getInstance","clone","forOwn","value","key","startsWith","accountSid","account_sid","actorSid","actor_sid","actorType","actor_type","description","eventData","event_data","eventDate","event_date","eventType","event_type","resourceSid","resource_sid","resourceType","resource_type","source","sourceIpAddress","source_ip_address","url","links","_context","undefined","Object","defineProperty","fetch","_proxy","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\n/* jshint ignore:start */\n/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n/* jshint ignore:end */\n\nvar Q = require('q');  /* jshint ignore:line */\nvar _ = require('lodash');  /* jshint ignore:line */\nvar util = require('util');  /* jshint ignore:line */\nvar Page = require('../../../base/Page');  /* jshint ignore:line */\nvar deserialize = require(\n    '../../../base/deserialize');  /* jshint ignore:line */\nvar serialize = require('../../../base/serialize');  /* jshint ignore:line */\nvar values = require('../../../base/values');  /* jshint ignore:line */\n\nvar EventList;\nvar EventPage;\nvar EventInstance;\nvar EventContext;\n\n/* jshint ignore:start */\n/**\n * Initialize the EventList\n *\n * @constructor Twilio.Monitor.V1.EventList\n *\n * @param {Twilio.Monitor.V1} version - Version of the resource\n */\n/* jshint ignore:end */\nEventList = function EventList(version) {\n  /* jshint ignore:start */\n  /**\n   * @function events\n   * @memberof Twilio.Monitor.V1#\n   *\n   * @param {string} sid - sid of instance\n   *\n   * @returns {Twilio.Monitor.V1.EventContext}\n   */\n  /* jshint ignore:end */\n  function EventListInstance(sid) {\n    return EventListInstance.get(sid);\n  }\n\n  EventListInstance._version = version;\n  // Path Solution\n  EventListInstance._solution = {};\n  EventListInstance._uri = `/Events`;\n  /* jshint ignore:start */\n  /**\n   * Streams EventInstance records from the API.\n   *\n   * This operation lazily loads records as efficiently as possible until the limit\n   * is reached.\n   *\n   * The results are passed into the callback function, so this operation is memory\n   * efficient.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function each\n   * @memberof Twilio.Monitor.V1.EventList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.actorSid] - Only include events initiated by this Actor\n   * @param {string} [opts.eventType] - Only include events of this Event Type\n   * @param {string} [opts.resourceSid] -\n   *          Only include events that refer to this resource\n   * @param {string} [opts.sourceIpAddress] -\n   *          Only include events that originated from this IP address\n   * @param {Date} [opts.startDate] -\n   *          Only include events that occurred on or after this date\n   * @param {Date} [opts.endDate] -\n   *          Only include events that occurred on or before this date\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         each() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no pageSize is defined but a limit is defined,\n   *         each() will attempt to read the limit with the most efficient\n   *         page size, i.e. min(limit, 1000)\n   * @param {Function} [opts.callback] -\n   *         Function to process each record. If this and a positional\n   *         callback are passed, this one will be used\n   * @param {Function} [opts.done] -\n   *          Function to be called upon completion of streaming\n   * @param {Function} [callback] - Function to process each record\n   */\n  /* jshint ignore:end */\n  EventListInstance.each = function each(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    if (opts.callback) {\n      callback = opts.callback;\n    }\n    if (_.isUndefined(callback)) {\n      throw new Error('Callback function must be provided');\n    }\n\n    var done = false;\n    var currentPage = 1;\n    var currentResource = 0;\n    var limits = this._version.readLimits({\n      limit: opts.limit,\n      pageSize: opts.pageSize\n    });\n\n    function onComplete(error) {\n      done = true;\n      if (_.isFunction(opts.done)) {\n        opts.done(error);\n      }\n    }\n\n    function fetchNextPage(fn) {\n      var promise = fn();\n      if (_.isUndefined(promise)) {\n        onComplete();\n        return;\n      }\n\n      promise.then(function(page) {\n        _.each(page.instances, function(instance) {\n          if (done || (!_.isUndefined(opts.limit) && currentResource >= opts.limit)) {\n            done = true;\n            return false;\n          }\n\n          currentResource++;\n          callback(instance, onComplete);\n        });\n\n        if (!done) {\n          currentPage++;\n          fetchNextPage(_.bind(page.nextPage, page));\n        }\n      });\n\n      promise.catch(onComplete);\n    }\n\n    fetchNextPage(_.bind(this.page, this, _.merge(opts, limits)));\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Lists EventInstance records from the API as a list.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function list\n   * @memberof Twilio.Monitor.V1.EventList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.actorSid] - Only include events initiated by this Actor\n   * @param {string} [opts.eventType] - Only include events of this Event Type\n   * @param {string} [opts.resourceSid] -\n   *          Only include events that refer to this resource\n   * @param {string} [opts.sourceIpAddress] -\n   *          Only include events that originated from this IP address\n   * @param {Date} [opts.startDate] -\n   *          Only include events that occurred on or after this date\n   * @param {Date} [opts.endDate] -\n   *          Only include events that occurred on or before this date\n   * @param {number} [opts.limit] -\n   *         Upper limit for the number of records to return.\n   *         list() guarantees never to return more than limit.\n   *         Default is no limit\n   * @param {number} [opts.pageSize] -\n   *         Number of records to fetch per request,\n   *         when not set will use the default value of 50 records.\n   *         If no page_size is defined but a limit is defined,\n   *         list() will attempt to read the limit with the most\n   *         efficient page size, i.e. min(limit, 1000)\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  EventListInstance.list = function list(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n    var deferred = Q.defer();\n    var allResources = [];\n    opts.callback = function(resource, done) {\n      allResources.push(resource);\n\n      if (!_.isUndefined(opts.limit) && allResources.length === opts.limit) {\n        done();\n      }\n    };\n\n    opts.done = function(error) {\n      if (_.isUndefined(error)) {\n        deferred.resolve(allResources);\n      } else {\n        deferred.reject(error);\n      }\n    };\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    this.each(opts);\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single page of EventInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function page\n   * @memberof Twilio.Monitor.V1.EventList#\n   *\n   * @param {object} [opts] - Options for request\n   * @param {string} [opts.actorSid] - Only include events initiated by this Actor\n   * @param {string} [opts.eventType] - Only include events of this Event Type\n   * @param {string} [opts.resourceSid] -\n   *          Only include events that refer to this resource\n   * @param {string} [opts.sourceIpAddress] -\n   *          Only include events that originated from this IP address\n   * @param {Date} [opts.startDate] -\n   *          Only include events that occurred on or after this date\n   * @param {Date} [opts.endDate] -\n   *          Only include events that occurred on or before this date\n   * @param {string} [opts.pageToken] - PageToken provided by the API\n   * @param {number} [opts.pageNumber] -\n   *          Page Number, this value is simply for client state\n   * @param {number} [opts.pageSize] - Number of records to return, defaults to 50\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  EventListInstance.page = function page(opts, callback) {\n    if (_.isFunction(opts)) {\n      callback = opts;\n      opts = {};\n    }\n    opts = opts || {};\n\n    var deferred = Q.defer();\n    var data = values.of({\n      'ActorSid': _.get(opts, 'actorSid'),\n      'EventType': _.get(opts, 'eventType'),\n      'ResourceSid': _.get(opts, 'resourceSid'),\n      'SourceIpAddress': _.get(opts, 'sourceIpAddress'),\n      'StartDate': serialize.iso8601DateTime(_.get(opts, 'startDate')),\n      'EndDate': serialize.iso8601DateTime(_.get(opts, 'endDate')),\n      'PageToken': opts.pageToken,\n      'Page': opts.pageNumber,\n      'PageSize': opts.pageSize\n    });\n\n    var promise = this._version.page({uri: this._uri, method: 'GET', params: data});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new EventPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Retrieve a single target page of EventInstance records from the API.\n   *\n   * The request is executed immediately.\n   *\n   * If a function is passed as the first argument, it will be used as the callback\n   * function.\n   *\n   * @function getPage\n   * @memberof Twilio.Monitor.V1.EventList#\n   *\n   * @param {string} [targetUrl] - API-generated URL for the requested results page\n   * @param {function} [callback] - Callback to handle list of records\n   *\n   * @returns {Promise} Resolves to a list of records\n   */\n  /* jshint ignore:end */\n  EventListInstance.getPage = function getPage(targetUrl, callback) {\n    var deferred = Q.defer();\n\n    var promise = this._version._domain.twilio.request({method: 'GET', uri: targetUrl});\n\n    promise = promise.then(function(payload) {\n      deferred.resolve(new EventPage(this._version, payload, this._solution));\n    }.bind(this));\n\n    promise.catch(function(error) {\n      deferred.reject(error);\n    });\n\n    if (_.isFunction(callback)) {\n      deferred.promise.nodeify(callback);\n    }\n\n    return deferred.promise;\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Constructs a event\n   *\n   * @function get\n   * @memberof Twilio.Monitor.V1.EventList#\n   *\n   * @param {string} sid - The SID that identifies the resource to fetch\n   *\n   * @returns {Twilio.Monitor.V1.EventContext}\n   */\n  /* jshint ignore:end */\n  EventListInstance.get = function get(sid) {\n    return new EventContext(this._version, sid);\n  };\n\n  /* jshint ignore:start */\n  /**\n   * Provide a user-friendly representation\n   *\n   * @function toJSON\n   * @memberof Twilio.Monitor.V1.EventList#\n   *\n   * @returns Object\n   */\n  /* jshint ignore:end */\n  EventListInstance.toJSON = function toJSON() {\n    return this._solution;\n  };\n\n  EventListInstance[util.inspect.custom] = function inspect(depth, options) {\n    return util.inspect(this.toJSON(), options);\n  };\n\n  return EventListInstance;\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the EventPage\n *\n * @constructor Twilio.Monitor.V1.EventPage\n *\n * @param {V1} version - Version of the resource\n * @param {Response<string>} response - Response from the API\n * @param {EventSolution} solution - Path solution\n *\n * @returns EventPage\n */\n/* jshint ignore:end */\nEventPage = function EventPage(version, response, solution) {\n  // Path Solution\n  this._solution = solution;\n\n  Page.prototype.constructor.call(this, version, response, this._solution);\n};\n\n_.extend(EventPage.prototype, Page.prototype);\nEventPage.prototype.constructor = EventPage;\n\n/* jshint ignore:start */\n/**\n * Build an instance of EventInstance\n *\n * @function getInstance\n * @memberof Twilio.Monitor.V1.EventPage#\n *\n * @param {EventPayload} payload - Payload response from the API\n *\n * @returns EventInstance\n */\n/* jshint ignore:end */\nEventPage.prototype.getInstance = function getInstance(payload) {\n  return new EventInstance(this._version, payload);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Monitor.V1.EventPage#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nEventPage.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nEventPage.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the EventContext\n *\n * @constructor Twilio.Monitor.V1.EventInstance\n *\n * @property {string} accountSid - The SID of the Account that created the resource\n * @property {string} actorSid -\n *          The SID of the actor that caused the event, if available\n * @property {string} actorType - The type of actor that caused the event\n * @property {string} description - A description of the event\n * @property {object} eventData -\n *          A JSON string that represents an object with additional data about the event\n * @property {Date} eventDate -\n *          The ISO 8601 date and time in GMT when the event was recorded\n * @property {string} eventType - The event's type\n * @property {string} resourceSid - The SID of the resource that was affected\n * @property {string} resourceType - The type of resource that was affected\n * @property {string} sid - The unique string that identifies the resource\n * @property {string} source -\n *          The originating system or interface that caused the event\n * @property {string} sourceIpAddress - The IP address of the source\n * @property {string} url - The absolute URL of the resource that was affected\n * @property {string} links - The absolute URLs of related resources\n *\n * @param {V1} version - Version of the resource\n * @param {EventPayload} payload - The instance payload\n * @param {sid} sid - The SID that identifies the resource to fetch\n */\n/* jshint ignore:end */\nEventInstance = function EventInstance(version, payload, sid) {\n  this._version = version;\n\n  // Marshaled Properties\n  this.accountSid = payload.account_sid; // jshint ignore:line\n  this.actorSid = payload.actor_sid; // jshint ignore:line\n  this.actorType = payload.actor_type; // jshint ignore:line\n  this.description = payload.description; // jshint ignore:line\n  this.eventData = payload.event_data; // jshint ignore:line\n  this.eventDate = deserialize.iso8601DateTime(payload.event_date); // jshint ignore:line\n  this.eventType = payload.event_type; // jshint ignore:line\n  this.resourceSid = payload.resource_sid; // jshint ignore:line\n  this.resourceType = payload.resource_type; // jshint ignore:line\n  this.sid = payload.sid; // jshint ignore:line\n  this.source = payload.source; // jshint ignore:line\n  this.sourceIpAddress = payload.source_ip_address; // jshint ignore:line\n  this.url = payload.url; // jshint ignore:line\n  this.links = payload.links; // jshint ignore:line\n\n  // Context\n  this._context = undefined;\n  this._solution = {sid: sid || this.sid, };\n};\n\nObject.defineProperty(EventInstance.prototype,\n  '_proxy', {\n    get: function() {\n      if (!this._context) {\n        this._context = new EventContext(this._version, this._solution.sid);\n      }\n\n      return this._context;\n    }\n});\n\n/* jshint ignore:start */\n/**\n * fetch a EventInstance\n *\n * @function fetch\n * @memberof Twilio.Monitor.V1.EventInstance#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed EventInstance\n */\n/* jshint ignore:end */\nEventInstance.prototype.fetch = function fetch(callback) {\n  return this._proxy.fetch(callback);\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Monitor.V1.EventInstance#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nEventInstance.prototype.toJSON = function toJSON() {\n  let clone = {};\n  _.forOwn(this, function(value, key) {\n    if (!_.startsWith(key, '_') && ! _.isFunction(value)) {\n      clone[key] = value;\n    }\n  });\n  return clone;\n};\n\nEventInstance.prototype[util.inspect.custom] = function inspect(depth, options)\n    {\n  return util.inspect(this.toJSON(), options);\n};\n\n\n/* jshint ignore:start */\n/**\n * Initialize the EventContext\n *\n * @constructor Twilio.Monitor.V1.EventContext\n *\n * @param {V1} version - Version of the resource\n * @param {sid} sid - The SID that identifies the resource to fetch\n */\n/* jshint ignore:end */\nEventContext = function EventContext(version, sid) {\n  this._version = version;\n\n  // Path Solution\n  this._solution = {sid: sid, };\n  this._uri = `/Events/${sid}`;\n};\n\n/* jshint ignore:start */\n/**\n * fetch a EventInstance\n *\n * @function fetch\n * @memberof Twilio.Monitor.V1.EventContext#\n *\n * @param {function} [callback] - Callback to handle processed record\n *\n * @returns {Promise} Resolves to processed EventInstance\n */\n/* jshint ignore:end */\nEventContext.prototype.fetch = function fetch(callback) {\n  var deferred = Q.defer();\n  var promise = this._version.fetch({uri: this._uri, method: 'GET'});\n\n  promise = promise.then(function(payload) {\n    deferred.resolve(new EventInstance(this._version, payload, this._solution.sid));\n  }.bind(this));\n\n  promise.catch(function(error) {\n    deferred.reject(error);\n  });\n\n  if (_.isFunction(callback)) {\n    deferred.promise.nodeify(callback);\n  }\n\n  return deferred.promise;\n};\n\n/* jshint ignore:start */\n/**\n * Provide a user-friendly representation\n *\n * @function toJSON\n * @memberof Twilio.Monitor.V1.EventContext#\n *\n * @returns Object\n */\n/* jshint ignore:end */\nEventContext.prototype.toJSON = function toJSON() {\n  return this._solution;\n};\n\nEventContext.prototype[util.inspect.custom] = function inspect(depth, options) {\n  return util.inspect(this.toJSON(), options);\n};\n\nmodule.exports = {\n  EventList: EventList,\n  EventPage: EventPage,\n  EventInstance: EventInstance,\n  EventContext: EventContext\n};\n"]},"metadata":{},"sourceType":"module"}